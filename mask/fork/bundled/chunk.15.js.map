{"version":3,"file":"bundled/chunk.15.js","mappings":"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","sources":["webpack://mask-network/./packages/mask/content-script/components/InjectedComponents/CommentBox.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptor-infra/defaults/inject/CommentBox.tsx","webpack://mask-network/./node_modules/.pnpm/@mui+icons-material@5.10.6_@mui+material@5.10.8_@types+react@18.2.21_react@0.0.0-experimental-0a360642d-20230711/node_modules/@mui/icons-material/esm/Lock.js","webpack://mask-network/./packages/mask/content-script/components/InjectedComponents/PostComments.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptor-infra/defaults/inject/Comments.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/utils/selector.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/utils/postBox.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/automation/pasteTextToComposition.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/automation/AttachImageToComposition.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/automation/gotoNewsFeedPage.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/automation/gotoProfilePage.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/automation/openComposeBox.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/collecting/getSearchedKeyword.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/collecting/identity.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/collecting/theme.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/utils/user.ts","webpack://mask-network/./packages/mask/shared/site-adaptors/implementations/minds.com.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/shared.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/utils/fetch.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/collecting/post.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/customization/custom.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/automation/pasteToCommentBoxMinds.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/injection/CommentBox.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/injection/PostDialog.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/injection/PostDialogHint.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/injection/inject.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/injection/PostInspector.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/injection/PostReplacer.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/injection/SearchResultInspector.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/injection/Banner.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/injection/ToolboxHint_UI.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/injection/ToolboxHint.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/customization/render-fragments.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/injection/ProfileCover.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/injection/Avatar/index.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/minds.com/ui-provider.ts","webpack://mask-network/./packages/mask/content-script/utils/untilElementAvailable.ts","webpack://mask-network/./packages/mask/shared-ui/locales_legacy/index.ts"],"sourcesContent":["import { makeStyles } from '@masknet/theme'\nimport { Box, InputBase } from '@mui/material'\nimport { activatedSiteAdaptorUI } from '../../site-adaptor-infra/index.js'\nimport { useMaskSharedTrans } from '../../../shared-ui/index.js'\nimport { EnhanceableSite } from '@masknet/shared-base'\n\ninterface StyleProps {\n    site: EnhanceableSite\n}\n\nconst useStyles = makeStyles<StyleProps>()((_theme, { site }) => ({\n    root: {\n        flex: 1,\n        fontSize: 13,\n        background: '#3a3b3c',\n        width: site === EnhanceableSite.Minds ? '96%' : '100%',\n        height: 34,\n        borderRadius: 20,\n        padding: '2px 1em',\n        boxSizing: 'border-box',\n        marginTop: 6,\n        color: '#e4e6eb',\n    },\n    input: {\n        '&::placeholder': {\n            color: '#b0b3b8',\n            opacity: 1,\n        },\n        '&:focus::placeholder': {\n            color: '#d0d2d6',\n        },\n    },\n}))\n\nexport interface CommentBoxProps {\n    onSubmit: (newVal: string) => void\n    inputProps?: Partial<PropsOf<typeof InputBase>>\n}\nexport function CommentBox(props: CommentBoxProps) {\n    const { classes } = useStyles({ site: activatedSiteAdaptorUI!.networkIdentifier })\n    const t = useMaskSharedTrans()\n    return (\n        <Box sx={{ display: 'flex', width: '100%' }}>\n            <InputBase\n                className={classes.root}\n                inputProps={{ className: classes.input, 'data-testid': 'comment_input' }}\n                placeholder={t.comment_box__placeholder()}\n                onKeyDown={(event) => {\n                    const node = event.target as HTMLInputElement\n                    if (!node.value) return\n                    if (event.key !== 'Enter') return\n                    props.onSubmit(node.value)\n                    node.value = '' // clear content\n                }}\n                {...props.inputProps}\n            />\n        </Box>\n    )\n}\n","import { memo, useCallback, useContext } from 'react'\nimport { type PostInfo, usePostInfoDetails, PostInfoContext } from '@masknet/plugin-infra/content-script'\nimport { type DOMProxy, MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { makeStyles } from '@masknet/theme'\nimport { MaskMessages } from '@masknet/shared-base'\nimport { CommentBox, type CommentBoxProps } from '../../../components/InjectedComponents/CommentBox.js'\nimport { startWatch } from '../../../utils/startWatch.js'\nimport { attachReactTreeWithContainer } from '../../../utils/shadow-root/renderInShadowRoot.js'\n\nasync function defaultOnPasteToCommentBox(\n    encryptedComment: string,\n    _current: PostInfo,\n    _realCurrent: HTMLElement | null,\n) {\n    MaskMessages.events.autoPasteFailed.sendToLocal({ text: encryptedComment })\n}\n\n// TODO: should not rely on onPasteToCommentBoxFacebook.\n// Use automation.nativeCommentBox.appendText\nexport const injectCommentBoxDefaultFactory = function <T extends string>(\n    onPasteToCommentBox = defaultOnPasteToCommentBox,\n    additionPropsToCommentBox: (classes: Record<T, string>) => Partial<CommentBoxProps> = () => ({}),\n    useCustomStyles: (props?: any) => {\n        classes: Record<T, string>\n    } = makeStyles()({}) as any,\n    mountPointCallback?: (node: DOMProxy) => void,\n) {\n    const CommentBoxUI = memo(function CommentBoxUI({ dom }: { dom: HTMLElement | null }) {\n        const info = useContext(PostInfoContext)\n        const encryptComment = usePostInfoDetails.encryptComment()\n        const { classes } = useCustomStyles()\n        const props = additionPropsToCommentBox(classes)\n        const onCallback = useCallback(\n            async (content: string) => {\n                if (!encryptComment) return\n                const encryptedComment = await encryptComment(content)\n                onPasteToCommentBox(encryptedComment, info!, dom)\n            },\n            [encryptComment, info, dom],\n        )\n\n        if (!encryptComment) return null\n        return <CommentBox onSubmit={onCallback} {...props} />\n    })\n    return (signal: AbortSignal, current: PostInfo) => {\n        if (!current.comment?.commentBoxSelector) return\n        const commentBoxWatcher = new MutationObserverWatcher(\n            current.comment.commentBoxSelector.clone(),\n            document.body,\n        ).useForeach((node, key, meta) => {\n            try {\n                mountPointCallback?.(meta)\n            } catch {}\n            const root = attachReactTreeWithContainer(meta.afterShadow, { signal })\n            root.render(\n                <PostInfoContext.Provider value={current}>\n                    <CommentBoxUI {...{ ...current, dom: meta.realCurrent }} />\n                </PostInfoContext.Provider>,\n            )\n            return root.destroy\n        })\n        startWatch(commentBoxWatcher, signal)\n    }\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\"\n}), 'Lock');","import { useEffect } from 'react'\nimport { useAsync } from 'react-use'\nimport { Chip } from '@mui/material'\nimport type { ChipProps } from '@mui/material/Chip'\nimport { Lock } from '@mui/icons-material'\nimport type { ValueRef } from '@masknet/shared-base'\nimport { useValueRef } from '@masknet/shared-base-ui'\nimport { makeStyles } from '@masknet/theme'\nimport { usePostInfoDetails } from '@masknet/plugin-infra/content-script'\n\nconst useStyle = makeStyles()({\n    root: {\n        height: 'auto',\n        width: 'calc(98% - 10px)',\n        padding: '6px',\n    },\n    label: {\n        width: '90%',\n        overflowWrap: 'break-word',\n        whiteSpace: 'normal',\n        textOverflow: 'clip',\n    },\n})\ntype PostCommentDecryptedProps = React.PropsWithChildren<{ ChipProps?: ChipProps }>\nfunction PostCommentDecrypted(props: PostCommentDecryptedProps) {\n    const { classes } = useStyle(undefined, { props: props.ChipProps || {} })\n    return (\n        <>\n            <Chip\n                data-testid=\"comment_field\"\n                icon={<Lock />}\n                label={props.children}\n                color=\"secondary\"\n                {...props.ChipProps}\n                classes={{ root: classes.root, label: classes.label }}\n            />\n        </>\n    )\n}\nexport interface PostCommentProps {\n    comment: ValueRef<string>\n    needZip(): void\n}\nexport function PostComment(props: PostCommentProps) {\n    const { needZip } = props\n    const comment = useValueRef(props.comment)\n    const decrypt = usePostInfoDetails.decryptComment()\n\n    const { value } = useAsync(async () => decrypt?.(comment), [decrypt, comment])\n\n    useEffect(() => void (value && needZip()), [value, needZip])\n    if (value) return <PostCommentDecrypted>{value}</PostCommentDecrypted>\n    return null\n}\n","import { memo } from 'react'\nimport { type PostInfo, PostInfoProvider } from '@masknet/plugin-infra/content-script'\nimport { MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { makeStyles } from '@masknet/theme'\nimport { ValueRef } from '@masknet/shared-base'\nimport { attachReactTreeWithContainer } from '../../../utils/shadow-root/renderInShadowRoot.js'\nimport { startWatch } from '../../../utils/startWatch.js'\nimport { PostComment, type PostCommentProps } from '../../../components/InjectedComponents/PostComments.js'\nimport { collectNodeText } from '../../../utils/index.js'\n\ninterface injectPostCommentsDefaultConfig {\n    needZip?(): void\n}\n/**\n * Create a default implementation of injectPostComments\n */\nexport function injectPostCommentsDefault<T extends string>(\n    config: injectPostCommentsDefaultConfig = {},\n    additionalPropsToPostComment: (classes: Record<T, string>) => Partial<PostCommentProps> = () => ({}),\n    useCustomStyles: (props?: any) => {\n        classes: Record<T, string>\n    } = makeStyles()({}) as any,\n) {\n    const { needZip } = config\n    const PostCommentDefault = memo(function PostCommentDefault(props: Pick<PostCommentProps, 'needZip' | 'comment'>) {\n        const { classes } = useCustomStyles()\n        const additional = additionalPropsToPostComment(classes)\n        return <PostComment {...props} {...additional} />\n    })\n    return function injectPostComments(signal: AbortSignal, current: PostInfo) {\n        const selector = current.comment?.commentsSelector\n        if (!selector) return\n        const commentWatcher = new MutationObserverWatcher(selector, document.body).useForeach(\n            (commentNode, key, meta) => {\n                const commentRef = new ValueRef(collectNodeText(commentNode))\n                const needZipF = needZip || (() => undefined)\n                const root = attachReactTreeWithContainer(meta.afterShadow, { signal })\n                root.render(\n                    <PostInfoProvider post={current}>\n                        <PostCommentDefault needZip={needZipF} comment={commentRef} />\n                    </PostInfoProvider>,\n                )\n                return {\n                    onNodeMutation() {\n                        commentRef.value = collectNodeText(commentNode)\n                    },\n                    onTargetChanged() {\n                        commentRef.value = collectNodeText(commentNode)\n                    },\n                    onRemove() {\n                        root.destroy()\n                    },\n                }\n            },\n        )\n        startWatch(commentWatcher, signal)\n    }\n}\n","import { LiveSelector } from '@dimensiondev/holoflows-kit'\n\ntype E = HTMLElement\n\nfunction querySelector<T extends E, SingleMode extends boolean = true>(selector: string, singleMode = true) {\n    const ls = new LiveSelector<T, SingleMode>().querySelector<T>(selector)\n    return (singleMode ? ls.enableSingleMode() : ls) as LiveSelector<T, SingleMode>\n}\n\nexport function rootSelector() {\n    return querySelector<E>('m-app')\n}\n\nexport function composerModalSelector() {\n    return querySelector<E>('m-composer__modal')\n}\n\nexport function postEditorInDialogSelector() {\n    return querySelector<E>('m-composer__modal m-composer__titlebar m-composertitlebar__dropdown', true)\n}\n\nexport function postEditorInTimelineSelector() {\n    return querySelector<E>('m-composer m-composer__toolbar > div > :nth-child(6)', true)\n}\n\nexport function toolboxInSidebarSelector() {\n    return querySelector<E>('.m-sidebarNavigation__list li:nth-child(7)')\n}\n\nexport function postEditorDraftContentSelector() {\n    return querySelector<HTMLElement>('m-composer__modal m-composer__textarea textarea.m-composerTextarea__message')\n}\n\nexport function handleSelector() {\n    return querySelector<HTMLAnchorElement>('.m-sidebarNavigation__item--user [data-ref=\"sidenav-channel\"]')\n}\n\nexport function selfInfoSelectors() {\n    return {\n        handle: handleSelector().evaluate()?.getAttribute('href')?.slice(1).replace(/^@/, ''), // Could include `@` by chance.\n        avatar: querySelector<HTMLImageElement>('.m-sidebarNavigation__item--user > a > div > img').evaluate()?.src,\n    }\n}\n\nexport function inpageAvatarSelector() {\n    return new LiveSelector().querySelectorAll<HTMLDivElement>('.m-activityOwnerBlock__avatar')\n}\n\nexport function composeButtonSelector() {\n    return querySelector(\n        [\n            '.m-sidebarNavigation__item m-sidebarNavigation__item--compose',\n            '.m-sidebarNavigation__item--compose a', // legacy\n        ].join(','),\n        true,\n    )\n}\n\nexport function composeTextareaSelector() {\n    return new LiveSelector().querySelector<HTMLTextAreaElement>('m-composer__textarea textarea').enableSingleMode()\n}\n\nexport function composeDialogIndicatorSelector() {\n    return new LiveSelector().querySelector<HTMLDivElement>('m-composer__modal')\n}\n\nexport function composerModalTextAreaSelector() {\n    return new LiveSelector()\n        .querySelector<HTMLTextAreaElement>('m-composer__modal m-composer__textArea .m-composer__textArea textarea')\n        .enableSingleMode()\n}\n\nexport function composerPreviewSelector() {\n    return new LiveSelector()\n        .querySelector<HTMLDivElement>('m-composer__modal m-composer__preview img')\n        .enableSingleMode()\n}\n\nexport function searchResultHeadingSelector() {\n    return querySelector('m-discovery__search')\n}\n\nexport function postContentSelector() {\n    return new LiveSelector().querySelectorAll<HTMLDivElement>(\n        [\n            'm-activity m-activity__content .m-activityTop__mainColumn',\n            'm-activity m-activity__content .m-activityContentText__body > m-readmore > span:first-child',\n            'm-activity:not(.m-activity--minimalMode) m-activity__content .m-activityContent__messageWrapper > span:first-child',\n            'm-activity:not(.m-activity--minimalMode) m-activity__content .m-activityContent__mediaDescriptionText',\n        ].join(','),\n    )\n}\n\nexport function searchMindsProfileCover() {\n    return querySelector('div[data-cy=\"data-minds-channel-banner\"]')\n}\n","import type { LiveSelector } from '@dimensiondev/holoflows-kit'\nimport { composerModalSelector, postEditorDraftContentSelector } from './selector.js'\n\nexport function getEditorContent() {\n    const editorNode = postEditorDraftContentSelector().evaluate()\n    if (!editorNode) return ''\n    return (editorNode as HTMLTextAreaElement).value\n}\n\nexport function isCompose() {\n    return !!composerModalSelector().evaluate()\n}\n\nexport function hasFocus(x: LiveSelector<HTMLElement, true>) {\n    return x.evaluate() === document.activeElement\n}\n\nexport function hasEditor() {\n    return !!postEditorDraftContentSelector().evaluate()\n}\n","import type { SiteAdaptorUI } from '@masknet/types'\nimport { untilElementAvailable } from '../../../utils/untilElementAvailable.js'\nimport { selectElementContents } from '../../../utils/selectElementContents.js'\nimport { delay } from '@masknet/kit'\nimport { inputText } from '@masknet/injected-script'\nimport { getEditorContent, hasEditor, hasFocus, isCompose } from '../utils/postBox.js'\nimport { composeButtonSelector, postEditorDraftContentSelector } from '../utils/selector.js'\nimport { MaskMessages } from '@masknet/shared-base'\n\n/**\n * Wait for up to 5000 ms\n * If not complete, let user do it.\n */\nexport const pasteTextToCompositionMinds: SiteAdaptorUI.AutomationCapabilities.NativeCompositionDialog['attachText'] = (\n    text,\n    opt,\n) => {\n    const interval = 500\n    const timeout = 5000\n    const worker = async function (abort: AbortSignal) {\n        const checkSignal = () => {\n            if (abort.aborted) throw new Error('Abort to paste text to the composition dialog at minds.')\n        }\n\n        if (!isCompose() && !hasEditor()) {\n            // open the composer\n            await untilElementAvailable(composeButtonSelector())\n            composeButtonSelector().evaluate()!.click()\n            checkSignal()\n        }\n\n        // get focus\n        const i = postEditorDraftContentSelector()\n        const textarea = i.evaluate()!\n        await untilElementAvailable(i)\n        checkSignal()\n        while (!hasFocus(i)) {\n            textarea?.focus()\n            checkSignal()\n            await delay(interval)\n        }\n\n        selectElementContents(textarea)\n\n        // paste\n        inputText(text)\n\n        // Simulate textarea input\n        SimulateTextareaInput(textarea.id)\n\n        await delay(interval)\n        if (!getEditorContent().replaceAll('\\n', '').includes(text.replaceAll('\\n', ''))) {\n            fail(new Error('Unable to paste text automatically'))\n        }\n    }\n\n    const fail = (e: Error) => {\n        if (opt?.recover) MaskMessages.events.autoPasteFailed.sendToLocal({ text })\n        throw e\n    }\n\n    return worker(AbortSignal.timeout(timeout)).then(undefined, (error) => fail(error))\n}\n\nfunction SimulateTextareaInput(id: string) {\n    document.getElementById(id)?.dispatchEvent(new Event('input', { bubbles: true }))\n}\n","import type { SiteAdaptorUI } from '@masknet/types'\nimport { downloadUrl } from '../../../utils/downloadUrl.js'\nimport { composerModalTextAreaSelector, composerPreviewSelector } from '../utils/selector.js'\nimport { pasteTextToCompositionMinds } from './pasteTextToComposition.js'\nimport { MaskMessages } from '@masknet/shared-base'\n\nfunction hasSucceed() {\n    return composerPreviewSelector().evaluate()\n}\n\nexport function pasteImageToCompositionMinds() {\n    return async function (\n        url: string | Blob,\n        { recover, relatedTextPayload }: SiteAdaptorUI.AutomationCapabilities.NativeCompositionAttachImageOptions,\n    ) {\n        const image = typeof url === 'string' ? await downloadUrl(url) : url\n        const data = [new ClipboardItem({ [image.type]: image })]\n\n        pasteTextToCompositionMinds!(relatedTextPayload || '', { recover: false })\n\n        await navigator.clipboard.write(data)\n        composerModalTextAreaSelector().evaluate()?.focus()\n        document.execCommand('paste')\n\n        if (hasSucceed()) {\n            // clear clipboard\n            return navigator.clipboard.writeText('')\n        } else if (recover) {\n            MaskMessages.events.autoPasteFailed.sendToLocal({ text: relatedTextPayload || '', image })\n        }\n    }\n}\n","export function gotoNewsFeedPageMinds() {\n    const path = '/newsfeed/subscriptions'\n    if (location.pathname.includes(path)) return\n    location.assign(path)\n}\n","import type { ProfileIdentifier } from '@masknet/shared-base'\n\nexport function gotoProfilePageMinds(profile: ProfileIdentifier) {\n    const path = `/${profile.userId}`\n    ;(document.querySelector(`[href=\"${path}\"]`) as HTMLElement | undefined)?.click()\n    setTimeout(() => {\n        // The classic way\n        if (!location.pathname.startsWith(path)) location.assign(path)\n    }, 400)\n}\n","import { makeTypedMessageText, type SerializableTypedMessages } from '@masknet/typed-message'\nimport { CrossIsolationMessages, type CompositionDialogEvent } from '@masknet/shared-base'\nimport { delay, waitDocumentReadyState } from '@masknet/kit'\nimport { i18n } from '../../../../shared-ui/locales_legacy/index.js'\nimport { composeButtonSelector, composeDialogIndicatorSelector, composeTextareaSelector } from '../utils/selector.js'\n\nexport async function openComposeBoxMinds(\n    content: string | SerializableTypedMessages,\n    options?: CompositionDialogEvent['options'],\n) {\n    await waitDocumentReadyState('interactive')\n    await delay(800)\n\n    // active the compose dialog\n    const composeTextarea = composeTextareaSelector().evaluate()\n    const composeButton = composeButtonSelector().evaluate()\n    if (composeButton) composeButton.click()\n    if (composeTextarea) composeTextarea.focus()\n    await delay(800)\n\n    // the indicator only available when compose dialog opened successfully\n    const composeIndicator = composeDialogIndicatorSelector().evaluate()\n    if (!composeIndicator) {\n        // eslint-disable-next-line no-alert\n        alert(i18n.t('automation_request_click_post_button'))\n        return\n    }\n\n    await delay(800)\n    CrossIsolationMessages.events.compositionDialogEvent.sendToLocal({\n        reason: 'popup',\n        open: true,\n        content: typeof content === 'string' ? makeTypedMessageText(content) : content,\n        options,\n    })\n}\n","export default function getSearchedKeywordAtMinds() {\n    const params = new URLSearchParams(location.search)\n    if (location.pathname === '/discovery/search') {\n        return params.get('q') ?? ''\n    }\n\n    return ''\n}\n","import { ProfileIdentifier } from '@masknet/shared-base'\nimport type { SiteAdaptorUI } from '@masknet/types'\nimport { Minds } from '@masknet/web3-providers'\nimport { type LiveSelector, MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { creator } from '../../../site-adaptor-infra/index.js'\nimport { mindsBase } from '../base.js'\nimport { handleSelector, selfInfoSelectors } from '../utils/selector.js'\n\nasync function resolveLastRecognizedIdentityInner(\n    ref: SiteAdaptorUI.CollectingCapabilities.IdentityResolveProvider['recognized'],\n    cancel: AbortSignal,\n) {\n    async function assign() {\n        const { handle, avatar } = selfInfoSelectors()\n\n        ref.value = {\n            identifier: ProfileIdentifier.of(mindsBase.networkIdentifier, handle).unwrapOr(undefined),\n            nickname: undefined,\n            avatar,\n        }\n        const user = await Minds.getUserByScreenName(handle)\n\n        if (user) {\n            ref.value = {\n                identifier: ProfileIdentifier.of(mindsBase.networkIdentifier, user.username).unwrapOr(undefined),\n                nickname: user.name,\n                avatar: user.avatar_url?.medium,\n            }\n        }\n    }\n    function createWatcher(selector: LiveSelector<HTMLElement, boolean>) {\n        new MutationObserverWatcher(selector)\n            .addListener('onAdd', () => assign())\n            .addListener('onChange', () => assign())\n            .startWatch(\n                {\n                    childList: true,\n                    subtree: true,\n                },\n                cancel,\n            )\n    }\n    assign()\n    createWatcher(handleSelector())\n}\n\nexport const IdentityProviderMinds: SiteAdaptorUI.CollectingCapabilities.IdentityResolveProvider = {\n    hasDeprecatedPlaceholderName: false,\n    recognized: creator.EmptyIdentityResolveProviderState(),\n    start(cancel) {\n        resolveLastRecognizedIdentityInner(this.recognized, cancel)\n    },\n}\n","import type { SiteAdaptorUI } from '@masknet/types'\nimport { fromRGB, getBackgroundColor, isDark } from '@masknet/plugin-infra/content-script'\nimport { ThemeMode } from '@masknet/web3-shared-base'\nimport { creator } from '../../../site-adaptor-infra/utils.js'\n\nfunction resolveThemeSettingsInner(\n    ref: SiteAdaptorUI.CollectingCapabilities.ThemeSettingsProvider['recognized'],\n    cancel: AbortSignal,\n) {\n    function updateThemeColor() {\n        const backgroundColor = getBackgroundColor(document.body)\n        ref.value = {\n            ...ref.value,\n            mode: isDark(fromRGB(backgroundColor)!) ? ThemeMode.Dark : ThemeMode.Light,\n        }\n    }\n\n    updateThemeColor()\n\n    const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            updateThemeColor()\n        })\n    })\n\n    observer.observe(document.body, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: ['class'],\n    })\n\n    cancel.addEventListener('abort', () => observer.disconnect())\n}\n\nexport const ThemeSettingsProviderMinds: SiteAdaptorUI.CollectingCapabilities.ThemeSettingsProvider = {\n    recognized: creator.EmptyThemeSettingsProviderState(),\n    async start(cancel) {\n        resolveThemeSettingsInner(this.recognized, cancel)\n    },\n}\n","import { isNull } from 'lodash-es'\n\nexport function usernameValidator(name: string) {\n    for (const v of [/(minds|admin)/i, /.{16,}/, /\\W/]) {\n        if (!isNull(v.exec(name))) {\n            return false\n        }\n    }\n\n    return name.length >= 4\n}\n","import { EnhanceableSite } from '@masknet/shared-base'\nimport urlcat from 'urlcat'\nimport type { SiteAdaptor } from '../types.js'\n\nconst origins = ['https://www.minds.com/*', 'https://minds.com/*', 'https://cdn.minds.com/*']\nexport const MindsAdaptor: SiteAdaptor.Definition = {\n    name: 'Minds',\n    networkIdentifier: EnhanceableSite.Minds,\n    declarativePermissions: { origins },\n    homepage: 'https://www.minds.com',\n    isSocialNetwork: true,\n    sortIndex: 4,\n    getProfilePage: () => new URL('https://www.minds.com'),\n    getShareLinkURL(message) {\n        const url = urlcat('https://www.minds.com/newsfeed/subscriptions', {\n            intentUrl: message,\n        })\n        return new URL(url)\n    },\n}\n","import type { PostIdentifier } from '@masknet/shared-base'\nimport { openWindow } from '@masknet/shared-base-ui'\nimport type { SiteAdaptor } from '@masknet/types'\nimport { createSiteAdaptorSpecializedPostContext } from '../../site-adaptor-infra/utils/create-post-context.js'\nimport { hasPayloadLike } from '../../utils/index.js'\nimport { mindsBase } from './base.js'\nimport { usernameValidator } from './utils/user.js'\nimport { MindsAdaptor } from '../../../shared/site-adaptors/implementations/minds.com.js'\n\nfunction getPostURL(post: PostIdentifier): URL {\n    return new URL(`https://minds.com/newsfeed/${post.postId}`)\n}\nexport const mindsShared: SiteAdaptor.Shared & SiteAdaptor.Base = {\n    ...mindsBase,\n    utils: {\n        isValidUsername: usernameValidator,\n        getPostURL,\n        share(message) {\n            openWindow(MindsAdaptor.getShareLinkURL?.(message))\n        },\n        createPostContext: createSiteAdaptorSpecializedPostContext({\n            hasPayloadLike,\n            getURLFromPostIdentifier: getPostURL,\n        }),\n    },\n}\n","import { flattenDeep } from 'lodash-es'\nimport {\n    isTypedMessageEmpty,\n    isTypedMessageText,\n    makeTypedMessageAnchor,\n    makeTypedMessageEmpty,\n    makeTypedMessageText,\n    type TypedMessage,\n} from '@masknet/typed-message'\nimport { assertNonNull } from '@masknet/kit'\n\nfunction parseNameArea(nameArea: HTMLAnchorElement) {\n    const displayNameNode = nameArea.querySelector('span')\n\n    return {\n        name: displayNameNode && assertNonNull(displayNameNode) ? displayNameNode.innerText : nameArea.innerText,\n        handle: nameArea.href.slice(8).split('/')[1],\n    }\n}\n\nfunction postIdParser(node: HTMLElement) {\n    const idNode = node.querySelector<HTMLAnchorElement>('m-activity__permalink .m-activityPermalink__wrapper--link')\n    return idNode ? idNode.getAttribute('href')?.split('/')[2] ?? undefined : undefined\n}\n\nfunction postNameParser(node: HTMLElement) {\n    return parseNameArea(\n        assertNonNull(\n            node.querySelector<HTMLAnchorElement>(\n                [\n                    'm-activity__ownerblock .m-activityOwnerBlock__primaryName',\n                    'm-activity__ownerblock .m-activityOwnerBlock__secondaryName', // It's `secondaryName` in detail page\n                ].join(','),\n            ),\n        ),\n    )\n}\n\nfunction postAvatarParser(node: HTMLElement) {\n    const avatarElement = node.querySelector<HTMLImageElement>('m-hovercard img')\n    return avatarElement ? avatarElement.src : undefined\n}\n\nfunction resolveType(content: string) {\n    if (content.startsWith('@')) return 'user'\n    if (content.startsWith('#')) return 'hash'\n    if (content.startsWith('$')) return 'cash'\n    return 'normal'\n}\nfunction postContentMessageParser(node: HTMLElement) {\n    function make(node: Node): TypedMessage | TypedMessage[] {\n        if (node.nodeType === Node.TEXT_NODE) {\n            if (!node.nodeValue) return makeTypedMessageEmpty()\n            return makeTypedMessageText(node.nodeValue)\n        } else if (node instanceof HTMLAnchorElement && !node.className.includes('m-activityContentMedia__link')) {\n            const anchor = node\n            const href = anchor.getAttribute('title') ?? anchor.getAttribute('href')\n            const content = anchor.textContent\n            if (!content) return makeTypedMessageEmpty()\n            return makeTypedMessageAnchor(resolveType(content), href ?? '', content)\n        } else if (node instanceof HTMLImageElement) {\n            const image = node\n            const src = image.getAttribute('src')\n            const matched = src?.match(/emoji\\/v2\\/svg\\/([\\w-]+)\\.svg/)\n            if (!matched) return makeTypedMessageEmpty()\n            const points = matched[1].split('-').map((point) => Number.parseInt(point, 16))\n            return makeTypedMessageText(String.fromCodePoint(...points))\n        } else if (node.childNodes.length) {\n            const flattened = flattenDeep(Array.from(node.childNodes, make))\n            // conjunct text messages under same node\n            if (flattened.every(isTypedMessageText))\n                return makeTypedMessageText(flattened.map((x) => x.content).join(''))\n            return flattened\n        } else return makeTypedMessageEmpty()\n    }\n\n    const content = node.querySelector<HTMLDivElement>('m-activity__content')\n    return content ? Array.from(content.childNodes).flatMap(make) : []\n}\n\nexport function postParser(node: HTMLElement) {\n    return {\n        ...postNameParser(node),\n        avatar: postAvatarParser(node),\n        pid: postIdParser(node),\n\n        messages: postContentMessageParser(node).filter((x) => !isTypedMessageEmpty(x)),\n    }\n}\n","import { LiveSelector, MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport type { SiteAdaptorUI } from '@masknet/types'\nimport {\n    makeTypedMessageEmpty,\n    makeTypedMessagePromise,\n    makeTypedMessageTuple,\n    makeTypedMessageTupleFromList,\n    makeTypedMessageImage,\n} from '@masknet/typed-message'\nimport { ProfileIdentifier } from '@masknet/shared-base'\nimport { creator } from '../../../site-adaptor-infra/utils.js'\nimport { createRefsForCreatePostContext } from '../../../site-adaptor-infra/utils/create-post-context.js'\nimport { untilElementAvailable } from '../../../utils/untilElementAvailable.js'\nimport { startWatch } from '../../../utils/startWatch.js'\nimport { mindsBase } from '../base.js'\nimport { mindsShared } from '../shared.js'\nimport { postParser } from '../utils/fetch.js'\nimport { postContentSelector } from '../utils/selector.js'\nimport { getCurrentIdentifier } from '../../utils.js'\nimport Services from '#services'\n\nexport const PostProviderMinds: SiteAdaptorUI.CollectingCapabilities.PostsProvider = {\n    posts: creator.EmptyPostProviderState(),\n    start(signal) {\n        collectPostsMindsInner(this.posts, signal)\n    },\n}\n\nfunction collectPostsMindsInner(\n    store: SiteAdaptorUI.CollectingCapabilities.PostsProvider['posts'],\n    signal: AbortSignal,\n) {\n    startWatch(\n        new MutationObserverWatcher(postContentSelector()).useForeach((node, key, metadata) => {\n            const activitySelector = new LiveSelector()\n                .replace(() => [metadata.realCurrent])\n                .closest('m-activity, m-activity__modal')\n            const activityNode = activitySelector.evaluate()[0]! as HTMLElement\n\n            // ? inject after comments\n            const commentsSelector = activitySelector\n                .clone()\n                .querySelectorAll<HTMLElement>('m-activity__content .m-comment__message')\n\n            // ? inject comment text field\n            const commentBoxSelector = activitySelector\n                .clone()\n                .querySelectorAll<HTMLFormElement>('.m-commentPoster__form')\n                .map((x) => x.parentElement)\n\n            const { subscriptions, ...info } = createRefsForCreatePostContext()\n            const postInfo = mindsShared.utils.createPostContext({\n                comments: { commentBoxSelector, commentsSelector },\n                rootElement: metadata,\n                suggestedInjectionPoint: node,\n                ...subscriptions,\n            })\n\n            store.set(metadata, postInfo)\n\n            function collectLinks() {\n                if (!activityNode) return\n\n                const links = [...activityNode.querySelectorAll('a')].filter((x) => x.rel)\n                const seen = new Set<string>()\n                for (const x of links) {\n                    if (seen.has(x.href)) continue\n                    seen.add(x.href)\n                    info.postMetadataMentionedLinks.set(x, x.href)\n                }\n            }\n\n            function collectPostInfo() {\n                const { pid, messages, handle, name, avatar } = postParser(activityNode)\n                if (!pid) return\n                const postBy = ProfileIdentifier.of(mindsBase.networkIdentifier, handle).unwrapOr(null)\n                info.postID.value = pid\n                info.postBy.value = postBy\n                info.nickname.value = name\n                info.avatarURL.value = avatar || null\n\n                if (name && postBy) {\n                    const currentProfile = getCurrentIdentifier()\n\n                    Services.Identity.updateProfileInfo(postBy, {\n                        nickname: name,\n                        avatarURL: avatar,\n                    })\n                    if (currentProfile?.linkedPersona)\n                        Services.Identity.createNewRelation(postBy, currentProfile.linkedPersona)\n                }\n                // decode steganographic image\n                // don't add await on this\n                const images = untilElementAvailable(\n                    new LiveSelector([activityNode]).querySelectorAll<HTMLImageElement>(\n                        '.m-activityContent__media--image img',\n                    ),\n                    10000,\n                )\n                    .then(() => getMetadataImages(activityNode))\n                    .then((urls) => {\n                        for (const url of urls) info.postMetadataImages.add(url)\n                        if (urls.length)\n                            return makeTypedMessageTupleFromList(...urls.map((x) => makeTypedMessageImage(x)))\n                        return makeTypedMessageEmpty()\n                    })\n                    .catch(() => makeTypedMessageEmpty())\n\n                info.postMessage.value = makeTypedMessageTuple([...messages, makeTypedMessagePromise(images)])\n            }\n\n            function run() {\n                collectPostInfo()\n                collectLinks()\n            }\n\n            run()\n\n            return {\n                onNodeMutation: run,\n                onTargetChanged: run,\n                onRemove: () => store.delete(metadata),\n            }\n        }),\n        signal,\n    )\n}\n\nfunction getMetadataImages(activityNode: HTMLElement): string[] {\n    const imgNodes = activityNode.querySelectorAll<HTMLImageElement>('.m-activityContent__media--image img') || []\n\n    if (!imgNodes.length) return []\n    const imgUrls = Array.from(imgNodes)\n        .map((node) => node.src)\n        // FIXME! there's a CORS issue on the CDN\n        .map((src) => src.replace('cdn.minds.com', 'minds.com'))\n        // Use the master version of the image so the dimensions don't change\n        .map((src) => src.replace('xlarge', 'master'))\n        .filter(Boolean)\n    if (!imgUrls.length) return []\n    return imgUrls\n}\n","import { useMemo } from 'react'\nimport { produce, setAutoFreeze } from 'immer'\nimport { type Theme, unstable_createMuiStrictModeTheme } from '@mui/material'\nimport { fromRGB, shade, toRGB } from '@masknet/plugin-infra/content-script'\nimport { useThemeSettings } from '../../../components/DataSource/useActivatedUI.js'\n\nexport function useThemeMindsVariant(baseTheme: Theme) {\n    const themeSettings = useThemeSettings()\n\n    return useMemo(() => {\n        const primaryColorRGB = fromRGB(themeSettings.color)!\n        const primaryContrastColorRGB = fromRGB('rgb(255, 255, 255)')\n        setAutoFreeze(false)\n\n        const MindsTheme = produce(baseTheme, (theme) => {\n            theme.palette.primary = {\n                light: toRGB(shade(primaryColorRGB, 10)),\n                main: toRGB(primaryColorRGB),\n                dark: toRGB(shade(primaryColorRGB, -10)),\n                contrastText: toRGB(primaryContrastColorRGB),\n            }\n            theme.shape.borderRadius = 15\n            theme.breakpoints.values = { xs: 0, sm: 687, md: 1024, lg: 1220, xl: 1920 }\n            theme.components = theme.components || {}\n            theme.components.MuiTypography = {\n                styleOverrides: {\n                    root: {\n                        fontFamily: 'Roboto,Helvetica,sans-serif',\n                    },\n                },\n            }\n            theme.components.MuiPaper = {\n                defaultProps: {\n                    elevation: 0,\n                },\n            }\n            theme.components.MuiTab = {\n                styleOverrides: {\n                    root: {\n                        textTransform: 'none',\n                    },\n                },\n            }\n        })\n        setAutoFreeze(true)\n        return unstable_createMuiStrictModeTheme(MindsTheme)\n    }, [baseTheme, themeSettings])\n}\n","import type { PostInfo } from '@masknet/plugin-infra/content-script'\nimport { delay } from '@masknet/kit'\nimport { selectElementContents } from '../../../utils/selectElementContents.js'\nimport { pasteText } from '@masknet/injected-script'\nimport { MaskMessages } from '@masknet/shared-base'\n\nexport async function pasteToCommentBoxMinds(encryptedComment: string, current: PostInfo, dom: HTMLElement | null) {\n    const fail = () => {\n        MaskMessages.events.autoPasteFailed.sendToLocal({ text: encryptedComment })\n    }\n    const root = dom || current.rootNode\n    if (!root) return fail()\n    const input = root.querySelector('[contenteditable]')\n    if (!input) return fail()\n    selectElementContents(input)\n    pasteText(encryptedComment)\n    await delay(200)\n    if (!root.innerText.includes(encryptedComment)) return fail()\n}\n","/* eslint-disable tss-unused-classes/unused-classes */\nimport { makeStyles } from '@masknet/theme'\nimport { injectCommentBoxDefaultFactory } from '../../../site-adaptor-infra/defaults/index.js'\nimport { pasteToCommentBoxMinds } from '../automation/pasteToCommentBoxMinds.js'\nimport type { PostContext } from '@masknet/plugin-infra/content-script'\n\nexport default function injectCommentBoxAtMinds(): (signal: AbortSignal, current: PostContext) => void {\n    return injectCommentBoxDefaultFactory(\n        pasteToCommentBoxMinds,\n        (classes) => ({\n            inputProps: {\n                classes,\n            },\n        }),\n        makeStyles()((theme) => ({\n            root: {\n                fontSize: 16,\n                background: 'transparent',\n                // FIXME: A weird issue with margins\n                width: '96.2%',\n                height: 44,\n                borderRadius: 2,\n                padding: '2px 1em',\n                border: `1px solid ${theme.palette.mode === 'dark' ? '#414c57' : '#d3dbe3'}`,\n                margin: '0 10px 10px',\n                color: theme.palette.mode === 'dark' ? '#fff' : '#43434d',\n                fontWeight: 400,\n            },\n            input: {\n                '&::placeholder': {\n                    color: theme.palette.mode === 'dark' ? '#b8c1c' : '#72727c',\n                    opacity: 1,\n                    fontWeight: 400,\n                },\n                '&:focus::placeholder': {\n                    color: 'transparent',\n                },\n            },\n        })),\n    )\n}\n","import { type LiveSelector, MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { Composition } from '../../../components/CompositionDialog/Composition.js'\nimport { attachReactTreeWithContainer } from '../../../utils/shadow-root/renderInShadowRoot.js'\nimport { startWatch } from '../../../utils/startWatch.js'\nimport { composerModalSelector, rootSelector } from '../utils/selector.js'\n\nexport function injectPostDialogAtMinds(signal: AbortSignal) {\n    renderPostDialogTo('popup', composerModalSelector(), signal)\n    renderPostDialogTo('timeline', rootSelector(), signal)\n}\n\nfunction renderPostDialogTo<T>(reason: 'timeline' | 'popup', ls: LiveSelector<T, true>, signal: AbortSignal) {\n    const watcher = new MutationObserverWatcher(ls)\n    startWatch(watcher, signal)\n\n    attachReactTreeWithContainer(watcher.firstDOMProxy.afterShadow, { signal }).render(\n        <Composition requireClipboardPermission type={reason} />,\n    )\n}\n","import { useCallback } from 'react'\nimport { type LiveSelector, MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { makeStyles } from '@masknet/theme'\nimport { CrossIsolationMessages } from '@masknet/shared-base'\nimport { PostDialogHint } from '../../../components/InjectedComponents/PostDialogHint.js'\nimport { attachReactTreeWithContainer } from '../../../utils/shadow-root/renderInShadowRoot.js'\nimport { startWatch } from '../../../utils/startWatch.js'\nimport { postEditorInDialogSelector, postEditorInTimelineSelector } from '../utils/selector.js'\nimport { isMinds } from '../base.js'\nimport { activatedSiteAdaptorUI } from '../../../site-adaptor-infra/ui.js'\nimport type { CompositionType } from '@masknet/plugin-infra/content-script'\n\nexport function injectPostDialogHintAtMinds(signal: AbortSignal) {\n    renderPostDialogHintTo(postEditorInDialogSelector(), signal, 'popup')\n    renderPostDialogHintTo(postEditorInTimelineSelector(), signal, 'timeline')\n}\n\nfunction renderPostDialogHintTo<T>(ls: LiveSelector<T, true>, signal: AbortSignal, reason: CompositionType) {\n    const watcher = new MutationObserverWatcher(ls)\n    startWatch(watcher, signal)\n\n    attachReactTreeWithContainer(watcher.firstDOMProxy.afterShadow, {\n        signal,\n    }).render(<PostDialogHintAtMinds reason={reason} />)\n}\n\ninterface StyleProps {\n    reason: string\n}\n\nconst useStyles = makeStyles<StyleProps>()((theme, { reason }) => ({\n    buttonTransform: {\n        ...(reason === 'timeline'\n            ? {\n                  width: '40px',\n                  transform: !isMinds(activatedSiteAdaptorUI!) ? 'translateX(200px) translateY(-78px)' : '',\n              }\n            : {}),\n    },\n    iconButton: {\n        '&:hover': {\n            background: 'none',\n        },\n    },\n}))\n\nfunction PostDialogHintAtMinds({ reason }: { reason: 'timeline' | 'popup' }) {\n    const { classes } = useStyles({ reason })\n\n    const onHintButtonClicked = useCallback(\n        () => CrossIsolationMessages.events.compositionDialogEvent.sendToLocal({ reason, open: true }),\n        [reason],\n    )\n\n    return (\n        <PostDialogHint\n            disableGuideTip\n            size={17}\n            iconType=\"minds\"\n            onHintButtonClicked={onHintButtonClicked}\n            tooltip={{ disabled: true }}\n            classes={{\n                buttonTransform: classes.buttonTransform,\n                iconButton: classes.iconButton,\n            }}\n        />\n    )\n}\n","import { injectPostDialogAtMinds } from './PostDialog.js'\nimport { injectPostDialogHintAtMinds } from './PostDialogHint.js'\n\nexport function injectPostBoxComposed(signal: AbortSignal) {\n    injectPostDialogAtMinds(signal)\n    injectPostDialogHintAtMinds(signal)\n}\n","import { injectPostInspectorDefault } from '../../../site-adaptor-infra/defaults/inject/PostInspector.js'\nimport type { PostInfo } from '@masknet/plugin-infra/content-script'\n\nexport function injectPostInspectorAtMinds(signal: AbortSignal, current: PostInfo) {\n    return injectPostInspectorDefault()(current, signal)\n}\n","import { injectPostReplacer } from '../../../site-adaptor-infra/defaults/inject/PostReplacer.js'\nimport type { PostInfo } from '@masknet/plugin-infra/content-script'\n\nfunction resolveContentNode(node: HTMLElement) {\n    return node.closest(\n        [\n            'm-activity__content .m-activityContentText__body > m-readmore span:first-child',\n            'm-activity__content .m-activityContent__mediaDescriptionText',\n        ].join(',') as any,\n    )\n}\n\nexport function injectPostReplacerAtMinds(signal: AbortSignal, current: PostInfo) {\n    return injectPostReplacer({\n        zipPost(node) {\n            if (node.destroyed) return\n            const langNode = resolveContentNode(node.current)\n            if (langNode) langNode.style.display = 'none'\n        },\n        unzipPost(node) {\n            if (node.destroyed || !node.current) return\n            const langNode = resolveContentNode(node.current)\n            if (langNode) langNode.style.display = 'unset'\n        },\n    })(current, signal)\n}\n","import { MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { SearchResultInspector } from '../../../components/InjectedComponents/SearchResultInspector.js'\nimport { attachReactTreeWithContainer } from '../../../utils/shadow-root/renderInShadowRoot.js'\nimport { startWatch } from '../../../utils/startWatch.js'\nimport { searchResultHeadingSelector } from '../utils/selector.js'\n\nexport function injectSearchResultInspectorAtMinds(signal: AbortSignal) {\n    const watcher = new MutationObserverWatcher(searchResultHeadingSelector())\n    startWatch(watcher, signal)\n    attachReactTreeWithContainer(watcher.firstDOMProxy.beforeShadow, { signal }).render(<SearchResultInspector />)\n}\n","import { type LiveSelector, MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { makeStyles } from '@masknet/theme'\nimport { Banner } from '../../../components/Welcomes/Banner.js'\nimport { startWatch } from '../../../utils/startWatch.js'\nimport { attachReactTreeWithContainer } from '../../../utils/shadow-root/renderInShadowRoot.js'\nimport { postEditorInTimelineSelector, postEditorInDialogSelector } from '../utils/selector.js'\n\nexport function injectBannerAtMinds(signal: AbortSignal) {\n    injectBanner(postEditorInTimelineSelector(), signal, <MindsBannerTimeline />)\n    injectBanner(postEditorInDialogSelector(), signal, <MindsBannerPopup />)\n}\n\nfunction injectBanner<T>(ls: LiveSelector<T, true>, signal: AbortSignal, element: JSX.Element) {\n    const watcher = new MutationObserverWatcher(ls)\n    startWatch(watcher, signal)\n\n    attachReactTreeWithContainer(watcher.firstDOMProxy.afterShadow, {\n        signal,\n    }).render(element)\n}\n\nconst useStyles = makeStyles()({\n    buttonText: {\n        margin: '-2px 0 !important',\n        transform: 'translateX(200px) translateY(-78px)',\n    },\n    content: {\n        marginRight: 5,\n    },\n    buttonNoMargin: {\n        margin: '0 !important',\n    },\n})\n\nfunction MindsBannerTimeline() {\n    const { classes } = useStyles()\n    return (\n        <Banner\n            iconType=\"minds\"\n            classes={{\n                buttonText: classes.buttonText,\n                content: classes.content,\n            }}\n        />\n    )\n}\n\nfunction MindsBannerPopup() {\n    const { classes } = useStyles()\n    return <Banner iconType=\"minds\" classes={{ buttonText: classes.buttonNoMargin }} />\n}\n","import { ToolboxHintUnstyled } from '../../../components/InjectedComponents/ToolboxUnstyled.js'\nimport { styled, ListItemButton, Typography, ListItemIcon, useMediaQuery } from '@mui/material'\n\nconst mindsBreakPoint = 1221 /** px */\n\nconst Container = styled('div')`\n    height: 45px;\n    margin-bottom: 10px;\n`\nconst Item = styled(ListItemButton)`\n    border-radius: 8px;\n    height: 45px;\n    padding: 4px 12px 4px 0;\n    color: ${({ theme }) => theme.palette.primary.main};\n    &:hover {\n        background: unset;\n        color: rgb(48, 153, 242);\n    }\n    @media screen and (max-width: ${mindsBreakPoint}px) {\n        padding: 12px 0;\n        justify-content: center;\n    }\n`\nconst Text = styled(Typography)`\n    font-size: 0.9375rem;\n    font-weight: 500;\n    color: inherit !important;\n    /* Minds font */\n    font-family: Roboto, Helvetica, sans-serif;\n    font-weight: 700;\n    font-size: 17px;\n    line-height: 44px;\n`\nconst Icon = styled(ListItemIcon)`\n    color: inherit;\n    min-width: 48px;\n    margin-left: 6px;\n    @media screen and (max-width: ${mindsBreakPoint}px) {\n        min-width: 0;\n    }\n`\n\nexport function ToolboxHintAtMinds(props: { category: 'wallet' | 'application' }) {\n    const mini = useMediaQuery(`(max-width: ${mindsBreakPoint}px)`)\n\n    return (\n        <ToolboxHintUnstyled\n            mini={mini}\n            Container={Container}\n            ListItemButton={Item}\n            Typography={Text}\n            ListItemIcon={Icon}\n            category={props.category}\n        />\n    )\n}\n","import { MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { attachReactTreeWithContainer } from '../../../utils/shadow-root/renderInShadowRoot.js'\nimport { startWatch } from '../../../utils/startWatch.js'\nimport { toolboxInSidebarSelector } from '../utils/selector.js'\nimport { ToolboxHintAtMinds } from './ToolboxHint_UI.js'\n\nexport function injectToolboxHintAtMinds(signal: AbortSignal, category: 'wallet' | 'application') {\n    const watcher = new MutationObserverWatcher(toolboxInSidebarSelector())\n    startWatch(watcher, signal)\n    attachReactTreeWithContainer(watcher.firstDOMProxy.afterShadow, { signal }).render(\n        <ToolboxHintAtMinds category={category} />,\n    )\n}\n","import type { RenderFragmentsContextType } from '@masknet/typed-message-react'\nimport { memo } from 'react'\nimport { Link } from '@mui/material'\nimport { useTagEnhancer } from '../../../../shared-ui/TypedMessageRender/Components/Text.js'\n\nexport const MindsRenderFragments: RenderFragmentsContextType = {\n    AtLink: memo(function (props) {\n        const target = '/' + props.children.slice(1)\n        return <Link fontSize=\"inherit\" href={target} children={props.children} />\n    }),\n    HashLink: memo(function (props) {\n        const text = props.children.slice(1)\n        const target = `/discovery/search?q=%23${encodeURIComponent(text)}`\n        const { hasMatch, ...events } = useTagEnhancer('hash', text)\n        return (\n            <Link\n                {...events}\n                fontSize=\"inherit\"\n                href={target}\n                children={props.children}\n                onClick={(e) => {\n                    e.stopPropagation()\n                }}\n            />\n        )\n    }),\n    CashLink: memo(function (props) {\n        const text = props.children.slice(1)\n        const target = `/discovery/search?q=$${encodeURIComponent(text)}`\n        const { hasMatch, ...events } = useTagEnhancer('cash', text)\n        return (\n            <Link\n                {...events}\n                fontSize=\"inherit\"\n                href={target}\n                children={props.children}\n                onClick={(e) => {\n                    e.stopPropagation()\n                }}\n            />\n        )\n    }),\n    Image: () => null,\n}\n","import { MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { searchMindsProfileCover } from '../utils/selector.js'\nimport { attachReactTreeWithContainer } from '../../../utils/shadow-root/renderInShadowRoot.js'\nimport { startWatch } from '../../../utils/startWatch.js'\nimport { ProfileCover } from '../../../components/InjectedComponents/ProfileCover.js'\n\nexport function injectMindsProfileCover(signal: AbortSignal) {\n    const watcher = new MutationObserverWatcher(searchMindsProfileCover())\n    startWatch(watcher, signal)\n    attachReactTreeWithContainer(watcher.firstDOMProxy.afterShadow, { signal }).render(<ProfileCoverAtMinds />)\n}\n\nfunction ProfileCoverAtMinds() {\n    return <ProfileCover />\n}\n","import { noop } from 'lodash-es'\nimport { Flags } from '@masknet/flags'\nimport { DOMProxy, MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { Plugin } from '@masknet/plugin-infra'\nimport { Avatar } from '../../../../components/InjectedComponents/Avatar.js'\nimport { attachReactTreeWithContainer } from '../../../../utils/shadow-root/renderInShadowRoot.js'\nimport { startWatch } from '../../../../utils/startWatch.js'\nimport { inpageAvatarSelector } from '../../utils/selector.js'\n\nexport async function injectAvatar(signal: AbortSignal) {\n    startWatch(\n        new MutationObserverWatcher(inpageAvatarSelector()).useForeach((ele) => {\n            let remover = noop\n            const remove = () => remover()\n\n            const run = async () => {\n                const proxy = DOMProxy({\n                    afterShadowRootInit: Flags.shadowRootInit,\n                })\n                proxy.realCurrent = ele.firstChild as HTMLElement\n                // TODO fetch userId\n                const userId = ''\n\n                const root = attachReactTreeWithContainer(proxy.afterShadow, { untilVisible: true, signal })\n                root.render(\n                    <div\n                        style={{\n                            position: 'absolute',\n                            left: 0,\n                            top: 0,\n                            width: '100%',\n                            height: '100%',\n                            zIndex: 2,\n                        }}>\n                        {userId ? (\n                            <Avatar userId={userId} sourceType={Plugin.SiteAdaptor.AvatarRealmSourceType.Post} />\n                        ) : null}\n                    </div>,\n                )\n                remover = root.destroy\n            }\n\n            run()\n            return {\n                onNodeMutation: run,\n                onTargetChanged: run,\n                onRemove: remove,\n            }\n        }),\n        signal,\n    )\n}\n","/* eslint-disable tss-unused-classes/unused-classes */\nimport type { SiteAdaptorUI } from '@masknet/types'\nimport { makeStyles } from '@masknet/theme'\nimport { EnhanceableSite, ProfileIdentifier } from '@masknet/shared-base'\nimport { activatedSiteAdaptor_state, creator, stateCreator } from '../../site-adaptor-infra/index.js'\nimport { injectPostCommentsDefault } from '../../site-adaptor-infra/defaults/index.js'\nimport { injectPageInspectorDefault } from '../../site-adaptor-infra/defaults/inject/PageInspector.js'\nimport { createTaskStartSetupGuideDefault } from '../../site-adaptor-infra/defaults/inject/StartSetupGuide.js'\nimport { InitAutonomousStateProfiles } from '../../site-adaptor-infra/defaults/state/InitProfiles.js'\nimport { pasteImageToCompositionMinds } from './automation/AttachImageToComposition.js'\nimport { gotoNewsFeedPageMinds } from './automation/gotoNewsFeedPage.js'\nimport { gotoProfilePageMinds } from './automation/gotoProfilePage.js'\nimport { openComposeBoxMinds } from './automation/openComposeBox.js'\nimport { pasteTextToCompositionMinds } from './automation/pasteTextToComposition.js'\nimport { mindsBase } from './base.js'\nimport getSearchedKeywordAtMinds from './collecting/getSearchedKeyword.js'\nimport { IdentityProviderMinds } from './collecting/identity.js'\nimport { ThemeSettingsProviderMinds } from './collecting/theme.js'\nimport { PostProviderMinds } from './collecting/post.js'\nimport { useThemeMindsVariant } from './customization/custom.js'\nimport injectCommentBoxAtMinds from './injection/CommentBox.js'\nimport { injectPostBoxComposed } from './injection/inject.js'\nimport { injectPostInspectorAtMinds } from './injection/PostInspector.js'\nimport { injectPostReplacerAtMinds } from './injection/PostReplacer.js'\nimport { injectSearchResultInspectorAtMinds } from './injection/SearchResultInspector.js'\nimport { injectBannerAtMinds } from './injection/Banner.js'\nimport { injectToolboxHintAtMinds } from './injection/ToolboxHint.js'\nimport { MindsRenderFragments } from './customization/render-fragments.js'\nimport { enableFbStyleTextPayloadReplace } from '../../../shared-ui/TypedMessageRender/transformer.js'\nimport { injectMindsProfileCover } from './injection/ProfileCover.js'\nimport { injectAvatar } from './injection/Avatar/index.js'\nimport { mindsShared } from './shared.js'\n\nconst CurrentVisitingIdentityProviderDefault: SiteAdaptorUI.CollectingCapabilities.IdentityResolveProvider = {\n    hasDeprecatedPlaceholderName: false,\n    recognized: creator.EmptyIdentityResolveProviderState(),\n    start(signal) {},\n}\n\nconst useInjectedDialogClassesOverwriteMinds = makeStyles()((theme) => {\n    const smallQuery = `@media (max-width: ${theme.breakpoints.values.sm}px)`\n    return {\n        root: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            [smallQuery]: {\n                display: 'block !important',\n            },\n        },\n        container: {\n            alignItems: 'center',\n        },\n        paper: {\n            width: '600px !important',\n            minHeight: 400,\n            maxHeight: 620,\n            maxWidth: 'none',\n            boxShadow: 'none',\n            backgroundImage: 'none',\n            [smallQuery]: {\n                display: 'block !important',\n                margin: 12,\n            },\n            '&::-webkit-scrollbar': {\n                display: 'none',\n            },\n        },\n        dialogTitle: {\n            display: 'grid',\n            gridTemplateColumns: '1fr auto 1fr',\n            alignItems: 'center',\n            padding: 16,\n            position: 'relative',\n            background: theme.palette.maskColor.modalTitleBg,\n            borderBottom: 'none',\n            '& > p': {\n                fontSize: 18,\n                lineHeight: '22px',\n                display: 'inline-block',\n                whiteSpace: 'nowrap',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n            },\n            [smallQuery]: {\n                display: 'flex',\n                justifyContent: 'start',\n                maxWidth: 600,\n                margin: '0 auto',\n                padding: '7px 14px 6px 11px !important',\n            },\n        },\n        dialogContent: {\n            backgroundColor: theme.palette.maskColor.bottom,\n            [smallQuery]: {\n                display: 'flex',\n                flexDirection: 'column',\n                maxWidth: 600,\n                margin: '0 auto',\n                padding: '7px 14px 6px',\n            },\n        },\n        dialogActions: {\n            backgroundColor: theme.palette.maskColor.bottom,\n            padding: '6px 16px',\n            [smallQuery]: {\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'space-between',\n                maxWidth: 600,\n                margin: '0 auto',\n                padding: '7px 14px 6px !important',\n            },\n        },\n        dialogBackdropRoot: {\n            backgroundColor: theme.palette.mode === 'dark' ? 'rgba(110, 118, 125, 0.4)' : 'rgba(0, 0, 0, 0.4)',\n        },\n    }\n})\n\nconst mindsUI: SiteAdaptorUI.Definition = {\n    ...mindsBase,\n    ...mindsShared,\n    automation: {\n        maskCompositionDialog: {\n            open: openComposeBoxMinds,\n        },\n        nativeCommentBox: undefined,\n        nativeCompositionDialog: {\n            attachText: pasteTextToCompositionMinds,\n            // TODO: make a better way to detect\n            attachImage: pasteImageToCompositionMinds(),\n        },\n        redirect: {\n            newsFeed: gotoNewsFeedPageMinds,\n            profilePage: gotoProfilePageMinds,\n        },\n    },\n    collecting: {\n        identityProvider: IdentityProviderMinds,\n        postsProvider: PostProviderMinds,\n        themeSettingsProvider: ThemeSettingsProviderMinds,\n        currentVisitingIdentityProvider: CurrentVisitingIdentityProviderDefault,\n        getSearchedKeyword: getSearchedKeywordAtMinds,\n    },\n    customization: {\n        sharedComponentOverwrite: {\n            InjectedDialog: {\n                classes: useInjectedDialogClassesOverwriteMinds,\n            },\n        },\n        componentOverwrite: {\n            RenderFragments: MindsRenderFragments,\n        },\n        useTheme: useThemeMindsVariant,\n    },\n    init(signal) {\n        const profiles = stateCreator.profiles()\n        InitAutonomousStateProfiles(signal, profiles, mindsShared.networkIdentifier)\n        enableFbStyleTextPayloadReplace()\n        return { profiles }\n    },\n    injection: {\n        toolbox: injectToolboxHintAtMinds,\n        profileCover: injectMindsProfileCover,\n        pageInspector: injectPageInspectorDefault(),\n        postInspector: injectPostInspectorAtMinds,\n        postReplacer: injectPostReplacerAtMinds,\n        banner: injectBannerAtMinds,\n        searchResult: injectSearchResultInspectorAtMinds,\n        newPostComposition: {\n            start: injectPostBoxComposed,\n            supportedInputTypes: {\n                text: true,\n                image: true,\n            },\n            supportedOutputTypes: {\n                text: true,\n                image: true,\n            },\n        },\n        setupWizard: createTaskStartSetupGuideDefault(),\n        commentComposition: {\n            compositionBox: injectPostCommentsDefault(),\n            commentInspector: injectCommentBoxAtMinds(),\n        },\n        // NOT SUPPORTED YET\n        userBadge: undefined,\n        avatar: injectAvatar,\n    },\n    configuration: {\n        steganography: {\n            // ! Change this might be a breaking change !\n            password() {\n                const id =\n                    IdentityProviderMinds.recognized.value.identifier?.userId ||\n                    activatedSiteAdaptor_state!.profiles.value?.[0].identifier.userId\n                if (!id) throw new Error('Cannot figure out password')\n                return ProfileIdentifier.of(EnhanceableSite.Minds, id)\n                    .expect(`${id} should be a valid user id`)\n                    .toText()\n            },\n        },\n    },\n}\nexport default mindsUI\n","import { IntervalWatcher, type LiveSelector } from '@dimensiondev/holoflows-kit'\n\nexport function untilElementAvailable(ls: LiveSelector<HTMLElement, boolean>, timeout = 5000) {\n    return new Promise<void>((resolve, reject) => {\n        const w = new IntervalWatcher(ls)\n        setTimeout(() => reject(), timeout)\n        w.useForeach(() => {\n            w.stopWatch()\n            resolve()\n        }).startWatch(500)\n    })\n}\n","import { i18NextInstance } from '@masknet/shared-base'\nimport type { TFunction } from 'i18next'\nimport type en from '../locales/en-US.json'\n\ndeclare let f: TFunction<any>\n/** @deprecated Prefer useMaskTrans() */\nexport const i18n = i18NextInstance as {\n    t: typeof f<keyof typeof en, {}, string>\n}\n"],"names":["makeStyles","Box","InputBase","activatedSiteAdaptorUI","useMaskSharedTrans","EnhanceableSite","useStyles","_theme","site","root","flex","fontSize","background","width","Minds","height","borderRadius","padding","boxSizing","marginTop","color","input","opacity","CommentBox","props","classes","networkIdentifier","t","sx","display","className","inputProps","placeholder","comment_box__placeholder","onKeyDown","event","node","target","value","key","onSubmit","memo","useCallback","useContext","usePostInfoDetails","PostInfoContext","MutationObserverWatcher","MaskMessages","startWatch","attachReactTreeWithContainer","defaultOnPasteToCommentBox","encryptedComment","_current","_realCurrent","events","autoPasteFailed","sendToLocal","text","injectCommentBoxDefaultFactory","onPasteToCommentBox","additionPropsToCommentBox","useCustomStyles","mountPointCallback","CommentBoxUI","dom","info","encryptComment","onCallback","content","signal","current","comment","commentBoxSelector","commentBoxWatcher","clone","document","body","useForeach","meta","afterShadow","render","Provider","realCurrent","destroy","useEffect","useAsync","Chip","Lock","useValueRef","useStyle","label","overflowWrap","whiteSpace","textOverflow","PostCommentDecrypted","undefined","ChipProps","data-testid","icon","children","PostComment","needZip","decrypt","decryptComment","PostInfoProvider","ValueRef","collectNodeText","injectPostCommentsDefault","config","additionalPropsToPostComment","PostCommentDefault","additional","injectPostComments","selector","commentsSelector","commentWatcher","commentNode","commentRef","needZipF","post","onNodeMutation","onTargetChanged","onRemove","LiveSelector","querySelector","singleMode","ls","enableSingleMode","rootSelector","composerModalSelector","postEditorInDialogSelector","postEditorInTimelineSelector","toolboxInSidebarSelector","postEditorDraftContentSelector","handleSelector","selfInfoSelectors","handle","evaluate","getAttribute","slice","replace","avatar","src","inpageAvatarSelector","querySelectorAll","composeButtonSelector","join","composeTextareaSelector","composeDialogIndicatorSelector","composerModalTextAreaSelector","composerPreviewSelector","searchResultHeadingSelector","postContentSelector","searchMindsProfileCover","getEditorContent","editorNode","isCompose","hasFocus","x","activeElement","hasEditor","untilElementAvailable","selectElementContents","delay","inputText","pasteTextToCompositionMinds","opt","interval","timeout","worker","abort","checkSignal","aborted","Error","click","i","textarea","focus","SimulateTextareaInput","id","replaceAll","includes","fail","e","recover","AbortSignal","then","error","getElementById","dispatchEvent","Event","bubbles","downloadUrl","hasSucceed","pasteImageToCompositionMinds","url","relatedTextPayload","image","data","ClipboardItem","type","navigator","clipboard","write","execCommand","writeText","gotoNewsFeedPageMinds","path","location","pathname","assign","gotoProfilePageMinds","profile","userId","setTimeout","startsWith","makeTypedMessageText","CrossIsolationMessages","waitDocumentReadyState","i18n","openComposeBoxMinds","options","composeTextarea","composeButton","composeIndicator","alert","compositionDialogEvent","reason","open","getSearchedKeywordAtMinds","params","URLSearchParams","search","get","ProfileIdentifier","creator","mindsBase","resolveLastRecognizedIdentityInner","ref","cancel","identifier","of","unwrapOr","nickname","user","getUserByScreenName","username","name","avatar_url","medium","createWatcher","addListener","childList","subtree","IdentityProviderMinds","hasDeprecatedPlaceholderName","recognized","EmptyIdentityResolveProviderState","start","fromRGB","getBackgroundColor","isDark","ThemeMode","resolveThemeSettingsInner","updateThemeColor","backgroundColor","mode","Dark","Light","observer","MutationObserver","mutations","forEach","mutation","observe","attributes","attributeOldValue","attributeFilter","addEventListener","disconnect","ThemeSettingsProviderMinds","EmptyThemeSettingsProviderState","isNull","usernameValidator","v","exec","length","urlcat","origins","MindsAdaptor","declarativePermissions","homepage","isSocialNetwork","sortIndex","getProfilePage","URL","getShareLinkURL","message","intentUrl","openWindow","createSiteAdaptorSpecializedPostContext","hasPayloadLike","getPostURL","postId","mindsShared","utils","isValidUsername","share","createPostContext","getURLFromPostIdentifier","flattenDeep","isTypedMessageEmpty","isTypedMessageText","makeTypedMessageAnchor","makeTypedMessageEmpty","assertNonNull","parseNameArea","nameArea","displayNameNode","innerText","href","split","postIdParser","idNode","postNameParser","postAvatarParser","avatarElement","resolveType","postContentMessageParser","make","nodeType","Node","TEXT_NODE","nodeValue","HTMLAnchorElement","anchor","textContent","HTMLImageElement","matched","match","points","map","point","Number","parseInt","String","fromCodePoint","childNodes","flattened","Array","from","every","flatMap","postParser","pid","messages","filter","makeTypedMessagePromise","makeTypedMessageTuple","makeTypedMessageTupleFromList","makeTypedMessageImage","createRefsForCreatePostContext","getCurrentIdentifier","Services","PostProviderMinds","posts","EmptyPostProviderState","collectPostsMindsInner","store","metadata","activitySelector","closest","activityNode","parentElement","subscriptions","postInfo","comments","rootElement","suggestedInjectionPoint","set","collectLinks","links","rel","seen","Set","has","add","postMetadataMentionedLinks","collectPostInfo","postBy","postID","avatarURL","currentProfile","Identity","updateProfileInfo","linkedPersona","createNewRelation","images","getMetadataImages","urls","postMetadataImages","catch","postMessage","run","delete","imgNodes","imgUrls","Boolean","useMemo","produce","setAutoFreeze","unstable_createMuiStrictModeTheme","shade","toRGB","useThemeSettings","useThemeMindsVariant","baseTheme","themeSettings","primaryColorRGB","primaryContrastColorRGB","MindsTheme","theme","palette","primary","light","main","dark","contrastText","shape","breakpoints","values","xs","sm","md","lg","xl","components","MuiTypography","styleOverrides","fontFamily","MuiPaper","defaultProps","elevation","MuiTab","textTransform","pasteText","pasteToCommentBoxMinds","rootNode","injectCommentBoxAtMinds","border","margin","fontWeight","Composition","injectPostDialogAtMinds","renderPostDialogTo","watcher","firstDOMProxy","requireClipboardPermission","PostDialogHint","isMinds","injectPostDialogHintAtMinds","renderPostDialogHintTo","PostDialogHintAtMinds","buttonTransform","transform","iconButton","onHintButtonClicked","disableGuideTip","size","iconType","tooltip","disabled","injectPostBoxComposed","injectPostInspectorDefault","injectPostInspectorAtMinds","injectPostReplacer","resolveContentNode","injectPostReplacerAtMinds","zipPost","destroyed","langNode","style","unzipPost","SearchResultInspector","injectSearchResultInspectorAtMinds","beforeShadow","Banner","injectBannerAtMinds","injectBanner","MindsBannerTimeline","MindsBannerPopup","element","buttonText","marginRight","buttonNoMargin","ToolboxHintUnstyled","styled","ListItemButton","Typography","ListItemIcon","useMediaQuery","mindsBreakPoint","Container","Item","Text","Icon","ToolboxHintAtMinds","mini","category","injectToolboxHintAtMinds","Link","useTagEnhancer","MindsRenderFragments","AtLink","HashLink","encodeURIComponent","hasMatch","onClick","stopPropagation","CashLink","Image","ProfileCover","injectMindsProfileCover","ProfileCoverAtMinds","noop","Flags","DOMProxy","Plugin","Avatar","injectAvatar","ele","remover","remove","proxy","afterShadowRootInit","shadowRootInit","firstChild","untilVisible","div","position","left","top","zIndex","sourceType","SiteAdaptor","AvatarRealmSourceType","Post","activatedSiteAdaptor_state","stateCreator","injectPageInspectorDefault","createTaskStartSetupGuideDefault","InitAutonomousStateProfiles","enableFbStyleTextPayloadReplace","CurrentVisitingIdentityProviderDefault","useInjectedDialogClassesOverwriteMinds","smallQuery","alignItems","justifyContent","container","paper","minHeight","maxHeight","maxWidth","boxShadow","backgroundImage","dialogTitle","gridTemplateColumns","maskColor","modalTitleBg","borderBottom","lineHeight","overflow","dialogContent","bottom","flexDirection","dialogActions","dialogBackdropRoot","mindsUI","automation","maskCompositionDialog","nativeCommentBox","nativeCompositionDialog","attachText","attachImage","redirect","newsFeed","profilePage","collecting","identityProvider","postsProvider","themeSettingsProvider","currentVisitingIdentityProvider","getSearchedKeyword","customization","sharedComponentOverwrite","InjectedDialog","componentOverwrite","RenderFragments","useTheme","init","profiles","injection","toolbox","profileCover","pageInspector","postInspector","postReplacer","banner","searchResult","newPostComposition","supportedInputTypes","supportedOutputTypes","setupWizard","commentComposition","compositionBox","commentInspector","userBadge","configuration","steganography","password","expect","toText","IntervalWatcher","Promise","resolve","reject","w","stopWatch","i18NextInstance"],"sourceRoot":"","x_google_ignoreList":[2]}