{"version":3,"file":"bundled/chunk.6482.js","mappings":"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","sources":["webpack://mask-network/./packages/plugin-infra/src/utils/message.ts","webpack://mask-network/./packages/plugins/Transak/src/hooks/useTransakURL.ts","webpack://mask-network/./packages/plugins/Transak/src/SiteAdaptor/BuyTokenDialog.tsx","webpack://mask-network/./packages/plugins/Transak/src/SiteAdaptor/BuyTokenGlobalInjection.tsx","webpack://mask-network/./packages/plugins/Transak/src/SiteAdaptor/index.tsx","webpack://mask-network/./packages/plugins/Transak/src/messages.ts","webpack://mask-network/./packages/shared-base-ui/src/hooks/useRemoteControlledDialog.ts"],"sourcesContent":["import { WebExtensionMessage } from '@dimensiondev/holoflows-kit'\nimport type { PluginMessageEmitterItem } from '@masknet/plugin-infra'\nimport { serializer } from '@masknet/shared-base'\n\n/** @internal */\nexport const DOMAIN_RPC = Symbol('create RPC instead of normal message')\n/**\n * Create a plugin message emitter\n * @param pluginID The plugin ID\n *\n * @example\n * export const MyPluginMessage = getPluginMessage(PLUGIN_ID)\n */\nexport let getPluginMessage = <T>(pluginID: string, type?: typeof DOMAIN_RPC): PluginMessageEmitter<T> => {\n    const domain = (type === DOMAIN_RPC ? '@plugin-rpc/' : '@plugin/') + pluginID\n    if (cache.has(domain)) return cache.get(domain) as any\n\n    const messageCenter = new WebExtensionMessage<T>({ domain })\n    const events = messageCenter.events\n    messageCenter.serialization = serializer\n    cache.set(domain, events)\n    return events\n}\n\nexport function __workaround__replaceImplementationOfCreatePluginMessage__(\n    newImpl: (pluginID: string) => PluginMessageEmitter<any>,\n) {\n    getPluginMessage = newImpl\n}\nexport type PluginMessageEmitter<T> = { readonly [key in keyof T]: PluginMessageEmitterItem<T[key]> }\nconst cache = new Map<string, PluginMessageEmitter<unknown>>()\n\n// TODO: this type should be defined here, not shared-base\nexport type { PluginMessageEmitterItem } from '@masknet/shared-base'\n","import { useMemo } from 'react'\nimport stringify from 'json-stable-stringify'\nimport { rgbToHex, useTheme } from '@mui/material'\nimport { TRANSAK_API_KEY_PRODUCTION, TRANSAK_API_KEY_STAGING } from '../constants.js'\nimport { formatEthereumAddress } from '@masknet/web3-shared-evm'\nimport type { TransakConfig } from '../types.js'\n\nconst HOST_MAP = {\n    production: 'https://global.transak.com',\n    development: 'https://staging-global.transak.com',\n    test: 'https://development-global.transak.com',\n}\n\nconst DEFAULT_PARAMETERS: TransakConfig = {\n    apiKey: process.env.NODE_ENV === 'production' ? TRANSAK_API_KEY_PRODUCTION : TRANSAK_API_KEY_STAGING,\n    environment: process.env.NODE_ENV === 'production' ? 'PRODUCTION' : 'STAGING',\n    defaultFiatAmount: 100,\n    defaultCryptoCurrency: 'ETH',\n    hostURL: location.origin,\n    redirectURL: location.origin,\n    widgetWidth: '100%',\n    widgetHeight: '630px',\n    hideMenu: false,\n    excludeFiatCurrencies: 'KRW',\n}\n\nexport function useTransakURL(config?: Partial<TransakConfig>) {\n    const theme = useTheme()\n    const search = useMemo(() => {\n        const config_: TransakConfig = {\n            ...DEFAULT_PARAMETERS,\n            themeColor: rgbToHex(theme.palette.maskColor.dark).slice(1),\n            exchangeScreenTitle: config?.walletAddress\n                ? `Buy Crypto to ${formatEthereumAddress(config.walletAddress, 4)}`\n                : void 0,\n            ...config,\n        }\n        const params = new URLSearchParams()\n        Object.entries(config_).forEach(([key, value = '']) => params.append(key, String(value)))\n        return params.toString()\n    }, [theme.palette.primary.main, stringify(config)])\n    return `${HOST_MAP[process.env.NODE_ENV]}?${search}`\n}\n","import { InjectedDialog } from '@masknet/shared'\nimport { DialogContent, IconButton } from '@mui/material'\nimport { makeStyles } from '@masknet/theme'\nimport { Close as CloseIcon } from '@mui/icons-material'\nimport { useTransakURL } from '../hooks/useTransakURL.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    dialogPaper: {\n        width: '500px !important',\n        overflow: 'inherit',\n    },\n    dialogContent: {\n        padding: '0 !important',\n    },\n    close: {\n        color: `${theme.palette.common.white} !important`,\n        backgroundColor: `${theme.palette.maskColor.dark} !important`,\n        top: theme.spacing(-2),\n        right: theme.spacing(-2),\n        position: 'absolute',\n    },\n    content: {\n        width: '100%',\n        padding: 0,\n        backgroundColor: theme.palette.common.white,\n        position: 'relative',\n        '::-webkit-scrollbar': {\n            display: 'none',\n        },\n        overflow: 'inherit',\n        borderRadius: 12,\n    },\n    frame: {\n        display: 'block',\n        width: '100%',\n        height: 630,\n        border: 0,\n        borderRadius: 12,\n    },\n}))\n\ninterface BuyTokenDialogProps extends withClasses<'root'> {\n    code: string\n    address: string\n    open: boolean\n    onClose(): void\n}\n\nexport function BuyTokenDialog(props: BuyTokenDialogProps) {\n    const { classes } = useStyles(undefined, { props })\n    const { code, address, open, onClose } = props\n\n    const transakURL = useTransakURL({\n        defaultCryptoCurrency: code,\n        walletAddress: address,\n    })\n\n    return (\n        <div className={classes.root}>\n            <InjectedDialog\n                open={open}\n                onClose={onClose}\n                classes={{\n                    paper: classes.dialogPaper,\n                    dialogContent: classes.dialogContent,\n                }}\n                disableBackdropClick>\n                <DialogContent className={classes.content}>\n                    <IconButton className={classes.close} size=\"small\" onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                    {transakURL ? <iframe className={classes.frame} src={transakURL} /> : null}\n                </DialogContent>\n            </InjectedDialog>\n        </div>\n    )\n}\n","import { memo, useState } from 'react'\nimport { useRemoteControlledDialog } from '@masknet/shared-base-ui'\nimport { PluginTransakMessages } from '../messages.js'\nimport { BuyTokenDialog } from './BuyTokenDialog.js'\n\nexport const BuyTokenGlobalInjection = memo(function BuyTokenGlobalInjection() {\n    const [code, setCode] = useState('ETH')\n    const [address, setAddress] = useState('')\n    const { open, closeDialog } = useRemoteControlledDialog(PluginTransakMessages.buyTokenDialogUpdated, (ev) => {\n        if (!ev.open) return\n        setCode(ev.code ?? 'ETH')\n        setAddress(ev.address)\n    })\n    if (!open) return null\n    return <BuyTokenDialog open onClose={closeDialog} code={code} address={address} />\n})\n","import { Trans } from 'react-i18next'\nimport { Icons } from '@masknet/icons'\nimport type { Plugin } from '@masknet/plugin-infra'\nimport { ApplicationEntry } from '@masknet/shared'\nimport { useRemoteControlledDialog } from '@masknet/shared-base-ui'\nimport { base } from '../base.js'\nimport { PluginTransakMessages } from '../messages.js'\nimport { BuyTokenGlobalInjection } from './BuyTokenGlobalInjection.js'\nimport { PluginID } from '@masknet/shared-base'\n\nconst site: Plugin.SiteAdaptor.Definition = {\n    ...base,\n    init(signal) {},\n    GlobalInjection: BuyTokenGlobalInjection,\n    ApplicationEntries: [\n        (() => {\n            const icon = <Icons.Transak size={36} />\n            const name = <Trans i18nKey=\"plugin_transak_name\" ns={PluginID.Transak} />\n            const iconFilterColor = 'rgba(69, 110, 255, 0.3)'\n            return {\n                ApplicationEntryID: base.ID,\n                RenderEntryComponent(EntryComponentProps) {\n                    const { openDialog } = useRemoteControlledDialog(PluginTransakMessages.buyTokenDialogUpdated)\n\n                    return (\n                        <ApplicationEntry\n                            title={name}\n                            icon={icon}\n                            iconFilterColor={iconFilterColor}\n                            {...EntryComponentProps}\n                            onClick={\n                                EntryComponentProps.onClick\n                                    ? () => EntryComponentProps.onClick?.(openDialog)\n                                    : openDialog\n                            }\n                        />\n                    )\n                },\n                appBoardSortingDefaultPriority: 8,\n                marketListSortingPriority: 6,\n                tutorialLink: 'https://transak.com/',\n                icon,\n                description: <Trans i18nKey=\"plugin_transak_description\" />,\n                name,\n                category: 'dapp',\n                iconFilterColor,\n            }\n        })(),\n    ],\n}\n\nexport default site\n","import { getPluginMessage, type PluginMessageEmitter } from '@masknet/plugin-infra'\nimport { PLUGIN_ID } from './constants.js'\n\ntype BuyTokenDialogEvent =\n    | {\n          open: true\n          code?: string\n          address: string\n      }\n    | {\n          open: false\n      }\n\ninterface PluginTransakMessage {\n    buyTokenDialogUpdated: BuyTokenDialogEvent\n}\n\nimport.meta.webpackHot?.accept()\nexport const PluginTransakMessages: PluginMessageEmitter<PluginTransakMessage> = getPluginMessage(PLUGIN_ID)\n","import type { PluginMessageEmitterItem } from '@masknet/shared-base'\nimport { useState, useEffect, useCallback, useRef } from 'react'\nimport { v4 as uuid } from 'uuid'\n\nexport interface RemoteControlledDialogEvent {\n    open: boolean\n    hookId?: string\n}\n\ninterface Result<T> {\n    open: boolean\n    closeDialog: () => void\n    openDialog: () => void\n    setDialog: (ev: T) => void\n}\n\n/**\n * Use a dialog state controlled by remote\n */\nexport function useRemoteControlledDialog<T extends { open: boolean }>(\n    event: PluginMessageEmitterItem<T>,\n    onUpdateByRemote?: (ev: T) => void,\n    tabType: 'self' | 'activated' = 'self',\n): Result<T> {\n    const [HOOK_ID] = useState(uuid) // create an uuid for every hook\n    const [open, setOpen] = useState(false)\n\n    useEffect(\n        () =>\n            event.on((_ev: T) => {\n                const event = _ev as unknown as RemoteControlledDialogEvent\n\n                // ignore the event from the same hook\n                if (event.hookId === HOOK_ID) return\n\n                setOpen(event.open)\n                onUpdateByRemote?.(_ev)\n            }),\n        [onUpdateByRemote, event, HOOK_ID],\n    )\n\n    const timer = useRef<ReturnType<typeof setTimeout> | null>(null)\n    const onUpdateByLocal = useCallback(\n        (ev: T) => {\n            setOpen(ev.open)\n\n            const timer_ = timer.current\n            if (timer_ !== null) clearTimeout(timer_)\n            timer.current = setTimeout(() => {\n                const payload: T & RemoteControlledDialogEvent = {\n                    hookId: HOOK_ID,\n                    ...ev,\n                }\n                tabType === 'self' ? event.sendToLocal(payload) : event.sendToVisiblePages(payload)\n            }, 100)\n        },\n        [event, tabType, HOOK_ID],\n    )\n    const openDialog = useCallback(() => {\n        onUpdateByLocal({ open: true } as T)\n    }, [])\n    const closeDialog = useCallback(() => {\n        onUpdateByLocal({ open: false } as T)\n    }, [])\n\n    return {\n        open,\n        openDialog,\n        closeDialog,\n        setDialog: onUpdateByLocal,\n    }\n}\n"],"names":["WebExtensionMessage","serializer","DOMAIN_RPC","Symbol","getPluginMessage","pluginID","type","domain","cache","has","get","messageCenter","events","serialization","set","__workaround__replaceImplementationOfCreatePluginMessage__","newImpl","Map","useMemo","stringify","rgbToHex","useTheme","TRANSAK_API_KEY_PRODUCTION","TRANSAK_API_KEY_STAGING","formatEthereumAddress","HOST_MAP","production","development","test","DEFAULT_PARAMETERS","apiKey","process","env","NODE_ENV","environment","defaultFiatAmount","defaultCryptoCurrency","hostURL","location","origin","redirectURL","widgetWidth","widgetHeight","hideMenu","excludeFiatCurrencies","useTransakURL","config","theme","search","config_","themeColor","palette","maskColor","dark","slice","exchangeScreenTitle","walletAddress","params","URLSearchParams","Object","entries","forEach","key","value","append","String","toString","primary","main","InjectedDialog","DialogContent","IconButton","makeStyles","Close","CloseIcon","useStyles","dialogPaper","width","overflow","dialogContent","padding","close","color","common","white","backgroundColor","top","spacing","right","position","content","display","borderRadius","frame","height","border","BuyTokenDialog","props","classes","undefined","code","address","open","onClose","transakURL","div","className","root","paper","disableBackdropClick","size","onClick","iframe","src","memo","useState","useRemoteControlledDialog","PluginTransakMessages","BuyTokenGlobalInjection","setCode","setAddress","closeDialog","buyTokenDialogUpdated","ev","Trans","Icons","ApplicationEntry","base","PluginID","site","init","signal","GlobalInjection","ApplicationEntries","icon","Transak","name","i18nKey","ns","iconFilterColor","ApplicationEntryID","ID","RenderEntryComponent","EntryComponentProps","openDialog","title","appBoardSortingDefaultPriority","marketListSortingPriority","tutorialLink","description","category","PLUGIN_ID","webpackHot","accept","useEffect","useCallback","useRef","v4","uuid","event","onUpdateByRemote","tabType","HOOK_ID","setOpen","on","_ev","hookId","timer","onUpdateByLocal","timer_","current","clearTimeout","setTimeout","payload","sendToLocal","sendToVisiblePages","setDialog"],"sourceRoot":"","x_google_ignoreList":[]}