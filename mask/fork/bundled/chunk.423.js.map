{"version":3,"file":"bundled/chunk.423.js","mappings":"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","sources":["webpack://mask-network/./packages/mask/popups/pages/Personas/Logout/index.tsx"],"sourcesContent":["import { memo, useCallback, useMemo, useState } from 'react'\nimport { useAsyncFn } from 'react-use'\nimport { Trans } from 'react-i18next'\nimport { useNavigate } from 'react-router-dom'\nimport { first } from 'lodash-es'\nimport { useContainer } from 'unstated-next'\nimport { Icons } from '@masknet/icons'\nimport { ActionButton, makeStyles, usePopupCustomSnackbar } from '@masknet/theme'\nimport { PersonaContext } from '@masknet/shared'\nimport { Box, Button, Link, Typography, useTheme } from '@mui/material'\nimport { isSameAddress } from '@masknet/web3-shared-base'\nimport { PopupRoutes, type PersonaInformation, type Wallet, PopupModalRoutes } from '@masknet/shared-base'\nimport { useWallet, useWallets, useWeb3State } from '@masknet/web3-hooks-base'\nimport { ExplorerResolver, Providers, Web3 } from '@masknet/web3-providers'\nimport { type ChainId, ProviderType, formatEthereumAddress } from '@masknet/web3-shared-evm'\nimport { useMaskSharedTrans, UserContext } from '../../../../shared-ui/index.js'\nimport Services from '#services'\nimport { useTitle, PopupContext, useHasPassword } from '../../../hooks/index.js'\nimport { PersonaAvatar } from '../../../components/PersonaAvatar/index.js'\nimport { PasswordField } from '../../../components/PasswordField/index.js'\nimport { BottomController } from '../../../components/BottomController/index.js'\nimport { useModalNavigate } from '../../../components/index.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    infoBox: {\n        background: theme.palette.maskColor.modalTitleBg,\n        borderRadius: 8,\n        padding: theme.spacing(1.5),\n        display: 'flex',\n        alignItems: 'center',\n        columnGap: theme.spacing(1),\n        marginBottom: theme.spacing(1.5),\n    },\n    wallets: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(2, 1fr)',\n        columnGap: theme.spacing(1.5),\n    },\n    tips: {\n        fontSize: 14,\n        lineHeight: '20px',\n        color: theme.palette.maskColor.danger,\n        margin: theme.spacing(2, 0),\n        wordWrap: 'break-word',\n    },\n}))\n\nconst Logout = memo(() => {\n    const t = useMaskSharedTrans()\n    const { currentPersona } = PersonaContext.useContainer()\n    const navigate = useNavigate()\n    const wallet = useWallet()\n    const wallets = useWallets()\n    const { Provider } = useWeb3State()\n    const { smartPayChainId } = useContainer(PopupContext)\n    const { hasPassword, isLoading: hasPasswordLoading } = useHasPassword()\n\n    const { user } = useContainer(UserContext)\n    const { showSnackbar } = usePopupCustomSnackbar()\n\n    const manageWallets = useMemo(() => {\n        return wallets.filter((x) => isSameAddress(x.owner, currentPersona?.address))\n    }, [wallets, currentPersona])\n\n    const [{ loading }, onLogout] = useAsyncFn(async () => {\n        try {\n            if (!currentPersona) return\n            if (currentPersona.address) {\n                if (isSameAddress(currentPersona.address, wallet?.owner)) {\n                    const newWallet = first(wallets)\n                    await Web3.connect({\n                        account: newWallet?.address,\n                        chainId: newWallet?.owner ? smartPayChainId : undefined,\n                        providerType: ProviderType.MaskWallet,\n                    })\n                }\n\n                if (manageWallets.length) {\n                    const maskProvider = Providers[ProviderType.MaskWallet]\n                    await maskProvider?.removeWallets(manageWallets)\n                }\n            }\n            await Services.Identity.logoutPersona(currentPersona.identifier)\n            const currentPersonaIdentifier = await Services.Settings.getCurrentPersonaIdentifier()\n            if (!currentPersonaIdentifier) {\n                const lastCreatedPersona = await Services.Identity.queryLastPersonaCreated()\n                await Services.Settings.setCurrentPersonaIdentifier(lastCreatedPersona)\n            }\n\n            showSnackbar(t.popups_log_out_successfully())\n            navigate(PopupRoutes.Personas, { replace: true })\n        } catch {\n            showSnackbar(t.popups_log_out_failed(), { variant: 'error' })\n        }\n    }, [currentPersona, Provider, wallet, wallets, smartPayChainId, manageWallets.length])\n\n    return (\n        <LogoutUI\n            chainId={smartPayChainId}\n            manageWallets={manageWallets}\n            currentPersona={currentPersona}\n            backupPassword={user.backupPassword ?? ''}\n            verifyPaymentPassword={Services.Wallet.verifyPassword}\n            loading={loading || hasPasswordLoading}\n            hasPassword={hasPassword}\n            onLogout={onLogout}\n            onCancel={() => navigate(-1)}\n        />\n    )\n})\n\ninterface LogoutUIProps {\n    chainId?: ChainId\n    manageWallets: Wallet[]\n    currentPersona?: PersonaInformation\n    verifyPaymentPassword: (password: string) => Promise<boolean>\n    backupPassword: string\n    loading: boolean\n    hasPassword?: boolean\n    onCancel: () => void\n    onLogout: () => void\n}\n\nconst LogoutUI = memo<LogoutUIProps>(\n    ({\n        backupPassword,\n        loading,\n        onLogout,\n        hasPassword,\n        onCancel,\n        currentPersona,\n        manageWallets,\n        verifyPaymentPassword,\n        chainId,\n    }) => {\n        const t = useMaskSharedTrans()\n        const theme = useTheme()\n        const modalNavigate = useModalNavigate()\n        const { classes } = useStyles()\n        const [password, setPassword] = useState('')\n        const [paymentPassword, setPaymentPassword] = useState('')\n        const [error, setError] = useState(false)\n        const [paymentPasswordError, setPaymentPasswordError] = useState('')\n\n        useTitle(t.popups_log_out())\n\n        const onConfirm = useCallback(async () => {\n            if (manageWallets.length) {\n                if (hasPassword) {\n                    const verified = await verifyPaymentPassword(paymentPassword)\n                    if (!verified) {\n                        setPaymentPassword(t.popups_wallet_persona_log_out_error_payment_password())\n                        return\n                    }\n                } else if (!backupPassword) {\n                    modalNavigate(PopupModalRoutes.SetBackupPassword, { to: PopupRoutes.ExportPrivateKey })\n                    return\n                }\n            }\n            if (backupPassword && backupPassword !== password) {\n                setError(true)\n                return\n            }\n\n            onLogout()\n            return\n        }, [onLogout, backupPassword, password, paymentPassword, manageWallets.length, hasPassword])\n\n        const disabled = useMemo(() => {\n            if (loading || error || paymentPasswordError) return true\n            if (manageWallets.length) {\n                if (hasPassword) return !paymentPassword.length\n                if (!backupPassword) return false\n            }\n            if (backupPassword) return !password.length\n            return false\n        }, [\n            loading,\n            manageWallets,\n            backupPassword,\n            hasPassword,\n            error,\n            paymentPasswordError,\n            paymentPassword,\n            password,\n        ])\n\n        const passwordField = useMemo(() => {\n            if (manageWallets.length) {\n                if (hasPassword) {\n                    return (\n                        <PasswordField\n                            placeholder={t.popups_wallet_logout_input_payment_password()}\n                            value={paymentPassword}\n                            error={!!paymentPasswordError}\n                            helperText={paymentPasswordError}\n                            onChange={(e) => {\n                                if (paymentPasswordError) setPaymentPasswordError('')\n                                setPaymentPassword(e.target.value)\n                            }}\n                        />\n                    )\n                } else if (backupPassword) {\n                    return (\n                        <PasswordField\n                            placeholder={t.popups_wallet_backup_input_password()}\n                            value={password}\n                            onChange={(e) => {\n                                if (error) setError(false)\n                                setPassword(e.target.value)\n                            }}\n                            error={error}\n                            helperText={error ? t.popups_password_do_not_match() : ''}\n                        />\n                    )\n                }\n\n                return\n            }\n\n            if (backupPassword) {\n                return (\n                    <PasswordField\n                        placeholder={t.popups_wallet_backup_input_password()}\n                        value={password}\n                        onChange={(e) => {\n                            if (error) setError(false)\n                            setPassword(e.target.value)\n                        }}\n                        error={error}\n                        helperText={error ? t.popups_password_do_not_match() : ''}\n                    />\n                )\n            }\n\n            return\n        }, [manageWallets, hasPassword, paymentPassword, paymentPasswordError, backupPassword, password, error, t])\n\n        return (\n            <Box flex={1} maxHeight=\"544px\" overflow=\"auto\" data-hide-scrollbar>\n                <Box p={2} pb={11}>\n                    <Box className={classes.infoBox}>\n                        <PersonaAvatar size={30} avatar={currentPersona?.avatar} />\n                        <Box>\n                            <Typography fontWeight={700}>{currentPersona?.nickname}</Typography>\n                            <Typography fontSize={10} color={theme.palette.maskColor.third} lineHeight=\"10px\">\n                                {currentPersona?.identifier.rawPublicKey}\n                            </Typography>\n                        </Box>\n                    </Box>\n                    {manageWallets.length ? (\n                        <Box className={classes.wallets}>\n                            {manageWallets.map((x, index) => (\n                                <Box className={classes.infoBox} key={index}>\n                                    <Icons.SmartPay size={30} />\n                                    <Box>\n                                        <Typography fontWeight={700}>{x.name}</Typography>\n                                        <Typography\n                                            marginTop={0.5}\n                                            color={theme.palette.maskColor.second}\n                                            fontWeight={700}\n                                            fontSize={10}\n                                            lineHeight=\"10px\"\n                                            display=\"flex\"\n                                            alignItems=\"center\">\n                                            {formatEthereumAddress(x.address, 4)}\n                                            {chainId ? (\n                                                <Link\n                                                    style={{\n                                                        width: 12,\n                                                        height: 12,\n                                                        color: theme.palette.maskColor.main,\n                                                        display: 'flex',\n                                                        marginLeft: 4,\n                                                    }}\n                                                    href={ExplorerResolver.addressLink(chainId, x.address)}\n                                                    target=\"_blank\"\n                                                    rel=\"noopener noreferrer\">\n                                                    <Icons.LinkOut size={12} />\n                                                </Link>\n                                            ) : null}\n                                        </Typography>\n                                    </Box>\n                                </Box>\n                            ))}\n                        </Box>\n                    ) : null}\n                    <Typography className={classes.tips}>\n                        {t.popups_log_out_tips()}\n                        {currentPersona && manageWallets.length ? (\n                            <Typography mt={2}>\n                                <Trans\n                                    i18nKey={\n                                        manageWallets.length > 1\n                                            ? 'popups_log_out_with_smart_pay_tips_other'\n                                            : 'popups_log_out_with_smart_pay_tips_one'\n                                    }\n                                    values={{\n                                        persona: currentPersona.nickname,\n                                    }}\n                                />\n                            </Typography>\n                        ) : null}\n                    </Typography>\n                    {passwordField}\n                </Box>\n                <BottomController>\n                    <Button variant=\"outlined\" fullWidth onClick={onCancel}>\n                        {t.cancel()}\n                    </Button>\n                    <ActionButton\n                        variant=\"contained\"\n                        color={!backupPassword && manageWallets.length && !hasPassword ? 'primary' : 'error'}\n                        fullWidth\n                        onClick={onConfirm}\n                        disabled={disabled}>\n                        {!backupPassword && manageWallets.length && !hasPassword ? t.backup() : t.popups_log_out()}\n                    </ActionButton>\n                </BottomController>\n            </Box>\n        )\n    },\n)\n\nexport default Logout\n"],"names":["memo","useCallback","useMemo","useState","useAsyncFn","Trans","useNavigate","first","useContainer","Icons","ActionButton","makeStyles","usePopupCustomSnackbar","PersonaContext","Box","Button","Link","Typography","useTheme","isSameAddress","PopupRoutes","PopupModalRoutes","useWallet","useWallets","useWeb3State","ExplorerResolver","Providers","Web3","ProviderType","formatEthereumAddress","useMaskSharedTrans","UserContext","Services","useTitle","PopupContext","useHasPassword","PersonaAvatar","PasswordField","BottomController","useModalNavigate","useStyles","theme","infoBox","background","palette","maskColor","modalTitleBg","borderRadius","padding","spacing","display","alignItems","columnGap","marginBottom","wallets","gridTemplateColumns","tips","fontSize","lineHeight","color","danger","margin","wordWrap","Logout","t","currentPersona","navigate","wallet","Provider","smartPayChainId","hasPassword","isLoading","hasPasswordLoading","user","showSnackbar","manageWallets","filter","x","owner","address","loading","onLogout","newWallet","connect","account","chainId","undefined","providerType","MaskWallet","length","maskProvider","removeWallets","Identity","logoutPersona","identifier","currentPersonaIdentifier","Settings","getCurrentPersonaIdentifier","lastCreatedPersona","queryLastPersonaCreated","setCurrentPersonaIdentifier","popups_log_out_successfully","Personas","replace","popups_log_out_failed","variant","LogoutUI","backupPassword","verifyPaymentPassword","Wallet","verifyPassword","onCancel","modalNavigate","classes","password","setPassword","paymentPassword","setPaymentPassword","error","setError","paymentPasswordError","setPaymentPasswordError","popups_log_out","onConfirm","verified","popups_wallet_persona_log_out_error_payment_password","SetBackupPassword","to","ExportPrivateKey","disabled","passwordField","placeholder","popups_wallet_logout_input_payment_password","value","helperText","onChange","e","target","popups_wallet_backup_input_password","popups_password_do_not_match","flex","maxHeight","overflow","data-hide-scrollbar","p","pb","className","size","avatar","fontWeight","nickname","third","rawPublicKey","map","index","SmartPay","name","marginTop","second","style","width","height","main","marginLeft","href","addressLink","rel","LinkOut","popups_log_out_tips","mt","i18nKey","values","persona","fullWidth","onClick","cancel","backup"],"sourceRoot":"","x_google_ignoreList":[]}