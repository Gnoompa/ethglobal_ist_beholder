{"version":3,"file":"bundled/npm-ns.metamask.inpage-provider.js","mappings":";;;;;;AAAa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B,mBAAO,CAAC,KAAM;AAC7C,0BAA0B,mBAAO,CAAC,KAAiB;AACnD,qCAAqC,mBAAO,CAAC,KAA4B;AACzE,2CAA2C,mBAAO,CAAC,KAA4B;AAC/E,6CAA6C,mBAAO,CAAC,KAA8B;AACnF,0CAA0C,mBAAO,CAAC,KAAiB;AACnE,yBAAyB,mBAAO,CAAC,KAAgB;AACjD,oBAAoB,mBAAO,CAAC,IAAW;AACvC,mCAAmC,mBAAO,CAAC,KAAY;AACvD,gBAAgB,mBAAO,CAAC,KAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sFAAsF,IAAI;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,+BAA+B,gBAAgB;AAC/C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iDAAiD;AACrE;AACA,aAAa;AACb;AACA,mCAAmC,SAAS;AAC5C,uCAAuC,yBAAyB;AAChE,6CAA6C,sBAAsB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,SAAS;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2BAA2B,IAAI;AACzD;AACA;AACA;AACA;AACA;AACA,wGAAwG,yBAAyB;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wBAAwB,IAAI;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxVa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,mBAAO,CAAC,KAAgB;AACjD,uCAAuC,mBAAO,CAAC,KAAgB;AAC/D,mCAAmC,mBAAO,CAAC,KAAY;AACvD,gBAAgB,mBAAO,CAAC,KAAS;AACjC,uCAAuC,mBAAO,CAAC,KAAgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iHAAiH,IAAI;AACzJ,kCAAkC,8CAA8C;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+BAA+B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2CAA2C;AAC9E;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iDAAiD;AACxF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,kBAAe;;;;;;;;AClQF;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gDAAgD,mBAAO,CAAC,KAAuB;AAC/E,yBAAyB,mBAAO,CAAC,KAAgB;AACjD,uCAAuC,mBAAO,CAAC,KAAiB;AAChE,yDAAyD,mBAAO,CAAC,KAAkC;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClCa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uCAAuC,GAAG,gBAAgB,GAAG,yBAAyB,GAAG,oBAAoB,GAAG,8BAA8B,GAAG,0BAA0B;AAC3K,iDAAiD,mBAAO,CAAC,KAA0B;AACnF,8BAA8B;AAC9B,0DAA0D,mBAAO,CAAC,KAAsD;AACxH,uCAAuC;AACvC,uCAAuC,mBAAO,CAAC,KAAgB;AAC/D,oBAAoB;AACpB,mCAAmC,mBAAO,CAAC,IAA4B;AACvE,sDAAqD,EAAE,qCAAqC,yDAAyD,EAAC;AACtJ,qDAAoD,EAAE,qCAAqC,wDAAwD,EAAC;AACpJ,mCAAmC,mBAAO,CAAC,KAAY;AACvD,gBAAgB;;;;;;;;AChBH;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,0BAA0B;AACtD,iDAAiD,mBAAO,CAAC,KAA0B;AACnF,mCAAmC,mBAAO,CAAC,KAAY;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8JAA8J;AAC5L;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;;;;;;;AClDZ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA;AACA;AACA,2HAA2H,QAAQ;AACnI;AACA;AACA;AACA;AACA;AACA,wFAAwF,OAAO;AAC/F,KAAK;AACL;AACA,yEAAyE,QAAQ;AACjF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,kBAAe;;;;;;;;ACjCF;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4HAA4H;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qCAAqC;AACxE;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA,sGAAsG;AACtG;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAe;;;;;;;;ACrDF;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mCAAmC,mBAAO,CAAC,KAAY;AACvD,gBAAgB,mBAAO,CAAC,KAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;AC3Fa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B,GAAG,YAAY,GAAG,kCAAkC,GAAG,6BAA6B,GAAG,6BAA6B;AACjJ,yBAAyB,mBAAO,CAAC,KAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA,+CAA+C,cAAc;AAC7D;AACA,SAAS;AACT;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,YAAY;AAClE;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,YAAY;AACZ;AACA,6BAA6B;AAC7B;AACA","sources":["webpack://mask-network/./node_modules/.pnpm/@metamask+inpage-provider@8.1.0/node_modules/@metamask/inpage-provider/dist/BaseProvider.js","webpack://mask-network/./node_modules/.pnpm/@metamask+inpage-provider@8.1.0/node_modules/@metamask/inpage-provider/dist/MetaMaskInpageProvider.js","webpack://mask-network/./node_modules/.pnpm/@metamask+inpage-provider@8.1.0/node_modules/@metamask/inpage-provider/dist/extension-provider/createExternalExtensionProvider.js","webpack://mask-network/./node_modules/.pnpm/@metamask+inpage-provider@8.1.0/node_modules/@metamask/inpage-provider/dist/index.js","webpack://mask-network/./node_modules/.pnpm/@metamask+inpage-provider@8.1.0/node_modules/@metamask/inpage-provider/dist/initializeInpageProvider.js","webpack://mask-network/./node_modules/.pnpm/@metamask+inpage-provider@8.1.0/node_modules/@metamask/inpage-provider/dist/messages.js","webpack://mask-network/./node_modules/.pnpm/@metamask+inpage-provider@8.1.0/node_modules/@metamask/inpage-provider/dist/shimWeb3.js","webpack://mask-network/./node_modules/.pnpm/@metamask+inpage-provider@8.1.0/node_modules/@metamask/inpage-provider/dist/siteMetadata.js","webpack://mask-network/./node_modules/.pnpm/@metamask+inpage-provider@8.1.0/node_modules/@metamask/inpage-provider/dist/utils.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst pump_1 = __importDefault(require(\"pump\"));\nconst json_rpc_engine_1 = require(\"json-rpc-engine\");\nconst json_rpc_middleware_stream_1 = require(\"json-rpc-middleware-stream\");\nconst object_multiplex_1 = __importDefault(require(\"@metamask/object-multiplex\"));\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst is_stream_1 = require(\"is-stream\");\nconst messages_1 = __importDefault(require(\"./messages\"));\nconst utils_1 = require(\"./utils\");\nclass BaseProvider extends safe_event_emitter_1.default {\n    /**\n     * @param connectionStream - A Node.js duplex stream\n     * @param options - An options bag\n     * @param options.jsonRpcStreamName - The name of the internal JSON-RPC stream.\n     * Default: metamask-provider\n     * @param options.logger - The logging API to use. Default: console\n     * @param options.maxEventListeners - The maximum number of event\n     * listeners. Default: 100\n     */\n    constructor(connectionStream, { jsonRpcStreamName = 'metamask-provider', logger = console, maxEventListeners = 100, } = {}) {\n        super();\n        if (!is_stream_1.duplex(connectionStream)) {\n            throw new Error(messages_1.default.errors.invalidDuplexStream());\n        }\n        this._log = logger;\n        this.setMaxListeners(maxEventListeners);\n        // private state\n        this._state = Object.assign({}, BaseProvider._defaultState);\n        // public state\n        this.selectedAddress = null;\n        this.chainId = null;\n        // bind functions (to prevent consumers from making unbound calls)\n        this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n        this._handleConnect = this._handleConnect.bind(this);\n        this._handleChainChanged = this._handleChainChanged.bind(this);\n        this._handleDisconnect = this._handleDisconnect.bind(this);\n        this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n        this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n        this._rpcRequest = this._rpcRequest.bind(this);\n        this.request = this.request.bind(this);\n        // setup connectionStream multiplexing\n        const mux = new object_multiplex_1.default();\n        pump_1.default(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, 'MetaMask'));\n        // setup own event listeners\n        // EIP-1193 connect\n        this.on('connect', () => {\n            this._state.isConnected = true;\n        });\n        // setup RPC connection\n        this._jsonRpcConnection = json_rpc_middleware_stream_1.createStreamMiddleware();\n        pump_1.default(this._jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), this._jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, 'MetaMask RpcProvider'));\n        // handle RPC requests via dapp-side rpc engine\n        const rpcEngine = new json_rpc_engine_1.JsonRpcEngine();\n        rpcEngine.push(json_rpc_engine_1.createIdRemapMiddleware());\n        rpcEngine.push(utils_1.createErrorMiddleware(this._log));\n        rpcEngine.push(this._jsonRpcConnection.middleware);\n        this._rpcEngine = rpcEngine;\n        this._initializeState();\n        // handle JSON-RPC notifications\n        this._jsonRpcConnection.events.on('notification', (payload) => {\n            const { method, params } = payload;\n            if (method === 'metamask_accountsChanged') {\n                this._handleAccountsChanged(params);\n            }\n            else if (method === 'metamask_unlockStateChanged') {\n                this._handleUnlockStateChanged(params);\n            }\n            else if (method === 'metamask_chainChanged') {\n                this._handleChainChanged(params);\n            }\n            else if (utils_1.EMITTED_NOTIFICATIONS.includes(method)) {\n                this.emit('message', {\n                    type: method,\n                    data: params,\n                });\n            }\n            else if (method === 'METAMASK_STREAM_FAILURE') {\n                connectionStream.destroy(new Error(messages_1.default.errors.permanentlyDisconnected()));\n            }\n        });\n    }\n    //====================\n    // Public Methods\n    //====================\n    /**\n     * Returns whether the provider can process RPC requests.\n     */\n    isConnected() {\n        return this._state.isConnected;\n    }\n    /**\n     * Submits an RPC request for the given method, with the given params.\n     * Resolves with the result of the method call, or rejects on error.\n     *\n     * @param args - The RPC request arguments.\n     * @param args.method - The RPC method name.\n     * @param args.params - The parameters for the RPC method.\n     * @returns A Promise that resolves with the result of the RPC method,\n     * or rejects if an error is encountered.\n     */\n    async request(args) {\n        if (!args || typeof args !== 'object' || Array.isArray(args)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: messages_1.default.errors.invalidRequestArgs(),\n                data: args,\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== 'string' || method.length === 0) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: messages_1.default.errors.invalidRequestMethod(),\n                data: args,\n            });\n        }\n        if (params !== undefined &&\n            !Array.isArray(params) &&\n            (typeof params !== 'object' || params === null)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: messages_1.default.errors.invalidRequestParams(),\n                data: args,\n            });\n        }\n        return new Promise((resolve, reject) => {\n            this._rpcRequest({ method, params }, utils_1.getRpcPromiseCallback(resolve, reject));\n        });\n    }\n    //====================\n    // Private Methods\n    //====================\n    /**\n     * Constructor helper.\n     * Populates initial state by calling 'metamask_getProviderState' and emits\n     * necessary events.\n     */\n    async _initializeState() {\n        try {\n            const { accounts, chainId, isUnlocked, networkVersion, } = (await this.request({\n                method: 'metamask_getProviderState',\n            }));\n            // indicate that we've connected, for EIP-1193 compliance\n            this.emit('connect', { chainId });\n            this._handleChainChanged({ chainId, networkVersion });\n            this._handleUnlockStateChanged({ accounts, isUnlocked });\n            this._handleAccountsChanged(accounts);\n        }\n        catch (error) {\n            this._log.error('MetaMask: Failed to get initial state. Please report this bug.', error);\n        }\n        finally {\n            this._state.initialized = true;\n            this.emit('_initialized');\n        }\n    }\n    /**\n     * Internal RPC method. Forwards requests to background via the RPC engine.\n     * Also remap ids inbound and outbound.\n     *\n     * @param payload - The RPC request object.\n     * @param callback - The consumer's callback.\n     */\n    _rpcRequest(payload, callback) {\n        let cb = callback;\n        if (!Array.isArray(payload)) {\n            if (!payload.jsonrpc) {\n                payload.jsonrpc = '2.0';\n            }\n            if (payload.method === 'eth_accounts' ||\n                payload.method === 'eth_requestAccounts') {\n                // handle accounts changing\n                cb = (err, res) => {\n                    this._handleAccountsChanged(res.result || [], payload.method === 'eth_accounts');\n                    callback(err, res);\n                };\n            }\n            return this._rpcEngine.handle(payload, cb);\n        }\n        return this._rpcEngine.handle(payload, cb);\n    }\n    /**\n     * When the provider becomes connected, updates internal state and emits\n     * required events. Idempotent.\n     *\n     * @param chainId - The ID of the newly connected chain.\n     * @emits MetaMaskInpageProvider#connect\n     */\n    _handleConnect(chainId) {\n        if (!this._state.isConnected) {\n            this._state.isConnected = true;\n            this.emit('connect', { chainId });\n            this._log.debug(messages_1.default.info.connected(chainId));\n        }\n    }\n    /**\n     * When the provider becomes disconnected, updates internal state and emits\n     * required events. Idempotent with respect to the isRecoverable parameter.\n     *\n     * Error codes per the CloseEvent status codes as required by EIP-1193:\n     * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n     *\n     * @param isRecoverable - Whether the disconnection is recoverable.\n     * @param errorMessage - A custom error message.\n     * @emits MetaMaskInpageProvider#disconnect\n     */\n    _handleDisconnect(isRecoverable, errorMessage) {\n        if (this._state.isConnected ||\n            (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n            this._state.isConnected = false;\n            let error;\n            if (isRecoverable) {\n                error = new eth_rpc_errors_1.EthereumRpcError(1013, // Try again later\n                errorMessage || messages_1.default.errors.disconnected());\n                this._log.debug(error);\n            }\n            else {\n                error = new eth_rpc_errors_1.EthereumRpcError(1011, // Internal error\n                errorMessage || messages_1.default.errors.permanentlyDisconnected());\n                this._log.error(error);\n                this.chainId = null;\n                this._state.accounts = null;\n                this.selectedAddress = null;\n                this._state.isUnlocked = false;\n                this._state.isPermanentlyDisconnected = true;\n            }\n            this.emit('disconnect', error);\n        }\n    }\n    /**\n     * Called when connection is lost to critical streams.\n     *\n     * @emits MetamaskInpageProvider#disconnect\n     */\n    _handleStreamDisconnect(streamName, error) {\n        utils_1.logStreamDisconnectWarning(this._log, streamName, error, this);\n        this._handleDisconnect(false, error ? error.message : undefined);\n    }\n    /**\n     * Upon receipt of a new chainId and networkVersion, emits corresponding\n     * events and sets relevant public state.\n     * Does nothing if neither the chainId nor the networkVersion are different\n     * from existing values.\n     *\n     * @emits MetamaskInpageProvider#chainChanged\n     * @param networkInfo - An object with network info.\n     * @param networkInfo.chainId - The latest chain ID.\n     * @param networkInfo.networkVersion - The latest network ID.\n     */\n    _handleChainChanged({ chainId, networkVersion, } = {}) {\n        if (!chainId ||\n            typeof chainId !== 'string' ||\n            !chainId.startsWith('0x') ||\n            !networkVersion ||\n            typeof networkVersion !== 'string') {\n            this._log.error('MetaMask: Received invalid network parameters. Please report this bug.', { chainId, networkVersion });\n            return;\n        }\n        if (networkVersion === 'loading') {\n            this._handleDisconnect(true);\n        }\n        else {\n            this._handleConnect(chainId);\n            if (chainId !== this.chainId) {\n                this.chainId = chainId;\n                if (this._state.initialized) {\n                    this.emit('chainChanged', this.chainId);\n                }\n            }\n        }\n    }\n    /**\n     * Called when accounts may have changed. Diffs the new accounts value with\n     * the current one, updates all state as necessary, and emits the\n     * accountsChanged event.\n     *\n     * @param accounts - The new accounts value.\n     * @param isEthAccounts - Whether the accounts value was returned by\n     * a call to eth_accounts.\n     */\n    _handleAccountsChanged(accounts, isEthAccounts = false) {\n        let _accounts = accounts;\n        if (!Array.isArray(accounts)) {\n            this._log.error('MetaMask: Received invalid accounts parameter. Please report this bug.', accounts);\n            _accounts = [];\n        }\n        for (const account of accounts) {\n            if (typeof account !== 'string') {\n                this._log.error('MetaMask: Received non-string account. Please report this bug.', accounts);\n                _accounts = [];\n                break;\n            }\n        }\n        // emit accountsChanged if anything about the accounts array has changed\n        if (!fast_deep_equal_1.default(this._state.accounts, _accounts)) {\n            // we should always have the correct accounts even before eth_accounts\n            // returns\n            if (isEthAccounts && this._state.accounts !== null) {\n                this._log.error(`MetaMask: 'eth_accounts' unexpectedly updated accounts. Please report this bug.`, _accounts);\n            }\n            this._state.accounts = _accounts;\n            // handle selectedAddress\n            if (this.selectedAddress !== _accounts[0]) {\n                this.selectedAddress = _accounts[0] || null;\n            }\n            // finally, after all state has been updated, emit the event\n            if (this._state.initialized) {\n                this.emit('accountsChanged', _accounts);\n            }\n        }\n    }\n    /**\n     * Upon receipt of a new isUnlocked state, sets relevant public state.\n     * Calls the accounts changed handler with the received accounts, or an empty\n     * array.\n     *\n     * Does nothing if the received value is equal to the existing value.\n     * There are no lock/unlock events.\n     *\n     * @param opts - Options bag.\n     * @param opts.accounts - The exposed accounts, if any.\n     * @param opts.isUnlocked - The latest isUnlocked value.\n     */\n    _handleUnlockStateChanged({ accounts, isUnlocked, } = {}) {\n        if (typeof isUnlocked !== 'boolean') {\n            this._log.error('MetaMask: Received invalid isUnlocked parameter. Please report this bug.');\n            return;\n        }\n        if (isUnlocked !== this._state.isUnlocked) {\n            this._state.isUnlocked = isUnlocked;\n            this._handleAccountsChanged(accounts || []);\n        }\n    }\n}\nexports.default = BaseProvider;\nBaseProvider._defaultState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst siteMetadata_1 = __importDefault(require(\"./siteMetadata\"));\nconst messages_1 = __importDefault(require(\"./messages\"));\nconst utils_1 = require(\"./utils\");\nconst BaseProvider_1 = __importDefault(require(\"./BaseProvider\"));\nclass MetaMaskInpageProvider extends BaseProvider_1.default {\n    /**\n     * @param connectionStream - A Node.js duplex stream\n     * @param options - An options bag\n     * @param options.jsonRpcStreamName - The name of the internal JSON-RPC stream.\n     * Default: metamask-provider\n     * @param options.logger - The logging API to use. Default: console\n     * @param options.maxEventListeners - The maximum number of event\n     * listeners. Default: 100\n     * @param options.shouldSendMetadata - Whether the provider should\n     * send page metadata. Default: true\n     */\n    constructor(connectionStream, { jsonRpcStreamName = 'metamask-provider', logger = console, maxEventListeners = 100, shouldSendMetadata = true, } = {}) {\n        super(connectionStream, { jsonRpcStreamName, logger, maxEventListeners });\n        this._sentWarnings = {\n            // methods\n            enable: false,\n            experimentalMethods: false,\n            send: false,\n            // events\n            events: {\n                close: false,\n                data: false,\n                networkChanged: false,\n                notification: false,\n            },\n        };\n        this.networkVersion = null;\n        this.isMetaMask = true;\n        this._sendSync = this._sendSync.bind(this);\n        this.enable = this.enable.bind(this);\n        this.send = this.send.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        this._warnOfDeprecation = this._warnOfDeprecation.bind(this);\n        this._metamask = this._getExperimentalApi();\n        // handle JSON-RPC notifications\n        this._jsonRpcConnection.events.on('notification', (payload) => {\n            const { method } = payload;\n            if (utils_1.EMITTED_NOTIFICATIONS.includes(method)) {\n                // deprecated\n                // emitted here because that was the original order\n                this.emit('data', payload);\n                // deprecated\n                this.emit('notification', payload.params.result);\n            }\n        });\n        // send website metadata\n        if (shouldSendMetadata) {\n            if (document.readyState === 'complete') {\n                siteMetadata_1.default(this._rpcEngine, this._log);\n            }\n            else {\n                const domContentLoadedHandler = () => {\n                    siteMetadata_1.default(this._rpcEngine, this._log);\n                    window.removeEventListener('DOMContentLoaded', domContentLoadedHandler);\n                };\n                window.addEventListener('DOMContentLoaded', domContentLoadedHandler);\n            }\n        }\n    }\n    //====================\n    // Public Methods\n    //====================\n    /**\n     * Submits an RPC request per the given JSON-RPC request object.\n     *\n     * @param payload - The RPC request object.\n     * @param cb - The callback function.\n     */\n    sendAsync(payload, callback) {\n        this._rpcRequest(payload, callback);\n    }\n    /**\n     * We override the following event methods so that we can warn consumers\n     * about deprecated events:\n     *   addListener, on, once, prependListener, prependOnceListener\n     */\n    addListener(eventName, listener) {\n        this._warnOfDeprecation(eventName);\n        return super.addListener(eventName, listener);\n    }\n    on(eventName, listener) {\n        this._warnOfDeprecation(eventName);\n        return super.on(eventName, listener);\n    }\n    once(eventName, listener) {\n        this._warnOfDeprecation(eventName);\n        return super.once(eventName, listener);\n    }\n    prependListener(eventName, listener) {\n        this._warnOfDeprecation(eventName);\n        return super.prependListener(eventName, listener);\n    }\n    prependOnceListener(eventName, listener) {\n        this._warnOfDeprecation(eventName);\n        return super.prependOnceListener(eventName, listener);\n    }\n    //====================\n    // Private Methods\n    //====================\n    /**\n     * When the provider becomes disconnected, updates internal state and emits\n     * required events. Idempotent with respect to the isRecoverable parameter.\n     *\n     * Error codes per the CloseEvent status codes as required by EIP-1193:\n     * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n     *\n     * @param isRecoverable - Whether the disconnection is recoverable.\n     * @param errorMessage - A custom error message.\n     * @emits MetaMaskInpageProvider#disconnect\n     */\n    _handleDisconnect(isRecoverable, errorMessage) {\n        super._handleDisconnect(isRecoverable, errorMessage);\n        if (this.networkVersion && !isRecoverable) {\n            this.networkVersion = null;\n        }\n    }\n    /**\n     * Warns of deprecation for the given event, if applicable.\n     */\n    _warnOfDeprecation(eventName) {\n        var _a;\n        if (((_a = this._sentWarnings) === null || _a === void 0 ? void 0 : _a.events[eventName]) === false) {\n            this._log.warn(messages_1.default.warnings.events[eventName]);\n            this._sentWarnings.events[eventName] = true;\n        }\n    }\n    //====================\n    // Deprecated Methods\n    //====================\n    /**\n     * Equivalent to: ethereum.request('eth_requestAccounts')\n     *\n     * @deprecated Use request({ method: 'eth_requestAccounts' }) instead.\n     * @returns A promise that resolves to an array of addresses.\n     */\n    enable() {\n        if (!this._sentWarnings.enable) {\n            this._log.warn(messages_1.default.warnings.enableDeprecation);\n            this._sentWarnings.enable = true;\n        }\n        return new Promise((resolve, reject) => {\n            try {\n                this._rpcRequest({ method: 'eth_requestAccounts', params: [] }, utils_1.getRpcPromiseCallback(resolve, reject));\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    }\n    send(methodOrPayload, callbackOrArgs) {\n        if (!this._sentWarnings.send) {\n            this._log.warn(messages_1.default.warnings.sendDeprecation);\n            this._sentWarnings.send = true;\n        }\n        if (typeof methodOrPayload === 'string' &&\n            (!callbackOrArgs || Array.isArray(callbackOrArgs))) {\n            return new Promise((resolve, reject) => {\n                try {\n                    this._rpcRequest({ method: methodOrPayload, params: callbackOrArgs }, utils_1.getRpcPromiseCallback(resolve, reject, false));\n                }\n                catch (error) {\n                    reject(error);\n                }\n            });\n        }\n        else if (methodOrPayload &&\n            typeof methodOrPayload === 'object' &&\n            typeof callbackOrArgs === 'function') {\n            return this._rpcRequest(methodOrPayload, callbackOrArgs);\n        }\n        return this._sendSync(methodOrPayload);\n    }\n    /**\n     * Internal backwards compatibility method, used in send.\n     *\n     * @deprecated\n     */\n    _sendSync(payload) {\n        let result;\n        switch (payload.method) {\n            case 'eth_accounts':\n                result = this.selectedAddress ? [this.selectedAddress] : [];\n                break;\n            case 'eth_coinbase':\n                result = this.selectedAddress || null;\n                break;\n            case 'eth_uninstallFilter':\n                this._rpcRequest(payload, utils_1.NOOP);\n                result = true;\n                break;\n            case 'net_version':\n                result = this.networkVersion || null;\n                break;\n            default:\n                throw new Error(messages_1.default.errors.unsupportedSync(payload.method));\n        }\n        return {\n            id: payload.id,\n            jsonrpc: payload.jsonrpc,\n            result,\n        };\n    }\n    /**\n     * Constructor helper.\n     * Gets experimental _metamask API as Proxy, so that we can warn consumers\n     * about its experiment nature.\n     */\n    _getExperimentalApi() {\n        return new Proxy({\n            /**\n             * Determines if MetaMask is unlocked by the user.\n             *\n             * @returns Promise resolving to true if MetaMask is currently unlocked\n             */\n            isUnlocked: async () => {\n                if (!this._state.initialized) {\n                    await new Promise((resolve) => {\n                        this.on('_initialized', () => resolve());\n                    });\n                }\n                return this._state.isUnlocked;\n            },\n            /**\n             * Make a batch RPC request.\n             */\n            requestBatch: async (requests) => {\n                if (!Array.isArray(requests)) {\n                    throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                        message: 'Batch requests must be made with an array of request objects.',\n                        data: requests,\n                    });\n                }\n                return new Promise((resolve, reject) => {\n                    this._rpcRequest(requests, utils_1.getRpcPromiseCallback(resolve, reject));\n                });\n            },\n        }, {\n            get: (obj, prop, ...args) => {\n                if (!this._sentWarnings.experimentalMethods) {\n                    this._log.warn(messages_1.default.warnings.experimentalMethods);\n                    this._sentWarnings.experimentalMethods = true;\n                }\n                return Reflect.get(obj, prop, ...args);\n            },\n        });\n    }\n}\nexports.default = MetaMaskInpageProvider;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst extension_port_stream_1 = __importDefault(require(\"extension-port-stream\"));\nconst detect_browser_1 = require(\"detect-browser\");\nconst BaseProvider_1 = __importDefault(require(\"../BaseProvider\"));\nconst external_extension_config_json_1 = __importDefault(require(\"./external-extension-config.json\"));\nconst browser = detect_browser_1.detect();\nfunction createMetaMaskExternalExtensionProvider() {\n    let provider;\n    try {\n        const currentMetaMaskId = getMetaMaskId();\n        const metamaskPort = chrome.runtime.connect(currentMetaMaskId);\n        const pluginStream = new extension_port_stream_1.default(metamaskPort);\n        provider = new BaseProvider_1.default(pluginStream);\n    }\n    catch (e) {\n        console.dir(`Metamask connect error `, e);\n        throw e;\n    }\n    return provider;\n}\nexports.default = createMetaMaskExternalExtensionProvider;\nfunction getMetaMaskId() {\n    switch (browser === null || browser === void 0 ? void 0 : browser.name) {\n        case 'chrome':\n            return external_extension_config_json_1.default.CHROME_ID;\n        case 'firefox':\n            return external_extension_config_json_1.default.FIREFOX_ID;\n        default:\n            return external_extension_config_json_1.default.CHROME_ID;\n    }\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createExternalExtensionProvider = exports.shimWeb3 = exports.setGlobalProvider = exports.BaseProvider = exports.MetaMaskInpageProvider = exports.initializeProvider = void 0;\nconst MetaMaskInpageProvider_1 = __importDefault(require(\"./MetaMaskInpageProvider\"));\nexports.MetaMaskInpageProvider = MetaMaskInpageProvider_1.default;\nconst createExternalExtensionProvider_1 = __importDefault(require(\"./extension-provider/createExternalExtensionProvider\"));\nexports.createExternalExtensionProvider = createExternalExtensionProvider_1.default;\nconst BaseProvider_1 = __importDefault(require(\"./BaseProvider\"));\nexports.BaseProvider = BaseProvider_1.default;\nconst initializeInpageProvider_1 = require(\"./initializeInpageProvider\");\nObject.defineProperty(exports, \"initializeProvider\", { enumerable: true, get: function () { return initializeInpageProvider_1.initializeProvider; } });\nObject.defineProperty(exports, \"setGlobalProvider\", { enumerable: true, get: function () { return initializeInpageProvider_1.setGlobalProvider; } });\nconst shimWeb3_1 = __importDefault(require(\"./shimWeb3\"));\nexports.shimWeb3 = shimWeb3_1.default;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setGlobalProvider = exports.initializeProvider = void 0;\nconst MetaMaskInpageProvider_1 = __importDefault(require(\"./MetaMaskInpageProvider\"));\nconst shimWeb3_1 = __importDefault(require(\"./shimWeb3\"));\n/**\n * Initializes a MetaMaskInpageProvider and (optionally) assigns it as window.ethereum.\n *\n * @param options - An options bag.\n * @param options.connectionStream - A Node.js stream.\n * @param options.jsonRpcStreamName - The name of the internal JSON-RPC stream.\n * @param options.maxEventListeners - The maximum number of event listeners.\n * @param options.shouldSendMetadata - Whether the provider should send page metadata.\n * @param options.shouldSetOnWindow - Whether the provider should be set as window.ethereum.\n * @param options.shouldShimWeb3 - Whether a window.web3 shim should be injected.\n * @returns The initialized provider (whether set or not).\n */\nfunction initializeProvider({ connectionStream, jsonRpcStreamName, logger = console, maxEventListeners = 100, shouldSendMetadata = true, shouldSetOnWindow = true, shouldShimWeb3 = false, }) {\n    let provider = new MetaMaskInpageProvider_1.default(connectionStream, {\n        jsonRpcStreamName,\n        logger,\n        maxEventListeners,\n        shouldSendMetadata,\n    });\n    provider = new Proxy(provider, {\n        // some common libraries, e.g. web3@1.x, mess with our API\n        deleteProperty: () => true,\n    });\n    if (shouldSetOnWindow) {\n        setGlobalProvider(provider);\n    }\n    if (shouldShimWeb3) {\n        shimWeb3_1.default(provider, logger);\n    }\n    return provider;\n}\nexports.initializeProvider = initializeProvider;\n/**\n * Sets the given provider instance as window.ethereum and dispatches the\n * 'ethereum#initialized' event on window.\n *\n * @param providerInstance - The provider instance.\n */\nfunction setGlobalProvider(providerInstance) {\n    window.ethereum = providerInstance;\n    window.dispatchEvent(new Event('ethereum#initialized'));\n}\nexports.setGlobalProvider = setGlobalProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messages = {\n    errors: {\n        disconnected: () => 'MetaMask: Disconnected from chain. Attempting to connect.',\n        permanentlyDisconnected: () => 'MetaMask: Disconnected from MetaMask background. Page reload required.',\n        sendSiteMetadata: () => `MetaMask: Failed to send site metadata. This is an internal error, please report this bug.`,\n        unsupportedSync: (method) => `MetaMask: The MetaMask Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n        invalidDuplexStream: () => 'Must provide a Node.js-style duplex stream.',\n        invalidRequestArgs: () => `Expected a single, non-array, object argument.`,\n        invalidRequestMethod: () => `'args.method' must be a non-empty string.`,\n        invalidRequestParams: () => `'args.params' must be an object or array if provided.`,\n        invalidLoggerObject: () => `'args.logger' must be an object if provided.`,\n        invalidLoggerMethod: (method) => `'args.logger' must include required method '${method}'.`,\n    },\n    info: {\n        connected: (chainId) => `MetaMask: Connected to chain with ID \"${chainId}\".`,\n    },\n    warnings: {\n        // deprecated methods\n        enableDeprecation: `MetaMask: 'ethereum.enable()' is deprecated and may be removed in the future. Please use the 'eth_requestAccounts' RPC method instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1102`,\n        sendDeprecation: `MetaMask: 'ethereum.send(...)' is deprecated and may be removed in the future. Please use 'ethereum.sendAsync(...)' or 'ethereum.request(...)' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193`,\n        // deprecated events\n        events: {\n            close: `MetaMask: The event 'close' is deprecated and may be removed in the future. Please use 'disconnect' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#disconnect`,\n            data: `MetaMask: The event 'data' is deprecated and will be removed in the future. Use 'message' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message`,\n            networkChanged: `MetaMask: The event 'networkChanged' is deprecated and may be removed in the future. Use 'chainChanged' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#chainchanged`,\n            notification: `MetaMask: The event 'notification' is deprecated and may be removed in the future. Use 'message' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message`,\n        },\n        // misc\n        experimentalMethods: `MetaMask: 'ethereum._metamask' exposes non-standard, experimental methods. They may be removed or changed without warning.`,\n    },\n};\nexports.default = messages;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * If no existing window.web3 is found, this function injects a web3 \"shim\" to\n * not break dapps that rely on window.web3.currentProvider.\n *\n * @param provider - The provider to set as window.web3.currentProvider.\n * @param log - The logging API to use.\n */\nfunction shimWeb3(provider, log = console) {\n    let loggedCurrentProvider = false;\n    let loggedMissingProperty = false;\n    if (!window.web3) {\n        const SHIM_IDENTIFIER = '__isMetaMaskShim__';\n        let web3Shim = { currentProvider: provider };\n        Object.defineProperty(web3Shim, SHIM_IDENTIFIER, {\n            value: true,\n            enumerable: true,\n            configurable: false,\n            writable: false,\n        });\n        web3Shim = new Proxy(web3Shim, {\n            get: (target, property, ...args) => {\n                if (property === 'currentProvider' && !loggedCurrentProvider) {\n                    loggedCurrentProvider = true;\n                    log.warn('You are accessing the MetaMask window.web3.currentProvider shim. This property is deprecated; use window.ethereum instead. For details, see: https://docs.metamask.io/guide/provider-migration.html#replacing-window-web3');\n                }\n                else if (property !== 'currentProvider' &&\n                    property !== SHIM_IDENTIFIER &&\n                    !loggedMissingProperty) {\n                    loggedMissingProperty = true;\n                    log.error(`MetaMask no longer injects web3. For details, see: https://docs.metamask.io/guide/provider-migration.html#replacing-window-web3`);\n                    provider\n                        .request({ method: 'metamask_logWeb3ShimUsage' })\n                        .catch((error) => {\n                        log.debug('MetaMask: Failed to log web3 shim usage.', error);\n                    });\n                }\n                return Reflect.get(target, property, ...args);\n            },\n            set: (...args) => {\n                log.warn('You are accessing the MetaMask window.web3 shim. This object is deprecated; use window.ethereum instead. For details, see: https://docs.metamask.io/guide/provider-migration.html#replacing-window-web3');\n                return Reflect.set(...args);\n            },\n        });\n        Object.defineProperty(window, 'web3', {\n            value: web3Shim,\n            enumerable: false,\n            configurable: true,\n            writable: true,\n        });\n    }\n}\nexports.default = shimWeb3;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messages_1 = __importDefault(require(\"./messages\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Sends site metadata over an RPC request.\n *\n * @param engine - The JSON RPC Engine to send metadata over.\n * @param log - The logging API to use.\n */\nasync function sendSiteMetadata(engine, log) {\n    try {\n        const domainMetadata = await getSiteMetadata();\n        // call engine.handle directly to avoid normal RPC request handling\n        engine.handle({\n            jsonrpc: '2.0',\n            id: 1,\n            method: 'metamask_sendDomainMetadata',\n            params: domainMetadata,\n        }, utils_1.NOOP);\n    }\n    catch (error) {\n        log.error({\n            message: messages_1.default.errors.sendSiteMetadata(),\n            originalError: error,\n        });\n    }\n}\nexports.default = sendSiteMetadata;\n/**\n * Gets site metadata and returns it\n *\n */\nasync function getSiteMetadata() {\n    return {\n        name: getSiteName(window),\n        icon: await getSiteIcon(window),\n    };\n}\n/**\n * Extracts a name for the site from the DOM\n */\nfunction getSiteName(windowObject) {\n    const { document } = windowObject;\n    const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n    if (siteName) {\n        return siteName.content;\n    }\n    const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n    if (metaTitle) {\n        return metaTitle.content;\n    }\n    if (document.title && document.title.length > 0) {\n        return document.title;\n    }\n    return window.location.hostname;\n}\n/**\n * Extracts an icon for the site from the DOM\n * @returns an icon URL\n */\nasync function getSiteIcon(windowObject) {\n    const { document } = windowObject;\n    const icons = document.querySelectorAll('head > link[rel~=\"icon\"]');\n    for (const icon of icons) {\n        if (icon && (await imgExists(icon.href))) {\n            return icon.href;\n        }\n    }\n    return null;\n}\n/**\n * Returns whether the given image URL exists\n * @param url - the url of the image\n * @returns Whether the image exists.\n */\nfunction imgExists(url) {\n    return new Promise((resolve, reject) => {\n        try {\n            const img = document.createElement('img');\n            img.onload = () => resolve(true);\n            img.onerror = () => resolve(false);\n            img.src = url;\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EMITTED_NOTIFICATIONS = exports.NOOP = exports.logStreamDisconnectWarning = exports.getRpcPromiseCallback = exports.createErrorMiddleware = void 0;\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n// utility functions\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nfunction createErrorMiddleware(log) {\n    return (req, res, next) => {\n        // json-rpc-engine will terminate the request when it notices this error\n        if (typeof req.method !== 'string' || !req.method) {\n            res.error = eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: `The request 'method' must be a non-empty string.`,\n                data: req,\n            });\n        }\n        next((done) => {\n            const { error } = res;\n            if (!error) {\n                return done();\n            }\n            log.error(`MetaMask - RPC Error: ${error.message}`, error);\n            return done();\n        });\n    };\n}\nexports.createErrorMiddleware = createErrorMiddleware;\n// resolve response.result or response, reject errors\nconst getRpcPromiseCallback = (resolve, reject, unwrapResult = true) => (error, response) => {\n    if (error || response.error) {\n        reject(error || response.error);\n    }\n    else {\n        !unwrapResult || Array.isArray(response)\n            ? resolve(response)\n            : resolve(response.result);\n    }\n};\nexports.getRpcPromiseCallback = getRpcPromiseCallback;\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nfunction logStreamDisconnectWarning(log, remoteLabel, error, emitter) {\n    let warningMsg = `MetaMask: Lost connection to \"${remoteLabel}\".`;\n    if (error === null || error === void 0 ? void 0 : error.stack) {\n        warningMsg += `\\n${error.stack}`;\n    }\n    log.warn(warningMsg);\n    if (emitter && emitter.listenerCount('error') > 0) {\n        emitter.emit('error', warningMsg);\n    }\n}\nexports.logStreamDisconnectWarning = logStreamDisconnectWarning;\nconst NOOP = () => undefined;\nexports.NOOP = NOOP;\n// constants\nexports.EMITTED_NOTIFICATIONS = [\n    'eth_subscription',\n];\n"],"names":[],"sourceRoot":"","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}