{"version":3,"file":"bundled/chunk.5021.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAA+C;AACxC,MAAMC,yBAAyBD,wBAAQA,CAACE,YAAY;IAEpD;UAAKC,UAAU;IAAVA,WACRC,gBAAAA;IADQD,WAERE,eAAAA;GAFQF,eAAAA;AAIL,MAAMG,WAAW,GAAE;;;ACDG;AAC4B;AA+BzD,eAAeI,MAAMC,IAAY;IAC7B,MAAMC,MACFC,KAAqC,GAC/B,sCACA,CAAuC;IAEjD,MAAMG,MAAM,MAAMC,MAAML,KAAK;QACzBM,QAAQ;QACRC,MAAM;QACNC,OAAO;QACPC,SAAS;YACL,gBAAgB;QACpB;QACAC,gBAAgB;QAChBC,MAAMC,KAAKC,SAAS,CAACd;IACzB;IACA,OAAOK,IAAIU,IAAI;AACnB;AACO,eAAeC,cAAcC,OAAe;IAC/C,MAAMjB,OAAO;QACTD,OAAO,CAAC;2BACW,EAAEkB,QAAQC,WAAW,GAAG;;;;;;KAM9C,CAAC;QACEC,WAAW,CAAC;IAChB;IACA,MAAMd,MAAM,MAAMN,MAAMC;IACxB,OAAOK;AACX;AAEO,eAAee,eAClBC,QAAoB,EACpBJ,OAAe,EACfK,IAAY,EACZC,SAAyB;IAEzB,MAAMvB,OAAO;QACTD,OAAO,CAAC;2BACW,EAAEkB,QAAQC,WAAW,GAAG;gBACnC,EAAEG,SAASH,WAAW,GAAG,QAAQ,EAAEI,OAAO3B,QAAQA,GAAGA,QAAQA,GAAG2B,KAAK,UAAU,EAC3EE,OAAOC,QAAQ,CAACF,WAAWG,MAAM,KAAK,MAAM,EAC/C;;;;;;;;;;;;;;KAcZ,CAAC;QACEP,WAAW,CAAC;IAChB;IACA,MAAMd,MAAM,MAAMN,MAAMC;IACxB,IAAIqB,aAAa7B,UAAUA,CAACC,UAAU,EAClC,OAAOK,mCAAcA,CACjBO,IAAIL,IAAI,CAAC2B,QAAQ,CAACC,UAAU,CAACC,IAAI,EACjCjC,oCAAeA,CAAC2B,YAChBlB,IAAIL,IAAI,CAAC2B,QAAQ,CAACC,UAAU,CAACE,QAAQ,CAACC,WAAW,GAC3ClC,wCAAmBA,CAAC0B,WAAWlB,IAAIL,IAAI,CAAC2B,QAAQ,CAACC,UAAU,CAACE,QAAQ,CAACE,SAAS,IAC9EC;IAEd,OAAOnC,mCAAcA,CACjBO,IAAIL,IAAI,CAAC2B,QAAQ,CAACO,SAAS,CAACL,IAAI,EAChCjC,oCAAeA,CAAC2B,YAChBlB,IAAIL,IAAI,CAAC2B,QAAQ,CAACO,SAAS,CAACJ,QAAQ,CAACC,WAAW,GAC1ClC,wCAAmBA,CAAC0B,WAAWlB,IAAIL,IAAI,CAAC2B,QAAQ,CAACO,SAAS,CAACJ,QAAQ,CAACE,SAAS,IAC7EC;AAEd;AAEO,eAAeE,kBAAkBC,QAAgB,EAAEC,MAAc;IACpE,MAAMrC,OAAO;QACTD,OAAO,CAAC;;2BAEW,EAAEqC,SAAS;8BACR,EAAEC,OAAO;;;;;;;;;;SAU9B,CAAC;QACFlB,WAAW,CAAC;IAChB;IACA,MAAMd,MAAM,MAAMN,MAAMC;IACxB,OAAOK,IAAIL,IAAI,CAACsC,WAAW,CAAC,EAAE,EAAEC,gBAAgB;QAAEC,YAAY;QAAOC,aAAa;IAAM;AAC5F","sources":["webpack://mask-network/./packages/plugins/Beholder/src/constants.ts","webpack://mask-network/./packages/plugins/Beholder/src/Worker/apis/index.ts"],"sourcesContent":["import { PluginID } from '@masknet/shared-base'\nexport const CYBERCONNECT_PLUGIN_ID = PluginID.CyberConnect\n\nexport enum ProfileTab {\n    Followings = 'Followings',\n    Followers = 'Followers',\n}\nexport const PageSize = 50\n","import {\n    createIndicator,\n    createNextIndicator,\n    createPageable,\n    type PageIndicator,\n    type Pageable,\n} from '@masknet/shared-base'\nimport { PageSize, ProfileTab } from '../../constants.js'\n\ninterface IQuery {\n    query: string\n    variables: Record<string, string | number>\n}\n\nexport interface IFollowIdentity {\n    address: string\n    ens: string\n    namespace: string\n}\n\ninterface IIdentity {\n    address: string\n    avatar: string\n    domain: string\n    ens: string\n    followerCount: number\n    followingCount: number\n    followers: {\n        list: IFollowIdentity[]\n    }\n    followings: {\n        list: IFollowIdentity[]\n    }\n}\ninterface IFollowStatus {\n    isFollowing: boolean\n    isFollowed: boolean\n}\nasync function query(data: IQuery) {\n    const url =\n        process.env.NODE_ENV === 'production'\n            ? 'https://api.cybertino.io/connect/'\n            : 'https://api.stg.cybertino.io/connect/'\n\n    const res = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        referrerPolicy: 'no-referrer',\n        body: JSON.stringify(data),\n    })\n    return res.json()\n}\nexport async function fetchIdentity(address: string): Promise<{ data: { identity: IIdentity } }> {\n    const data = {\n        query: `query QueryForENS {\n        identity(address: \"${address.toLowerCase()}\") {\n            address\n            ens\n            domain\n            avatar\n        }\n    }`,\n        variables: {},\n    }\n    const res = await query(data)\n    return res\n}\n\nexport async function fetchFollowers(\n    category: ProfileTab,\n    address: string,\n    size: number,\n    indicator?: PageIndicator,\n): Promise<Pageable<IFollowIdentity>> {\n    const data = {\n        query: `query FullIdentityQuery {\n        identity(address: \"${address.toLowerCase()}\") {\n                ${category.toLowerCase()}(first: ${size > PageSize ? PageSize : size}, after: \"${\n                    Number.parseInt(indicator?.id ?? '0', 10) - 1\n                }\"){\n                pageInfo {\n                    hasNextPage\n                    hasPreviousPage\n                    endCursor\n                    startCursor\n                }\n                list {\n                    address\n                    ens\n                    namespace\n                }\n            }\n        }\n    }`,\n        variables: {},\n    }\n    const res = await query(data)\n    if (category === ProfileTab.Followings)\n        return createPageable(\n            res.data.identity.followings.list,\n            createIndicator(indicator),\n            res.data.identity.followings.pageInfo.hasNextPage\n                ? createNextIndicator(indicator, res.data.identity.followings.pageInfo.endCursor)\n                : undefined,\n        )\n    return createPageable(\n        res.data.identity.followers.list,\n        createIndicator(indicator),\n        res.data.identity.followers.pageInfo.hasNextPage\n            ? createNextIndicator(indicator, res.data.identity.followers.pageInfo.endCursor)\n            : undefined,\n    )\n}\n\nexport async function fetchFollowStatus(fromAddr: string, toAddr: string): Promise<IFollowStatus> {\n    const data = {\n        query: `query FollowStatusQuery {\n            connections(\n                fromAddr: \"${fromAddr}\"\n                toAddrList: [\"${toAddr}\"]\n                network: ETH\n            ) {\n                fromAddr\n                toAddr\n                followStatus {\n                    isFollowed\n                    isFollowing\n                }\n            }\n        }`,\n        variables: {},\n    }\n    const res = await query(data)\n    return res.data.connections[0]?.followStatus ?? { isFollowed: false, isFollowing: false }\n}\n"],"names":["PluginID","CYBERCONNECT_PLUGIN_ID","CyberConnect","ProfileTab","Followings","Followers","PageSize","createIndicator","createNextIndicator","createPageable","query","data","url","process","env","NODE_ENV","res","fetch","method","mode","cache","headers","referrerPolicy","body","JSON","stringify","json","fetchIdentity","address","toLowerCase","variables","fetchFollowers","category","size","indicator","Number","parseInt","id","identity","followings","list","pageInfo","hasNextPage","endCursor","undefined","followers","fetchFollowStatus","fromAddr","toAddr","connections","followStatus","isFollowed","isFollowing"],"sourceRoot":"","x_google_ignoreList":[]}