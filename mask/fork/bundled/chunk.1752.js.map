{"version":3,"file":"bundled/chunk.1752.js","mappings":"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","sources":["webpack://mask-network/./packages/mask/content-script/components/shared/DraggableDiv.tsx","webpack://mask-network/./node_modules/.pnpm/@mui+icons-material@5.10.6_@mui+material@5.10.8_@types+react@18.2.21_react@0.0.0-experimental-0a360642d-20230711/node_modules/@mui/icons-material/esm/Download.js","webpack://mask-network/./node_modules/.pnpm/@mui+icons-material@5.10.6_@mui+material@5.10.8_@types+react@18.2.21_react@0.0.0-experimental-0a360642d-20230711/node_modules/@mui/icons-material/esm/OpenInBrowser.js","webpack://mask-network/./packages/mask/shared/helpers/download.ts","webpack://mask-network/./packages/mask/content-script/components/InjectedComponents/AutoPasteFailedDialog.tsx","webpack://mask-network/./packages/mask/content-script/components/InjectedComponents/PageInspector.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptor-infra/defaults/inject/PageInspector.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptor-infra/defaults/state/InitProfiles.ts","webpack://mask-network/./packages/mask/content-script/site-adaptor-infra/utils.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/facebook.com/utils/resolveFacebookLink.ts","webpack://mask-network/./packages/mask/content-script/site-adaptor-infra/utils/create-post-context.ts","webpack://mask-network/./packages/mask/content-script/utils/hasPayloadLike.ts","webpack://mask-network/./packages/shared-base-ui/src/hooks/useObservableMapSet.ts","webpack://mask-network/./packages/plugin-infra/src/site-adaptor/PostContext.ts","webpack://mask-network/./packages/plugin-infra/src/types.ts","webpack://mask-network/./packages/typed-message/base/src/core/empty.ts","webpack://mask-network/./packages/typed-message/base/src/core/image.ts","webpack://mask-network/./packages/typed-message/base/src/core/promise.ts","webpack://mask-network/./packages/typed-message/base/src/core/text.ts","webpack://mask-network/./packages/typed-message/base/src/core/tuple.ts","webpack://mask-network/./packages/typed-message/base/src/extension/MaskPayload.ts","webpack://mask-network/./packages/typed-message/base/src/extension/anchor.ts","webpack://mask-network/./packages/typed-message/base/src/utils/extract.ts","webpack://mask-network/./packages/typed-message/base/src/utils/index.ts","webpack://mask-network/./packages/typed-message/base/src/utils/internal.ts","webpack://mask-network/./packages/typed-message/base/src/visitor/forEachChild.ts","webpack://mask-network/./node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/factoryWithThrowingShims.js","webpack://mask-network/./node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/index.js","webpack://mask-network/./node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import { useRef } from 'react'\nimport Draggable, { type DraggableProps } from 'react-draggable'\nimport { makeStyles } from '@masknet/theme'\nconst useStyle = makeStyles()((theme) => ({\n    root: {\n        position: 'fixed',\n        width: '100vw',\n        height: '100vh',\n        top: 0,\n        left: 0,\n        zIndex: 9999,\n        pointerEvents: 'none',\n    },\n    paper: {\n        [theme.breakpoints.up('sm')]: {\n            top: '2em',\n            right: '2em',\n        },\n        [theme.breakpoints.down('sm')]: {\n            bottom: '2em',\n        },\n        maxWidth: 550,\n        position: 'fixed',\n        pointerEvents: 'initial',\n    },\n}))\n\nexport function DraggableDiv({\n    DraggableProps,\n    ...props\n}: React.HTMLAttributes<HTMLDivElement> & { DraggableProps?: Partial<DraggableProps> }) {\n    const { classes } = useStyle()\n    const ref = useRef<HTMLDivElement>(null)\n    return (\n        <div className={classes.root}>\n            <Draggable\n                nodeRef={ref}\n                bounds=\"parent\"\n                cancel=\"p, h1, input, button, address\"\n                handle=\"nav\"\n                {...DraggableProps}\n                children={<div {...props} ref={ref} className={classes.paper} />}\n            />\n        </div>\n    )\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89 2 2 2h4v-2H5V8h14v10h-4v2h4c1.1 0 2-.9 2-2V6c0-1.1-.89-2-2-2zm-7 6-4 4h3v6h2v-6h3l-4-4z\"\n}), 'OpenInBrowser');","import type { MimeType } from '@masknet/shared-base'\n\n// TODO: maybe fallback to normal HTML save file?\nexport async function saveFileFromUrl(url: string, fileName: string) {\n    await browser.downloads.download({ url, filename: fileName, saveAs: true })\n}\ninterface SaveFileOptions {\n    fileContent: BufferSource\n    fileName: string\n    mimeType: string | MimeType\n}\nexport async function saveFileFromBuffer(options: SaveFileOptions) {\n    const blob = new Blob([options.fileContent], { type: options.mimeType })\n    const url = URL.createObjectURL(blob)\n    await browser.downloads.download({ url, filename: options.fileName, saveAs: true })\n}\n","import { useState } from 'react'\nimport { useCopyToClipboard } from 'react-use'\nimport { useMaskSharedTrans } from '../../../shared-ui/index.js'\nimport { format as formatDateTime } from 'date-fns'\nimport { makeStyles, useCustomSnackbar } from '@masknet/theme'\nimport {\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    DialogContentText,\n    TextField,\n    Box,\n    IconButton,\n    Paper,\n    Link,\n    Button,\n    Typography,\n} from '@mui/material'\nimport { Image } from '@masknet/shared'\nimport type { AutoPasteFailedEvent } from '@masknet/shared-base'\nimport { useMatchXS } from '@masknet/shared-base-ui'\nimport { DraggableDiv } from '../shared/DraggableDiv.js'\nimport { Close as CloseIcon, Download, OpenInBrowser } from '@mui/icons-material'\nimport { saveFileFromUrl } from '../../../shared/index.js'\n\ninterface AutoPasteFailedDialogProps {\n    onClose: () => void\n    data: AutoPasteFailedEvent\n}\nconst useStyles = makeStyles()((theme) => ({\n    title: { marginLeft: theme.spacing(1) },\n    paper: {},\n    button: { marginRight: theme.spacing(1) },\n}))\n\nfunction AutoPasteFailedDialog(props: AutoPasteFailedDialogProps) {\n    const { onClose, data } = props\n    const t = useMaskSharedTrans()\n    const { classes } = useStyles()\n    const url = data.image ? URL.createObjectURL(data.image) : undefined\n    const { showSnackbar } = useCustomSnackbar()\n    const [, copy] = useCopyToClipboard()\n    const isMobile = useMatchXS()\n    const fileName = `masknetwork-encrypted-${formatDateTime(Date.now(), 'yyyyMMddHHmmss')}.png`\n\n    return (\n        <DraggableDiv>\n            <Paper elevation={2} className={classes.paper} sx={isMobile ? { width: '100vw' } : undefined}>\n                <nav>\n                    <DialogTitle>\n                        <IconButton size=\"small\" onClick={onClose}>\n                            <CloseIcon />\n                        </IconButton>\n                        <span className={classes.title}>{t.auto_paste_failed_dialog_title()}</span>\n                    </DialogTitle>\n                </nav>\n                <DialogContent sx={{ paddingTop: 0 }}>\n                    <DialogContentText>\n                        <Typography color=\"textPrimary\" sx={{ marginBottom: 1 }}>\n                            {t.auto_paste_failed_dialog_content()}\n                        </Typography>\n                    </DialogContentText>\n                    {props.data.text ? (\n                        <>\n                            <TextField multiline fullWidth value={data.text} InputProps={{ readOnly: true }} />\n                            <Box\n                                sx={{\n                                    marginBottom: 1,\n                                }}\n                            />\n                            <Button\n                                className={classes.button}\n                                variant=\"contained\"\n                                onClick={() => {\n                                    copy(data.text)\n                                    showSnackbar(t.copy_success_of_text(), {\n                                        variant: 'success',\n                                        preventDuplicate: true,\n                                        anchorOrigin: {\n                                            vertical: 'top',\n                                            horizontal: 'center',\n                                        },\n                                    })\n                                    data.image ?? onClose()\n                                }}>\n                                {t.copy_text()}\n                            </Button>\n                        </>\n                    ) : null}\n                    <Box marginBottom={1} />\n                    <Box textAlign=\"left\">\n                        {data.image ? (\n                            // It must be img\n                            <Image src={URL.createObjectURL(data.image)} style={{ width: '100%' }} />\n                        ) : null}\n                        <Box marginBottom={1} />\n                        <Button\n                            className={classes.button}\n                            variant=\"contained\"\n                            onClick={async () => {\n                                if (!data.image) return\n                                await navigator.clipboard.write([new ClipboardItem({ [data.image.type]: data.image })])\n                                showSnackbar(t.copy_success_of_image(), {\n                                    variant: 'success',\n                                    preventDuplicate: true,\n                                    anchorOrigin: {\n                                        vertical: 'top',\n                                        horizontal: 'center',\n                                    },\n                                })\n                            }}>\n                            {t.copy_image()}\n                        </Button>\n                        {url ? (\n                            <Button\n                                className={classes.button}\n                                variant=\"text\"\n                                onClick={() => saveFileFromUrl(url, fileName)}\n                                startIcon={<Download />}>\n                                {t.download()}\n                            </Button>\n                        ) : null}\n                        {url ? (\n                            <Button\n                                className={classes.button}\n                                variant=\"text\"\n                                component={Link}\n                                href={url}\n                                target=\"_blank\"\n                                startIcon={<OpenInBrowser />}>\n                                {t.auto_paste_failed_dialog_image_caption()}\n                            </Button>\n                        ) : null}\n                    </Box>\n                </DialogContent>\n                {/* To leave some bottom padding */}\n                <DialogActions />\n            </Paper>\n        </DraggableDiv>\n    )\n}\nexport function useAutoPasteFailedDialog() {\n    const [open, setOpen] = useState(false)\n    const [data, setData] = useState<AutoPasteFailedEvent>({ text: '' })\n    return [\n        (data: AutoPasteFailedEvent) => {\n            setData(data)\n            setOpen(true)\n        },\n        open ? <AutoPasteFailedDialog onClose={() => setOpen(false)} data={data} /> : null,\n    ] as const\n}\n","import { useEffect } from 'react'\nimport { useCustomSnackbar } from '@masknet/theme'\nimport { Button, Box, Typography } from '@mui/material'\nimport { createInjectHooksRenderer, useActivatedPluginsSiteAdaptor } from '@masknet/plugin-infra/content-script'\nimport { MaskMessages } from '@masknet/shared-base'\nimport { useMatchXS } from '@masknet/shared-base-ui'\nimport { useAutoPasteFailedDialog } from './AutoPasteFailedDialog.js'\nimport { useMaskSharedTrans } from '../../../shared-ui/index.js'\n\nconst GlobalInjection = createInjectHooksRenderer(\n    useActivatedPluginsSiteAdaptor.visibility.useAnyMode,\n    (x) => x.GlobalInjection,\n)\n\nexport function PageInspector() {\n    const t = useMaskSharedTrans()\n    const { showSnackbar, closeSnackbar } = useCustomSnackbar()\n    const [autoPasteFailed, JSX] = useAutoPasteFailedDialog()\n    const xsMatched = useMatchXS()\n\n    useEffect(\n        () =>\n            MaskMessages.events.autoPasteFailed.on((data) => {\n                const key = data.image ? Math.random() : data.text\n                const close = () => {\n                    closeSnackbar(key)\n                }\n                const timeout = setTimeout(close, 15 * 1000 /** 15 seconds */)\n                showSnackbar(\n                    <>\n                        <Typography color=\"textPrimary\">{t.auto_paste_failed_snackbar()}</Typography>\n                        <Box display=\"flex\" justifyContent=\"flex-end\">\n                            <Button\n                                color=\"inherit\"\n                                variant=\"text\"\n                                onClick={() => [clearTimeout(timeout), close(), autoPasteFailed(data)]}>\n                                {t.auto_paste_failed_snackbar_action()}\n                            </Button>\n                            <Button color=\"inherit\" variant=\"text\" aria-label=\"Close\" onClick={close}>\n                                {t.auto_paste_failed_snackbar_action_close()}\n                            </Button>\n                        </Box>\n                    </>,\n                    {\n                        variant: 'info',\n                        preventDuplicate: true,\n                        anchorOrigin: xsMatched\n                            ? {\n                                  vertical: 'bottom',\n                                  horizontal: 'center',\n                              }\n                            : { horizontal: 'right', vertical: 'top' },\n                        key,\n                        action: <></>,\n                    },\n                )\n            }),\n        [],\n    )\n    return (\n        <>\n            {JSX}\n            <GlobalInjection />\n        </>\n    )\n}\n","import { memo } from 'react'\nimport { PageInspector } from '../../../components/InjectedComponents/PageInspector.js'\nimport { attachReactTreeWithoutContainer } from '../../../utils/shadow-root/renderInShadowRoot.js'\n\nexport function injectPageInspectorDefault() {\n    const PageInspectorDefault = memo(function PageInspectorDefault() {\n        return <PageInspector />\n    })\n\n    return function injectPageInspector(signal: AbortSignal) {\n        attachReactTreeWithoutContainer('page-inspector', <PageInspectorDefault />, signal)\n    }\n}\n","import Services from '#services'\nimport type { SiteAdaptorUI } from '@masknet/types'\nimport { type ValueRef, type ProfileInformation, MaskMessages } from '@masknet/shared-base'\n\nexport function InitAutonomousStateProfiles(\n    signal: AbortSignal,\n    ref: SiteAdaptorUI.AutonomousState['profiles'],\n    network: string,\n) {\n    query(network, ref)\n    signal.addEventListener(\n        'abort',\n        MaskMessages.events.ownPersonaChanged.on(() => query(network, ref)),\n    )\n\n    async function query(network: string, ref: ValueRef<readonly ProfileInformation[]>) {\n        const val = await Services.Identity.queryOwnedProfilesInformation(network)\n        if (signal.aborted) return\n        ref.value = val\n    }\n}\n","import { isEqual } from 'lodash-es'\nimport { ValueRef, ObservableWeakMap, type ProfileInformation } from '@masknet/shared-base'\nimport type { SiteAdaptorUI } from '@masknet/types'\nimport { ThemeMode, FontSize, ThemeColor, type ThemeSettings } from '@masknet/web3-shared-base'\n\nexport const stateCreator: {\n    readonly [key in keyof SiteAdaptorUI.AutonomousState]-?: () => SiteAdaptorUI.AutonomousState[key]\n} = {\n    profiles: () => new ValueRef<readonly ProfileInformation[]>([], isEqual),\n}\nexport const creator = {\n    EmptyIdentityResolveProviderState: (): SiteAdaptorUI.CollectingCapabilities.IdentityResolveProvider['recognized'] =>\n        new ValueRef({}, isEqual),\n    EmptyPostProviderState: (): SiteAdaptorUI.CollectingCapabilities.PostsProvider['posts'] => new ObservableWeakMap(),\n    EmptyThemeSettingsProviderState: (): SiteAdaptorUI.CollectingCapabilities.ThemeSettingsProvider['recognized'] =>\n        new ValueRef<ThemeSettings>(\n            {\n                size: FontSize.Normal,\n                mode: ThemeMode.Light,\n                color: ThemeColor.Blue,\n                isDim: false,\n            },\n            isEqual,\n        ),\n}\n","export function resolveFacebookLink(link: string) {\n    return link.replace(/\\?fbclid=[\\S\\s]*#/, '#')\n}\n","import { difference, noop } from 'lodash-es'\nimport type { Subscription } from 'use-subscription'\nimport type { SupportedPayloadVersions } from '@masknet/encryption'\nimport {\n    ValueRef,\n    ObservableMap,\n    ObservableSet,\n    parseURLs,\n    PostIdentifier,\n    type ProfileIdentifier,\n    createSubscriptionFromValueRef,\n    SubscriptionDebug as debug,\n    mapSubscription,\n    EMPTY_LIST,\n    PostIVIdentifier,\n    EnhanceableSite,\n} from '@masknet/shared-base'\nimport type {\n    PostContext,\n    PostContextAuthor,\n    PostContextCoAuthor,\n    PostContextCreation,\n    PostContextActions,\n} from '@masknet/plugin-infra/content-script'\nimport { extractTextFromTypedMessage, makeTypedMessageEmpty, type TypedMessage } from '@masknet/typed-message'\nimport { activatedSiteAdaptorUI } from '../ui.js'\nimport { resolveFacebookLink } from '../../site-adaptors/facebook.com/utils/resolveFacebookLink.js'\n\nexport function createSiteAdaptorSpecializedPostContext(create: PostContextActions) {\n    return function createPostContext(opt: PostContextCreation): PostContext {\n        const cancel: Array<() => void> = []\n        opt.signal?.addEventListener('abort', () => cancel.forEach((fn) => fn?.()))\n\n        // #region Mentioned links\n        const linksSubscribe: Subscription<string[]> = (() => {\n            const isFacebook = activatedSiteAdaptorUI!.networkIdentifier === EnhanceableSite.Facebook\n            const links = new ValueRef<string[]>(EMPTY_LIST)\n\n            function evaluate() {\n                const text = parseURLs(extractTextFromTypedMessage(opt.rawMessage.getCurrentValue()).unwrapOr(''))\n                    .concat(opt.postMentionedLinksProvider?.getCurrentValue() || EMPTY_LIST)\n                    .map(isFacebook ? resolveFacebookLink : (x: string) => x)\n                if (difference(text, links.value).length === 0) return\n                if (!text.length) links.value = EMPTY_LIST\n                else links.value = text\n            }\n            cancel.push(opt.rawMessage.subscribe(evaluate))\n            const f = opt.postMentionedLinksProvider?.subscribe(evaluate)\n            f && cancel.push(f)\n            return createSubscriptionFromValueRef(links)\n        })()\n        // #endregion\n        const author: PostContextAuthor = {\n            avatarURL: opt.avatarURL,\n            nickname: opt.nickname,\n            author: opt.author,\n            postID: opt.postID,\n        }\n        const postIdentifier = debug({\n            getCurrentValue: () => {\n                const by = opt.author.getCurrentValue()\n                const id = opt.postID.getCurrentValue()\n                if (!id || !by) return null\n                return new PostIdentifier(by, id)\n            },\n            subscribe: (sub) => {\n                const a = opt.author.subscribe(sub)\n                const b = opt.postID.subscribe(sub)\n                return () => void [a(), b()]\n            },\n        })\n        const postIVIdentifier = new ValueRef<PostIVIdentifier | null>(null)\n        const isPublicShared = new ValueRef<boolean | undefined>(undefined)\n        const isAuthorOfPost = new ValueRef<boolean | undefined>(undefined)\n        const version = new ValueRef<SupportedPayloadVersions | undefined>(undefined)\n        return {\n            author: author.author,\n            coAuthors: opt.coAuthors,\n            avatarURL: author.avatarURL,\n            nickname: author.nickname,\n            postID: author.postID,\n\n            get rootNode() {\n                return opt.rootElement.realCurrent\n            },\n            rootElement: opt.rootElement,\n            actionsElement: opt.actionsElement,\n            isFocusing: opt.isFocusing,\n            suggestedInjectionPoint: opt.suggestedInjectionPoint,\n\n            comment: opt.comments,\n            encryptComment: new ValueRef<any>(null),\n            decryptComment: new ValueRef<any>(null),\n\n            identifier: postIdentifier,\n            url: mapSubscription(postIdentifier, (id) => {\n                if (id) return create.getURLFromPostIdentifier?.(id) || null\n                return null\n            }),\n\n            mentionedLinks: linksSubscribe,\n            postMetadataImages:\n                opt.postImagesProvider ||\n                debug({\n                    getCurrentValue: () => EMPTY_LIST,\n                    subscribe: () => noop,\n                }),\n\n            rawMessage: opt.rawMessage,\n\n            hasMaskPayload: (() => {\n                const hasMaskPayload = new ValueRef(false)\n                function evaluate() {\n                    const msg =\n                        extractTextFromTypedMessage(opt.rawMessage.getCurrentValue()).unwrapOr('') +\n                        '\\n' +\n                        [...linksSubscribe.getCurrentValue()].join('\\n')\n                    hasMaskPayload.value = create.hasPayloadLike(msg)\n                }\n                evaluate()\n                cancel.push(linksSubscribe.subscribe(evaluate))\n                cancel.push(opt.rawMessage.subscribe(evaluate))\n                return createSubscriptionFromValueRef(hasMaskPayload)\n            })(),\n            postIVIdentifier: createSubscriptionFromValueRef(postIVIdentifier),\n            publicShared: createSubscriptionFromValueRef(isPublicShared),\n            isAuthorOfPost: createSubscriptionFromValueRef(isAuthorOfPost),\n            version: createSubscriptionFromValueRef(version),\n            decryptedReport(opts) {\n                const currentAuthor = author.author.getCurrentValue()\n                if (opts.iv && currentAuthor)\n                    postIVIdentifier.value = new PostIVIdentifier(currentAuthor.network, opts.iv)\n                if (opts.sharedPublic?.isSome()) isPublicShared.value = opts.sharedPublic.value\n                if (opts.isAuthorOfPost) isAuthorOfPost.value = opts.isAuthorOfPost.value\n                if (opts.version) version.value = opts.version\n            },\n        }\n    }\n}\nexport function createRefsForCreatePostContext() {\n    const avatarURL = new ValueRef<string | null>(null)\n    const nickname = new ValueRef<string | null>(null)\n    const postBy = new ValueRef<ProfileIdentifier | null>(null)\n    const postCoAuthors = new ValueRef<PostContextCoAuthor[]>([])\n    const postID = new ValueRef<string | null>(null)\n    const postMessage = new ValueRef<TypedMessage>(makeTypedMessageEmpty())\n    const postMetadataImages = new ObservableSet<string>()\n    const postMetadataMentionedLinks = new ObservableMap<unknown, string>()\n    const subscriptions: Omit<PostContextCreation, 'rootElement' | 'actionsElement' | 'suggestedInjectionPoint'> = {\n        avatarURL: mapSubscription(createSubscriptionFromValueRef(avatarURL), (x) => {\n            if (!x) return null\n            if (!URL.canParse(x)) return null\n            return new URL(x)\n        }),\n        nickname: createSubscriptionFromValueRef(nickname),\n        author: createSubscriptionFromValueRef(postBy),\n        postID: createSubscriptionFromValueRef(postID),\n        rawMessage: createSubscriptionFromValueRef(postMessage),\n        postImagesProvider: debug({\n            getCurrentValue: () => postMetadataImages.asValues,\n            subscribe: (sub) => postMetadataImages.event.on(postMetadataImages.ALL_EVENTS, sub),\n        }),\n        postMentionedLinksProvider: debug({\n            getCurrentValue: () => postMetadataMentionedLinks.asValues,\n            subscribe: (sub) => postMetadataMentionedLinks.event.on(postMetadataMentionedLinks.ALL_EVENTS, sub),\n        }),\n        coAuthors: createSubscriptionFromValueRef(postCoAuthors),\n    }\n    return {\n        subscriptions,\n        avatarURL,\n        nickname,\n        postBy,\n        postID,\n        postCoAuthors,\n        postMessage,\n        postMetadataMentionedLinks,\n        postMetadataImages,\n    }\n}\n","export function hasPayloadLike(text: string | Uint8Array): boolean {\n    if (typeof text === 'string') return text.includes('\\uD83C\\uDFBC') && text.includes(':||')\n    return true\n}\n","import { useMemo } from 'react'\nimport { useSubscription, type Subscription } from 'use-subscription'\nimport { type ObservableMap, type ObservableSet } from '@masknet/shared-base'\n\nexport function useObservableValues<T>(map: ObservableMap<any, T> | ObservableSet<T>) {\n    const subscription = useMemo<Subscription<T[]>>(\n        () => ({\n            getCurrentValue: () => map.asValues,\n            subscribe: (callback) => {\n                return (map.event as any).on(map.ALL_EVENTS, callback)\n            },\n        }),\n        [map],\n    )\n\n    return useSubscription(subscription)\n}\n","import { createContext, createElement, useContext } from 'react'\nimport { type Subscription, useSubscription } from 'use-subscription'\nimport type { Some } from 'ts-results-es'\nimport type { LiveSelector, DOMProxy } from '@dimensiondev/holoflows-kit'\nimport {\n    ObservableMap,\n    ObservableSet,\n    type PostIVIdentifier,\n    ValueRef,\n    type PostIdentifier,\n    type ProfileIdentifier,\n} from '@masknet/shared-base'\nimport { useObservableValues, useValueRef } from '@masknet/shared-base-ui'\nimport type { TypedMessage } from '@masknet/typed-message'\nimport type { SupportedPayloadVersions } from '@masknet/encryption'\n\nexport interface PostContextActions {\n    hasPayloadLike(content: string): boolean\n    getURLFromPostIdentifier?(post: PostIdentifier): URL | null\n}\nexport interface PostContextAuthor {\n    readonly nickname: Subscription<string | null>\n    readonly avatarURL: Subscription<URL | null>\n    readonly author: Subscription<ProfileIdentifier | null>\n    /** post id on the network. */\n    readonly postID: Subscription<string | null>\n}\n\nexport interface PostContextCoAuthor {\n    nickname?: string\n    avatarURL?: URL\n    author: ProfileIdentifier\n    post: PostIdentifier\n}\n\nexport interface PostContextComment {\n    readonly commentsSelector: LiveSelector<HTMLElement>\n    readonly commentBoxSelector: LiveSelector<HTMLElement>\n}\nexport interface PostContextCreation extends PostContextAuthor {\n    readonly rootElement: DOMProxy\n    readonly actionsElement?: DOMProxy\n    readonly isFocusing?: boolean\n    readonly suggestedInjectionPoint: HTMLElement\n    readonly comments?: PostContextComment\n    readonly coAuthors: Subscription<PostContextCoAuthor[]>\n    /**\n     * The result of this subscription will be merged with `PostContext.postMentionedLinks`.\n     *\n     * You don't need to provide this to resolve links in `PostContext.postContent`.\n     */\n    readonly postMentionedLinksProvider?: Subscription<string[]>\n    /** @deprecated It should parse image into rawMessage */\n    readonly postImagesProvider?: Subscription<string[]>\n    /**\n     * The raw TypedMessage that the site gives.\n     */\n    readonly rawMessage: Subscription<TypedMessage>\n    readonly signal?: AbortSignal\n}\nexport interface PostContext extends PostContextAuthor {\n    // #region DOM knowledge\n    get rootNode(): HTMLElement | null\n    readonly rootElement: DOMProxy\n    readonly actionsElement?: DOMProxy\n    readonly isFocusing?: boolean\n    readonly suggestedInjectionPoint: HTMLElement\n    // #endregion\n    readonly comment: PostContextComment | undefined\n    // #region Metadata of a post (author, mentioned items, ...)\n    /** Auto computed */\n    readonly identifier: Subscription<PostIdentifier | null>\n    readonly url: Subscription<URL | null>\n    readonly coAuthors: Subscription<PostContextCoAuthor[] | null>\n    // Meta\n    readonly mentionedLinks: Subscription<string[]>\n    /** @deprecated It should appears in rawMessage */\n    readonly postMetadataImages: Subscription<string[]>\n    // #endregion\n    // #region Raw post content (not decrypted)\n    readonly rawMessage: Subscription<TypedMessage>\n    readonly encryptComment: ValueRef<null | ((commentToEncrypt: string) => Promise<string>)>\n    readonly decryptComment: ValueRef<null | ((commentEncrypted: string) => Promise<string | null>)>\n    // #endregion\n    // #region Post payload discovered in the rawMessage\n    readonly hasMaskPayload: Subscription<boolean>\n    readonly postIVIdentifier: Subscription<PostIVIdentifier | null>\n    /**\n     * undefined => payload not found\n     */\n    readonly publicShared: Subscription<boolean | undefined>\n    readonly isAuthorOfPost: Subscription<boolean | undefined>\n    readonly version: Subscription<SupportedPayloadVersions | undefined>\n\n    decryptedReport(content: {\n        sharedPublic?: Some<boolean>\n        iv?: string\n        isAuthorOfPost?: Some<boolean>\n        version?: SupportedPayloadVersions\n    }): void\n    // #endregion\n}\nexport type PostInfo = PostContext\n\nexport const PostInfoContext = createContext<PostContext | null>(null)\nPostInfoContext.displayName = 'PostInfoContext'\n\n/** @deprecated use <PostInfoContext.Provider value={post}> */\nexport function PostInfoProvider(props: React.PropsWithChildren<{ post: PostInfo }>) {\n    return createElement(PostInfoContext.Provider, { value: props.post, children: props.children })\n}\nexport const usePostInfoDetails: {\n    // Change to use* when https://github.com/microsoft/TypeScript/issues/44643 fixed\n    [key in keyof PostInfo]: () => PostInfo[key] extends ValueRef<infer T>\n        ? T extends (...args: any) => any\n            ? T\n            : Readonly<T>\n        : PostInfo[key] extends ObservableSet<infer T>\n        ? ReadonlyArray<Readonly<T>>\n        : PostInfo[key] extends ObservableMap<any, infer T>\n        ? ReadonlyArray<Readonly<T>>\n        : PostInfo[key] extends Subscription<infer T>\n        ? Readonly<T>\n        : PostInfo[key]\n} = {\n    __proto__: new Proxy(\n        { __proto__: null },\n        {\n            get(_, key) {\n                if (typeof key === 'symbol') return undefined\n                function usePostInfoDetails() {\n                    const postInfo = useContext(PostInfoContext)\n                    if (!postInfo) throw new TypeError('No post context')\n                    if (!(key in postInfo)) throw new TypeError('postInfo.' + (key as string) + ' is not found')\n                    const k = postInfo[key as keyof PostInfo]\n                    // eslint-disable-next-line react-hooks/rules-of-hooks\n                    if (k instanceof ValueRef) return useValueRef<any>(k)\n                    // eslint-disable-next-line react-hooks/rules-of-hooks\n                    if (k instanceof ObservableMap) return useObservableValues<any>(k)\n                    // eslint-disable-next-line react-hooks/rules-of-hooks\n                    if (k instanceof ObservableSet) return useObservableValues<any>(k)\n                    // eslint-disable-next-line react-hooks/rules-of-hooks\n                    if (isSubscription(k)) return useSubscription<any>(k)\n                    return k\n                }\n                Object.defineProperty(usePostInfoDetails, key, { value: usePostInfoDetails, configurable: true })\n                return usePostInfoDetails\n            },\n        },\n    ),\n} as any\nfunction isSubscription(x: any): x is Subscription<any> {\n    return (\n        typeof x === 'object' &&\n        x !== null &&\n        !!((x as Subscription<any>).getCurrentValue && (x as Subscription<any>).subscribe)\n    )\n}\n","/* eslint-disable @typescript-eslint/no-unnecessary-qualifier */\n// https://github.com/typescript-eslint/typescript-eslint/issues/7192\nimport type React from 'react'\nimport type { Option, Result } from 'ts-results-es'\nimport type { Emitter } from '@servie/events'\n/* eslint @masknet/unicode-specific-set: [\"error\", { \"only\": \"code\" }] */\nimport type {\n    BindingProof,\n    ECKeyIdentifier,\n    NetworkPluginID,\n    PluginID,\n    ProfileIdentifier,\n    ScopedStorage,\n    SocialAccount,\n    SocialIdentity,\n    BooleanPreference,\n    EnhanceableSite,\n} from '@masknet/shared-base'\nimport type { TypedMessage } from '@masknet/typed-message'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport type { SearchResult } from '@masknet/web3-shared-base'\nimport type { CompositionType } from './entry-content-script.js'\n\nexport declare namespace Plugin {\n    /**\n     * A code loader interface of the plugin API.\n     *\n     * Plugin should be lazy-loaded. If a plugin is not enabled, it will not be loaded into the Mask.\n     *\n     * @example\n     * ```ts\n     * const loader = {\n     *     load: () => import('./code'),\n     *     hotModuleReload: hot => import.meta.webpackHot && import.meta.webpackHot.accept('./code', () => hot(import('./code')))\n     * }\n     * ```\n     *\n     * The `./code` should use `export default` to export what loader expects.\n     */\n    export interface Loader<DeferredModule> {\n        /**\n         * The `load()` function will be called on demand.\n         *\n         * It should not have side effects (e.g. start some daemon, start a new HTTP request or WebSocket client),\n         * those work should be in the `.init()` function.\n         * @returns the actual definition of this plugin\n         * @example load: () => import('./path')\n         */\n        load(): Promise<{\n            default: DeferredModule\n        }>\n\n        /**\n         * This provides the functionality for hot module reload on the plugin.\n         * When the callback is called, the old instance of the plugin will be unloaded, then the new instance will be init.\n         * @example hotModuleReload: hot => import.meta.webpackHot && import.meta.webpackHot.accept('./path', () => hot(import('./path')))\n         */\n        hotModuleReload(\n            onHot: (\n                hot: Promise<{\n                    default: DeferredModule\n                }>,\n            ) => void,\n        ): void\n    }\n\n    /**\n     * DeferredDefinition should not contain any functionality of the plugin expects the loader.\n     * If the plugin is not providing some of the functionality, please can omit that field.\n     */\n    export interface DeferredDefinition extends Shared.Definition {\n        /** Load the Site Adaptor part of the plugin. */\n        SiteAdaptor?: Loader<SiteAdaptor.Definition>\n        /** Load the extension page part of the plugin. */\n        ExtensionPage?: Loader<ExtensionPage.Definition>\n        /** Load the Worker part of the plugin. */\n        Worker?: Loader<Worker.Definition>\n    }\n}\n/**\n * Basic knowledge of the plugin (ID, name, publisher, ...).\n */\nexport namespace Plugin.Shared {\n    export interface SharedContext {\n        /**\n         * A lightweight K/V storage used to store some simple data.\n         */\n        createKVStorage<T extends object>(type: 'memory' | 'persistent', defaultValues: T): ScopedStorage<T>\n    }\n\n    export interface SharedUIContext extends SharedContext {\n        setMinimalMode(enabled: boolean): void\n    }\n\n    export interface Definition {\n        /**\n         * ID of the plugin. It should be unique.\n         * @example \"com.mask.wallet\"\n         */\n        ID: PluginID\n        /**\n         * The human readable name of the plugin.\n         * @example { i18nKey: \"name\", fallback: \"Never gonna give you up\" }\n         */\n        name: I18NStringField\n        /**\n         * A brief description of this plugin.\n         * @example { i18nKey: \"description\", fallback: \"This plugin is going to replace every link in the page to https://www.youtube.com/watch?v=dQw4w9WgXcQ\" }\n         */\n        description?: I18NStringField\n        /**\n         * Publisher of this plugin.\n         * @example { link: \"https://github.com/Dimensiondev\", name: { fallback: \"Mask Network\", i18nKey: \"org_name\" } }\n         */\n        publisher?: Publisher\n        /**\n         * Configuration of what environment that this plugin expects to run in.\n         */\n        enableRequirement: EnableRequirement\n        /**\n         * Is this plugin marked as \"experimental\"?\n         *\n         * If the enableRequirement.target is not \"stable\", it will be treated as true.\n         *\n         * This does not affect if the plugin enable or not.\n         */\n        experimentalMark?: boolean\n        /**\n         * If the plugin is in the minimal mode by default.\n         */\n        inMinimalModeByDefault?: boolean\n        /** i18n resources of this plugin */\n        i18n?: I18NResource\n        /**\n         * Declare what this plugin provides.\n         *\n         * Declare this field properly so Mask Network can suggest your plugin when needed.\n         */\n        contribution?: Contribution\n        /** Declare ability this plugin supported. */\n        ability?: Ability\n    }\n\n    /**\n     * This part is shared between ExtensionPage, Site Adaptor and Worker part\n     * which you should include the information above in those three parts.\n     */\n    export interface DefinitionDeferred<Context extends SharedContext = SharedContext> extends Definition, Utilities {\n        /**\n         * This function is called when the plugin is initialized.\n         *\n         * The plugin must clean up all side effects it creates when the `AbortSignal` provided aborts\n         * to make sure the plugin can be reloaded safely.\n         */\n        init?(signal: AbortSignal, context: Context): void | Promise<void>\n    }\n\n    export interface Utilities {}\n\n    /** The publisher of the plugin */\n    export interface Publisher {\n        /** The name of the publisher */\n        name: I18NStringField\n        /** URL of the publisher */\n        link: string\n    }\n\n    /** For what stage the plugin should be included in the Mask. */\n    export type ReleaseStages = 'stable' | 'beta' | 'insider'\n\n    /**\n     * The condition that expected to start the plugin.\n     *\n     * If the condition changes and becomes invalid, the plugin will be unloaded.\n     */\n    export interface EnableRequirement {\n        target: ReleaseStages\n        /** The website this plugin supports. */\n        supports: SupportedSitesDeclare\n        /** The Web3 Network this plugin supports */\n        web3?: Partial<\n            Record<\n                NetworkPluginID,\n                {\n                    supportedChainIds?: number[]\n                }\n            >\n        >\n        /**\n         * Requested origins.\n         * Only put necessary permissions here.\n         * https://developer.chrome.com/docs/extensions/mv3/match_patterns/\n         */\n        host_permissions?: string[]\n    }\n\n    export interface SupportedSitesDeclare {\n        /**\n         * opt-in means the listed site is supported.\n         * out-out means the listed site is not supported.\n         */\n        type: 'opt-in' | 'opt-out'\n        sites: Partial<Record<EnhanceableSite, boolean>>\n    }\n\n    export type I18NLanguage = string\n    export type I18NKey = string\n    export type I18NValue = string\n    export type I18NResource = Record<I18NLanguage, Record<I18NKey, I18NValue>>\n\n    export interface Contribution {\n        /** This plugin can recognize and react to the following metadata keys. */\n        metadataKeys?: ReadonlySet<string>\n        /** This plugin can recognize and enhance the post that matches the following matchers. */\n        postContent?: ReadonlySet<RegExp | string>\n    }\n    export interface Ability {}\n}\n\n/** This part runs in the Site Adaptor */\nexport namespace Plugin.SiteAdaptor {\n    export interface SiteAdaptorContext extends Shared.SharedUIContext {}\n\n    export interface Definition extends GeneralUI.Definition, Shared.DefinitionDeferred<SiteAdaptorContext> {\n        /** This UI will be rendered for each post found. */\n        PostInspector?: InjectUI<{}>\n        /** This UI will be rendered for action of each post found. */\n        PostActions?: InjectUI<{}>\n        /** This UI will be rendered for each decrypted post. */\n        DecryptedInspector?: InjectUI<{\n            message: TypedMessage\n        }>\n        /** This UI will be rendered into the global scope of the site. */\n        GlobalInjection?: InjectUI<{}>\n        /** This UI will be rendered under the Search result of the site */\n        SearchResultInspector?: SearchResultInspector\n        /** This UI will be rendered under the Search result of the site. */\n        SearchResultTabs?: SearchResultTab[]\n        /** This UI will be an entry to the plugin in the Composition dialog of Mask. */\n        readonly CompositionDialogEntry?: CompositionDialogEntry\n        /** This UI will be use when there is known badges. */\n        CompositionDialogMetadataBadgeRender?: CompositionMetadataBadgeRender\n        /** This UI will be rendered as an entry in the wallet status dialog */\n        ApplicationEntries?: ApplicationEntry[]\n        /** This UI will be rendered as tabs on the profile page */\n        ProfileTabs?: ProfileTab[]\n        /** This UI will be rendered as tabs on the profile card */\n        ProfileCardTabs?: ProfileTab[]\n        /** This UI will be rendered as cover on the profile page */\n        ProfileCover?: ProfileCover[]\n        /** This UI will be rendered as tab on the setting dialog */\n        SettingTabs?: SettingTab[]\n        /** This UI will be rendered components on the avatar realm */\n        AvatarRealm?: AvatarRealm\n        /** This UI will be shared across plugins */\n        Widgets?: Widget[]\n        // Widgets?: {\n        //     [key in keyof WidgetRegistry]: Widget<WidgetRegistry[key]>\n        // }\n        /** This UI will be rendered components on the tips realm */\n        TipsRealm?: TipsRealm\n        /** This UI will be rendered components on the tips realm */\n        Lens?: LensWidget\n        /** This UI will be rendered as plugin wrapper page */\n        wrapperProps?: PluginWrapperProps\n        /**\n         * A hook for if this plugin can enhance the #hash or $cash tag.\n         */\n        enhanceTag?: {\n            onClick?: (kind: 'cash' | 'hash', content: string, event: React.MouseEvent<HTMLAnchorElement>) => void\n            onHover?: (kind: 'cash' | 'hash', content: string, event: React.MouseEvent<HTMLAnchorElement>) => () => void\n        }\n    }\n\n    // #region Composition entry\n    /**\n     * The entry has two type:\n     *\n     * - Dialog type: This type is very common so it is supported as first class citizen.\n     * - Custom type: Fallback choice if the dialog type cannot do what you want to do.\n     */\n    export type CompositionDialogEntry = CompositionDialogEntryCustom | CompositionDialogEntryDialog\n\n    export interface CompositionDialogEntryCustom {\n        /**\n         * A label that will be rendered in the CompositionDialog as a chip.\n         * @example {fallback: \"🧧 Red Packet\"}\n         */\n        label: I18NFieldOrReactNode\n\n        /** This callback will be called when the user clicked on the chip. */\n        onClick(options: { compositionType: CompositionType; metadata: ReadonlyMap<string, unknown> | undefined }): void\n    }\n\n    export interface CompositionDialogEntryDialog {\n        /**\n         * A label that will be rendered in the CompositionDialog as a chip.\n         * @example {fallback: \"🧧 Red Packet\"}\n         */\n        label: I18NFieldOrReactNode\n        /** A React dialog component that receives `open` and `onClose`. The dialog will be opened when the chip clicked. */\n        dialog: React.ComponentType<CompositionDialogEntry_DialogProps>\n        /**\n         * If this option is true, the dialog will be always mounted even if the dialog is not opening.\n         *\n         * @default false\n         */\n        keepMounted?: boolean\n    }\n\n    export interface CompositionDialogEntry_DialogProps {\n        open: boolean\n\n        onClose(): void\n\n        isOpenFromApplicationBoard?: boolean\n    }\n\n    export type CompositionMetadataBadgeRender =\n        | CompositionMetadataBadgeRenderStatic\n        | CompositionMetadataBadgeRenderDynamic\n    export type CompositionMetadataBadgeRenderStatic = ReadonlyMap<string, CompositionMetadataBadgeRenderStaticMapper>\n    export type CompositionMetadataBadgeRenderStaticMapper<T = any> = (metadata: T) => string | BadgeDescriptor | null\n    export type CompositionMetadataBadgeRenderDynamic = (\n        key: string,\n        metadata: unknown,\n    ) => string | BadgeDescriptor | null\n\n    export interface BadgeDescriptor {\n        text: string | React.ReactNode\n        tooltip?: React.ReactNode\n    }\n\n    // #endregion\n\n    export interface ApplicationEntry {\n        /**\n         * The contrast between ApplicationEntryID and PluginID is that one plugin may contains multiple entries.\n         */\n        ApplicationEntryID: string\n        /**\n         * Render entry component\n         */\n        RenderEntryComponent?: (props: {\n            disabled: boolean\n            tooltipHint?: string\n            onClick?: (walletConnectedCallback?: () => void, requiredSupportPluginID?: NetworkPluginID) => void\n        }) => JSX.Element | null\n        /**\n         * Used to order the applications on the board\n         */\n        appBoardSortingDefaultPriority?: number\n\n        /**\n         * Used to order the applications on the market list\n         */\n        marketListSortingPriority?: number\n\n        icon: React.ReactNode\n\n        name: I18NFieldOrReactNode\n\n        description?: I18NFieldOrReactNode\n\n        iconFilterColor?: string\n\n        tutorialLink?: string\n        /**\n         * Does the application listed in the DAPP list\n         */\n        category?: 'dapp' | 'other'\n\n        nextIdRequired?: boolean\n        /**\n         * One plugin may has multiple part. E.g. Tips requires connected wallet, but Tips setting not.\n         */\n        entryWalletConnectedNotRequired?: boolean\n\n        /**\n         * Display using an eye-catching card and unable to be unlisted.\n         */\n        recommendFeature?: {\n            description: React.ReactNode\n            backgroundGradient: string\n            isFirst?: boolean\n        }\n        features?: Array<{\n            name: I18NFieldOrReactNode\n            description: I18NFieldOrReactNode\n        }>\n\n        hiddenInList?: boolean\n    }\n\n    export interface PluginWrapperProps {\n        icon?: React.ReactNode\n        title?: string | React.ReactNode\n        backgroundGradient?: string\n        borderRadius?: string\n        margin?: string\n    }\n\n    export interface SearchResultInspector {\n        ID: string\n        /**\n         * The injected UI\n         */\n        UI?: {\n            /** The brief content above detailed tabs. */\n            Content?: InjectUI<{\n                resultList: Array<SearchResult<Web3Helper.ChainIdAll, Web3Helper.SchemaTypeAll>>\n                currentResult: SearchResult<Web3Helper.ChainIdAll, Web3Helper.SchemaTypeAll>\n                isProfilePage?: boolean\n                identity?: SocialIdentity | null\n            }>\n        }\n        Utils?: {\n            shouldDisplay?(result: SearchResult<Web3Helper.ChainIdAll, Web3Helper.SchemaTypeAll>): boolean\n        }\n    }\n\n    export interface SearchResultTab {\n        ID: string\n\n        /**\n         * The name of the slider card\n         */\n        label: I18NStringField | string\n        /**\n         * Used to order the sliders\n         */\n        priority: number\n        /**\n         * The injected UI\n         */\n        UI?: {\n            /**\n             * The injected tab content\n             */\n            TabContent: InjectUI<{\n                result: SearchResult<Web3Helper.ChainIdAll, Web3Helper.SchemaTypeAll>\n            }>\n        }\n        Utils?: {\n            shouldDisplay?(result: SearchResult<Web3Helper.ChainIdAll, Web3Helper.SchemaTypeAll>): boolean\n        }\n    }\n\n    export interface SearchResultContent {\n        ID: string\n        UI?: {\n            Content?: React.ForwardRefExoticComponent<{ keyword: string } & React.RefAttributes<unknown>>\n        }\n    }\n\n    export enum AvatarRealmSourceType {\n        ProfilePage = 'ProfilePage',\n        ProfileCard = 'ProfileCard',\n        Post = 'Post',\n        Editor = 'Editor',\n        Menu = 'Menu',\n        Suggestion = 'Suggestion',\n    }\n\n    export interface AvatarRealm {\n        ID: string\n        priority: number\n        label: I18NStringField | string\n        UI?: {\n            /**\n             * The injected avatar decorator component\n             */\n            Decorator: InjectUI<{\n                identity?: SocialIdentity | null\n                userId?: string\n                persona?: string\n                socialAccounts?: Array<SocialAccount<Web3Helper.ChainIdAll>>\n            }>\n            /**\n             * The injected avatar settings button component\n             */\n            Settings?: InjectUI<{\n                identity?: SocialIdentity\n                persona?: string\n                socialAccounts?: Array<SocialAccount<Web3Helper.ChainIdAll>>\n            }>\n        }\n        Utils?: {\n            /**\n             * If it returns false, this cover will not be displayed.\n             */\n            shouldDisplay?(\n                identity?: SocialIdentity | null,\n                socialAccounts?: Array<SocialAccount<Web3Helper.ChainIdAll>>,\n                sourceType?: AvatarRealmSourceType,\n            ): boolean\n        }\n    }\n\n    export enum TipsSlot {\n        FollowButton = 'follow',\n        Post = 'post',\n        Profile = 'profile',\n        MirrorMenu = 'mirror-menu',\n        MirrorEntry = 'mirror-entry',\n        MirrorProfile = 'mirror-profile',\n        MirrorVerification = 'mirror-verification',\n    }\n\n    export interface TipsRealmOptions {\n        identity?: ProfileIdentifier\n        slot: TipsSlot\n        accounts?: Array<SocialAccount<Web3Helper.ChainIdAll>>\n        iconSize?: number\n        buttonSize?: number\n\n        onStatusUpdate?(disabled: boolean): void\n    }\n\n    export interface TipsRealm {\n        ID: string\n        priority: number\n        UI?: {\n            /**\n             * The injected Tips Content component\n             */\n            Content: InjectUI<TipsRealmOptions>\n        }\n    }\n\n    export enum LensSlot {\n        ProfileName = 'profile-name',\n        Post = 'post',\n        Sidebar = 'sidebar',\n    }\n\n    export interface LensOptions {\n        identity?: ProfileIdentifier\n        slot: LensSlot\n        accounts?: Array<SocialAccount<Web3Helper.ChainIdAll>>\n        /** To update enabled/disabled status */\n        onStatusUpdate?(disabled: boolean): void\n    }\n\n    export interface LensWidget {\n        ID: string\n        UI?: {\n            /**\n             * The injected Lens Content component\n             */\n            Content: InjectUI<LensOptions>\n        }\n    }\n\n    export interface ProfileSlider {\n        ID: string\n\n        /**\n         * The name of the slider card\n         */\n        label: I18NStringField | string\n        /**\n         * Used to order the sliders\n         */\n        priority: number\n        /**\n         * The injected UI\n         */\n        children: InjectUI<{}>\n    }\n\n    export interface ProfileTab {\n        ID: string\n\n        /**\n         * The name of the tab\n         */\n        label: I18NStringField | string\n\n        /**\n         * Used to order the sliders\n         */\n        priority: number\n\n        UI?: {\n            /**\n             * The injected tab content\n             */\n            TabContent: InjectUI<{\n                identity?: SocialIdentity | null\n                socialAccount?: SocialAccount<Web3Helper.ChainIdAll>\n            }>\n        }\n        Utils?: {\n            /**\n             * If it returns false, this tab will not be displayed.\n             */\n            shouldDisplay?(\n                identity?: SocialIdentity | null,\n                socialAccount?: SocialAccount<Web3Helper.ChainIdAll>,\n            ): boolean\n            /**\n             * Filter social address.\n             */\n            filter?: (x: SocialAccount<Web3Helper.ChainIdAll>) => boolean\n            /**\n             * Sort social address in expected order.\n             */\n            sorter?: (a: SocialAccount<Web3Helper.ChainIdAll>, z: SocialAccount<Web3Helper.ChainIdAll>) => number\n        }\n    }\n\n    export interface ProfileCover {\n        ID: string\n\n        /**\n         * The name of the cover\n         */\n        label: I18NStringField | string\n\n        /**\n         * Used to order the sliders\n         */\n        priority: number\n\n        UI?: {\n            /**\n             * The injected cover component\n             */\n            Cover: InjectUI<{\n                identity?: SocialIdentity\n                socialAccounts?: SocialAccount<Web3Helper.ChainIdAll>\n            }>\n        }\n        Utils: {\n            /**\n             * If it returns false, this cover will not be displayed\n             */\n            shouldDisplay?(identity?: SocialIdentity, socialAccount?: SocialAccount<Web3Helper.ChainIdAll>): boolean\n            /**\n             * Filter social account\n             */\n            filterSocialAccount?(x: SocialAccount<Web3Helper.ChainIdAll>): boolean\n            /**\n             * Sort social account in expected order\n             */\n            sortSocialAccount?(a: SocialAccount<Web3Helper.ChainIdAll>, z: SocialAccount<Web3Helper.ChainIdAll>): number\n        }\n    }\n\n    export interface SettingsTabUIProps {\n        onClose: () => void\n        bindingWallets?: BindingProof[]\n        currentPersona?: ECKeyIdentifier\n        pluginID: PluginID\n    }\n\n    export interface SettingTab {\n        ID: PluginID\n        /**\n         * The name of setting tab\n         */\n        label: I18NStringField | string\n\n        /**\n         * Used to order the tabs\n         */\n        priority: number\n\n        UI?: {\n            TabContent: InjectUI<SettingsTabUIProps>\n        }\n    }\n\n    /** Contribute a widget to other plugins. */\n    export interface Widget {\n        ID: string\n\n        name: keyof WidgetRegistry\n\n        label: I18NStringField | string\n\n        UI?: {\n            Widget: InjectUI<{}>\n        }\n    }\n\n    export interface WidgetRegistry {\n        example: {}\n    }\n}\n\n/** This part runs in the Popup */\nexport namespace Plugin.ExtensionPage {\n    export interface ExtensionPageContext extends Shared.SharedUIContext {}\n\n    // As you can see we currently don't have so much use case for an API here.\n    export interface Definition extends GeneralUI.Definition, Shared.DefinitionDeferred<ExtensionPageContext> {\n        /** Plugin DO NOT need to define this. This will be auto set by the plugin host. */\n        __general_ui__?: GeneralUI.Definition\n    }\n}\n\n/** This part runs in the background page */\nexport namespace Plugin.Worker {\n    export interface WorkerContext extends Shared.SharedContext {\n        getDatabaseStorage<T extends IndexableTaggedUnion>(): DatabaseStorage<T>\n        /**\n         * Start the background service.\n         * @param impl Implementation of the RPC\n         */\n        startService(impl: object): void\n        /**\n         * Start the background generator service.\n         * @param impl Implementation of the RPC\n         */\n        startGeneratorService(impl: object): void\n    }\n\n    export interface Definition extends Shared.DefinitionDeferred<WorkerContext> {\n        backup?: BackupHandler\n    }\n\n    export interface BackupHandler {\n        /**\n         * This function will be called when user try to generate a new backup.\n         * The return value will contribute to the backup file.\n         *\n         * If it returns a None, it will not contributes to the backup file.\n         *\n         * If it returns a Some<T>, T will be serialized by JSON.stringify and added into the backup file.\n         */\n        onBackup(): Promise<Option<unknown>>\n\n        /**\n         * This function will be called when the user try to restore a backup file,\n         * and there is some data associated with this plugin.\n         *\n         * @param data The serialized backup content previously returned by `onBackup`.\n         * You MUST treat the data as untrustful content because it can be modified by the user.\n         */\n        onRestore(data: unknown): Promise<Result<void, Error>>\n    }\n\n    /**\n     * @typeParameter Data It should be a [tagged union](https://en.wikipedia.org/wiki/Tagged_union) with an extra `id` field\n     * @example\n     *\n     * type File = { type: 'file'; name: string; id: string }\n     * type Folder = { type: 'folder'; file: string[]; id: string }\n     * const Storage: Plugin.Worker.Storage<File | Folder> = context.storage\n     * const file: File = { type: 'file', name: 'file.txt', id: uuid() }\n     * const folder: Folder = { type: 'folder', file: [file.id], id: uuid() }\n     * // Add new data\n     * await Storage.add(file)\n     * await Storage.add(folder)\n     * // Remove\n     * await Storage.remove('file', file.id)\n     * // Query\n     * const result: File | undefined = await Storage.get('file', file.id)\n     * const has: boolean = await Storage.has('file', file.id)\n     * // iterate\n     * for await (const { value } of Storage.iterate('file')) {\n     *     // read only during the for...await loop\n     *     // !! NO: await Storage.remove('file', file.id)\n     *     console.log(value.name)\n     * }\n     * for await (const cursor of Storage.iterate_mutate('folder')) {\n     *     cursor.value // Folder\n     *     await cursor.update({ ...cursor.value, file: [] })\n     *     await cursor.delete()\n     * }\n     */\n    export interface DatabaseStorage<Data extends IndexableTaggedUnion = IndexableTaggedUnion> {\n        /**\n         * Query an object from the database\n         * @param type \"type\" field on the object\n         * @param id \"id\" field on the object\n         */\n        get<T extends Data['type']>(\n            type: T,\n            id: Data['id'],\n        ): Promise<\n            | (Data & {\n                  type: T\n              })\n            | undefined\n        >\n\n        has<T extends Data['type']>(type: T, id: Data['id']): Promise<boolean>\n\n        /**\n         * Store a data into the database.\n         * @param data Must be an object with \"type\" and \"id\"\n         */\n        add(data: Data): Promise<void>\n\n        /**\n         * Remove an object from the database\n         * @param type \"type\" field on the object\n         * @param id \"id\" field on the object\n         */\n        remove<T extends Data['type']>(type: T, id: Data['id']): Promise<void>\n\n        /**\n         * Iterate over the database of given type (readonly!)\n         *\n         * !!! During the iterate, you MUST NOT do anything that writes to the store (use iterate_mutate instead)\n         *\n         * !!! You MUST NOT do anything asynchronous before the iterate ends\n         *\n         * !!! Otherwise the transaction will be inactivate\n         * @param type \"type\" field on the object\n         */\n        iterate<T extends Data['type']>(type: T): AsyncIterableIterator<StorageReadonlyCursor<Data, T>>\n\n        /**\n         * Iterate over the database of given type (read-write).\n         *\n         * !!! You MUST NOT do anything asynchronous before the iterate ends\n         *\n         * !!! Otherwise the transaction will be inactivate\n         * @param type \"type\" field on the object\n         */\n        iterate_mutate<T extends Data['type']>(type: T): AsyncIterableIterator<StorageMutableCursor<Data, T>>\n    }\n\n    export interface StorageReadonlyCursor<Data extends IndexableTaggedUnion, T extends Data['type']> {\n        value: Data & {\n            type: T\n        }\n    }\n\n    export interface StorageMutableCursor<Data extends IndexableTaggedUnion, T extends Data['type']>\n        extends StorageReadonlyCursor<Data, T> {\n        delete: () => Promise<void>\n        update: (\n            data: Data & {\n                type: T\n            },\n        ) => Promise<void>\n    }\n}\n\n/** This part defines the plugin part that does not context aware. */\nexport namespace Plugin.GeneralUI {\n    export interface Definition {\n        /** This UI will be injected into the global scope of the target page. */\n        GlobalInjection?: InjectUI<{}>\n        /**\n         * Render metadata in many different environments.\n         *\n         * 1. Environment\n         *\n         * The render component MUST NOT assume they are running in a specific environment (e.g. Site Adaptor).\n         * Plugin messages and RPC MAY NOT working.\n         *\n         * It MUST NOT assume the environment using the `context` props.\n         * ALL actions MUST BE DONE with the given props.\n         *\n         * Here is some example of *possible* environments.\n         * - inside site adaptor, given \"composition\" context, running in the CompositionDialog.\n         * - inside site adaptor, given \"post\" context,        running in the DecryptedPost.\n         * - inside Popups,       given \"post\" context,        running in the PostInspector (Isolated mode).\n         * - on mask.io,          given \"post\" context,        allowing preview the message without extension installed.\n         *\n         * 2. Contexts\n         *\n         * The render component might be used in many different contexts.\n         *\n         * - \"composition\" context, the render should be editable, but not interactive (e.g. allow vote).\n         * - \"post\" context, the render should be readonly, but interactive.\n         *\n         * 3. Actions\n         *\n         * The render component MUST BE a ForwardRefExotic React Component\n         * that support operations defined in `Plugin.ContextFree.MetadataRender.RenderActions`\n         */\n        metadataRender?: MetadataRender.StaticRender | MetadataRender.DynamicRender\n    }\n\n    export namespace MetadataRender {\n        export type MetadataReader<T> = (meta: TypedMessage['meta']) => Result<T, unknown>\n        // #region Static render\n        // new Map([ [reader, react component] ])\n        export type StaticRender<T = any> = ReadonlyMap<MetadataReader<T>, StaticRenderComponent<T>>\n        export type StaticRenderComponent<T> = Omit<React.ForwardRefExoticComponent<StaticRenderProps<T>>, 'propTypes'>\n        export type StaticRenderProps<T> = Context<T> &\n            React.RefAttributes<RenderActions<T>> & {\n                metadata: T\n            }\n        // #endregion\n        // #region DynamicRender\n        export type DynamicRender = Omit<React.ForwardRefExoticComponent<DynamicRenderProps>, 'propTypes'>\n        export type DynamicRenderProps = Context<unknown> &\n            React.RefAttributes<RenderActions<unknown>> & {\n                metadata: TypedMessage['meta']\n            }\n        // #endregion\n        export type RenderActions<T> = {\n            /**\n             * This action make the render into the edit state.\n             * It should report the result via onEditComplete() props.\n             *\n             * If this action does not exist, it will be rendered as non-editable.\n             */\n            edit?(): void\n            /**\n             * This action make the render quit the edit state.\n             * If save is true, the render MUST report the new result via onEditComplete.\n             *\n             * If this action does not exist, the render should handle the save/cancel by themselves.\n             */\n            quitEdit?(save: boolean): void\n        }\n        export type Context<T> = CompositionContext<T> | DecryptedPostContext\n\n        /** This metadata render is called in a composition preview context. */\n        export interface CompositionContext<T> {\n            context: 'composition'\n\n            /**\n             * When edit() is called, this component should go into to editable state.\n             * If the edit completes, the new metadata will be used to replace the old one.\n             */\n            onEditComplete(metaKey: string, replaceMeta: T): void\n        }\n\n        /**\n         * This metadata render is called in the decrypted post.\n         */\n        export interface DecryptedPostContext {\n            context: 'post'\n        }\n    }\n}\n\n// Helper types\nexport namespace Plugin {\n    /**\n     * Injected UI. There're two kinds\n     * - InjectUIReact: Optimized for React component.\n     * - InjectUIRaw: The fallback choice if a React component doesn't apply here.\n     */\n    export type InjectUI<Props> = InjectUIRaw<Props> | InjectUIReact<Props>\n    /**\n     *\n     * @example\n     * ```ts\n     * const ui = {\n     *      type: 'raw' as const,\n     *      init(signal, dom) {\n     *          return props => dom.textContent = toString(props)\n     *      }\n     * }\n     * ```\n     */\n    export type InjectUIRaw<Props> = {\n        type: 'raw'\n        /**\n         * The raw version of the inject UI.\n         * @param signal The AbortSignal. You should undo side effects when the signal aborts.\n         * @param mountingPoint The mounting DOM\n         * @returns A function that will be called each time if the `props` has changed\n         */\n        init(signal: AbortSignal, mountingPoint: HTMLDivElement): (props: Props) => void\n    }\n    export type InjectUIReact<Props> = React.ComponentType<Props>\n}\n\nexport type IndexableTaggedUnion = {\n    type: string | number\n    id: string | number\n}\n\nexport interface I18NStringField {\n    /** The i18n key of the string content. */\n    i18nKey?: string\n    /** The fallback content to display if there is no i18n string found. */\n    fallback: string\n}\n\nexport type I18NFieldOrReactNode = I18NStringField | React.ReactNode\n\nexport interface IdentityResolved {\n    nickname?: string\n    avatar?: string\n    bio?: string\n    homepage?: string\n    identifier?: ProfileIdentifier\n    isOwner?: boolean\n}\n\n/**\n * This namespace is not related to the plugin authors\n */\n// ---------------------------------------------------\nexport namespace Plugin.__Host {\n    export interface Host<Definition, Context> {\n        /**\n         * Control if the plugin is in the minimal mode.\n         *\n         * If it is in the minimal mode, it will be omitted in some cases.\n         */\n        minimalMode: EnabledStatusReporter\n\n        addI18NResource(pluginID: string, resources: Shared.I18NResource): void\n\n        createContext(id: string, definition: Definition, signal: AbortSignal): Context\n\n        signal?: AbortSignal\n        permission: PermissionReporter\n    }\n\n    export interface WorkerContext extends Omit<Worker.WorkerContext, 'startService' | 'startGeneratorService'> {}\n    export interface PermissionReporter {\n        hasPermission(host_permission: string[]): Promise<boolean>\n\n        events: Emitter<{ changed: [] }>\n    }\n\n    export interface EnabledStatusReporter {\n        isEnabled(id: string): BooleanPreference | Promise<BooleanPreference>\n\n        events: Emitter<{\n            enabled: [id: string]\n            disabled: [id: string]\n        }>\n    }\n}\n","import type { SerializableTypedMessage } from '../base.js'\nimport { createIsType } from '../utils/internal.js'\n\nexport interface TypedMessageEmpty extends SerializableTypedMessage<1> {\n    readonly type: 'empty'\n    readonly meta?: undefined\n}\n\nexport const isTypedMessageEmpty = createIsType<TypedMessageEmpty>('empty')\n\nlet empty: TypedMessageEmpty\nexport function makeTypedMessageEmpty(): TypedMessageEmpty {\n    if (empty) return empty\n\n    empty = {\n        type: 'empty',\n        serializable: true,\n        version: 1,\n        meta: undefined,\n    }\n    Object.setPrototypeOf(empty, null)\n    Object.freeze(empty)\n    return empty\n}\n","import type { NonSerializableTypedMessage, Meta } from '../base.js'\nimport { createIsType } from '../utils/internal.js'\n\n/**\n * A single image\n * TODO: it should be serializable but still not decided how to do that yet.\n */\nexport interface TypedMessageImage extends NonSerializableTypedMessage {\n    readonly type: 'image'\n    readonly image: string | Blob\n    readonly width?: number\n    readonly height?: number\n}\n\nexport const isTypedMessageImage = createIsType<TypedMessageImage>('image')\n\nexport function makeTypedMessageImage(\n    image: TypedMessageImage['image'],\n    size?: { width: number; height: number },\n    meta?: Meta,\n): TypedMessageImage {\n    return {\n        type: 'image',\n        serializable: false,\n        image,\n        width: size?.width,\n        height: size?.height,\n        meta,\n    }\n}\n","import type { TypedMessage, NonSerializableTypedMessage } from '../base.js'\nimport { createIsType } from '../utils/internal.js'\n\nexport interface PendingPromise<T> extends Promise<T> {\n    status: 'pending'\n}\nexport interface FulfilledPromise<T> extends Promise<T> {\n    readonly status: 'fulfilled'\n    readonly value: T\n}\nexport interface RejectedPromise<T> extends Promise<T> {\n    readonly status: 'rejected'\n    readonly reason: any\n}\nexport type StatusExposedPromise<T> = PendingPromise<T> | FulfilledPromise<T> | RejectedPromise<T>\nexport interface TypedMessagePromise<T extends TypedMessage = TypedMessage> extends NonSerializableTypedMessage {\n    readonly type: 'promise'\n    readonly promise: StatusExposedPromise<T>\n    readonly meta?: undefined\n    /** What to display when the message is not ready. */\n    readonly alt?: TypedMessage\n}\n\nexport const isTypedMessagePromise = createIsType<TypedMessagePromise>('promise')\n\nexport function makeTypedMessagePromise<T extends TypedMessage = TypedMessage>(\n    promise: Promise<T>,\n    alt?: TypedMessage,\n): TypedMessagePromise<T> {\n    const x: TypedMessagePromise<T> = {\n        type: 'promise',\n        serializable: false,\n        promise: getPromiseWithStatus(promise),\n        alt,\n        meta: undefined,\n    }\n    return x\n}\nconst seen = new WeakMap<Promise<any>, StatusExposedPromise<any>>()\nfunction getPromiseWithStatus<T>(promise: Promise<T>): StatusExposedPromise<T> {\n    // let's assume it already handle the status update\n    if ('status' in promise) return promise as StatusExposedPromise<T>\n    if (seen.has(promise)) return seen.get(promise)!\n    const _ = Promise.resolve(promise) as StatusExposedPromise<T>\n    Object.defineProperty(_, 'status', { configurable: true, value: 'pending' })\n    _.then(\n        (value) => {\n            Object.defineProperties(_, {\n                status: { value: 'fulfilled' },\n                value: { value },\n            })\n        },\n        (error) => {\n            Object.defineProperties(_, {\n                status: { value: 'rejected' },\n                reason: { value: error },\n            })\n        },\n    )\n    seen.set(promise, _)\n    return _\n}\n","import type { SerializableTypedMessage, TypedMessage, Meta } from '../base.js'\nimport { createIsType } from '../utils/internal.js'\n\nexport type TypedMessageText = TypedMessageTextV1\n\n/** A text message */\nexport interface TypedMessageTextV1 extends SerializableTypedMessage<1> {\n    readonly type: 'text'\n    readonly content: string\n}\n\nexport const isTypedMessageTextV1 = createIsType<TypedMessageTextV1>('text', 1)\n\nexport const isTypedMessageText: (x: TypedMessage) => x is TypedMessageText = isTypedMessageTextV1\n\nexport function makeTypedMessageText(text: string, meta?: Meta): TypedMessageTextV1 {\n    return {\n        type: 'text',\n        version: 1,\n        serializable: true,\n        content: text,\n        meta,\n    }\n}\n","import type { SerializableTypedMessage, SerializableTypedMessages, TypedMessage, Meta } from '../base.js'\nimport { isSerializableTypedMessage } from '../utils/index.js'\nimport { composeEvery } from '../utils/internal.js'\n\n/** Multiple TypedMessages (ordered) */\nexport interface TypedMessageTuple<T extends readonly TypedMessage[] = readonly TypedMessage[]> extends TypedMessage {\n    readonly type: 'tuple'\n    readonly items: T\n}\nexport interface TypedMessageTupleSerializable<\n    T extends readonly SerializableTypedMessages[] = readonly SerializableTypedMessages[],\n> extends SerializableTypedMessage<1>,\n        TypedMessageTuple<T> {\n    readonly type: 'tuple'\n}\n\nexport function isTypedMessageTuple(x: TypedMessage): x is TypedMessageTuple | TypedMessageTupleSerializable {\n    return x.type === 'tuple'\n}\n\nexport const isTypedMessageTupleSerializable: (x: TypedMessage) => x is TypedMessageTupleSerializable = composeEvery(\n    isTypedMessageTuple,\n    isSerializableTypedMessage,\n) as any\n\nexport function makeTypedMessageTuple<T extends readonly TypedMessage[] = readonly TypedMessage[]>(\n    items: T,\n    meta?: Meta,\n): TypedMessageTuple<T> {\n    return { type: 'tuple', items, meta }\n}\nexport function makeTypedMessageTupleFromList<T extends readonly TypedMessage[] = readonly TypedMessage[]>(\n    ...args: T\n): TypedMessageTuple<T> {\n    return { type: 'tuple', items: args }\n}\n\nexport function makeTypedMessageTupleSerializable<\n    T extends readonly SerializableTypedMessages[] = readonly SerializableTypedMessages[],\n>(items: T, meta?: Meta): TypedMessageTupleSerializable<T> {\n    return { type: 'tuple', version: 1, serializable: true, items, meta }\n}\n\nexport function makeTypedMessageSerializableTupleFromList<\n    T extends readonly SerializableTypedMessages[] = readonly SerializableTypedMessages[],\n>(...args: T): TypedMessageTupleSerializable<T> {\n    return { type: 'tuple', version: 1, items: args, serializable: true }\n}\n","import type { Meta, TypedMessage } from '../base.js'\nimport { createIsType } from '../utils/internal.js'\n\n/**\n * This TypedMessage represents an encrypted TypedMessage.\n */\nexport interface TypedMessageMaskPayload extends TypedMessage {\n    readonly type: 'x-mask-payload'\n    readonly message: TypedMessage\n}\nexport const isTypedMessageMaskPayload = createIsType<TypedMessageMaskPayload>('x-mask-payload')\n\nexport function makeTypedMessageMaskPayload(\n    message: TypedMessageMaskPayload['message'],\n    meta?: Meta,\n): TypedMessageMaskPayload {\n    return {\n        type: 'x-mask-payload',\n        message,\n        meta,\n    }\n}\n","import type { Meta, NonSerializableWithAltTypedMessage } from '../base.js'\nimport { createIsType } from '../utils/internal.js'\nimport { makeTypedMessageText, type TypedMessageImage, type TypedMessageText } from '../core/index.js'\n\n/** It represents a single link. */\nexport interface TypedMessageAnchor extends NonSerializableWithAltTypedMessage {\n    readonly type: 'x-anchor'\n    readonly category: 'normal' | 'user' | 'cash' | 'hash'\n    readonly href: string\n    readonly content: string\n    readonly alt: TypedMessageText\n    /** The message that should be displayed as a decorate after the link. */\n    readonly postImage?: TypedMessageImage\n}\n\nexport const isTypedMessageAnchor = createIsType<TypedMessageAnchor>('x-anchor')\n\nexport function makeTypedMessageAnchor(\n    category: TypedMessageAnchor['category'],\n    href: TypedMessageAnchor['href'],\n    content: TypedMessageAnchor['content'],\n    postImage?: TypedMessageImage,\n    meta?: Meta | undefined,\n): TypedMessageAnchor {\n    return {\n        type: 'x-anchor',\n        serializable: false,\n        category,\n        href,\n        content,\n        alt: makeTypedMessageText(`[${content}](${href})`, meta),\n        postImage,\n        meta,\n    }\n}\n","import type { TypedMessage } from '../base.js'\nimport { isTypedMessageText, isTypedMessageImage } from '../core/index.js'\nimport { isTypedMessageAnchor } from '../extension/index.js'\nimport { type Option, Some, None } from 'ts-results-es'\nimport { forEachTypedMessageChild } from '../visitor/index.js'\n\n/**\n * Get inner text from a TypedMessage\n * @param message message\n */\nexport function extractTextFromTypedMessage(\n    message: TypedMessage | null,\n    options?: { linkAsText: boolean },\n): Option<string> {\n    if (!message) return None\n\n    const text: string[] = []\n    function visitor(message: TypedMessage) {\n        if (isTypedMessageText(message)) text.push(message.content)\n        else if (isTypedMessageAnchor(message)) {\n            text.push(message.content)\n            if (options?.linkAsText) text.push(`(${message.href})`)\n        } else forEachTypedMessageChild(message, visitor)\n    }\n    visitor(message)\n    forEachTypedMessageChild(message, visitor)\n    if (text.length) return Some(text.join(' '))\n    return None\n}\nexport function extractImageFromTypedMessage(message: TypedMessage | null): Array<string | Blob> {\n    if (!message) return []\n\n    const image: Array<string | Blob> = []\n    function visitor(message: TypedMessage): void {\n        if (isTypedMessageImage(message)) return void image.push(message.image)\n        return forEachTypedMessageChild(message, visitor)\n    }\n    visitor(message)\n    forEachTypedMessageChild(message, visitor)\n    return image\n}\n","import type {\n    TypedMessage,\n    SerializableTypedMessages,\n    SerializableTypedMessage,\n    NonSerializableWithAltTypedMessage,\n} from '../base.js'\nimport { isEqual } from 'lodash-es'\n\nexport * from './extract.js'\n\nexport function isNonSerializableTypedMessageWithAlt(x: TypedMessage): x is NonSerializableWithAltTypedMessage {\n    const y = x as NonSerializableWithAltTypedMessage\n    if (y.serializable !== false) return false\n    if (!y.alt) return false\n    return isSerializableTypedMessage(y.alt)\n}\nexport function isSerializableTypedMessage(x: TypedMessage): x is SerializableTypedMessages {\n    if ((x as SerializableTypedMessage<number>).serializable) return true\n    return isNonSerializableTypedMessageWithAlt(x)\n}\n\n/**\n * This is a tree compare algorithm, may need to find a more efficient one from NPM\n */\nexport function isTypedMessageEqual(message1: TypedMessage, message2: TypedMessage): boolean {\n    if (message1.type !== message2.type) return false\n    if (message1.meta !== message2.meta) return false\n    // perform a deep equal\n    return isEqual(message1, message2)\n}\n","import type { SerializableTypedMessage, TypedMessage } from '../base.js'\n\n/** @internal */\nexport function createIsType<T extends TypedMessage>(x: T['type'], version?: number) {\n    return (y: TypedMessage): y is T => {\n        if (version !== undefined && (y as SerializableTypedMessage<number>).version !== version) return false\n        return y.type === x\n    }\n}\n/** @internal */\nexport function composeSome<Args extends any[]>(...fns: Array<(...args: Args) => boolean>) {\n    return (...args: Args) => fns.some((f) => f(...args))\n}\n\n/** @internal */\nexport function composeEvery<Args extends any[]>(...fns: Array<(...args: Args) => boolean>) {\n    return (...args: Args) => fns.every((f) => f(...args))\n}\n","import { isTypedMessagePromise, isTypedMessageTuple } from '../core/index.js'\nimport { isNonSerializableTypedMessageWithAlt } from '../utils/index.js'\nimport type { TypedMessage } from '../base.js'\nimport { isTypedMessageMaskPayload } from '../extension/index.js'\n\nexport function forEachTypedMessageChild(node: TypedMessage, visitor: (x: TypedMessage) => void | 'stop') {\n    let stop: void | 'stop'\n    if (isTypedMessageTuple(node)) {\n        for (const each of node.items) {\n            stop = visitor(each)\n            if (stop) return\n        }\n    } else if (isTypedMessagePromise(node)) {\n        // if Promise has a resolved value, we ignore it's alt.\n        if ('value' in node.promise) visitor(node.promise.value)\n        else if (node.alt) visitor(node.alt)\n    } else if (isTypedMessageMaskPayload(node)) {\n        visitor(node.message)\n    } else if (isNonSerializableTypedMessageWithAlt(node)) {\n        visitor(node.alt)\n    }\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["useRef","Draggable","makeStyles","useStyle","theme","root","position","width","height","top","left","zIndex","pointerEvents","paper","breakpoints","up","right","down","bottom","maxWidth","DraggableDiv","DraggableProps","props","classes","ref","div","className","nodeRef","bounds","cancel","handle","children","saveFileFromUrl","url","fileName","browser","downloads","download","filename","saveAs","saveFileFromBuffer","options","blob","Blob","fileContent","type","mimeType","URL","createObjectURL","useState","useCopyToClipboard","useMaskSharedTrans","format","formatDateTime","useCustomSnackbar","DialogActions","DialogContent","DialogTitle","DialogContentText","TextField","Box","IconButton","Paper","Link","Button","Typography","Image","useMatchXS","Close","CloseIcon","Download","OpenInBrowser","useStyles","title","marginLeft","spacing","button","marginRight","AutoPasteFailedDialog","onClose","data","t","image","undefined","showSnackbar","copy","isMobile","Date","now","elevation","sx","nav","size","onClick","span","auto_paste_failed_dialog_title","paddingTop","color","marginBottom","auto_paste_failed_dialog_content","text","multiline","fullWidth","value","InputProps","readOnly","variant","copy_success_of_text","preventDuplicate","anchorOrigin","vertical","horizontal","copy_text","textAlign","src","style","navigator","clipboard","write","ClipboardItem","copy_success_of_image","copy_image","startIcon","component","href","target","auto_paste_failed_dialog_image_caption","useAutoPasteFailedDialog","open","setOpen","setData","useEffect","createInjectHooksRenderer","useActivatedPluginsSiteAdaptor","MaskMessages","GlobalInjection","visibility","useAnyMode","x","PageInspector","closeSnackbar","autoPasteFailed","JSX","xsMatched","events","on","key","Math","random","close","timeout","setTimeout","auto_paste_failed_snackbar","display","justifyContent","clearTimeout","auto_paste_failed_snackbar_action","aria-label","auto_paste_failed_snackbar_action_close","action","memo","attachReactTreeWithoutContainer","injectPageInspectorDefault","PageInspectorDefault","injectPageInspector","signal","Services","InitAutonomousStateProfiles","network","query","addEventListener","ownPersonaChanged","val","Identity","queryOwnedProfilesInformation","aborted","isEqual","ValueRef","ObservableWeakMap","ThemeMode","FontSize","ThemeColor","stateCreator","profiles","creator","EmptyIdentityResolveProviderState","EmptyPostProviderState","EmptyThemeSettingsProviderState","Normal","mode","Light","Blue","isDim","resolveFacebookLink","link","replace","difference","noop","ObservableMap","ObservableSet","parseURLs","PostIdentifier","createSubscriptionFromValueRef","SubscriptionDebug","debug","mapSubscription","EMPTY_LIST","PostIVIdentifier","EnhanceableSite","extractTextFromTypedMessage","makeTypedMessageEmpty","activatedSiteAdaptorUI","createSiteAdaptorSpecializedPostContext","create","createPostContext","opt","forEach","fn","linksSubscribe","isFacebook","networkIdentifier","Facebook","links","evaluate","rawMessage","getCurrentValue","unwrapOr","concat","postMentionedLinksProvider","map","length","push","subscribe","f","author","avatarURL","nickname","postID","postIdentifier","by","id","sub","a","b","postIVIdentifier","isPublicShared","isAuthorOfPost","version","coAuthors","rootNode","rootElement","realCurrent","actionsElement","isFocusing","suggestedInjectionPoint","comment","comments","encryptComment","decryptComment","identifier","getURLFromPostIdentifier","mentionedLinks","postMetadataImages","postImagesProvider","hasMaskPayload","msg","join","hasPayloadLike","publicShared","decryptedReport","opts","currentAuthor","iv","sharedPublic","isSome","createRefsForCreatePostContext","postBy","postCoAuthors","postMessage","postMetadataMentionedLinks","subscriptions","canParse","asValues","event","ALL_EVENTS","includes","useMemo","useSubscription","useObservableValues","subscription","callback","createContext","createElement","useContext","useValueRef","PostInfoContext","displayName","PostInfoProvider","Provider","post","usePostInfoDetails","__proto__","Proxy","get","_","postInfo","TypeError","k","isSubscription","Object","defineProperty","configurable","Plugin","AvatarRealmSourceType","ProfilePage","ProfileCard","Post","Editor","Menu","Suggestion","TipsSlot","FollowButton","Profile","MirrorMenu","MirrorEntry","MirrorProfile","MirrorVerification","LensSlot","ProfileName","Sidebar","SiteAdaptor","createIsType","isTypedMessageEmpty","empty","serializable","meta","setPrototypeOf","freeze","isTypedMessageImage","makeTypedMessageImage","isTypedMessagePromise","makeTypedMessagePromise","promise","alt","getPromiseWithStatus","seen","WeakMap","has","Promise","resolve","then","defineProperties","status","error","reason","set","isTypedMessageTextV1","isTypedMessageText","makeTypedMessageText","content","isSerializableTypedMessage","composeEvery","isTypedMessageTuple","isTypedMessageTupleSerializable","makeTypedMessageTuple","items","makeTypedMessageTupleFromList","args","makeTypedMessageTupleSerializable","makeTypedMessageSerializableTupleFromList","isTypedMessageMaskPayload","makeTypedMessageMaskPayload","message","isTypedMessageAnchor","makeTypedMessageAnchor","category","postImage","Some","None","forEachTypedMessageChild","visitor","linkAsText","extractImageFromTypedMessage","isNonSerializableTypedMessageWithAlt","y","isTypedMessageEqual","message1","message2","composeSome","fns","some","every","node","stop","each"],"sourceRoot":"","x_google_ignoreList":[1,2,26,27,28]}