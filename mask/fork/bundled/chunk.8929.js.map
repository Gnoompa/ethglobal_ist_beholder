{"version":3,"file":"bundled/chunk.8929.js","mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2CAA2C,4EAA4E,IAAI;AAClI,8BAA8B,+CAAQ;AACtC,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;ACjGA;AAC6E;AAC3B;;AAElD;AACA,kBAAkB,8EAAc;AAChC,SAAS,wEAAY,UAAU,gFAAqB;AACpD;;AAE4B;AAC5B","sources":["webpack://mask-network/./packages/shared/src/utils/resolveNextIDPlatform.ts","webpack://mask-network/./packages/mask/popups/pages/Friends/Search/index.tsx","webpack://mask-network/./packages/mask/popups/pages/Friends/ContactCard/ConnectedAccounts/index.tsx","webpack://mask-network/./packages/mask/shared/helpers/attachNextIDToProfile.ts","webpack://mask-network/./packages/mask/popups/hooks/useFriendProfiles.ts","webpack://mask-network/./packages/mask/popups/pages/Friends/ContactCard/index.tsx","webpack://mask-network/./packages/mask/popups/pages/Friends/Contacts/index.tsx","webpack://mask-network/./packages/mask/popups/pages/Friends/SearchList/index.tsx","webpack://mask-network/./packages/mask/popups/pages/Friends/Home/UI.tsx","webpack://mask-network/./packages/shared/src/utils/identifierSelector.ts","webpack://mask-network/./packages/mask/popups/hooks/useFriends.ts","webpack://mask-network/./packages/mask/popups/hooks/useSearchValue.ts","webpack://mask-network/./packages/mask/popups/hooks/useFriendsFromSearch.tsx","webpack://mask-network/./packages/mask/popups/pages/Friends/Home/index.tsx","webpack://mask-network/./packages/plugin-infra/src/site-adaptor/useAllPersonas.ts","webpack://mask-network/./packages/shared/src/UI/components/ElementAnchor/index.tsx","webpack://mask-network/./packages/shared/src/hooks/useCurrentLinkedPersona.ts","webpack://mask-network/./node_modules/.pnpm/@react-hookz+web@23.1.0_react-dom@0.0.0-experimental-0a360642d-20230711_react@0.0.0-experimental-0a360642d-20230711/node_modules/@react-hookz/web/esm/useIntersectionObserver/index.js","webpack://mask-network/./node_modules/.pnpm/@tanstack+react-query@4.29.25_react-dom@0.0.0-experimental-0a360642d-20230711_react@0.0.0-exp_ph45ttbltampqv75cnp6zhp25e/node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.mjs"],"sourcesContent":["import { NextIDPlatform } from '@masknet/shared-base'\nimport { isValidAddress } from '@masknet/web3-shared-evm'\n\nexport const resolveNextIDPlatform = (value: string) => {\n    const address = value\n    if (isValidAddress(address)) return NextIDPlatform.Ethereum\n\n    const pubKey = value\n    if (pubKey.length >= 44) return NextIDPlatform.NextID\n\n    const domain = value\n\n    if (domain.endsWith('.eth') || domain.endsWith('.lens')) return NextIDPlatform.Ethereum\n\n    const userId = value\n    if (/^@?\\w{1,15}$/.test(userId)) return NextIDPlatform.Twitter\n\n    return\n}\n","import { memo, useState } from 'react'\nimport { InputBase } from '@mui/material'\nimport { makeStyles } from '@masknet/theme'\nimport { useMaskSharedTrans } from '../../../../shared-ui/index.js'\nimport { Icons } from '@masknet/icons'\nimport { useCurrentLinkedPersona } from '@masknet/shared'\n\nconst useStyles = makeStyles()((theme) => ({\n    inputRoot: {\n        borderRadius: 8,\n        width: '100%',\n        background: theme.palette.maskColor.input,\n        fontSize: 14,\n    },\n    input: {\n        '&::placeholder': {\n            color: theme.palette.maskColor.third,\n        },\n        padding: '11px 4px !important',\n    },\n    inputFocused: {\n        background: theme.palette.maskColor.bottom,\n        borderColor: theme.palette.text.third,\n    },\n    button: {\n        background: 'transparent',\n        border: 'none',\n        outline: 'none',\n        cursor: 'pointer',\n    },\n}))\n\ninterface SearchProps {\n    setSearchValue: (v: string) => void\n}\n\nexport const Search = memo<SearchProps>(function Search({ setSearchValue }) {\n    const { classes } = useStyles()\n    const t = useMaskSharedTrans()\n    const [value, setValue] = useState<string>('')\n    const [timer, setTimer] = useState<ReturnType<typeof setTimeout> | null>(null)\n    const currentPersona = useCurrentLinkedPersona()\n    const handleKeyPress = (e: React.KeyboardEvent) => {\n        if (e.key !== 'Enter') return\n        if (timer) clearTimeout(timer)\n        setSearchValue(value)\n    }\n    return (\n        <InputBase\n            className={classes.inputRoot}\n            classes={{\n                focused: classes.inputFocused,\n                input: classes.input,\n            }}\n            inputProps={{ className: classes.input }}\n            disabled={!currentPersona}\n            value={value}\n            onKeyUp={(e) => handleKeyPress(e)}\n            onBlur={(e) => {\n                if (timer) clearTimeout(timer)\n                setTimer(\n                    setTimeout(() => {\n                        setSearchValue(e.target.value)\n                    }, 500),\n                )\n            }}\n            onChange={(e) => {\n                setValue(e.target.value)\n            }}\n            startAdornment={<Icons.Search />}\n            endAdornment={\n                value ? (\n                    <button\n                        type=\"reset\"\n                        onClick={() => {\n                            setValue('')\n                            setSearchValue('')\n                        }}\n                        className={classes.button}>\n                        <Icons.Close />\n                    </button>\n                ) : null\n            }\n            placeholder={t.popups_encrypted_friends_search_placeholder()}\n        />\n    )\n})\n","import { memo } from 'react'\nimport { makeStyles } from '@masknet/theme'\nimport { Box, Typography, useTheme, ButtonBase } from '@mui/material'\nimport { PopupRoutes, type ProfileIdentifier } from '@masknet/shared-base'\nimport { useNavigate } from 'react-router-dom'\nimport { AccountRender } from '../../AccountRender/index.js'\nimport type { Profile } from '../../common.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    connectedAccounts: {\n        borderBottomLeftRadius: '6px',\n        borderBottomRightRadius: '6px',\n        background: theme.palette.mode === 'dark' ? theme.palette.maskColor.bottom : theme.palette.maskColor.white,\n        padding: '8px',\n        position: 'relative',\n    },\n    more: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '24px',\n        height: '24px',\n        background: 'rgba(28, 104, 243, 0.1)',\n        borderRadius: '50%',\n        position: 'absolute',\n        right: '10px',\n    },\n}))\n\ninterface ConnectedAccountsProps {\n    avatar?: string\n    profiles?: Profile[]\n    nextId?: string\n    publicKey?: string\n    isLocal?: boolean\n    localProfile?: ProfileIdentifier\n}\n\nexport const ConnectedAccounts = memo<ConnectedAccountsProps>(function ({\n    avatar,\n    nextId,\n    profiles,\n    publicKey,\n    isLocal,\n    localProfile,\n}) {\n    const theme = useTheme()\n    const { classes } = useStyles()\n    const navigate = useNavigate()\n\n    return (\n        <Box\n            display=\"flex\"\n            gap=\"8px\"\n            alignItems=\"center\"\n            height=\"58px\"\n            className={classes.connectedAccounts}\n            width=\"100%\">\n            {profiles?.slice(0, 2).map((profile, index) => {\n                return (\n                    <AccountRender\n                        key={index}\n                        profile={profile}\n                        avatar={localProfile?.userId === (profile.name ?? profile.identity) ? avatar : ''}\n                    />\n                )\n            })}\n            {profiles && profiles.length > 2 ? (\n                <ButtonBase\n                    className={classes.more}\n                    onClick={() => {\n                        navigate(`${PopupRoutes.FriendsDetail}/${nextId}`, {\n                            state: {\n                                avatar,\n                                publicKey,\n                                nextId,\n                                profiles,\n                                isLocal,\n                                localProfile,\n                            },\n                        })\n                    }}>\n                    <Typography fontSize={12} fontWeight={400} lineHeight=\"16px\" color={theme.palette.maskColor.main}>\n                        {`+${profiles?.length - 2}`}\n                    </Typography>\n                </ButtonBase>\n            ) : null}\n        </Box>\n    )\n})\n","import { type ProfileInformationFromNextID, ProfileIdentifier } from '@masknet/shared-base'\nimport Services from '#services'\nimport { batch, notify } from 'async-call-rpc/full'\n\nexport async function attachNextIDToProfile(nextID: ProfileInformationFromNextID) {\n    const whoAmI = await Services.Settings.getCurrentPersonaIdentifier()\n\n    if (!nextID?.fromNextID || !nextID.linkedPersona || !whoAmI) return\n    const [rpc, emit] = batch(notify(Services.Identity))\n    await Promise.allSettled(\n        nextID.linkedTwitterNames?.map((x) => {\n            return rpc.attachNextIDPersonaToProfile(\n                {\n                    ...nextID,\n                    nickname: x,\n                    identifier: ProfileIdentifier.of('twitter.com', x).expect(`${x} should be a valid user id`),\n                },\n                whoAmI,\n            )\n        }) ?? [],\n    )\n    emit()\n}\n","import {\n    EMPTY_LIST,\n    NextIDPlatform,\n    type BindingProof,\n    type ProfileIdentifier,\n    type EnhanceableSite,\n} from '@masknet/shared-base'\nimport { NextIDProof } from '@masknet/web3-providers'\nimport { useQuery } from '@tanstack/react-query'\nimport { useCurrentPersona } from '../../shared-ui/hooks/index.js'\nimport { PlatformSort, UnsupportedPlatforms } from '../pages/Friends/common.js'\nimport { useMemo } from 'react'\n\nexport function profilesFilter(x: BindingProof) {\n    return (x.platform === NextIDPlatform.ENS && x.name.endsWith('.eth')) || !UnsupportedPlatforms.includes(x.platform)\n}\n\nexport function useFriendProfiles(seen: boolean, nextId?: string, profile?: ProfileIdentifier) {\n    const currentPersona = useCurrentPersona()\n\n    const { data: profiles = EMPTY_LIST } = useQuery(\n        ['profiles', currentPersona?.identifier.publicKeyAsHex, nextId],\n        async () => {\n            if (!nextId) return EMPTY_LIST\n            try {\n                return await NextIDProof.queryProfilesByPublicKey(nextId, 2)\n            } catch (error) {\n                return EMPTY_LIST\n            }\n        },\n        {\n            enabled: seen && !!nextId,\n        },\n    )\n    return useMemo(() => {\n        if (profiles.length === 0) {\n            if (profile?.userId) {\n                return [\n                    {\n                        platform: profile?.network as\n                            | EnhanceableSite.Twitter\n                            | EnhanceableSite.Facebook\n                            | EnhanceableSite.Instagram,\n                        identity: profile.userId,\n                        is_valid: true,\n                        last_checked_at: '',\n                        name: profile.userId,\n                        created_at: '',\n                    },\n                ]\n            } else {\n                return EMPTY_LIST\n            }\n        }\n        return profiles.filter(profilesFilter).sort((a, b) => PlatformSort[a.platform] - PlatformSort[b.platform])\n    }, [profiles])\n}\n","import { memo, useState, useCallback, useMemo } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useEverSeen } from '@masknet/shared-base-ui'\nimport { useMutation, useQueryClient, type InfiniteData } from '@tanstack/react-query'\nimport { Icons } from '@masknet/icons'\nimport { ActionButton, makeStyles, usePopupCustomSnackbar } from '@masknet/theme'\nimport { Box, Typography, Link, useTheme, ButtonBase as Button, Avatar } from '@mui/material'\nimport {\n    formatPersonaFingerprint,\n    PopupRoutes,\n    ProfileIdentifier,\n    ECKeyIdentifier,\n    NextIDPlatform,\n} from '@masknet/shared-base'\nimport { CopyButton, PersonaContext } from '@masknet/shared'\nimport Services from '#services'\nimport { ConnectedAccounts } from './ConnectedAccounts/index.js'\nimport { attachNextIDToProfile } from '../../../../shared/index.js'\nimport { type Friend, useFriendProfiles } from '../../../hooks/index.js'\nimport { useMaskSharedTrans } from '../../../../shared-ui/index.js'\nimport { type Profile } from '../common.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    card: {\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        borderRadius: '8px',\n        border: '1px solid',\n        borderColor: theme.palette.maskColor.line,\n    },\n    title: {\n        display: 'flex',\n        gap: '8px',\n        alignItems: 'center',\n    },\n    titleWrap: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        width: '100%',\n        padding: '12px',\n        borderTopLeftRadius: '6px',\n        borderTopRightRadius: '6px',\n        background: theme.palette.maskColor.modalTitleBg,\n    },\n    avatar: {\n        width: 40,\n        height: 40,\n    },\n    icon: {\n        width: 12,\n        height: 12,\n        fontSize: 12,\n        color: theme.palette.maskColor.second,\n    },\n}))\n\ninterface ContactCardProps {\n    avatar?: string\n    proofProfiles?: Profile[]\n    nextId?: string\n    publicKey?: string\n    isLocal?: boolean\n    profile?: ProfileIdentifier\n    refetch?: () => void\n}\n\nexport const ContactCard = memo<ContactCardProps>(function ContactCard({\n    avatar,\n    nextId,\n    publicKey,\n    isLocal,\n    profile,\n    refetch,\n    proofProfiles,\n}) {\n    const theme = useTheme()\n    const { classes } = useStyles()\n    const navigate = useNavigate()\n    const { showSnackbar } = usePopupCustomSnackbar()\n    const [local, setLocal] = useState(false)\n    const [seen, ref] = useEverSeen<HTMLLIElement>()\n    const { currentPersona } = PersonaContext.useContainer()\n    const profiles = useFriendProfiles(seen, nextId, profile)\n    const rawPublicKey = currentPersona?.identifier.rawPublicKey\n    const queryClient = useQueryClient()\n    const t = useMaskSharedTrans()\n\n    const friendInfo = useMemo(() => {\n        if (!rawPublicKey) return\n        const twitter = proofProfiles?.find((p) => p.platform === NextIDPlatform.Twitter)\n        const personaIdentifier = ECKeyIdentifier.fromHexPublicKeyK256(nextId).expect(\n            `${nextId} should be a valid hex public key in k256`,\n        )\n        if (!twitter) {\n            return {\n                persona: personaIdentifier,\n            }\n        } else {\n            const profileIdentifier = ProfileIdentifier.of('twitter.com', twitter.identity).unwrap()\n            return {\n                persona: personaIdentifier,\n                profile: profileIdentifier,\n            }\n        }\n    }, [profiles, nextId, rawPublicKey])\n\n    const handleAddFriend = useCallback(async () => {\n        if (!friendInfo || !currentPersona) return\n        const { persona, profile } = friendInfo\n        if (!profile) {\n            await Services.Identity.createNewRelation(persona, currentPersona.identifier)\n        } else {\n            await attachNextIDToProfile({\n                identifier: profile,\n                linkedPersona: persona,\n                fromNextID: true,\n                linkedTwitterNames: [profile.userId],\n            })\n        }\n    }, [nextId, queryClient, currentPersona, refetch, friendInfo])\n\n    const { mutate: onAdd, isLoading } = useMutation({\n        mutationFn: handleAddFriend,\n        onMutate: async (friend: Friend | undefined) => {\n            if (!friend) return\n            await queryClient.cancelQueries(['relation-records', rawPublicKey])\n            await queryClient.cancelQueries(['friends', rawPublicKey])\n            queryClient.setQueryData(\n                ['friends', rawPublicKey],\n                (\n                    oldData:\n                        | InfiniteData<{\n                              friends: Friend[]\n                              nextPageOffset: number\n                          }>\n                        | undefined,\n                ) => {\n                    if (!oldData) return undefined\n                    return {\n                        ...oldData,\n                        pages: oldData.pages[0]\n                            ? [\n                                  { friends: [friend, ...oldData.pages[0].friends], nextPageOffset: 10 },\n                                  ...oldData.pages.slice(1),\n                              ]\n                            : [{ friends: [friend], nextPageOffset: 0 }],\n                    }\n                },\n            )\n            showSnackbar(t.popups_encrypted_friends_added_successfully(), { variant: 'success' })\n            setLocal(true)\n        },\n        onSettled: async () => {\n            await queryClient.invalidateQueries(['relation-records', rawPublicKey])\n            await queryClient.invalidateQueries(['friends', rawPublicKey])\n            refetch?.()\n        },\n    })\n\n    return (\n        <Box className={classes.card} ref={ref}>\n            <Box className={classes.titleWrap}>\n                <Box className={classes.title}>\n                    {avatar ? (\n                        <Avatar className={classes.avatar} src={avatar} />\n                    ) : (\n                        <Icons.NextIdAvatar className={classes.avatar} />\n                    )}\n                    <Box>\n                        <Typography fontSize={14} fontWeight={700} lineHeight=\"18px\">\n                            {publicKey ? formatPersonaFingerprint(publicKey) : null}\n                        </Typography>\n                        <Typography\n                            fontSize={12}\n                            color={theme.palette.maskColor.second}\n                            lineHeight=\"16px\"\n                            display=\"flex\"\n                            alignItems=\"center\"\n                            columnGap=\"2px\">\n                            {nextId ? formatPersonaFingerprint(nextId, 4) : null}\n                            <CopyButton text={nextId ? nextId : ''} size={12} className={classes.icon} />\n                            <Link\n                                underline=\"none\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                href={`https://web3.bio/${nextId}`}\n                                className={classes.icon}>\n                                <Icons.LinkOut size={12} />\n                            </Link>\n                        </Typography>\n                    </Box>\n                </Box>\n                {isLocal || local ? (\n                    <Button\n                        onClick={() =>\n                            navigate(`${PopupRoutes.FriendsDetail}/${nextId}`, {\n                                state: {\n                                    avatar,\n                                    publicKey,\n                                    nextId,\n                                    profiles: proofProfiles ?? profiles,\n                                    isLocal,\n                                    localProfile: profile,\n                                },\n                            })\n                        }\n                        color=\"inherit\"\n                        style={{ borderRadius: '50%' }}>\n                        <Icons.ArrowRight />\n                    </Button>\n                ) : (\n                    <ActionButton\n                        variant=\"roundedContained\"\n                        onClick={() => onAdd(friendInfo)}\n                        loading={isLoading}\n                        disabled={isLoading}>\n                        {t.popups_encrypted_friends_add_friends()}\n                    </ActionButton>\n                )}\n            </Box>\n            <ConnectedAccounts\n                avatar={avatar}\n                nextId={nextId}\n                publicKey={publicKey}\n                isLocal={isLocal}\n                profiles={proofProfiles ?? profiles}\n                localProfile={profile}\n            />\n        </Box>\n    )\n})\n","import { memo } from 'react'\nimport { first } from 'lodash-es'\nimport { Box } from '@mui/material'\nimport { makeStyles } from '@masknet/theme'\nimport { ElementAnchor, EmptyStatus } from '@masknet/shared'\nimport { ContactCard } from '../ContactCard/index.js'\nimport { useMaskSharedTrans } from '../../../../shared-ui/index.js'\nimport { type Friend } from '../../../hooks/index.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    empty: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%,-50%)',\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        gap: 12,\n        color: theme.palette.text.secondary,\n        whiteSpace: 'nowrap',\n    },\n    cardContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '12px',\n        padding: '0 16px 16px 16px',\n        flexGrow: 1,\n        overflow: 'auto',\n        '&::-webkit-scrollbar': {\n            display: 'none',\n        },\n    },\n}))\n\ninterface ContactsProps {\n    friendsArray: Array<{ friends: Friend[]; nextPageOffset: number }>\n    fetchNextPage: () => void\n}\n\nexport const Contacts = memo<ContactsProps>(function Contacts({ friendsArray, fetchNextPage }) {\n    const { classes } = useStyles()\n    const t = useMaskSharedTrans()\n    return !first(friendsArray) || first(friendsArray)?.friends.length === 0 ? (\n        <EmptyStatus className={classes.empty}>{t.popups_encrypted_friends_no_friends()}</EmptyStatus>\n    ) : (\n        <Box className={classes.cardContainer}>\n            {friendsArray.map(({ friends }) => {\n                return friends.map((friend) => (\n                    <ContactCard\n                        key={friend.persona.publicKeyAsHex}\n                        avatar={friend.avatar}\n                        nextId={friend.persona?.publicKeyAsHex}\n                        publicKey={friend.persona?.rawPublicKey}\n                        profile={friend.profile}\n                        isLocal\n                    />\n                ))\n            })}\n            <ElementAnchor callback={() => fetchNextPage()} height={10} />\n        </Box>\n    )\n})\n","import { makeStyles } from '@masknet/theme'\nimport { memo } from 'react'\nimport { ContactCard } from '../ContactCard/index.js'\nimport { Box } from '@mui/material'\nimport { useMaskSharedTrans } from '../../../../shared-ui/index.js'\nimport { EmptyStatus, RestorableScroll, ElementAnchor } from '@masknet/shared'\nimport type { NextIDPersonaBindingsWithIdentifier } from '../../../hooks/index.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    empty: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%,-50%)',\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        gap: 12,\n        color: theme.palette.text.secondary,\n        whiteSpace: 'nowrap',\n    },\n    cardContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '12px',\n        padding: '0 16px 16px 16px',\n        flexGrow: 1,\n        overflow: 'auto',\n        '&::-webkit-scrollbar': {\n            display: 'none',\n        },\n    },\n}))\n\ninterface SearchListProps {\n    searchResult: NextIDPersonaBindingsWithIdentifier[]\n    fetchNextPage: () => void\n    refetch: () => void\n}\n\nexport const SearchList = memo<SearchListProps>(function SearchList({ searchResult, fetchNextPage, refetch }) {\n    const { classes } = useStyles()\n    const t = useMaskSharedTrans()\n    return searchResult.length === 0 ? (\n        <EmptyStatus className={classes.empty}>{t.popups_encrypted_friends_search_no_result()}</EmptyStatus>\n    ) : (\n        <RestorableScroll scrollKey=\"search_contacts\">\n            <Box className={classes.cardContainer}>\n                {searchResult.map((friend) => {\n                    return (\n                        <ContactCard\n                            key={friend.persona}\n                            nextId={friend.persona}\n                            proofProfiles={friend.proofs}\n                            publicKey={friend.linkedPersona?.rawPublicKey}\n                            isLocal={friend.isLocal}\n                            refetch={refetch}\n                            avatar={friend.avatar}\n                        />\n                    )\n                })}\n                <ElementAnchor callback={() => fetchNextPage()} height={10} />\n            </Box>\n        </RestorableScroll>\n    )\n})\n","import { makeStyles, LoadingBase } from '@masknet/theme'\nimport { memo } from 'react'\nimport { Box, Typography } from '@mui/material'\nimport { Search } from '../Search/index.js'\nimport { useMaskSharedTrans } from '../../../../shared-ui/index.js'\nimport type { NextIDPersonaBindingsWithIdentifier, Friend } from '../../../hooks/index.js'\nimport { Contacts } from '../Contacts/index.js'\nimport { SearchList } from '../SearchList/index.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    container: {\n        flex: 1,\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.maskColor.bottom : theme.palette.maskColor.white,\n        display: 'flex',\n        flexDirection: 'column',\n        maxHeight: '100vh',\n        overflowY: 'hidden',\n    },\n    empty: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%,-50%)',\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        gap: 12,\n        color: theme.palette.maskColor.second,\n        whiteSpace: 'nowrap',\n    },\n    mainText: {\n        color: theme.palette.text.primary,\n    },\n}))\n\ninterface FriendsHomeUIProps {\n    searchValue: string\n    searchResult: NextIDPersonaBindingsWithIdentifier[]\n    loading: boolean\n    friends: Array<{ friends: Friend[]; nextPageOffset: number }>\n    setSearchValue: (v: string) => void\n    fetchNextPage: () => void\n    fetchNextSearchPage: () => void\n    refetch: () => void\n}\n\nexport const FriendsHomeUI = memo<FriendsHomeUIProps>(function FriendsHomeUI({\n    loading,\n    friends,\n    setSearchValue,\n    searchResult,\n    searchValue,\n    fetchNextPage,\n    fetchNextSearchPage,\n    refetch,\n}) {\n    const { classes, cx } = useStyles()\n    const t = useMaskSharedTrans()\n    return (\n        <div className={classes.container}>\n            <Box padding=\"16px\">\n                <Search setSearchValue={setSearchValue} />\n            </Box>\n            {loading ? (\n                <div className={cx(classes.empty, classes.mainText)}>\n                    <LoadingBase />\n                    <Typography>{t.loading()}</Typography>\n                </div>\n            ) : searchValue ? (\n                <SearchList searchResult={searchResult} fetchNextPage={fetchNextSearchPage} refetch={refetch} />\n            ) : (\n                <Contacts friendsArray={friends} fetchNextPage={fetchNextPage} />\n            )}\n        </div>\n    )\n})\n","import { type ECKeyIdentifier, ProfileIdentifier } from '@masknet/shared-base'\nexport function isProfileIdentifier(value: ECKeyIdentifier | ProfileIdentifier): value is ProfileIdentifier {\n    return value instanceof ProfileIdentifier\n}\n","import { useCallback } from 'react'\nimport { useInfiniteQuery, useQuery } from '@tanstack/react-query'\nimport { isProfileIdentifier } from '@masknet/shared'\nimport { EMPTY_LIST, type ECKeyIdentifier, type ProfileIdentifier } from '@masknet/shared-base'\nimport Services from '#services'\nimport { useCurrentPersona } from '../../shared-ui/hooks/index.js'\nimport type { RelationRecord } from '../../background/database/persona/type.js'\nimport { first } from 'lodash-es'\n\nexport interface Friend {\n    persona: ECKeyIdentifier\n    profile?: ProfileIdentifier\n    avatar?: string\n}\n\nexport function useFriendsPaged() {\n    const currentPersona = useCurrentPersona()\n\n    const {\n        data: records = EMPTY_LIST,\n        isLoading: recordsLoading,\n        refetch: refetchRecords,\n        status: fetchRelationStatus,\n    } = useQuery(\n        ['relation-records', currentPersona?.identifier.rawPublicKey],\n        async () => {\n            return Services.Identity.queryRelationPaged(\n                currentPersona?.identifier,\n                {\n                    network: 'all',\n                    pageOffset: 0,\n                },\n                3000,\n            )\n        },\n        {\n            enabled: !!currentPersona,\n            networkMode: 'always',\n        },\n    )\n    const {\n        data,\n        hasNextPage,\n        fetchNextPage,\n        isLoading,\n        isFetchingNextPage,\n        refetch: refetchFriends,\n        status,\n    } = useInfiniteQuery({\n        queryKey: ['friends', currentPersona?.identifier.rawPublicKey],\n        enabled: !recordsLoading,\n        queryFn: async ({ pageParam = 0 }) => {\n            const friends: Friend[] = []\n            const startIndex = pageParam ? Number(pageParam) : 0\n            let nextPageOffset = 0\n            for (let i = startIndex; i < records.length; i += 1) {\n                nextPageOffset = i\n                if (friends.length === 10) break\n                const x = records[i]\n                if (isProfileIdentifier(x.profile)) {\n                    const profile = first(await Services.Identity.queryProfileInformation(x.profile))\n                    if (profile?.linkedPersona && profile.linkedPersona !== currentPersona?.identifier)\n                        friends.push({\n                            persona: profile.linkedPersona,\n                            profile: x.profile,\n                            avatar: profile.avatar,\n                        })\n                } else {\n                    if (x.profile !== currentPersona?.identifier) friends.push({ persona: x.profile })\n                }\n            }\n            return { friends, nextPageOffset }\n        },\n        getNextPageParam: ({ nextPageOffset }) => {\n            if (nextPageOffset >= records.length - 1) return\n            return nextPageOffset\n        },\n    })\n    const refetch = useCallback(() => {\n        refetchFriends()\n        refetchRecords()\n    }, [refetchFriends, refetchRecords])\n\n    return {\n        data,\n        isLoading: isLoading || recordsLoading,\n        hasNextPage,\n        fetchNextPage,\n        isFetchingNextPage,\n        refetch,\n        status,\n        fetchRelationStatus,\n        records,\n    }\n}\n\nexport function useFriendFromList(searchedRecords: RelationRecord[]) {\n    const currentPersona = useCurrentPersona()\n    return useQuery(['search-local', searchedRecords], async () => {\n        return (\n            await Promise.all(\n                searchedRecords.map<Promise<Friend | undefined>>(async (x) => {\n                    if (!isProfileIdentifier(x.profile)) return\n                    const profile = first(await Services.Identity.queryProfileInformation(x.profile))\n                    if (\n                        profile?.linkedPersona !== undefined &&\n                        profile?.linkedPersona.publicKeyAsHex !== currentPersona?.identifier.publicKeyAsHex\n                    )\n                        return {\n                            persona: profile.linkedPersona,\n                            profile: x.profile,\n                            avatar: profile.avatar,\n                        }\n                    return\n                }),\n            )\n        ).filter((x): x is Friend => typeof x !== 'undefined' && Object.hasOwn(x, 'persona'))\n    })\n}\n","import { useAsyncRetry } from 'react-use'\nimport type { AsyncStateRetry } from 'react-use/lib/useAsyncRetry.js'\nimport { ECKeyIdentifier, NextIDPlatform } from '@masknet/shared-base'\nimport { ENS, Lens } from '@masknet/web3-providers'\n\nexport function useSearchValue(value: string, type?: NextIDPlatform): AsyncStateRetry<string> {\n    return useAsyncRetry(async () => {\n        if (!type) return ''\n        if (value.length === 44) return new ECKeyIdentifier('secp256k1', value).publicKeyAsHex ?? value\n        if (type === NextIDPlatform.Twitter) return value.replace(/^@/, '').toLowerCase()\n\n        if (value.endsWith('.eth')) return (await ENS.lookup(value))?.toLowerCase()\n\n        if (value.endsWith('.lens')) return (await Lens.getProfileByHandle(value)).ownedBy?.toLowerCase()\n\n        return value.toLowerCase()\n    }, [value])\n}\n","import { useMemo } from 'react'\nimport { uniqBy } from 'lodash-es'\nimport { ECKeyIdentifier, EMPTY_LIST, type NextIDPersonaBindings } from '@masknet/shared-base'\nimport { useCurrentLinkedPersona } from '@masknet/shared'\nimport type { Friend } from './useFriends.js'\nimport { profilesFilter } from './useFriendProfiles.js'\nimport { PlatformSort, type FriendNetwork, type Profile } from '../pages/Friends/common.js'\n\nexport type NextIDPersonaBindingsWithIdentifier = Omit<NextIDPersonaBindings, 'proofs'> & {\n    proofs: Profile[]\n    linkedPersona: ECKeyIdentifier\n    isLocal?: boolean\n    avatar?: string\n}\n\nexport function useFriendsFromSearch(\n    localSearchedResult: Friend[],\n    searchResult?: NextIDPersonaBindings[],\n    localList?: Friend[],\n    searchValue?: string,\n): NextIDPersonaBindingsWithIdentifier[] {\n    const currentIdentifier = useCurrentLinkedPersona()\n    return useMemo(() => {\n        if (!searchResult?.length && !localSearchedResult?.length) return EMPTY_LIST\n        const localProfiles: NextIDPersonaBindingsWithIdentifier[] =\n            localSearchedResult\n                ?.filter((x) => x.persona.publicKeyAsHex !== currentIdentifier?.identifier.publicKeyAsHex && x.profile)\n                .map((item) => {\n                    const profile = item.profile!\n                    return {\n                        proofs: [\n                            {\n                                platform: profile.network as FriendNetwork,\n                                identity: profile.userId,\n                                is_valid: true,\n                                last_checked_at: '',\n                                name: profile.userId,\n                                created_at: '',\n                            },\n                        ],\n                        linkedPersona: item.persona,\n                        activated_at: '',\n                        persona: item.persona.publicKeyAsHex,\n                        isLocal: true,\n                        avatar: item.avatar,\n                    }\n                }) ?? EMPTY_LIST\n        const profiles: NextIDPersonaBindingsWithIdentifier[] = searchResult\n            ? searchResult\n                  .filter((x) => x.persona !== currentIdentifier?.identifier.publicKeyAsHex)\n                  .map((item) => {\n                      const filtered = item.proofs.filter(profilesFilter)\n                      const identifier = ECKeyIdentifier.fromHexPublicKeyK256(item.persona).expect(\n                          `${item.persona} should be a valid hex public key in k256`,\n                      )\n                      filtered.sort((a, b) => PlatformSort[a.platform] - PlatformSort[b.platform])\n                      const searchItem = filtered.findIndex((x) => x.identity === searchValue || x.name === searchValue)\n                      if (searchItem !== -1) filtered.unshift(filtered.splice(searchItem, 1)[0])\n                      return {\n                          proofs: uniqBy(filtered, ({ identity }) => identity),\n                          linkedPersona: identifier,\n                          activated_at: item.activated_at,\n                          persona: item.persona,\n                          isLocal: localList\n                              ? localList.some((x) => x.persona.publicKeyAsHex === identifier.publicKeyAsHex)\n                              : false,\n                      }\n                  })\n            : EMPTY_LIST\n        return uniqBy(\n            localProfiles ? localProfiles.concat(profiles) : profiles,\n            ({ linkedPersona }) => linkedPersona.publicKeyAsHex,\n        )\n    }, [searchResult, localList, currentIdentifier, localSearchedResult])\n}\n","import { memo, useState, useMemo } from 'react'\nimport { EMPTY_LIST, NextIDPlatform } from '@masknet/shared-base'\nimport { resolveNextIDPlatform } from '@masknet/shared'\nimport { useInfiniteQuery } from '@tanstack/react-query'\nimport { NextIDProof, Fuse } from '@masknet/web3-providers'\nimport { FriendsHomeUI } from './UI.js'\nimport {\n    useFriendsPaged,\n    useTitle,\n    useSearchValue,\n    useFriendsFromSearch,\n    useFriendFromList,\n} from '../../../hooks/index.js'\nimport { useMaskSharedTrans } from '../../../../shared-ui/index.js'\n\nconst FriendsHome = memo(function FriendsHome() {\n    const t = useMaskSharedTrans()\n    useTitle(t.popups_encrypted_friends())\n\n    const { data, fetchNextPage, isLoading, refetch, status, fetchRelationStatus, records } = useFriendsPaged()\n    const friends = useMemo(() => data?.pages.flatMap((x) => x.friends) ?? EMPTY_LIST, [data])\n    const [searchValue, setSearchValue] = useState('')\n    const type = resolveNextIDPlatform(searchValue)\n    const { loading: resolveLoading, value: keyword = '' } = useSearchValue(searchValue, type)\n    const fuse = useMemo(() => {\n        return Fuse.create(records, {\n            keys: ['profile.userId'],\n            isCaseSensitive: false,\n            ignoreLocation: true,\n            threshold: 0,\n        })\n    }, [records])\n    const searchedRecords = useMemo(() => {\n        if (!keyword || type !== NextIDPlatform.Twitter) return EMPTY_LIST\n        return fuse.search(keyword).map((item) => item.item)\n    }, [fuse, keyword, type])\n    const { isLoading: isSearchRecordLoading, data: localSearchedList = EMPTY_LIST } =\n        useFriendFromList(searchedRecords)\n    const {\n        isLoading: searchLoading,\n        isInitialLoading,\n        data: searchResultArray,\n        fetchNextPage: fetchNextSearchPage,\n    } = useInfiniteQuery(\n        ['search-personas', keyword, type],\n        async ({ pageParam }) => {\n            if (!type) return EMPTY_LIST\n            return await NextIDProof.queryExistedBindingByPlatform(type, keyword, pageParam ?? 1, false)\n        },\n        {\n            enabled: !!keyword && !!type,\n            getNextPageParam: (lastPage, allPages) => {\n                if (lastPage.length === 0) return undefined\n                return allPages.length + 1\n            },\n        },\n    )\n    const searchResult = useMemo(() => searchResultArray?.pages.flat() ?? EMPTY_LIST, [searchResultArray])\n    const searchedList = useFriendsFromSearch(localSearchedList, searchResult, friends, keyword)\n    return (\n        <FriendsHomeUI\n            friends={data?.pages ?? EMPTY_LIST}\n            loading={\n                isLoading ||\n                resolveLoading ||\n                (!!keyword && !!type ? searchLoading || isSearchRecordLoading : isInitialLoading) ||\n                status === 'loading' ||\n                fetchRelationStatus === 'loading'\n            }\n            setSearchValue={setSearchValue}\n            searchValue={searchValue}\n            searchResult={searchedList}\n            fetchNextPage={fetchNextPage}\n            fetchNextSearchPage={fetchNextSearchPage}\n            refetch={refetch}\n        />\n    )\n})\n\nexport default FriendsHome\n","import { useSubscription } from 'use-subscription'\nimport { allPersonas } from '../dom/context.js'\n\nexport function useAllPersonas() {\n    return useSubscription(allPersonas)\n}\n","import { memo, useEffect, useRef } from 'react'\nimport { useIntersectionObserver } from '@react-hookz/web'\nimport { Stack, type StackProps } from '@mui/material'\n\ninterface ElementAnchorProps extends StackProps {\n    callback: (intersection: IntersectionObserverEntry | undefined) => void\n}\n\nexport const ElementAnchor = memo<ElementAnchorProps>(({ callback, children, ...rest }) => {\n    const elementRef = useRef<HTMLDivElement>(null)\n    const intersection = useIntersectionObserver(elementRef, {\n        rootMargin: '200px',\n    })\n\n    const callbackRef = useRef(callback)\n    callbackRef.current = callback\n    useEffect(() => {\n        if (!intersection?.isIntersecting) return\n        callbackRef.current(intersection)\n    }, [intersection])\n\n    return (\n        <Stack pt={1} ref={elementRef} justifyContent=\"center\" alignItems=\"center\" direction=\"row\" {...rest}>\n            {children}\n        </Stack>\n    )\n})\n\nElementAnchor.displayName = 'ElementAnchor'\n","import { useAllPersonas } from '@masknet/plugin-infra/content-script'\nimport { currentPersona } from '@masknet/plugin-infra/dom/context'\nimport type { PersonaInformation } from '@masknet/shared-base'\nimport { useSubscription } from 'use-subscription'\n\nexport function useCurrentLinkedPersona(): PersonaInformation | undefined {\n    const myPersonas = useAllPersonas()\n    const id = useSubscription(currentPersona)\n    return myPersonas?.find((x) => x.identifier.rawPublicKey.toLowerCase() === id?.rawPublicKey.toLowerCase())\n}\n","import { useEffect, useState } from 'react';\nconst DEFAULT_THRESHOLD = [0];\nconst DEFAULT_ROOT_MARGIN = '0px';\nconst observers = new Map();\nconst getObserverEntry = (options) => {\n    const root = options.root ?? document;\n    let rootObservers = observers.get(root);\n    if (!rootObservers) {\n        rootObservers = new Map();\n        observers.set(root, rootObservers);\n    }\n    const opt = JSON.stringify([options.rootMargin, options.threshold]);\n    let entry = rootObservers.get(opt);\n    if (!entry) {\n        const callbacks = new Map();\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach((e) => callbacks.get(e.target)?.forEach((cb) => setTimeout(() => {\n                cb(e);\n            }, 0)));\n        }, options);\n        entry = {\n            observer,\n            observe(target, callback) {\n                let cbs = callbacks.get(target);\n                if (!cbs) {\n                    // If target has no observers yet - register it\n                    cbs = new Set();\n                    callbacks.set(target, cbs);\n                    observer.observe(target);\n                }\n                // As Set is duplicate-safe - simply add callback on each call\n                cbs.add(callback);\n            },\n            unobserve(target, callback) {\n                const cbs = callbacks.get(target);\n                // Else branch should never occur in case of normal execution\n                // because callbacks map is hidden in closure - it is impossible to\n                // simulate situation with non-existent `cbs` Set\n                /* istanbul ignore else */\n                if (cbs) {\n                    // Remove current observer\n                    cbs.delete(callback);\n                    if (!cbs.size) {\n                        // If no observers left unregister target completely\n                        callbacks.delete(target);\n                        observer.unobserve(target);\n                        // If not tracked elements left - disconnect observer\n                        if (!callbacks.size) {\n                            observer.disconnect();\n                            rootObservers.delete(opt);\n                            if (!rootObservers.size) {\n                                observers.delete(root);\n                            }\n                        }\n                    }\n                }\n            },\n        };\n        rootObservers.set(opt, entry);\n    }\n    return entry;\n};\n/**\n * Tracks intersection of a target element with an ancestor element or with a\n * top-level document's viewport.\n *\n * @param target React reference or Element to track.\n * @param options Like `IntersectionObserver` options but `root` can also be\n * react reference\n */\nexport function useIntersectionObserver(target, { threshold = DEFAULT_THRESHOLD, root: r, rootMargin = DEFAULT_ROOT_MARGIN, } = {}) {\n    const [state, setState] = useState();\n    useEffect(() => {\n        const tgt = target && 'current' in target ? target.current : target;\n        if (!tgt)\n            return;\n        let subscribed = true;\n        const observerEntry = getObserverEntry({\n            root: r && 'current' in r ? r.current : r,\n            rootMargin,\n            threshold,\n        });\n        const handler = (entry) => {\n            // It is reinsurance for the highly asynchronous invocations, almost\n            // impossible to achieve in tests, thus excluding from LOC\n            /* istanbul ignore else */\n            if (subscribed) {\n                setState(entry);\n            }\n        };\n        observerEntry.observe(tgt, handler);\n        return () => {\n            subscribed = false;\n            observerEntry.unobserve(tgt, handler);\n        };\n    }, [target, r, rootMargin, ...threshold]);\n    return state;\n}\n","'use client';\nimport { parseQueryArgs, InfiniteQueryObserver } from '@tanstack/query-core';\nimport { useBaseQuery } from './useBaseQuery.mjs';\n\nfunction useInfiniteQuery(arg1, arg2, arg3) {\n  const options = parseQueryArgs(arg1, arg2, arg3);\n  return useBaseQuery(options, InfiniteQueryObserver);\n}\n\nexport { useInfiniteQuery };\n//# sourceMappingURL=useInfiniteQuery.mjs.map\n"],"names":["NextIDPlatform","isValidAddress","resolveNextIDPlatform","value","address","Ethereum","pubKey","length","NextID","domain","endsWith","userId","test","Twitter","memo","useState","InputBase","makeStyles","useMaskSharedTrans","Icons","useCurrentLinkedPersona","useStyles","theme","inputRoot","borderRadius","width","background","palette","maskColor","input","fontSize","color","third","padding","inputFocused","bottom","borderColor","text","button","border","outline","cursor","Search","setSearchValue","classes","t","setValue","timer","setTimer","currentPersona","handleKeyPress","e","key","clearTimeout","className","focused","inputProps","disabled","onKeyUp","onBlur","setTimeout","target","onChange","startAdornment","endAdornment","type","onClick","Close","placeholder","popups_encrypted_friends_search_placeholder","Box","Typography","useTheme","ButtonBase","PopupRoutes","useNavigate","AccountRender","connectedAccounts","borderBottomLeftRadius","borderBottomRightRadius","mode","white","position","more","display","alignItems","justifyContent","height","right","ConnectedAccounts","avatar","nextId","profiles","publicKey","isLocal","localProfile","navigate","gap","slice","map","profile","index","name","identity","FriendsDetail","state","fontWeight","lineHeight","main","ProfileIdentifier","Services","batch","notify","attachNextIDToProfile","nextID","whoAmI","Settings","getCurrentPersonaIdentifier","fromNextID","linkedPersona","rpc","emit","Identity","Promise","allSettled","linkedTwitterNames","x","attachNextIDPersonaToProfile","nickname","identifier","of","expect","EMPTY_LIST","NextIDProof","useQuery","useCurrentPersona","PlatformSort","UnsupportedPlatforms","useMemo","profilesFilter","platform","ENS","includes","useFriendProfiles","seen","data","publicKeyAsHex","queryProfilesByPublicKey","error","enabled","network","is_valid","last_checked_at","created_at","filter","sort","a","b","useCallback","useEverSeen","useMutation","useQueryClient","ActionButton","usePopupCustomSnackbar","Link","Button","Avatar","formatPersonaFingerprint","ECKeyIdentifier","CopyButton","PersonaContext","card","flexDirection","line","title","titleWrap","borderTopLeftRadius","borderTopRightRadius","modalTitleBg","icon","second","ContactCard","refetch","proofProfiles","showSnackbar","local","setLocal","ref","useContainer","rawPublicKey","queryClient","friendInfo","twitter","find","p","personaIdentifier","fromHexPublicKeyK256","persona","profileIdentifier","unwrap","handleAddFriend","createNewRelation","mutate","onAdd","isLoading","mutationFn","onMutate","friend","cancelQueries","setQueryData","oldData","undefined","pages","friends","nextPageOffset","popups_encrypted_friends_added_successfully","variant","onSettled","invalidateQueries","src","NextIdAvatar","columnGap","size","underline","rel","href","LinkOut","style","ArrowRight","loading","popups_encrypted_friends_add_friends","first","ElementAnchor","EmptyStatus","empty","top","left","transform","secondary","whiteSpace","cardContainer","flexGrow","overflow","Contacts","friendsArray","fetchNextPage","popups_encrypted_friends_no_friends","callback","RestorableScroll","SearchList","searchResult","popups_encrypted_friends_search_no_result","scrollKey","proofs","LoadingBase","container","flex","backgroundColor","maxHeight","overflowY","mainText","primary","FriendsHomeUI","searchValue","fetchNextSearchPage","cx","div","isProfileIdentifier","useInfiniteQuery","useFriendsPaged","records","recordsLoading","refetchRecords","status","fetchRelationStatus","queryRelationPaged","pageOffset","networkMode","hasNextPage","isFetchingNextPage","refetchFriends","queryKey","queryFn","pageParam","startIndex","Number","i","queryProfileInformation","push","getNextPageParam","useFriendFromList","searchedRecords","all","Object","hasOwn","useAsyncRetry","Lens","useSearchValue","replace","toLowerCase","lookup","getProfileByHandle","ownedBy","uniqBy","useFriendsFromSearch","localSearchedResult","localList","currentIdentifier","localProfiles","item","activated_at","filtered","searchItem","findIndex","unshift","splice","some","concat","Fuse","useTitle","FriendsHome","popups_encrypted_friends","flatMap","resolveLoading","keyword","fuse","create","keys","isCaseSensitive","ignoreLocation","threshold","search","isSearchRecordLoading","localSearchedList","searchLoading","isInitialLoading","searchResultArray","queryExistedBindingByPlatform","lastPage","allPages","flat","searchedList","useSubscription","allPersonas","useAllPersonas","useEffect","useRef","useIntersectionObserver","Stack","children","rest","elementRef","intersection","rootMargin","callbackRef","current","isIntersecting","pt","direction","displayName","myPersonas","id"],"sourceRoot":"","x_google_ignoreList":[17,18]}