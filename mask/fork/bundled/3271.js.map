{"version":3,"file":"bundled/3271.js","mappings":"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","sources":["webpack://mask-network/./packages/shared-base/src/SingletonModal/index.ts"],"sourcesContent":["import { defer, delay, type DeferTuple } from '@masknet/kit'\nimport { Emitter } from '@servie/events'\n\nexport type SingletonModalRefCreator<OpenProps = void, CloseProps = void> = (\n    onOpen: (props: OpenProps) => void,\n    onClose: (props: CloseProps) => void,\n    onAbort: (error: Error) => void,\n) => {\n    peek: () => boolean\n    open: (props: OpenProps) => void\n    close: (props: CloseProps) => void\n    abort?: (error: Error) => void\n}\n\nexport interface SingletonModalProps {\n    children: React.ReactNode\n}\n\nexport class SingletonModal<\n    OpenProps = void,\n    CloseProps = void,\n    T extends SingletonModalRefCreator<OpenProps, CloseProps> = SingletonModalRefCreator<OpenProps, CloseProps>,\n> {\n    constructor() {\n        this.open = this.open.bind(this)\n        this.close = this.close.bind(this)\n        this.abort = this.abort.bind(this)\n        this.openAndWaitForClose = this.openAndWaitForClose.bind(this)\n    }\n    readonly emitter = new Emitter<{\n        open: [OpenProps]\n        close: [CloseProps]\n        abort: [Error]\n    }>()\n\n    protected onOpen: ReturnType<T>['open'] | undefined\n    protected onClose: ReturnType<T>['close'] | undefined\n    protected onAbort: ReturnType<T>['abort'] | undefined\n\n    private dispatchPeek: ReturnType<T>['peek'] | undefined\n    private dispatchOpen: ReturnType<T>['open'] | undefined\n    private dispatchClose: ReturnType<T>['close'] | undefined\n    private dispatchAbort: ReturnType<T>['abort'] | undefined\n\n    /**\n     * Register a React modal component that implemented a forwarded ref.\n     * The ref item should be fed with open and close methods.\n     */\n    register = (creator: T | null) => {\n        if (!creator) {\n            this.dispatchOpen = undefined\n            this.dispatchClose = undefined\n            this.dispatchAbort = undefined\n            return\n        }\n\n        const ref = creator(\n            (props) => {\n                this.onOpen?.(props)\n                this.emitter.emit('open', props)\n            },\n            (props) => {\n                this.onClose?.(props)\n                this.emitter.emit('close', props)\n            },\n            (error) => {\n                this.onAbort?.(error)\n                this.emitter.emit('abort', error)\n            },\n        )\n        this.dispatchPeek = ref.peek\n        this.dispatchOpen = ref.open\n        this.dispatchClose = ref.close\n        this.dispatchAbort = ref.abort\n    }\n\n    /**\n     * Peek the open state of the React modal component.\n     */\n    peek() {\n        return this.dispatchPeek?.() ?? false\n    }\n\n    /**\n     * Open the registered modal component with props\n     * @param props\n     */\n    open(props: OpenProps) {\n        if (typeof this.dispatchOpen === 'undefined') console.warn(\"[SingletonModal]: The modal hasn't registered yet.\")\n        this.dispatchOpen?.(props)\n    }\n\n    /**\n     * Close the registered modal component with props\n     * @param props\n     */\n    close(props: CloseProps) {\n        this.dispatchClose?.(props)\n    }\n\n    /**\n     * Abort the registered modal component with Error\n     */\n    abort(error: Error) {\n        this.dispatchAbort?.(error)\n    }\n\n    /**\n     * Open the registered modal component and wait for it closes\n     * @param props\n     */\n    openAndWaitForClose(props: OpenProps): Promise<CloseProps> {\n        return new Promise<CloseProps>((resolve, reject) => {\n            this.open(props)\n            this.onClose = (props) => resolve(props)\n            this.onAbort = (error) => reject(error)\n        })\n    }\n}\n\nexport class SingletonModalQueued<OpenProps = void, CloseProps = void> extends SingletonModal<OpenProps, CloseProps> {\n    private opened = false\n    private tasks: Array<{\n        props: OpenProps\n        defer?: DeferTuple<CloseProps, Error>\n    }> = []\n\n    constructor() {\n        super()\n\n        this.emitter.on('open', () => {\n            this.opened = true\n        })\n        this.emitter.on('close', () => {\n            this.opened = false\n            this.cleanup()\n        })\n        this.emitter.on('abort', () => {\n            this.opened = false\n            this.cleanup()\n        })\n    }\n\n    override open(props: OpenProps) {\n        if (!this.opened) {\n            super.open(props)\n            return\n        }\n\n        this.tasks.push({\n            props,\n        })\n    }\n\n    override close(props: CloseProps) {\n        if (!this.opened) return\n\n        super.close(props)\n    }\n\n    override openAndWaitForClose(props: OpenProps) {\n        if (!this.opened) return super.openAndWaitForClose(props)\n\n        const d = defer<CloseProps, Error>()\n        this.tasks.push({\n            props,\n            defer: d,\n        })\n        return d[0]\n    }\n\n    private async cleanup() {\n        if (this.opened || !this.tasks.length) return\n\n        await delay(300)\n\n        const { props, defer } = this.tasks.shift()!\n\n        this.open(props)\n        if (!defer) return\n        this.onClose = (props) => defer[1](props)\n        this.onAbort = (error) => defer[2](error)\n    }\n}\n"],"names":["defer","delay","Emitter","SingletonModal","constructor","open","bind","close","abort","openAndWaitForClose","emitter","onOpen","onClose","onAbort","dispatchPeek","dispatchOpen","dispatchClose","dispatchAbort","register","creator","undefined","ref","props","emit","error","peek","console","warn","Promise","resolve","reject","SingletonModalQueued","opened","tasks","on","cleanup","push","d","length","shift"],"sourceRoot":"","x_google_ignoreList":[]}