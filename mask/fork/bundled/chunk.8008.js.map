{"version":3,"file":"bundled/chunk.8008.js","mappings":";;;;;;;;;;;;;;AAAgC;AAQzB,IAAIC,kBAA0G;AAE9G,SAASC,cAAcC,CAA2B;IACrDF,oBAAoBE;AACxB;AAEO,eAAeC,iBAAiBC,GAAa;IAChD,MAAMC,UAA6B,EAAE;IACrC,WAAW,MAAMC,UAAUN,kBAAkBO,OAAO,CAAC,cAAe;QAChE,IAAIH,IAAII,QAAQ,CAACF,OAAOG,KAAK,CAACC,EAAE,GAAGL,QAAQM,IAAI,CAACC,qBAAqBN,OAAOG,KAAK;IACrF;IACA,OAAOJ;AACX;AAEO,eAAeQ,aAAaH,EAAU;IACzC,MAAMJ,SAAS,MAAMN,kBAAkBc,GAAG,CAAC,cAAcJ;IACzD,OAAOJ,SAASM,qBAAqBN,UAAUS;AACnD;AAEO,eAAeC,aAAaV,MAAuB;IACtD,OAAON,kBAAkBiB,GAAG,CAACC,sBAAsBZ;AACvD;AAEA,SAASY,sBAAsBhB,CAAkB;IAC7C,MAAMI,SAASJ;IACfI,OAAOa,IAAI,GAAG;IACd,OAAOb;AACX;AAEA,SAASM,qBAAqBV,CAA4B;IACtD,MAAMI,SAASJ;IACf,OAAOH,8DAAIA,CAACO,QAAQ;QAAC;KAAO;AAChC;;;;;;;;;;;;;;ACvCiC;AACY;AAE7C,MAAMe,SAAmC;IACrC,GAAGD,mDAAI;IACPE,MAAKC,MAAM,EAAEC,OAAO;QAChBA,QAAQC,YAAY,CAAC,oGAAuB;QAC5CxB,qEAAaA,CAACuB,QAAQE,kBAAkB;IAC5C;AACJ;AACA,iEAAeL,MAAMA,EAAA","sources":["webpack://mask-network/./packages/plugins/RedPacket/src/Worker/database.ts","webpack://mask-network/./packages/plugins/RedPacket/src/Worker/index.ts"],"sourcesContent":["import { omit } from 'lodash-es'\nimport type {\n    RedPacketRecord,\n    RedPacketRecordInDatabase,\n    RedPacketNftRecordInDatabase,\n} from '@masknet/web3-providers/types'\nimport type { Plugin } from '@masknet/plugin-infra'\n\nexport let RedPacketDatabase: Plugin.Worker.DatabaseStorage<RedPacketRecordInDatabase | RedPacketNftRecordInDatabase>\n\nexport function setupDatabase(x: typeof RedPacketDatabase) {\n    RedPacketDatabase = x\n}\n\nexport async function getAllRedpackets(ids: string[]) {\n    const records: RedPacketRecord[] = []\n    for await (const record of RedPacketDatabase.iterate('red-packet')) {\n        if (ids.includes(record.value.id)) records.push(RedPacketRecordOutDB(record.value))\n    }\n    return records\n}\n\nexport async function getRedPacket(id: string) {\n    const record = await RedPacketDatabase.get('red-packet', id)\n    return record ? RedPacketRecordOutDB(record) : undefined\n}\n\nexport async function addRedPacket(record: RedPacketRecord) {\n    return RedPacketDatabase.add(RedPacketRecordIntoDB(record))\n}\n\nfunction RedPacketRecordIntoDB(x: RedPacketRecord) {\n    const record = x as RedPacketRecordInDatabase\n    record.type = 'red-packet'\n    return record\n}\n\nfunction RedPacketRecordOutDB(x: RedPacketRecordInDatabase): RedPacketRecord {\n    const record = x\n    return omit(record, ['type'])\n}\n","import type { Plugin } from '@masknet/plugin-infra'\nimport { base } from '../base.js'\nimport { setupDatabase } from './database.js'\n\nconst worker: Plugin.Worker.Definition = {\n    ...base,\n    init(signal, context) {\n        context.startService(import('./services.js'))\n        setupDatabase(context.getDatabaseStorage())\n    },\n}\nexport default worker\n"],"names":["omit","RedPacketDatabase","setupDatabase","x","getAllRedpackets","ids","records","record","iterate","includes","value","id","push","RedPacketRecordOutDB","getRedPacket","get","undefined","addRedPacket","add","RedPacketRecordIntoDB","type","base","worker","init","signal","context","startService","getDatabaseStorage"],"sourceRoot":"","x_google_ignoreList":[]}