{"version":3,"file":"bundled/chunk.7123.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAwG;AACtC;AAOlC;AAOzB,eAAeS,qBAAqBC,OAAe;IACtD,OAAON,gFAAiBA,CAACK,oBAAoB,CAACC;AAClD;AAEA,4BAA4B;AACrB,eAAeC,gBAClBC,MAAiC,EACjCC,QAAkB;IAElB,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE,EAAEC,OAAO,EAAE,EAAER,UAAU,EAAE,EAAE,GAAGE;IACxE,OAAQG;QACJ,KAAKf,2EAAUA,CAACmB,SAAS;YACrB,OAAOf,gFAAiBA,CAACO,eAAe,CAACG,SAASG,IAAIJ;QAC1D,KAAKb,2EAAUA,CAACK,aAAa;YACzB,OAAOA,4EAAaA,CAACM,eAAe,CAACG,SAAuBG,IAAIJ;QAEpE,KAAKb,2EAAUA,CAACoB,OAAO;YACnB,OAAOJ,aAAab,0EAAeA,CAACkB,aAAa,GAC3Cd,qFAAsBA,CAACI,eAAe,CAACG,SAA0BI,MAAML,YACvEZ,gFAAYA,CACR;gBAACO,4EAAaA;gBAAEF,kFAAmBA;aAAC,CAACgB,GAAG,CACpC,CAACC,IAAM,IAAMA,EAAEZ,eAAe,CAACG,SAAuBJ,SAASG,YAEnEW;QAGd;YACI;IACR;AACJ;AACA,aAAa;AAEb,+BAA+B;AACxB,eAAeC,cAClBX,OAA8B,EAC9BG,EAAU,EACVJ,QAAkB,EAClBa,IAAY,EACZC,YAAwB;IAExB,OAAQA;QACJ,KAAK3B,2EAAUA,CAACmB,SAAS;YACrB,OAAOf,gFAAiBA,CAACwB,iBAAiB,CAACd,SAAuBG,IAAIJ,UAAUa;QACpF,KAAK1B,2EAAUA,CAACK,aAAa;YACzB,OAAOA,4EAAaA,CAACuB,iBAAiB,CAACd,SAAuBG,IAAIJ,UAAUa;QAChF,KAAK1B,2EAAUA,CAACoB,OAAO;YACnB,OAAOnB,gFAAYA,CACf;gBAACO,4EAAaA;gBAAEF,kFAAmBA;aAAC,CAACgB,GAAG,CACpC,CAACC,IAAM,IAAMA,EAAEK,iBAAiB,CAACd,SAAuBG,IAAIJ,UAAUa,QAE1ExB,sEAAUA;QAGlB;YACI,OAAOA,sEAAUA;IACzB;AACJ;AACA,aAAa;AAEb,oCAAoC;AAC7B,eAAe2B,wBAClBb,QAAyB,EACzBF,OAA8B,EAC9BG,EAAU;IAEV,OAAOD,aAAab,0EAAeA,CAACkB,aAAa,GAC3Cd,qFAAsBA,CAACuB,qBAAqB,CAAChB,SAA0BG,MACvEhB,gFAAYA,CACR;QAACO,4EAAaA;QAAEF,kFAAmBA;KAAC,CAACgB,GAAG,CAAC,CAACC,IAAM,IAAMA,EAAEO,qBAAqB,CAAChB,SAAuBG,MACrGO;AAEd;AACA,aAAa;AAEb,8CAA8C;AACvC,eAAeO,qBAAqBd,EAAU;IACjD,OAAOT,4EAAaA,CAACuB,oBAAoB,CAACd;AAC9C;AACA,aAAa;AAEb,+BAA+B;AACxB,eAAee,qBAAqBf,EAAU;IACjD,OAAOT,4EAAaA,CAACwB,oBAAoB,CAACf;AAC9C;AACA,aAAa;AAEb,sCAAsC;AAC/B,eAAegB,8BAClBjB,QAAyB,EACzBF,OAA8B,EAC9BJ,OAAe,EACfwB,MAAc;IAEd,OAAOlB,aAAab,0EAAeA,CAACkB,aAAa,GAC3Cd,qFAAsBA,CAAC4B,iBAAiB,CAACrB,SAA0BJ,SAASwB,UAC5EjC,gFAAYA,CACR;QAACO,4EAAaA;QAAEF,kFAAmBA;KAAC,CAACgB,GAAG,CACpC,CAACC,IAAM,IAAMA,EAAEY,iBAAiB,CAACrB,SAAuBJ,SAASwB,UAErEV;AAEd,EACA,aAAa","sources":["webpack://mask-network/./packages/plugins/Trader/src/apis/index.ts"],"sourcesContent":["import { SourceType, type NonFungibleCollectionOverview, attemptUntil } from '@masknet/web3-shared-base'\nimport { EMPTY_LIST, NetworkPluginID } from '@masknet/shared-base'\nimport {\n    CoinGeckoTrending,\n    CoinMarketCap,\n    NFTScanTrending_EVM,\n    NFTScanTrending_Solana,\n    SimpleHashEVM,\n} from '@masknet/web3-providers'\nimport { type TrendingAPI } from '@masknet/web3-providers/types'\nimport type { ChainId as ChainIdEVM } from '@masknet/web3-shared-evm'\nimport type { ChainId as ChainIdSolana } from '@masknet/web3-shared-solana'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport type { Currency, Stat, Trending } from '../types/index.js'\n\nexport async function getCoinInfoByAddress(address: string): Promise<TrendingAPI.CoinInfo | undefined> {\n    return CoinGeckoTrending.getCoinInfoByAddress(address)\n}\n\n// #region get trending info\nexport async function getCoinTrending(\n    result: Web3Helper.TokenResultAll,\n    currency: Currency,\n): Promise<Trending | undefined> {\n    const { chainId, source, pluginID, id = '', name = '', address = '' } = result\n    switch (source) {\n        case SourceType.CoinGecko:\n            return CoinGeckoTrending.getCoinTrending(chainId, id, currency)\n        case SourceType.CoinMarketCap:\n            return CoinMarketCap.getCoinTrending(chainId as ChainIdEVM, id, currency)\n\n        case SourceType.NFTScan:\n            return pluginID === NetworkPluginID.PLUGIN_SOLANA\n                ? NFTScanTrending_Solana.getCoinTrending(chainId as ChainIdSolana, name, currency)\n                : attemptUntil(\n                      [SimpleHashEVM, NFTScanTrending_EVM].map(\n                          (x) => () => x.getCoinTrending(chainId as ChainIdEVM, address, currency),\n                      ),\n                      undefined,\n                  )\n\n        default:\n            return\n    }\n}\n// #endregion\n\n// #region get price stats info\nexport async function getPriceStats(\n    chainId: Web3Helper.ChainIdAll,\n    id: string,\n    currency: Currency,\n    days: number,\n    dataProvider: SourceType,\n): Promise<Stat[]> {\n    switch (dataProvider) {\n        case SourceType.CoinGecko:\n            return CoinGeckoTrending.getCoinPriceStats(chainId as ChainIdEVM, id, currency, days)\n        case SourceType.CoinMarketCap:\n            return CoinMarketCap.getCoinPriceStats(chainId as ChainIdEVM, id, currency, days)\n        case SourceType.NFTScan:\n            return attemptUntil(\n                [SimpleHashEVM, NFTScanTrending_EVM].map(\n                    (x) => () => x.getCoinPriceStats(chainId as ChainIdEVM, id, currency, days),\n                ),\n                EMPTY_LIST,\n            )\n\n        default:\n            return EMPTY_LIST\n    }\n}\n// #endregion\n\n// #region get nft trending overview\nexport async function getNFT_TrendingOverview(\n    pluginID: NetworkPluginID,\n    chainId: Web3Helper.ChainIdAll,\n    id: string,\n): Promise<NonFungibleCollectionOverview | undefined> {\n    return pluginID === NetworkPluginID.PLUGIN_SOLANA\n        ? NFTScanTrending_Solana.getCollectionOverview(chainId as ChainIdSolana, id)\n        : attemptUntil(\n              [SimpleHashEVM, NFTScanTrending_EVM].map((x) => () => x.getCollectionOverview(chainId as ChainIdEVM, id)),\n              undefined,\n          )\n}\n// #endregion\n\n// #region get hightest historical floor price\nexport async function getHighestFloorPrice(id: string) {\n    return SimpleHashEVM.getHighestFloorPrice(id)\n}\n// #endregion\n\n// #region get 24h sale amounts\nexport async function getOneDaySaleAmounts(id: string) {\n    return SimpleHashEVM.getOneDaySaleAmounts(id)\n}\n// #endregion\n\n// #region get nft trending activities\nexport async function getNonFungibleTokenActivities(\n    pluginID: NetworkPluginID,\n    chainId: Web3Helper.ChainIdAll,\n    address: string,\n    cursor: string,\n): Promise<{ content: Web3Helper.NonFungibleTokenActivityAll[]; cursor: string } | undefined> {\n    return pluginID === NetworkPluginID.PLUGIN_SOLANA\n        ? NFTScanTrending_Solana.getCoinActivities(chainId as ChainIdSolana, address, cursor)\n        : attemptUntil(\n              [SimpleHashEVM, NFTScanTrending_EVM].map(\n                  (x) => () => x.getCoinActivities(chainId as ChainIdEVM, address, cursor),\n              ),\n              undefined,\n          )\n}\n// #endregion\n"],"names":["SourceType","attemptUntil","EMPTY_LIST","NetworkPluginID","CoinGeckoTrending","CoinMarketCap","NFTScanTrending_EVM","NFTScanTrending_Solana","SimpleHashEVM","getCoinInfoByAddress","address","getCoinTrending","result","currency","chainId","source","pluginID","id","name","CoinGecko","NFTScan","PLUGIN_SOLANA","map","x","undefined","getPriceStats","days","dataProvider","getCoinPriceStats","getNFT_TrendingOverview","getCollectionOverview","getHighestFloorPrice","getOneDaySaleAmounts","getNonFungibleTokenActivities","cursor","getCoinActivities"],"sourceRoot":"","x_google_ignoreList":[]}