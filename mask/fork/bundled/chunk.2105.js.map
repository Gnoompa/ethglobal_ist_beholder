{"version":3,"file":"bundled/chunk.2105.js","mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;ACZzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,KAA6B","sources":["webpack://mask-network/./packages/plugins/Trader/src/constants/arthswap.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/astarexchange.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/mdex.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/pancakeswap.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/pangolindex.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/quickswap.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/sushiswap.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/trader.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/traderjoe.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/trisolaris.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/uniswap.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/versa.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/wannaswap.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/yumiswap.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/swapCallParameters.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/swapErrorToUserReadableMessage.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/bancor.ts","webpack://mask-network/./packages/plugins/Trader/src/providers/Bancor.ts","webpack://mask-network/./packages/plugins/Trader/src/settings.ts","webpack://mask-network/./packages/plugins/Trader/src/trader/native/useTrade.ts","webpack://mask-network/./packages/plugins/Trader/src/trader/useSlippageTolerance.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/getEVMAvailableTraderProviders.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/getTradeContext.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/toUniswapChainId.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/toUniswapToken.ts","webpack://mask-network/./packages/web3-shared/evm/src/helpers/getCreate2Address.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/getPairAddress.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/ExtendedEther.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/toUniswapCurrency.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/toUniswapCurrencyAmount.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/isTradeBetter.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/computeRealizedLPFeePercent.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/toUniswapPercent.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/uniswapCurrencyAmountTo.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/uniswapPriceTo.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/uniswapPercentTo.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/uniswapChainIdTo.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/uniswapTokenTo.ts","webpack://mask-network/./packages/plugins/Trader/src/types/uniswap.ts","webpack://mask-network/./packages/plugins/Trader/src/providers/UniSwapV2.ts","webpack://mask-network/./packages/plugins/Trader/src/trader/useUniswapV2Like.ts","webpack://mask-network/./packages/plugins/Trader/src/trending/useAvailableTraderProviders.ts","webpack://mask-network/./packages/plugins/Trader/src/helpers/computeAllRoutes.ts","webpack://mask-network/./packages/plugins/Trader/src/providers/UniSwapV3.ts","webpack://mask-network/./packages/plugins/Trader/src/trader/useUniSwapV3Like.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/0x.ts","webpack://mask-network/./packages/plugins/Trader/src/providers/ZeroX.ts","webpack://mask-network/./packages/plugins/Trader/src/trader/useZeroX.ts","webpack://mask-network/./packages/plugins/Trader/src/constants/openocean.ts","webpack://mask-network/./packages/plugins/Trader/src/providers/OpenOcean.ts","webpack://mask-network/./packages/plugins/Trader/src/trader/useOpenOcean.ts","webpack://mask-network/./packages/plugins/Trader/src/trader/useBancor.ts","webpack://mask-network/./packages/plugins/Trader/src/trader/useAllTradeComputed.ts","webpack://mask-network/./packages/plugins/Trader/src/trader/useAllProviderTradeContext.ts","webpack://mask-network/./node_modules/.pnpm/@mui+icons-material@5.10.6_@mui+material@5.10.8_@types+react@18.2.21_react@0.0.0-experimental-0a360642d-20230711/node_modules/@mui/icons-material/esm/HelpOutline.js","webpack://mask-network/./packages/shared/src/UI/components/EthereumERC20TokenApprovedBoundary/index.tsx","webpack://mask-network/./packages/web3-hooks/base/src/useRiskWarningApproved.ts","webpack://mask-network/./packages/shared/src/UI/components/WalletConnectedBoundary/index.tsx","webpack://mask-network/./packages/shared/src/UI/components/WalletStatusBar/Action.tsx","webpack://mask-network/./packages/shared/src/UI/components/WalletStatusBar/PluginWalletStatusBar.tsx","webpack://mask-network/./packages/shared/src/UI/components/WalletStatusBar/WalletDescription.tsx","webpack://mask-network/./packages/web3-hooks/base/src/useBeat.ts","webpack://mask-network/./packages/web3-hooks/base/src/useFungibleTokenSpenders.ts","webpack://mask-network/./packages/web3-hooks/base/src/useNativeTokenBalance.ts","webpack://mask-network/./packages/web3-hooks/evm/src/useERC20TokenAllowance.ts","webpack://mask-network/./packages/web3-hooks/evm/src/useERC20TokenApproveCallback.ts","webpack://mask-network/./packages/web3-providers/src/types/Trader.ts","webpack://mask-network/./packages/web3-shared/evm/src/helpers/pack.ts","webpack://mask-network/./node_modules/.pnpm/@ethersproject+hash@5.7.0/node_modules/@ethersproject/hash/lib.esm/id.js","webpack://mask-network/./node_modules/.pnpm/@ethersproject+solidity@5.7.0/node_modules/@ethersproject/solidity/lib.esm/_version.js","webpack://mask-network/./node_modules/.pnpm/@ethersproject+solidity@5.7.0/node_modules/@ethersproject/solidity/lib.esm/index.js","webpack://mask-network/./node_modules/.pnpm/tiny-invariant@1.1.0/node_modules/tiny-invariant/dist/tiny-invariant.esm.js","webpack://mask-network/./node_modules/.pnpm/toformat@2.0.0/node_modules/toformat/toFormat.js"],"sourcesContent":["import { ChainId, USDC, USDT, WNATIVE, WNATIVE_ONLY } from '@masknet/web3-shared-evm'\nimport type { ERC20AgainstToken, ERC20TokenCustomizedBase } from '../types/index.js'\n\n/**\n * Some tokens can only be swapped via certain pairs,\n * so we override the list of bases that are considered for these tokens.\n */\nexport const ARTHSWAP_CUSTOM_BASES: ERC20TokenCustomizedBase = {}\n\nexport const ARTHSWAP_BASE_AGAINST_TOKENS: ERC20AgainstToken = {\n    ...WNATIVE_ONLY,\n    [ChainId.Astar]: [WNATIVE, USDC, USDT].map((x) => x[ChainId.Astar]),\n}\n","import { ChainId, USDC, USDT, WNATIVE, WNATIVE_ONLY } from '@masknet/web3-shared-evm'\nimport type { ERC20AgainstToken, ERC20TokenCustomizedBase } from '../types/index.js'\n\n/**\n * Some tokens can only be swapped via certain pairs,\n * so we override the list of bases that are considered for these tokens.\n */\nexport const ASTAREXCHANGE_CUSTOM_BASES: ERC20TokenCustomizedBase = {}\n\nexport const ASTAREXCHANGE_BASE_AGAINST_TOKENS: ERC20AgainstToken = {\n    ...WNATIVE_ONLY,\n    [ChainId.Astar]: [WNATIVE, USDC, USDT].map((x) => x[ChainId.Astar]),\n}\n","import { ChainId, DAI, USDC, USDT, WNATIVE, WNATIVE_ONLY } from '@masknet/web3-shared-evm'\nimport type { ERC20AgainstToken, ERC20TokenCustomizedBase } from '../types/index.js'\n\n/**\n * Some tokens can only be swapped via certain pairs,\n * so we override the list of bases that are considered for these tokens.\n */\nexport const MDEX_CUSTOM_BASES: ERC20TokenCustomizedBase = {}\n\nexport const MDEX_BASE_AGAINST_TOKENS: ERC20AgainstToken = {\n    ...WNATIVE_ONLY,\n    [ChainId.Mainnet]: [WNATIVE, DAI, USDC, USDT].map((x) => x[ChainId.Mainnet]),\n    [ChainId.BSC]: [WNATIVE, DAI, USDC, USDT].map((x) => x[ChainId.BSC]),\n}\n","import { ChainId, BTCB, BUSD, DAI, ETHER, UST, WNATIVE, WNATIVE_ONLY } from '@masknet/web3-shared-evm'\nimport type { ERC20AgainstToken, ERC20TokenCustomizedBase } from '../types/index.js'\n\n/**\n * Some tokens can only be swapped via certain pairs,\n * so we override the list of bases that are considered for these tokens.\n */\nexport const PANCAKESWAP_CUSTOM_BASES: ERC20TokenCustomizedBase = {}\n\nexport const PANCAKESWAP_BASE_AGAINST_TOKENS: ERC20AgainstToken = {\n    ...WNATIVE_ONLY,\n    [ChainId.BSC]: [WNATIVE, DAI, BUSD, BTCB, UST, ETHER].map((x) => x[ChainId.BSC]),\n}\n","import { ChainId, DAIe, ETHER, PNG, USDCe, USDTe, WBTCe, WNATIVE, WNATIVE_ONLY } from '@masknet/web3-shared-evm'\nimport type { ERC20AgainstToken, ERC20TokenCustomizedBase } from '../types/index.js'\n\n/**\n * Some tokens can only be swapped via certain pairs,\n * so we override the list of bases that are considered for these tokens.\n */\nexport const PANGOLIN_CUSTOM_BASES: ERC20TokenCustomizedBase = {}\n\nexport const PANGOLIN_BASE_AGAINST_TOKENS: ERC20AgainstToken = {\n    ...WNATIVE_ONLY,\n    [ChainId.Avalanche]: [WNATIVE, DAIe, PNG, USDTe, USDCe, ETHER, WBTCe].map((x) => x[ChainId.Avalanche]),\n}\n","import { ChainId, DAI, ETHER, maUSDC, QUICK, USDC, USDT, WBTC, WNATIVE, WNATIVE_ONLY } from '@masknet/web3-shared-evm'\nimport type { ERC20AgainstToken, ERC20TokenCustomizedBase } from '../types/index.js'\n\n/**\n * Some tokens can only be swapped via certain pairs,\n * so we override the list of bases that are considered for these tokens.\n */\nexport const QUICKSWAP_CUSTOM_BASES: ERC20TokenCustomizedBase = {}\n\nexport const QUICKSWAP_BASE_AGAINST_TOKENS: ERC20AgainstToken = {\n    ...WNATIVE_ONLY,\n    [ChainId.Matic]: [WNATIVE, DAI, USDC, USDT, QUICK, ETHER, WBTC, maUSDC].map((x) => x[ChainId.Matic]),\n}\n","import {\n    ChainId,\n    DAI,\n    RUNE,\n    USDC,\n    USDT,\n    fUSDT,\n    WBTC,\n    WNATIVE,\n    WNATIVE_ONLY,\n    NFTX,\n    STETH,\n    BUSD,\n    BTCB,\n    CUSD,\n    CEUR,\n} from '@masknet/web3-shared-evm'\n\nimport type { ERC20AgainstToken, ERC20TokenCustomizedBase } from '../types/index.js'\n\n/**\n * Some tokens can only be swapped via certain pairs,\n * so we override the list of bases that are considered for these tokens.\n */\nexport const SUSHISWAP_CUSTOM_BASES: ERC20TokenCustomizedBase = {}\n\nexport const SUSHISWAP_BASE_AGAINST_TOKENS: ERC20AgainstToken = {\n    ...WNATIVE_ONLY,\n    [ChainId.Mainnet]: [WNATIVE, DAI, USDC, USDT, WBTC, RUNE, NFTX, STETH].map((x) => x[ChainId.Mainnet]),\n    [ChainId.Matic]: [WNATIVE, USDC, WBTC, DAI, USDT].map((x) => x[ChainId.Matic]),\n    [ChainId.BSC]: [WNATIVE, DAI, BUSD, USDC, USDT, BTCB].map((x) => x[ChainId.BSC]),\n    [ChainId.xDai]: [WNATIVE, USDC, USDT, WBTC].map((x) => x[ChainId.xDai]),\n    [ChainId.Celo]: [WNATIVE, CUSD, CEUR].map((x) => x[ChainId.Celo]),\n    [ChainId.Fantom]: [WNATIVE, DAI, USDC, fUSDT, WBTC].map((x) => x[ChainId.Fantom]),\n    [ChainId.Avalanche]: [WNATIVE, DAI, USDC, WBTC, USDT].map((x) => x[ChainId.Avalanche]),\n    [ChainId.Optimism]: [WNATIVE, DAI, USDC, WBTC, USDT].map((x) => x[ChainId.Optimism]),\n}\n","import { BigNumber } from 'bignumber.js'\nimport { ONE } from '@masknet/web3-shared-base'\nimport { ChainId } from '@masknet/web3-shared-evm'\n\nexport const MIN_GAS_LIMIT = '150000'\nexport const MIN_SLIPPAGE = 50 // 0.5%\nexport const MAX_SLIPPAGE = 500 // 5%\n\nexport const BIPS_BASE = new BigNumber(10000)\nexport const ONE_BIPS = ONE.dividedBy(BIPS_BASE)\n\nexport const SLIPPAGE_MIN = 10 // bips\nexport const SLIPPAGE_DEFAULT = 50 // bips\nexport const SLIPPAGE_MAX = 2000 // bips\n\nexport const DEFAULT_TRANSACTION_DEADLINE = 30 /* minutes */ * 60 /* seconds */\nexport const L2_TRANSACTION_DEADLINE = 60 /* minutes */ * 5 /* seconds */\n\nexport const MINIMUM_AMOUNT = new BigNumber('1e-6')\n\nexport const BLOCK_TIME_SCALE: Partial<Record<ChainId, number>> = {\n    [ChainId.Mainnet]: 3,\n    [ChainId.Ropsten]: 3,\n    [ChainId.Rinkeby]: 3,\n    [ChainId.Gorli]: 3,\n    [ChainId.Kovan]: 3,\n    [ChainId.BSC]: 6,\n    [ChainId.BSCT]: 6,\n    [ChainId.Base]: 6,\n    [ChainId.Base_Goerli]: 6,\n    [ChainId.Matic]: 6,\n    [ChainId.Mumbai]: 6,\n    [ChainId.Arbitrum]: 6,\n    [ChainId.Arbitrum_Rinkeby]: 6,\n    [ChainId.xDai]: 6,\n    [ChainId.Avalanche]: 6,\n    [ChainId.Avalanche_Fuji]: 6,\n    [ChainId.Celo]: 6,\n    [ChainId.Fantom]: 6,\n    [ChainId.Aurora]: 6,\n    [ChainId.Aurora_Testnet]: 6,\n    [ChainId.Fuse]: 6,\n    [ChainId.Boba]: 6,\n    [ChainId.Metis]: 6,\n    [ChainId.Optimism]: 6,\n    [ChainId.Optimism_Kovan]: 6,\n    [ChainId.Optimism_Goerli]: 6,\n    [ChainId.Conflux]: 6,\n    [ChainId.Astar]: 6,\n    [ChainId.ZKSync_Alpha_Testnet]: 6,\n    [ChainId.Crossbell]: 6,\n    [ChainId.Moonbeam]: 6,\n    [ChainId.Invalid]: 0,\n}\n","import { ChainId, DAIe, USDCe, USDTe, WBTCe, WNATIVE, WNATIVE_ONLY } from '@masknet/web3-shared-evm'\nimport type { ERC20AgainstToken, ERC20TokenCustomizedBase } from '../types/index.js'\n\n/**\n * Some tokens can only be swapped via certain pairs,\n * so we override the list of bases that are considered for these tokens.\n */\nexport const TRADERJOE_CUSTOM_BASES: ERC20TokenCustomizedBase = {}\n\nexport const TRADERJOE_BASE_AGAINST_TOKENS: ERC20AgainstToken = {\n    ...WNATIVE_ONLY,\n    [ChainId.Avalanche]: [WNATIVE, DAIe, USDTe, USDCe, WBTCe].map((x) => x[ChainId.Avalanche]),\n}\n","import { ChainId, DAI, USDC, USDT, WBTC, WNATIVE, WNATIVE_ONLY } from '@masknet/web3-shared-evm'\nimport type { ERC20AgainstToken, ERC20TokenCustomizedBase } from '../types/index.js'\n\n/**\n * Some tokens can only be swapped via certain pairs,\n * so we override the list of bases that are considered for these tokens.\n */\nexport const TRISOLARIS_CUSTOM_BASES: ERC20TokenCustomizedBase = {}\n\nexport const TRISOLARIS_BASE_AGAINST_TOKENS: ERC20AgainstToken = {\n    ...WNATIVE_ONLY,\n    [ChainId.Matic]: [WNATIVE, USDC, WBTC, DAI, USDT].map((x) => x[ChainId.Matic]),\n    [ChainId.Aurora]: [WNATIVE, DAI, USDT, USDC, WBTC].map((x) => x[ChainId.Aurora]),\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { ChainId, AMPL, DAI, USDC, USDT, WBTC, WNATIVE, WNATIVE_ONLY, OP } from '@masknet/web3-shared-evm'\nimport type { ERC20AgainstToken, ERC20TokenCustomizedBase } from '../types/index.js'\n\nexport const UNISWAP_BIPS_BASE = 10000\n\n/**\n * Some tokens can only be swapped via certain pairs,\n * so we override the list of bases that are considered for these tokens.\n */\nexport const UNISWAP_CUSTOM_BASES: ERC20TokenCustomizedBase = {\n    [ChainId.Mainnet]: {\n        [AMPL[ChainId.Mainnet].address]: [DAI, WNATIVE].map((x) => x[ChainId.Mainnet]),\n    },\n    [ChainId.Matic]: {\n        [AMPL[ChainId.Matic].address]: [DAI, WNATIVE].map((x) => x[ChainId.Matic]),\n    },\n}\n\nexport const UNISWAP_BASE_AGAINST_TOKENS: ERC20AgainstToken = {\n    ...WNATIVE_ONLY,\n    [ChainId.Mainnet]: [WNATIVE, DAI, USDC, USDT, WBTC].map((x) => x[ChainId.Mainnet]),\n    [ChainId.Matic]: [WNATIVE, DAI, USDC, USDT, WBTC].map((x) => x[ChainId.Matic]),\n    [ChainId.Optimism]: [WNATIVE, DAI, USDC, USDT, WBTC, OP].map((x) => x[ChainId.Optimism]),\n}\n\nexport const MAX_HOP = 3\n\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport const BETTER_TRADE_LESS_HOPS_THRESHOLD = new Percent(50, 10000)\n\nconst BASE_FEE = new Percent(30, 10000)\nexport const ZERO_PERCENT = new Percent(0)\nexport const ONE_HUNDRED_PERCENT = new Percent(1)\nexport const INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE)\n","import { ChainId, USDC, USDT, VERSA, BUSD, WNATIVE, WNATIVE_ONLY } from '@masknet/web3-shared-evm'\nimport type { ERC20AgainstToken, ERC20TokenCustomizedBase } from '../types/index.js'\n\n/**\n * Some tokens can only be swapped via certain pairs,\n * so we override the list of bases that are considered for these tokens.\n */\nexport const VERSA_CUSTOM_BASES: ERC20TokenCustomizedBase = {}\n\nexport const VERSA_BASE_AGAINST_TOKENS: ERC20AgainstToken = {\n    ...WNATIVE_ONLY,\n    [ChainId.Astar]: [WNATIVE, USDC, USDT, BUSD, VERSA].map((x) => x[ChainId.Astar]),\n}\n","import { ChainId, DAI, USDC, USDT, WBTC, WANNA, WNATIVE, WNATIVE_ONLY } from '@masknet/web3-shared-evm'\nimport type { ERC20AgainstToken, ERC20TokenCustomizedBase } from '../types/index.js'\n\n/**\n * Some tokens can only be swapped via certain pairs,\n * so we override the list of bases that are considered for these tokens.\n */\nexport const WANNASWAP_CUSTOM_BASES: ERC20TokenCustomizedBase = {}\n\nexport const WANNASWAP_BASE_AGAINST_TOKENS: ERC20AgainstToken = {\n    ...WNATIVE_ONLY,\n    [ChainId.Aurora]: [WNATIVE, WANNA, DAI, USDC, USDT, WBTC].map((x) => x[ChainId.Aurora]),\n}\n","import { ChainId, USDC, USDT, WNATIVE, YUMI, DAI, xYUMI, WNATIVE_ONLY } from '@masknet/web3-shared-evm'\nimport type { ERC20AgainstToken, ERC20TokenCustomizedBase } from '../types/index.js'\n\n/**\n * Some tokens can only be swapped via certain pairs,\n * so we override the list of bases that are considered for these tokens.\n */\nexport const YUMISWAP_CUSTOM_BASES: ERC20TokenCustomizedBase = {}\n\nexport const YUMISWAP_BASE_AGAINST_TOKENS: ERC20AgainstToken = {\n    ...WNATIVE_ONLY,\n    [ChainId.Astar]: [WNATIVE, USDC, USDT, YUMI, DAI, xYUMI].map((x) => x[ChainId.Astar]),\n}\n","import { Router } from '@uniswap/v2-sdk'\nimport { TradeProvider } from '@masknet/public-api'\n\n// Pangolin and TraderJoe have modified uniswap contracts\ntype SwapParams = Parameters<typeof Router.swapCallParameters>\n\nexport function swapCallParameters(trade: SwapParams[0], options: SwapParams[1], tradeProvider?: TradeProvider) {\n    const parameters = Router.swapCallParameters(trade, options)\n    if (tradeProvider === TradeProvider.PANGOLIN || tradeProvider === TradeProvider.TRADERJOE) {\n        switch (parameters.methodName) {\n            case 'WETH':\n                parameters.methodName = 'WAVAX'\n                break\n            case 'swapTokensForExactETH':\n                parameters.methodName = 'swapTokensForExactAVAX'\n                break\n            case 'swapExactTokensForETHSupportingFeeOnTransferTokens':\n                /* cspell:disable-next-line */\n                parameters.methodName = 'swapExactTokensForAVAXSupportingFeeOnTransferTokens'\n                break\n            case 'swapExactTokensForETH':\n                parameters.methodName = 'swapExactTokensForAVAX'\n                break\n            case 'swapExactETHForTokensSupportingFeeOnTransferTokens':\n                /* cspell:disable-next-line */\n                parameters.methodName = 'swapExactAVAXForTokensSupportingFeeOnTransferTokens'\n                break\n            case 'swapExactETHForTokens':\n                parameters.methodName = 'swapExactAVAXForTokens'\n                break\n        }\n    }\n    return parameters\n}\n","export function swapErrorToUserReadableMessage(error: any): string {\n    let reason: string | undefined\n    while (error) {\n        reason = error.reason ?? error.message ?? reason\n        error = error.error ?? error.data?.originalError\n    }\n\n    if (reason?.startsWith('execution reverted: ')) reason = reason.slice('execution reverted: '.length)\n\n    switch (reason) {\n        case 'UniswapV2Router: EXPIRED':\n            return 'The transaction could not be sent because the deadline has passed. Please check that your transaction deadline is not too low.'\n        case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n        case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n            return 'This transaction will not succeed either due to price movement or fee on transfer.'\n        case 'TransferHelper: TRANSFER_FROM_FAILED':\n            return 'The input token cannot be transferred. There may be an issue with the input token.'\n        case 'UniswapV2: TRANSFER_FAILED':\n            return 'The output token cannot be transferred. There may be an issue with the output token.'\n        case 'UniswapV2: K':\n            return 'The Uniswap invariant x*y=k was not satisfied by the swap. This usually means one of the tokens you are swapping incorporates custom behavior on transfer.'\n        case 'Too little received':\n        case 'Too much requested':\n        case 'STF':\n            return 'This transaction will not succeed due to price movement.'\n        case 'TF':\n            return 'The output token cannot be transferred. There may be an issue with the output token.'\n        default:\n            if (reason?.includes('undefined is not an object')) {\n                console.error(error, reason)\n                return 'An error occurred when trying to execute this swap. You may need to increase your slippage tolerance. If that does not work, there may be an incompatibility with the token you are trading.'\n            }\n            return `Unknown error${reason ? `: \"${reason}\"` : ''}.`\n    }\n}\n","import { ChainId } from '@masknet/web3-shared-evm'\n\nexport const BANCOR_API_BASE_URL: Record<ChainId.Mainnet | ChainId.Ropsten, string> = {\n    [ChainId.Mainnet]: 'https://api-v2.bancor.network',\n    [ChainId.Ropsten]: 'https://serve-ropsten-ptdczarhfq-nw.a.run.app',\n}\n","import urlcat from 'urlcat'\nimport { BigNumber } from 'bignumber.js'\nimport { toChecksumAddress } from 'web3-utils'\nimport { pick } from 'lodash-es'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport {\n    getTraderConstants,\n    type ChainId,\n    isNativeTokenAddress,\n    ContractTransaction,\n    type SchemaType,\n    getTokenConstants,\n    isNativeTokenSchemaType,\n} from '@masknet/web3-shared-evm'\nimport { TradeProvider } from '@masknet/public-api'\nimport { ONE, isZero, leftShift, rightShift, ZERO } from '@masknet/web3-shared-base'\nimport { TraderAPI } from '@masknet/web3-providers/types'\nimport { fetchJSON } from '@masknet/web3-providers/helpers'\nimport { ContractReadonly, Web3Readonly } from '@masknet/web3-providers'\nimport type {\n    BancorApiErrorResponse,\n    ExpectedTargetAmountResponse,\n    SwapBancorRequest,\n    TradeTransactionCreationResponse,\n} from '../types/index.js'\nimport { BANCOR_API_BASE_URL, BIPS_BASE } from '../constants/index.js'\n\nconst roundDecimal = (value: number | string | undefined, decimals: number) => {\n    return Math.round(Number(value || 0) * Math.pow(10, decimals)) / Math.pow(10, decimals)\n}\n\nconst calculateMinimumReturn = ({\n    toToken,\n    toAmount,\n    slippage,\n}: {\n    toToken: Web3Helper.FungibleTokenAll\n    toAmount: string | undefined\n    slippage: number\n}): string => {\n    const toWei = rightShift(toAmount || '0', toToken.decimals)\n    const slippageWei = new BigNumber(slippage).dividedBy(BIPS_BASE)\n    const minReturnWei = toWei.times(ONE.minus(slippageWei))\n    return leftShift(minReturnWei, toToken.decimals).toFixed()\n}\n\nclass BancorAPI implements TraderAPI.Provider {\n    public provider = TradeProvider.BANCOR\n\n    async swapTransactionBancor(request: SwapBancorRequest) {\n        const baseUrl = BANCOR_API_BASE_URL[request.chainId]\n        const url = urlcat(baseUrl, '/transactions/swap', {\n            source_dlt_type: 'ethereum',\n            source_dlt_id: toChecksumAddress(request.fromToken.address),\n            target_dlt_type: 'ethereum',\n            target_dlt_id: toChecksumAddress(request.toToken.address),\n            amount: roundDecimal(request.fromAmount, request.fromToken.decimals),\n            min_return: roundDecimal(request.minimumReceived, request.toToken.decimals),\n            user_source_dlt_id: request.user,\n        })\n\n        return fetchJSON<TradeTransactionCreationResponse>(url)\n    }\n    async swapBancor(request: SwapBancorRequest) {\n        const baseUrl = BANCOR_API_BASE_URL[request.chainId]\n        const { fromToken, toToken, slippage } = request\n        const url = urlcat(baseUrl, '/pricing/target-amount', {\n            source_dlt_type: 'ethereum',\n            source_dlt_id: request.fromToken?.address,\n            target_dlt_type: 'ethereum',\n            target_dlt_id: request.toToken?.address,\n            amount: roundDecimal(request.fromAmount, request.fromToken.decimals),\n        })\n        const response = await fetchJSON(url)\n        const validationErrorResponse = response as BancorApiErrorResponse\n\n        if (validationErrorResponse.error) {\n            throw new Error(validationErrorResponse.error?.messages?.[0] || 'Unknown Error')\n        }\n\n        const { amount } = response as ExpectedTargetAmountResponse\n\n        const toAmount = amount\n        const fromAmount = request.fromAmount\n        return {\n            ...request,\n            toAmount,\n            fromAmount,\n            minimumReceived: calculateMinimumReturn({ toToken, toAmount, slippage }),\n            fromTokenSymbol: fromToken.symbol,\n            toTokenSymbol: toToken.symbol,\n        }\n    }\n    private async getTrade(\n        chainId: ChainId,\n        account: string,\n        inputAmount: string,\n        slippage: number,\n        inputToken?: Web3Helper.FungibleTokenAll,\n        outputToken?: Web3Helper.FungibleTokenAll,\n    ) {\n        const { BANCOR_ETH_ADDRESS } = getTraderConstants(chainId)\n        if (!inputToken || !outputToken || isZero(inputAmount) || !BANCOR_ETH_ADDRESS) return null\n\n        const fromToken = isNativeTokenAddress(inputToken.address)\n            ? { ...inputToken, address: BANCOR_ETH_ADDRESS }\n            : inputToken\n\n        const toToken = isNativeTokenAddress(outputToken.address)\n            ? { ...outputToken, address: BANCOR_ETH_ADDRESS }\n            : outputToken\n\n        return this.swapBancor({\n            strategy: TraderAPI.TradeStrategy.ExactIn,\n            fromToken,\n            toToken,\n            fromAmount: leftShift(inputAmount, inputToken.decimals).toFixed(),\n            toAmount: '0',\n            slippage,\n            user: account,\n            chainId: chainId as ChainId.Mainnet | ChainId.Ropsten,\n            minimumReceived: '0',\n        })\n    }\n\n    public async getTradeInfo(\n        chainId: ChainId,\n        account: string,\n        inputAmount_: string,\n        slippage: number,\n        inputToken?: Web3Helper.FungibleTokenAll | undefined,\n        outputToken?: Web3Helper.FungibleTokenAll | undefined,\n    ) {\n        try {\n            const trade = await this.getTrade(chainId, account, inputAmount_, slippage, inputToken, outputToken)\n            if (!trade) return null\n            const inputAmountWei = rightShift(trade.fromAmount || '0', inputToken?.decimals)\n            const outputAmountWei = rightShift(trade.toAmount || '0', outputToken?.decimals)\n            const minimumReceivedWei = rightShift(trade.minimumReceived, outputToken?.decimals)\n\n            const computed: TraderAPI.TradeComputed<SwapBancorRequest> = {\n                strategy: TraderAPI.TradeStrategy.ExactIn,\n                inputToken,\n                outputToken,\n                inputAmount: inputAmountWei,\n                outputAmount: outputAmountWei,\n                executionPrice: ZERO,\n                fee: ZERO,\n                maximumSold: inputAmountWei,\n                minimumReceived: minimumReceivedWei,\n                priceImpact: ZERO,\n                trade_: { ...trade },\n            }\n\n            try {\n                const gas = await this.getTradeGasLimit(account, chainId, computed)\n                return {\n                    gas,\n                    value: computed,\n                    provider: this.provider,\n                }\n            } catch {\n                return {\n                    value: computed,\n                    provider: this.provider,\n                }\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                return {\n                    value: null,\n                    error,\n                    provider: this.provider,\n                }\n            }\n            return null\n        }\n    }\n\n    public async getNativeWrapperTradeInfo(\n        chainId: ChainId,\n        account: string,\n        inputAmount: string,\n        inputToken?: Web3Helper.FungibleTokenAll,\n        outputToken?: Web3Helper.FungibleTokenAll,\n    ) {\n        const { WNATIVE_ADDRESS } = getTokenConstants(chainId)\n        const tradeAmount = new BigNumber(inputAmount || '0')\n        if (tradeAmount.isZero() || !inputToken || !outputToken || !WNATIVE_ADDRESS) return null\n\n        const wrapperContract = ContractReadonly.getWETHContract(WNATIVE_ADDRESS, { chainId })\n\n        const computed = {\n            strategy: TraderAPI.TradeStrategy.ExactIn,\n            inputToken,\n            outputToken,\n            inputAmount: tradeAmount,\n            outputAmount: tradeAmount,\n            executionPrice: ZERO,\n            maximumSold: ZERO,\n            minimumReceived: tradeAmount,\n            priceImpact: ZERO,\n            fee: ZERO,\n            trade_: {\n                isWrap: isNativeTokenSchemaType(inputToken.schema as SchemaType),\n                isNativeTokenWrapper: true,\n            },\n        }\n\n        try {\n            const tx = await new ContractTransaction(wrapperContract).fillAll(wrapperContract?.methods.deposit(), {\n                from: account,\n                value: tradeAmount.toFixed(),\n            })\n\n            const gas = tx.gas ?? '0'\n\n            return {\n                gas,\n                provider: this.provider,\n                value: computed,\n            }\n        } catch {\n            return {\n                value: computed,\n                provider: this.provider,\n            }\n        }\n    }\n\n    public async getTradeGasLimit(\n        account: string,\n        chainId: ChainId,\n        tradeComputed: TraderAPI.TradeComputed<SwapBancorRequest>,\n    ) {\n        if (!account || !tradeComputed?.trade_) return '0'\n        const trade = tradeComputed.trade_\n        const data = await this.swapTransactionBancor(trade)\n\n        // Note that if approval is required, the API will also return the necessary approval transaction.\n        const transaction = data.length === 1 ? data[0] : data[1]\n\n        return Web3Readonly.estimateTransaction(pick(transaction.transaction, ['to', 'data', 'value', 'from']), 0, {\n            chainId,\n        })\n    }\n}\nexport const Bancor = new BancorAPI()\n","import { createGlobalSettings } from '@masknet/shared-base'\nimport { PLUGIN_ID, SLIPPAGE_DEFAULT } from './constants/index.js'\n\n/**\n * The slippage tolerance of trader\n */\nexport const currentSlippageSettings = createGlobalSettings(`${PLUGIN_ID}+slippageTolerance`, SLIPPAGE_DEFAULT)\n","import { useAsyncRetry } from 'react-use'\nimport { isSameAddress } from '@masknet/web3-shared-base'\nimport { useTokenConstant } from '@masknet/web3-shared-evm'\nimport { useChainContext, useNetworkContext, useWeb3Others } from '@masknet/web3-hooks-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { NetworkPluginID } from '@masknet/shared-base'\n\nexport function useTrade(inputToken?: Web3Helper.FungibleTokenAll, outputToken?: Web3Helper.FungibleTokenAll) {\n    const { chainId: targetChainId } = useChainContext()\n    const { pluginID } = useNetworkContext()\n    const WNATIVE_ADDRESS = useTokenConstant(targetChainId, 'WNATIVE_ADDRESS')\n    const Others = useWeb3Others()\n\n    // to mimic the same interface with other trade providers\n    return useAsyncRetry(async () => {\n        if (!inputToken || !outputToken || pluginID !== NetworkPluginID.PLUGIN_EVM) return false\n        // none of the tokens is native token\n        if (!Others.isNativeTokenSchemaType(inputToken.schema) && !Others.isNativeTokenSchemaType(outputToken.schema))\n            return false\n        // none of the tokens is wrapped native token\n        if (!isSameAddress(inputToken.address, WNATIVE_ADDRESS) && !isSameAddress(outputToken.address, WNATIVE_ADDRESS))\n            return false\n        return true\n    }, [WNATIVE_ADDRESS, inputToken, outputToken, pluginID, Others.isNativeTokenSchemaType])\n}\n","import { clamp } from 'lodash-es'\nimport { useValueRef } from '@masknet/shared-base-ui'\nimport { currentSlippageSettings } from '../settings.js'\nimport { SLIPPAGE_MAX, SLIPPAGE_MIN } from '../constants/index.js'\n\nexport function useSlippageTolerance() {\n    const slippage_ = useValueRef(currentSlippageSettings)\n    return clamp(slippage_, SLIPPAGE_MIN, SLIPPAGE_MAX)\n}\n","import { safeUnreachable } from '@masknet/kit'\nimport { TradeProvider } from '@masknet/public-api'\nimport { EMPTY_LIST } from '@masknet/shared-base'\nimport { NetworkType } from '@masknet/web3-shared-evm'\n\nexport function getEVMAvailableTraderProviders(networkType?: NetworkType) {\n    if (!networkType) return EMPTY_LIST\n    switch (networkType) {\n        case NetworkType.Ethereum:\n            return [\n                TradeProvider.UNISWAP_V2,\n                TradeProvider.UNISWAP_V3,\n                TradeProvider.SUSHISWAP,\n                TradeProvider.ZRX,\n                TradeProvider.DODO,\n                TradeProvider.BANCOR,\n                TradeProvider.OPENOCEAN,\n                TradeProvider.MDEX,\n            ]\n        case NetworkType.Polygon:\n            return [\n                TradeProvider.UNISWAP_V3,\n                TradeProvider.QUICKSWAP,\n                TradeProvider.SUSHISWAP,\n                TradeProvider.DODO,\n                TradeProvider.ZRX,\n                TradeProvider.OPENOCEAN,\n                TradeProvider.TRISOLARIS,\n            ]\n        case NetworkType.Binance:\n            return [\n                TradeProvider.PANCAKESWAP,\n                TradeProvider.SUSHISWAP,\n                TradeProvider.DODO,\n                TradeProvider.ZRX,\n                TradeProvider.OPENOCEAN,\n                TradeProvider.MDEX,\n            ]\n        case NetworkType.Base:\n            return EMPTY_LIST\n        case NetworkType.Arbitrum:\n            return [TradeProvider.UNISWAP_V3, TradeProvider.OPENOCEAN, TradeProvider.DODO]\n        case NetworkType.xDai:\n            return [TradeProvider.SUSHISWAP, TradeProvider.OPENOCEAN]\n        case NetworkType.Avalanche:\n            return [TradeProvider.SUSHISWAP, TradeProvider.OPENOCEAN, TradeProvider.TRADERJOE, TradeProvider.PANGOLIN]\n        case NetworkType.Celo:\n            return [TradeProvider.SUSHISWAP]\n        case NetworkType.Fantom:\n            return [TradeProvider.SUSHISWAP]\n        case NetworkType.Optimism:\n            return [TradeProvider.UNISWAP_V3]\n        case NetworkType.Aurora:\n            return [TradeProvider.DODO, TradeProvider.WANNASWAP, TradeProvider.TRISOLARIS]\n        case NetworkType.Astar:\n            return [TradeProvider.ARTHSWAP, TradeProvider.VERSA, TradeProvider.ASTAREXCHANGE, TradeProvider.YUMISWAP]\n        case NetworkType.Scroll:\n        case NetworkType.Boba:\n        case NetworkType.Fuse:\n        case NetworkType.Metis:\n        case NetworkType.Conflux:\n        case NetworkType.Moonbeam:\n        case NetworkType.CustomNetwork:\n            console.error('To be implement network:', networkType)\n            return EMPTY_LIST\n        default:\n            safeUnreachable(networkType)\n            return EMPTY_LIST\n    }\n}\n","import { unreachable } from '@masknet/kit'\nimport { TradeProvider } from '@masknet/public-api'\nimport { type ChainId, getTraderConstants } from '@masknet/web3-shared-evm'\nimport type { TraderAPI } from '@masknet/web3-providers/types'\nimport {\n    ARTHSWAP_BASE_AGAINST_TOKENS,\n    ARTHSWAP_CUSTOM_BASES,\n    ASTAREXCHANGE_BASE_AGAINST_TOKENS,\n    ASTAREXCHANGE_CUSTOM_BASES,\n    MDEX_BASE_AGAINST_TOKENS,\n    MDEX_CUSTOM_BASES,\n    PANCAKESWAP_BASE_AGAINST_TOKENS,\n    PANCAKESWAP_CUSTOM_BASES,\n    PANGOLIN_BASE_AGAINST_TOKENS,\n    PANGOLIN_CUSTOM_BASES,\n    QUICKSWAP_BASE_AGAINST_TOKENS,\n    QUICKSWAP_CUSTOM_BASES,\n    SUSHISWAP_BASE_AGAINST_TOKENS,\n    SUSHISWAP_CUSTOM_BASES,\n    TRADERJOE_BASE_AGAINST_TOKENS,\n    TRADERJOE_CUSTOM_BASES,\n    TRISOLARIS_BASE_AGAINST_TOKENS,\n    TRISOLARIS_CUSTOM_BASES,\n    UNISWAP_BASE_AGAINST_TOKENS,\n    UNISWAP_CUSTOM_BASES,\n    VERSA_BASE_AGAINST_TOKENS,\n    VERSA_CUSTOM_BASES,\n    WANNASWAP_BASE_AGAINST_TOKENS,\n    WANNASWAP_CUSTOM_BASES,\n    YUMISWAP_BASE_AGAINST_TOKENS,\n    YUMISWAP_CUSTOM_BASES,\n} from '../constants/index.js'\n\nexport function getTradeContext(chainId: ChainId, tradeProvider?: TradeProvider): TraderAPI.TradeContext | null {\n    const DEX_TRADE = getTraderConstants(chainId)\n    switch (tradeProvider) {\n        case TradeProvider.UNISWAP_V2:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V2_LIKE: true,\n                GRAPH_API: DEX_TRADE.UNISWAP_V2_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.UNISWAP_V2_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.UNISWAP_V2_ROUTER_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.UNISWAP_V2_ROUTER_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.UNISWAP_V2_FACTORY_ADDRESS,\n                AGAINST_TOKENS: UNISWAP_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: UNISWAP_CUSTOM_BASES,\n            }\n        case TradeProvider.UNISWAP_V3:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V3_LIKE: true,\n                GRAPH_API: DEX_TRADE.UNISWAP_V3_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.UNISWAP_V3_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.UNISWAP_SWAP_ROUTER_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.UNISWAP_SWAP_ROUTER_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.UNISWAP_V3_FACTORY_ADDRESS,\n                AGAINST_TOKENS: UNISWAP_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: UNISWAP_CUSTOM_BASES,\n            }\n        case TradeProvider.SUSHISWAP:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V2_LIKE: true,\n                GRAPH_API: DEX_TRADE.SUSHISWAP_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.SUSHISWAP_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.SUSHISWAP_ROUTER_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.SUSHISWAP_ROUTER_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.SUSHISWAP_FACTORY_ADDRESS,\n                AGAINST_TOKENS: SUSHISWAP_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: SUSHISWAP_CUSTOM_BASES,\n            }\n        case TradeProvider.QUICKSWAP:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V2_LIKE: true,\n                GRAPH_API: DEX_TRADE.QUICKSWAP_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.QUICKSWAP_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.QUICKSWAP_ROUTER_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.QUICKSWAP_ROUTER_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.QUICKSWAP_FACTORY_ADDRESS,\n                AGAINST_TOKENS: QUICKSWAP_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: QUICKSWAP_CUSTOM_BASES,\n            }\n        case TradeProvider.PANCAKESWAP:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V2_LIKE: true,\n                GRAPH_API: DEX_TRADE.PANCAKESWAP_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.PANCAKESWAP_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.PANCAKESWAP_ROUTER_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.PANCAKESWAP_ROUTER_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.PANCAKESWAP_FACTORY_ADDRESS,\n                AGAINST_TOKENS: PANCAKESWAP_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: PANCAKESWAP_CUSTOM_BASES,\n            }\n        case TradeProvider.TRADERJOE:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V2_LIKE: true,\n                GRAPH_API: DEX_TRADE.TRADERJOE_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.TRADERJOE_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.TRADERJOE_ROUTER_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.TRADERJOE_ROUTER_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.TRADERJOE_FACTORY_ADDRESS,\n                AGAINST_TOKENS: TRADERJOE_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: TRADERJOE_CUSTOM_BASES,\n            }\n        case TradeProvider.PANGOLIN:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V2_LIKE: true,\n                GRAPH_API: DEX_TRADE.PANGOLIN_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.PANGOLIN_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.PANGOLIN_ROUTER_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.PANGOLIN_ROUTER_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.PANGOLIN_FACTORY_ADDRESS,\n                AGAINST_TOKENS: PANGOLIN_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: PANGOLIN_CUSTOM_BASES,\n            }\n        case TradeProvider.WANNASWAP:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V2_LIKE: true,\n                GRAPH_API: DEX_TRADE.WANNASWAP_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.WANNASWAP_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.WANNASWAP_ROUTER_V2_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.WANNASWAP_ROUTER_V2_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.WANNASWAP_FACTORY_ADDRESS,\n                AGAINST_TOKENS: WANNASWAP_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: WANNASWAP_CUSTOM_BASES,\n            }\n        case TradeProvider.TRISOLARIS:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V2_LIKE: true,\n                GRAPH_API: DEX_TRADE.TRISOLARIS_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.TRISOLARIS_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.TRISOLARIS_ROUTER_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.TRISOLARIS_ROUTER_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.TRISOLARIS_FACTORY_ADDRESS,\n                AGAINST_TOKENS: TRISOLARIS_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: TRISOLARIS_CUSTOM_BASES,\n            }\n        case TradeProvider.MDEX:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V2_LIKE: true,\n                GRAPH_API: DEX_TRADE.MDEX_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.MDEX_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.MDEX_ROUTER_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.MDEX_ROUTER_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.MDEX_FACTORY_ADDRESS,\n                AGAINST_TOKENS: MDEX_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: MDEX_CUSTOM_BASES,\n            }\n        case TradeProvider.ARTHSWAP:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V2_LIKE: true,\n                GRAPH_API: DEX_TRADE.ARTHSWAP_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.ARTHSWAP_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.ARTHSWAP_ROUTER_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.ARTHSWAP_ROUTER_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.ARTHSWAP_FACTORY_ADDRESS,\n                AGAINST_TOKENS: ARTHSWAP_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: ARTHSWAP_CUSTOM_BASES,\n            }\n        case TradeProvider.VERSA:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V2_LIKE: true,\n                GRAPH_API: DEX_TRADE.VERSA_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.VERSA_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.VERSA_ROUTER_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.VERSA_ROUTER_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.VERSA_FACTORY_ADDRESS,\n                AGAINST_TOKENS: VERSA_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: VERSA_CUSTOM_BASES,\n            }\n        case TradeProvider.ASTAREXCHANGE:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V2_LIKE: true,\n                GRAPH_API: DEX_TRADE.ASTAREXCHANGE_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.ASTAREXCHANGE_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.ASTAREXCHANGE_ROUTER_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.ASTAREXCHANGE_ROUTER_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.ASTAREXCHANGE_FACTORY_ADDRESS,\n                AGAINST_TOKENS: ASTAREXCHANGE_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: ASTAREXCHANGE_CUSTOM_BASES,\n            }\n        case TradeProvider.YUMISWAP:\n            return {\n                TYPE: tradeProvider,\n                IS_UNISWAP_V2_LIKE: true,\n                GRAPH_API: DEX_TRADE.YUMISWAP_THEGRAPH,\n                INIT_CODE_HASH: DEX_TRADE.YUMISWAP_INIT_CODE_HASH,\n                ROUTER_CONTRACT_ADDRESS: DEX_TRADE.YUMISWAP_ROUTER_ADDRESS,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.YUMISWAP_ROUTER_ADDRESS,\n                FACTORY_CONTRACT_ADDRESS: DEX_TRADE.YUMISWAP_FACTORY_ADDRESS,\n                AGAINST_TOKENS: YUMISWAP_BASE_AGAINST_TOKENS,\n                ADDITIONAL_TOKENS: {},\n                CUSTOM_TOKENS: YUMISWAP_CUSTOM_BASES,\n            }\n        case TradeProvider.ZRX:\n            return {\n                TYPE: tradeProvider,\n            }\n        case TradeProvider.DODO:\n            return {\n                TYPE: tradeProvider,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.DODO_EXCHANGE_PROXY_ADDRESS,\n            }\n        case TradeProvider.BANCOR:\n            return {\n                TYPE: tradeProvider,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.BANCOR_EXCHANGE_PROXY_ADDRESS,\n            }\n        case TradeProvider.OPENOCEAN:\n            return {\n                TYPE: tradeProvider,\n                SPENDER_CONTRACT_ADDRESS: DEX_TRADE.OPENOCEAN_EXCHANGE_PROXY_ADDRESS,\n            }\n        default:\n            if (tradeProvider) unreachable(tradeProvider)\n            return null\n    }\n}\n","import type { ChainId } from '@masknet/web3-shared-evm'\n\nexport function toUniswapChainId(chainId: ChainId) {\n    return chainId as number\n}\n","import { memoize } from 'lodash-es'\nimport { Token } from '@uniswap/sdk-core'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { type ChainId, formatEthereumAddress, WNATIVE } from '@masknet/web3-shared-evm'\nimport { toUniswapChainId } from './toUniswapChainId.js'\n\nexport function toUniswapToken(chainId: ChainId, token: Web3Helper.FungibleTokenAll) {\n    return new Token(\n        toUniswapChainId(chainId),\n        formatEthereumAddress(token.address),\n        token.decimals,\n        token.symbol,\n        token.name,\n    )\n}\n\nexport const toUniswapTokenMemo: (chainID: ChainId) => Token = memoize((chainId: ChainId) =>\n    toUniswapToken(chainId, WNATIVE[chainId]),\n)\n","import { keccak256, toChecksumAddress } from 'web3-utils'\n\nexport function getCreate2Address(fromAddress: string, salt: string, initCode: string): string {\n    // Concatenate and hash the formula components\n    const formula = ['0xff', fromAddress.toLowerCase(), salt, initCode].map((x) => x.slice(2)).join('')\n    const addressBytes = keccak256(`0x${formula}`)\n\n    // Get the last 20 bytes (40 characters) and prefix with 0x\n    return toChecksumAddress(addressBytes.slice(-40))\n}\n","import { keccak256 } from 'web3-utils'\nimport type { Token } from '@uniswap/sdk-core'\nimport { getCreate2Address, pack } from '@masknet/web3-shared-evm'\n\n/** cache[token0Address][token1Address] = value  */\ntype PairCache = Record<string, Record<string, string>>\n\nconst map = new Map<string, PairCache>()\n\n// This is a dynamically version of address generate algorithm borrowed from the Pair class of uniswap-skd\nexport function getPairAddress(factoryAddress: string, initCodeHash: string, tokenA?: Token, tokenB?: Token) {\n    if (!tokenA || !tokenB) return ''\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    let cache = map.get(initCodeHash)\n\n    const token0Addr = tokens[0].address\n    const token1Addr = tokens[1].address\n    if (cache?.[token0Addr]?.[token1Addr] === undefined) {\n        cache = {\n            ...cache,\n            [token0Addr]: {\n                ...cache?.[token0Addr],\n                [token1Addr]: getCreate2Address(\n                    factoryAddress,\n                    keccak256(pack(['address', 'address'], [token0Addr, token1Addr])),\n                    initCodeHash,\n                ),\n            },\n        }\n        map.set(initCodeHash, cache)\n    }\n    return cache[token0Addr][token1Addr]\n}\n","import { Ether, type Token } from '@uniswap/sdk-core'\nimport { WNATIVE } from '@masknet/web3-shared-evm'\nimport { toUniswapTokenMemo } from './toUniswapToken.js'\n\nexport class ExtendedEther extends Ether {\n    public override get wrapped(): Token {\n        if (this.chainId in WNATIVE) return toUniswapTokenMemo(this.chainId)\n        throw new Error('Unsupported chain ID')\n    }\n\n    private static _cachedEther: Record<number, ExtendedEther> = {}\n\n    public static override onChain(chainId: number): ExtendedEther {\n        return this._cachedEther[chainId] ?? (this._cachedEther[chainId] = new ExtendedEther(chainId))\n    }\n}\n","import type { Currency } from '@uniswap/sdk-core'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { isSameAddress } from '@masknet/web3-shared-base'\nimport { type ChainId, WNATIVE, SchemaType } from '@masknet/web3-shared-evm'\nimport { toUniswapToken } from './toUniswapToken.js'\nimport { ExtendedEther } from './ExtendedEther.js'\n\nexport function toUniswapCurrency(chainId?: ChainId, token?: Web3Helper.FungibleTokenAll): Currency | undefined {\n    try {\n        if (!token || !chainId) return\n        const extendedEther = ExtendedEther.onChain(chainId)\n        const weth = toUniswapToken(chainId, WNATIVE[chainId])\n        if (weth && isSameAddress(token.address, weth.address)) return weth\n        return token.schema === SchemaType.Native ? extendedEther : toUniswapToken(chainId, token)\n    } catch {\n        return\n    }\n}\n","import { CurrencyAmount } from '@uniswap/sdk-core'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { isGreaterThan } from '@masknet/web3-shared-base'\nimport type { ChainId } from '@masknet/web3-shared-evm'\nimport { toUniswapCurrency } from './toUniswapCurrency.js'\n\nexport function toUniswapCurrencyAmount(chainId?: ChainId, token?: Web3Helper.FungibleTokenAll, amount?: string) {\n    if (!token || !amount || !chainId) return\n    const currency = toUniswapCurrency(chainId, token)\n    if (!currency) return\n    try {\n        if (isGreaterThan(amount, 0)) return CurrencyAmount.fromRawAmount(currency, amount)\n    } catch {\n        return\n    }\n    return\n}\n","import type { Trade } from '@uniswap/v2-sdk'\nimport type { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { ONE_HUNDRED_PERCENT, ZERO_PERCENT } from '../constants/index.js'\n\nexport function isTradeBetter(\n    tradeA?: Trade<Currency, Currency, TradeType> | null,\n    tradeB?: Trade<Currency, Currency, TradeType> | null,\n    minimumDelta: Percent = ZERO_PERCENT,\n): boolean | undefined {\n    if (tradeA && !tradeB) return false\n    if (tradeB && !tradeA) return true\n    if (!tradeA || !tradeB) return undefined\n\n    if (\n        tradeA.tradeType !== tradeB.tradeType ||\n        !tradeA.inputAmount.currency.equals(tradeB.inputAmount.currency) ||\n        !tradeB.outputAmount.currency.equals(tradeB.outputAmount.currency)\n    ) {\n        throw new Error('Comparing incomparable trades')\n    }\n\n    if (minimumDelta.equalTo(ZERO_PERCENT)) {\n        return tradeA.executionPrice.lessThan(tradeB.executionPrice)\n    } else {\n        return tradeA.executionPrice.asFraction\n            .multiply(minimumDelta.add(ONE_HUNDRED_PERCENT))\n            .lessThan(tradeB.executionPrice)\n    }\n}\n","import { Trade as V2Trade } from '@uniswap/v2-sdk'\nimport { Percent, Fraction } from '@uniswap/sdk-core'\nimport type { Trade } from '../types/index.js'\nimport { INPUT_FRACTION_AFTER_FEE, ONE_HUNDRED_PERCENT } from '../constants/index.js'\n\n// computes realized lp fee as a percent\nexport function computeRealizedLPFeePercent(trade: Trade): Percent {\n    if (trade instanceof V2Trade) {\n        // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n        // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n        const percent = ONE_HUNDRED_PERCENT.subtract(\n            trade.route.pairs.reduce<Percent>(\n                (currentFee: Percent): Percent => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n                ONE_HUNDRED_PERCENT,\n            ),\n        )\n        return new Percent(percent.numerator, percent.denominator)\n    } else {\n        const percent = ONE_HUNDRED_PERCENT.subtract(\n            trade.route.pools.reduce<Percent>(\n                (currentFee: Percent, pool): Percent =>\n                    currentFee.multiply(ONE_HUNDRED_PERCENT.subtract(new Fraction(pool.fee, 1000000))),\n                ONE_HUNDRED_PERCENT,\n            ),\n        )\n        return new Percent(percent.numerator, percent.denominator)\n    }\n}\n","import { Percent } from '@uniswap/sdk-core'\n\nexport function toUniswapPercent(numerator: number, denominator: number) {\n    return new Percent(numerator, denominator)\n}\n","import type { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { pow10 } from '@masknet/web3-shared-base'\n\nexport function uniswapCurrencyAmountTo(currencyAmount: CurrencyAmount<Currency>) {\n    return pow10(currencyAmount.currency.decimals).multipliedBy(currencyAmount.toFixed())\n}\n","import { BigNumber } from 'bignumber.js'\nimport type { Currency, Price } from '@uniswap/sdk-core'\n\nexport function uniswapPriceTo(price: Price<Currency, Currency>) {\n    return new BigNumber(price.scalar.numerator.toString()).dividedBy(price.scalar.denominator.toString())\n}\n","import { BigNumber } from 'bignumber.js'\nimport type { Percent } from '@uniswap/sdk-core'\n\nexport function uniswapPercentTo(percent: Percent) {\n    return new BigNumber(percent.toFixed(2)).dividedBy(100)\n}\n","import type { ChainId } from '@masknet/web3-shared-evm'\n\nexport function uniswapChainIdTo(chainId: number) {\n    return chainId as ChainId\n}\n","import type { Token } from '@uniswap/sdk-core'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { TokenType } from '@masknet/web3-shared-base'\nimport { SchemaType, formatEthereumAddress } from '@masknet/web3-shared-evm'\nimport { uniswapChainIdTo } from './uniswapChainIdTo.js'\n\nexport function uniswapTokenTo(token: Token) {\n    return {\n        type: TokenType.Fungible,\n        name: token.name,\n        symbol: token.symbol,\n        decimals: token.decimals,\n        address: formatEthereumAddress(token.address),\n        chainId: uniswapChainIdTo(token.chainId),\n        schema: ['eth', 'matic', 'bnb'].includes(token.name?.toLowerCase() ?? '')\n            ? SchemaType.Native\n            : SchemaType.ERC20,\n        id: token.symbol,\n    } as Web3Helper.FungibleTokenAll\n}\n","import type { BigNumber } from 'bignumber.js'\nimport type { Trade as V2Trade } from '@uniswap/v2-sdk'\nimport type { Trade as V3Trade } from '@uniswap/v3-sdk'\nimport type { Token, Currency, TradeType } from '@uniswap/sdk-core'\n\nexport type TokenPair = [Token, Token]\n\nexport enum PairState {\n    NOT_EXISTS = 0,\n    EXISTS = 1,\n    INVALID = 2,\n}\n\nexport enum PoolState {\n    LOADING = 0,\n    NOT_EXISTS = 1,\n    EXISTS = 2,\n    INVALID = 3,\n}\n\nexport interface SwapCall {\n    address: string\n    calldata: string\n    value: string\n}\n\nexport interface SwapCallEstimate {\n    call: SwapCall\n}\n\nexport interface SuccessfulCall extends SwapCallEstimate {\n    call: SwapCall\n    gasEstimate: BigNumber\n}\n\nexport interface FailedCall extends SwapCallEstimate {\n    call: SwapCall\n    error: Error\n}\n\nexport type Trade = V2Trade<Currency, Currency, TradeType> | V3Trade<Currency, Currency, TradeType>\n","import { toHex } from 'web3-utils'\nimport { flatMap, compact } from 'lodash-es'\nimport { BigNumber } from 'bignumber.js'\nimport { CurrencyAmount, type Currency, type Token, TradeType, Percent } from '@uniswap/sdk-core'\nimport { Pair as UniSwapPair, Trade as UniSwapTrade } from '@uniswap/v2-sdk'\nimport { SwapRouter as V3Router } from '@uniswap/v3-sdk'\nimport type { TradeProvider } from '@masknet/public-api'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { ZERO, isZero, toFixed } from '@masknet/web3-shared-base'\nimport {\n    isValidChainId,\n    ChainId,\n    isNativeTokenSchemaType,\n    type SchemaType,\n    getTokenConstants,\n    ContractTransaction,\n} from '@masknet/web3-shared-evm'\nimport { EMPTY_LIST } from '@masknet/shared-base'\nimport { ContractReadonly, Web3Readonly, Multicall } from '@masknet/web3-providers'\nimport { TraderAPI } from '@masknet/web3-providers/types'\nimport {\n    getPairAddress,\n    getTradeContext,\n    isTradeBetter,\n    toUniswapToken,\n    swapCallParameters,\n    toUniswapCurrency,\n    toUniswapCurrencyAmount,\n    computeRealizedLPFeePercent,\n    toUniswapPercent,\n    uniswapCurrencyAmountTo,\n    uniswapPriceTo,\n    uniswapPercentTo,\n    uniswapTokenTo,\n    swapErrorToUserReadableMessage,\n} from '../helpers/index.js'\nimport {\n    BETTER_TRADE_LESS_HOPS_THRESHOLD,\n    DEFAULT_TRANSACTION_DEADLINE,\n    L2_TRANSACTION_DEADLINE,\n    MAX_HOP,\n    SLIPPAGE_DEFAULT,\n    UNISWAP_BIPS_BASE,\n} from '../constants/index.js'\nimport {\n    PairState,\n    type FailedCall,\n    type SuccessfulCall,\n    type SwapCallEstimate,\n    type TokenPair,\n    type Trade,\n} from '../types/index.js'\n\nexport class UniSwapV2LikeAPI implements TraderAPI.Provider {\n    constructor(public provider: TradeProvider) {}\n\n    public getAllCommonPairs(chainId: ChainId, currencyA?: Currency, currencyB?: Currency) {\n        const chainIdValid = isValidChainId(chainId)\n        const context = getTradeContext(chainId, this.provider)\n        const [tokenA, tokenB] = chainIdValid ? [currencyA?.wrapped, currencyB?.wrapped] : [undefined, undefined]\n\n        if (!tokenA || !tokenB || !context?.FACTORY_CONTRACT_ADDRESS || !context.INIT_CODE_HASH) return EMPTY_LIST\n\n        const bases: Token[] = !chainIdValid\n            ? []\n            : [\n                  ...(context?.AGAINST_TOKENS?.[chainId] ?? []),\n                  ...(tokenA ? context?.ADDITIONAL_TOKENS?.[chainId]?.[tokenA.address] ?? [] : []),\n                  ...(tokenB ? context?.ADDITIONAL_TOKENS?.[chainId]?.[tokenB.address] ?? [] : []),\n              ].map((x) => toUniswapToken(chainId, x))\n\n        const basePairs: Array<[Token, Token]> = flatMap(\n            bases,\n            (base): Array<[Token, Token]> => bases.map((otherBase) => [base, otherBase]),\n        )\n\n        return [\n            // the direct pair\n            [tokenA, tokenB],\n            // token A against all bases\n            ...bases.map((base): [Token, Token] => [tokenA, base]),\n            // token B against all bases\n            ...bases.map((base): [Token, Token] => [tokenB, base]),\n            // each base against all bases\n            ...basePairs,\n        ]\n            .filter((tokens): tokens is [Token, Token] => !!(tokens[0] && tokens[1]))\n            .filter(([t0, t1]) => t0.address !== t1.address)\n            .filter(([tokenA, tokenB]) => {\n                if (!chainIdValid) return true\n                const customBases = context?.CUSTOM_TOKENS?.[chainId as ChainId]\n\n                const customBasesA: Token[] | undefined = customBases?.[tokenA.address]?.map((x) =>\n                    toUniswapToken(chainId as ChainId, x),\n                )\n                const customBasesB: Token[] | undefined = customBases?.[tokenB.address]?.map((x) =>\n                    toUniswapToken(chainId as ChainId, x),\n                )\n\n                if (!customBasesA && !customBasesB) return true\n\n                if (customBasesA && !customBasesA.find((base) => tokenB.equals(base))) return false\n                if (customBasesB && !customBasesB.find((base) => tokenA.equals(base))) return false\n\n                return true\n            })\n    }\n\n    private async getPairs(chainId: ChainId, tokenPairs: readonly TokenPair[]) {\n        const context = getTradeContext(chainId, this.provider)\n        if (!context) return EMPTY_LIST\n\n        const { FACTORY_CONTRACT_ADDRESS, INIT_CODE_HASH } = context\n\n        if (!FACTORY_CONTRACT_ADDRESS || !INIT_CODE_HASH) return EMPTY_LIST\n\n        const listOfPairAddress = tokenPairs.map(([tokenA, tokenB]) =>\n            tokenA && tokenB && !tokenA.equals(tokenB)\n                ? getPairAddress(FACTORY_CONTRACT_ADDRESS, INIT_CODE_HASH, tokenA, tokenB)\n                : undefined,\n        )\n\n        const contracts = compact(\n            compact([...new Set(listOfPairAddress)]).map((address) =>\n                ContractReadonly.getPairContract(address, { chainId }),\n            ),\n        )\n\n        const names = Array.from<'getReserves'>({ length: contracts.length }).fill('getReserves')\n\n        const calls = Multicall.createMultipleContractSingleData(contracts, names, [])\n        const results = await Multicall.call(chainId, contracts, names, calls)\n\n        if (!results) return EMPTY_LIST\n\n        type ReserveResult = {\n            id: string\n            reserve0: string\n            reserve1: string\n        }\n\n        // compose reserves from multicall results\n        const listOfReserves = results\n            .map((x, i): ReserveResult | undefined => {\n                if (x.error || !x.value) return undefined\n                return {\n                    id: contracts[i].options.address,\n                    reserve0: x.value._reserve0,\n                    reserve1: x.value._reserve1,\n                }\n            })\n            .filter((value): value is ReserveResult => value !== undefined)\n\n        return listOfPairAddress.map((address, i) => {\n            try {\n                const tokenA = tokenPairs[i][0]\n                const tokenB = tokenPairs[i][1]\n                if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null]\n                const { reserve0, reserve1 } =\n                    listOfReserves.find((x) => x.id.toLowerCase() === address?.toLowerCase()) ?? {}\n                if (!reserve0 || !reserve1) return [PairState.NOT_EXISTS, null]\n                const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n                return [\n                    PairState.EXISTS,\n                    new UniSwapPair(\n                        CurrencyAmount.fromRawAmount(token0, reserve0),\n                        CurrencyAmount.fromRawAmount(token1, reserve1),\n                    ),\n                ] as const\n            } catch {\n                return []\n            }\n        })\n    }\n\n    private async getSwapParameters(\n        chainId: ChainId,\n        account: string,\n        trade: TraderAPI.TradeComputed<Trade> | null,\n        allowedSlippage: number = SLIPPAGE_DEFAULT,\n    ) {\n        const context = getTradeContext(chainId, this.provider)\n        const timestamp = await Web3Readonly.getBlockTimestamp({ chainId })\n        const timestamp_ = new BigNumber(timestamp ?? '0')\n        const deadline = timestamp_.plus(\n            chainId === ChainId.Mainnet ? DEFAULT_TRANSACTION_DEADLINE : L2_TRANSACTION_DEADLINE,\n        )\n\n        const routerV2Contract = ContractReadonly.getRouterV2Contract(context?.ROUTER_CONTRACT_ADDRESS, { chainId })\n        const swapRouterContract = ContractReadonly.getSwapRouterContract(context?.ROUTER_CONTRACT_ADDRESS, {\n            chainId,\n        })\n\n        if (!trade?.trade_) return []\n\n        const { trade_ } = trade\n        const allowedSlippage_ = new Percent(allowedSlippage, UNISWAP_BIPS_BASE)\n        if (trade_ instanceof UniSwapTrade) {\n            if (!routerV2Contract) return []\n            const parameters = [\n                swapCallParameters(\n                    trade_,\n                    {\n                        feeOnTransfer: false,\n                        allowedSlippage: allowedSlippage_,\n                        recipient: account,\n                        ttl: deadline.toNumber(),\n                    },\n                    this.provider,\n                ),\n            ]\n            if (trade_.tradeType === TradeType.EXACT_INPUT)\n                parameters.push(\n                    swapCallParameters(\n                        trade_,\n                        {\n                            feeOnTransfer: true,\n                            allowedSlippage: allowedSlippage_,\n                            recipient: account,\n                            ttl: deadline.toNumber(),\n                        },\n                        this.provider,\n                    ),\n                )\n            return parameters.map(({ methodName, args, value }) => {\n                return {\n                    address: routerV2Contract.options.address,\n                    calldata: routerV2Contract.methods[methodName as keyof typeof routerV2Contract.methods](\n                        // @ts-expect-error unsafe call\n                        ...args,\n                    ).encodeABI(),\n                    value,\n                }\n            })\n        } else {\n            if (!swapRouterContract) return []\n            const { value, calldata } = V3Router.swapCallParameters(trade_, {\n                recipient: account,\n                slippageTolerance: allowedSlippage_,\n                deadline: deadline.toNumber(),\n            })\n            return [\n                {\n                    address: swapRouterContract.options.address,\n                    calldata,\n                    value,\n                },\n            ]\n        }\n    }\n\n    public getTrade(\n        inputAmount: string,\n        chainId?: ChainId,\n        inputToken?: Web3Helper.FungibleTokenAll,\n        outputToken?: Web3Helper.FungibleTokenAll,\n    ) {\n        const isTradable = !isZero(inputAmount)\n        const isNotAvailable = !isTradable || !inputToken || !outputToken\n        const inputCurrency = toUniswapCurrency(chainId, inputToken)\n        const outputCurrency = toUniswapCurrency(chainId, outputToken)\n        const tradeAmount = toUniswapCurrencyAmount(chainId, inputToken, inputAmount)\n\n        return {\n            isNotAvailable,\n            tradeAmount,\n            inputCurrency,\n            outputCurrency,\n        }\n    }\n\n    public async getBestTradeExactIn(\n        chainId: ChainId,\n        currencyAmountIn: CurrencyAmount<Currency>,\n        currencyOut: Currency,\n    ): Promise<Trade | null> {\n        const currencyA = currencyAmountIn?.currency\n        const currencyB = currencyOut\n\n        const allCurrencyCombinations = this.getAllCommonPairs(chainId, currencyA, currencyB)\n\n        const allPairs = await this.getPairs(chainId, allCurrencyCombinations)\n\n        const filtered = new Map<string, UniSwapPair>()\n\n        for (const [state, pair] of allPairs as Array<[PairState.EXISTS, UniSwapPair]>) {\n            // filter out invalid pairs\n            if (state !== PairState.EXISTS) continue\n            if (!pair) continue\n            // filter out duplicated pairs\n            const { address } = pair.liquidityToken\n            if (filtered.has(address)) continue\n            filtered.set(pair.liquidityToken.address, pair)\n        }\n\n        const allowedPairs = [...filtered.values()]\n\n        if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\n            let bestTradeSoFar: UniSwapTrade<Currency, Currency, TradeType.EXACT_INPUT> | null = null\n\n            for (let i = 1; i <= MAX_HOP; i += 1) {\n                const currentTrade: UniSwapTrade<Currency, Currency, TradeType.EXACT_INPUT> | null =\n                    UniSwapTrade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, {\n                        maxHops: i,\n                        maxNumResults: 1,\n                    })[0] ?? null\n                // if current trade is best yet, save it\n                if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\n                    bestTradeSoFar = currentTrade\n                }\n            }\n\n            return bestTradeSoFar\n        }\n\n        return null\n    }\n\n    public async getTradeInfo(\n        chainId: ChainId,\n        account: string,\n        inputAmount_: string,\n        slippage: number,\n        inputToken?: Web3Helper.FungibleTokenAll,\n        outputToken?: Web3Helper.FungibleTokenAll,\n    ) {\n        try {\n            const { isNotAvailable, tradeAmount, outputCurrency } = this.getTrade(\n                inputAmount_,\n                chainId,\n                inputToken,\n                outputToken,\n            )\n\n            if (isNotAvailable || !tradeAmount || !outputCurrency) return null\n\n            const trade = await this.getBestTradeExactIn(chainId, tradeAmount, outputCurrency)\n            if (!trade) return null\n\n            const realizedLPFeePercent = computeRealizedLPFeePercent(trade)\n            const realizedLPFee = trade.inputAmount.multiply(realizedLPFeePercent)\n            const priceImpact = trade.priceImpact.subtract(realizedLPFeePercent)\n\n            const percent_ = toUniswapPercent(slippage, 10000)\n            const computed = {\n                strategy: TraderAPI.TradeStrategy.ExactIn,\n                inputToken,\n                outputToken,\n                inputAmount: uniswapCurrencyAmountTo(trade.inputAmount),\n                outputAmount: uniswapCurrencyAmountTo(trade.outputAmount),\n                executionPrice: uniswapPriceTo(trade.executionPrice),\n                priceImpact: uniswapPercentTo(priceImpact ?? trade.priceImpact),\n                path: trade instanceof UniSwapTrade ? trade.route.path.map((x) => [uniswapTokenTo(x)]) : [],\n                maximumSold: uniswapCurrencyAmountTo(trade.maximumAmountIn(percent_)),\n                minimumReceived: uniswapCurrencyAmountTo(trade.minimumAmountOut(percent_)),\n                fee: realizedLPFee ? uniswapCurrencyAmountTo(realizedLPFee) : ZERO,\n                trade_: trade,\n            }\n\n            try {\n                const gas = await this.getTradeGasLimit(account, chainId, computed)\n                return {\n                    gas,\n                    value: computed,\n                    provider: this.provider,\n                }\n            } catch {\n                return {\n                    value: computed,\n                    provider: this.provider,\n                }\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                return {\n                    value: null,\n                    error,\n                    provider: this.provider,\n                }\n            }\n            return null\n        }\n    }\n\n    public async getNativeWrapperTradeInfo(\n        chainId: ChainId,\n        account: string,\n        inputAmount: string,\n        inputToken?: Web3Helper.FungibleTokenAll,\n        outputToken?: Web3Helper.FungibleTokenAll,\n    ) {\n        const { WNATIVE_ADDRESS } = getTokenConstants(chainId)\n        const tradeAmount = new BigNumber(inputAmount || '0')\n        if (tradeAmount.isZero() || !inputToken || !outputToken || !WNATIVE_ADDRESS) return null\n\n        const wrapperContract = ContractReadonly.getWETHContract(WNATIVE_ADDRESS, { chainId })\n\n        const computed = {\n            strategy: TraderAPI.TradeStrategy.ExactIn,\n            inputToken,\n            outputToken,\n            inputAmount: tradeAmount,\n            outputAmount: tradeAmount,\n            executionPrice: ZERO,\n            maximumSold: ZERO,\n            minimumReceived: tradeAmount,\n            priceImpact: ZERO,\n            fee: ZERO,\n            trade_: {\n                isWrap: isNativeTokenSchemaType(inputToken.schema as SchemaType),\n                isNativeTokenWrapper: true,\n            },\n        }\n\n        try {\n            const tx = await new ContractTransaction(wrapperContract).fillAll(wrapperContract?.methods.deposit(), {\n                from: account,\n                value: tradeAmount.toFixed(),\n            })\n\n            const gas = tx.gas ?? '0'\n\n            return {\n                gas,\n                provider: this.provider,\n                value: computed,\n            }\n        } catch {\n            return {\n                value: computed,\n                provider: this.provider,\n            }\n        }\n    }\n\n    public async getTradeGasLimit(account: string, chainId: ChainId, trade: TraderAPI.TradeComputed<Trade> | null) {\n        const tradeParameters = await this.getSwapParameters(chainId, account, trade)\n\n        // step 1: estimate each trade parameter\n        const estimatedCalls: SwapCallEstimate[] = await Promise.all(\n            tradeParameters.map(async (x) => {\n                const { address, calldata, value } = x\n                const config = {\n                    from: account,\n                    to: address,\n                    data: calldata,\n                    ...(!value || /^0x0*$/.test(value) ? {} : { value: toHex(value) }),\n                }\n\n                try {\n                    const gas = await Web3Readonly.estimateTransaction(config, 0, { chainId })\n                    return {\n                        call: x,\n                        gasEstimate: gas ?? '0',\n                    }\n                } catch (error) {\n                    return Web3Readonly.callTransaction(config, { chainId })\n                        .then(() => {\n                            return {\n                                call: x,\n                                error: new Error('Gas estimate failed'),\n                            }\n                        })\n                        .catch((error) => {\n                            return {\n                                call: x,\n                                error: new Error(swapErrorToUserReadableMessage(error)),\n                            }\n                        })\n                }\n            }),\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        let bestCallOption: SuccessfulCall | SwapCallEstimate | undefined = estimatedCalls.find(\n            (el, ix, list): el is SuccessfulCall =>\n                'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]),\n        )\n\n        // check if any calls errored with a recognizable error\n        if (!bestCallOption) {\n            const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n            if (errorCalls.length > 0) {\n                return\n            }\n            const firstNoErrorCall = estimatedCalls.find((call): call is SwapCallEstimate => !('error' in call))\n            if (!firstNoErrorCall) {\n                return\n            }\n            bestCallOption = firstNoErrorCall\n        }\n\n        return 'gasEstimate' in bestCallOption ? toFixed(bestCallOption.gasEstimate) : '0'\n    }\n}\n","import { useMemo } from 'react'\nimport { type TradeProvider } from '@masknet/public-api'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useChainContext, useCustomBlockBeatRetry, useNetwork } from '@masknet/web3-hooks-base'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport type { ChainId, NetworkType } from '@masknet/web3-shared-evm'\nimport type { TraderAPI } from '@masknet/web3-providers/types'\nimport { useSlippageTolerance } from './useSlippageTolerance.js'\nimport { getEVMAvailableTraderProviders } from '../helpers/index.js'\nimport { UniSwapV2LikeAPI } from '../providers/UniSwapV2.js'\n\nexport function useUniswapV2Like(\n    traderProvider: TradeProvider,\n    inputAmount_: string,\n    scale: number,\n    inputToken?: Web3Helper.FungibleTokenAll,\n    outputToken?: Web3Helper.FungibleTokenAll,\n    temporarySlippage?: number,\n    isNativeTokenWrapper?: boolean,\n) {\n    const { chainId, account } = useChainContext<NetworkPluginID.PLUGIN_EVM>()\n    const network = useNetwork(undefined, chainId)\n    const slippageSetting = useSlippageTolerance()\n\n    const slippage = useMemo(() => {\n        return temporarySlippage ? temporarySlippage : slippageSetting\n    }, [temporarySlippage, slippageSetting])\n\n    const provider = useMemo(() => {\n        if (!network) return\n        const providers = getEVMAvailableTraderProviders(network.type as NetworkType)\n        if (!providers.includes(traderProvider)) return\n        return new UniSwapV2LikeAPI(traderProvider)\n    }, [traderProvider, network])\n    return useCustomBlockBeatRetry<NetworkPluginID.PLUGIN_EVM, TraderAPI.TradeInfo | undefined | null>(\n        NetworkPluginID.PLUGIN_EVM,\n        async () => {\n            if (!provider) return\n            return isNativeTokenWrapper\n                ? provider.getNativeWrapperTradeInfo(chainId as ChainId, account, inputAmount_, inputToken, outputToken)\n                : provider.getTradeInfo(chainId as ChainId, account, inputAmount_, slippage, inputToken, outputToken)\n        },\n        [inputAmount_, isNativeTokenWrapper, chainId, account, provider, inputToken, outputToken],\n        scale,\n    )\n}\n","import { useMemo } from 'react'\nimport type { TradeProvider } from '@masknet/public-api'\nimport type { NetworkType } from '@masknet/web3-shared-evm'\nimport { useChainContext, useNetworkContext, useWeb3Others } from '@masknet/web3-hooks-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { EMPTY_LIST, NetworkPluginID } from '@masknet/shared-base'\nimport { getEVMAvailableTraderProviders } from '../helpers/index.js'\n\nexport function useAvailableTraderProviders(targetChainId?: Web3Helper.ChainIdAll): TradeProvider[] {\n    const { chainId } = useChainContext({\n        chainId: targetChainId,\n    })\n    const { pluginID } = useNetworkContext()\n    const Others = useWeb3Others()\n    const networkType = Others.chainResolver.networkType(chainId)\n\n    return useMemo(() => {\n        switch (pluginID) {\n            case NetworkPluginID.PLUGIN_EVM:\n                return getEVMAvailableTraderProviders(networkType as NetworkType)\n            case NetworkPluginID.PLUGIN_FLOW:\n            case NetworkPluginID.PLUGIN_SOLANA:\n            default:\n                return EMPTY_LIST\n        }\n    }, [networkType, pluginID])\n}\n","import { Route, type Pool } from '@uniswap/v3-sdk'\nimport { type Currency } from '@uniswap/sdk-core'\n\nexport function computeAllRoutes(\n    currencyIn: Currency,\n    currencyOut: Currency,\n    pools: Pool[],\n    chainId: number,\n    currentPath: Pool[] = [],\n    allPaths: Array<Route<Currency, Currency>> = [],\n    startCurrencyIn: Currency = currencyIn,\n    maxHops = 2,\n): Array<Route<Currency, Currency>> {\n    const tokenIn = currencyIn?.wrapped\n    const tokenOut = currencyOut?.wrapped\n    if (!tokenIn || !tokenOut) throw new Error('Missing tokenIn/tokenOut')\n\n    try {\n        for (const pool of pools) {\n            if (currentPath.includes(pool) || !pool.involvesToken(tokenIn)) continue\n\n            const outputToken = pool.token0.equals(tokenIn) ? pool.token1 : pool.token0\n            if (outputToken.equals(tokenOut)) {\n                allPaths.push(new Route([...currentPath, pool], startCurrencyIn, currencyOut))\n            } else if (maxHops > 1) {\n                computeAllRoutes(\n                    outputToken,\n                    currencyOut,\n                    pools,\n                    chainId,\n                    [...currentPath, pool],\n                    allPaths,\n                    startCurrencyIn,\n                    maxHops - 1,\n                )\n            }\n        }\n    } catch {\n        return []\n    }\n\n    return allPaths\n}\n","import { compact } from 'lodash-es'\nimport { BigNumber } from 'bignumber.js'\nimport { TradeProvider } from '@masknet/public-api'\nimport { type ChainId, getTraderConstants } from '@masknet/web3-shared-evm'\nimport { CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport type { Currency, Token } from '@uniswap/sdk-core'\nimport { FeeAmount, Pool, type Route, computePoolAddress, encodeRouteToPath, Trade } from '@uniswap/v3-sdk'\nimport { ContractReadonly, Multicall } from '@masknet/web3-providers'\nimport type { TraderAPI } from '@masknet/web3-providers/types'\nimport { isZero } from '@masknet/web3-shared-base'\nimport { EMPTY_LIST } from '@masknet/shared-base'\nimport { UniSwapV2LikeAPI } from './UniSwapV2.js'\nimport { PoolState, type Trade as TradeResult } from '../types/index.js'\nimport { getTradeContext, computeAllRoutes } from '../helpers/index.js'\n\nexport class UniSwapV3LikeAPI extends UniSwapV2LikeAPI {\n    constructor() {\n        super(TradeProvider.UNISWAP_V3)\n    }\n\n    private getPoolAddresses(transformed: Array<[Token, Token, FeeAmount] | null>, context: TraderAPI.TradeContext) {\n        try {\n            return transformed.map((value) => {\n                if (!context?.IS_UNISWAP_V3_LIKE) return ''\n                if (!context?.FACTORY_CONTRACT_ADDRESS || !value) return ''\n                return computePoolAddress({\n                    factoryAddress: context.FACTORY_CONTRACT_ADDRESS,\n                    tokenA: value[0],\n                    tokenB: value[1],\n                    fee: value[2],\n                })\n            })\n        } catch {\n            return []\n        }\n    }\n\n    private getQuoteExactInInputs(routes: Array<Route<Currency, Currency>>, amountIn?: CurrencyAmount<Currency>) {\n        try {\n            return routes.map(\n                (route) =>\n                    [encodeRouteToPath(route, false), amountIn ? `0x${amountIn.quotient.toString(16)}` : undefined] as [\n                        string,\n                        string,\n                    ],\n            )\n        } catch {\n            return []\n        }\n    }\n\n    private async getPools(\n        chainId: ChainId,\n        poolKeys: Array<[Currency | undefined, Currency | undefined, FeeAmount | undefined]>,\n    ) {\n        const context = getTradeContext(chainId, this.provider)\n\n        if (!context) return EMPTY_LIST\n        const transformed: Array<[Token, Token, FeeAmount] | null> = poolKeys.map(\n            ([currencyA, currencyB, feeAmount]) => {\n                if (!chainId || !currencyA || !currencyB || !feeAmount) return null\n\n                const tokenA = currencyA?.wrapped\n                const tokenB = currencyB?.wrapped\n                if (!tokenA || !tokenB || tokenA.equals(tokenB)) return null\n                const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n                return [token0, token1, feeAmount]\n            },\n        )\n\n        const poolAddresses = this.getPoolAddresses(transformed, context)\n        const poolContracts = compact(poolAddresses.map((x) => ContractReadonly.getPoolStateV3(x, { chainId })))\n\n        const slot0sCalls = Multicall.createMultipleContractSingleData(\n            poolContracts,\n            Array.from<'slot0'>({ length: poolContracts.length }).fill('slot0'),\n            [],\n        )\n        const liquiditiesCalls = Multicall.createMultipleContractSingleData(\n            poolContracts,\n            Array.from<'liquidity'>({ length: poolContracts.length }).fill('liquidity'),\n            [],\n        )\n\n        const slot0s = await Multicall.call(\n            chainId,\n            poolContracts,\n            Array.from<'slot0'>({ length: poolContracts.length }).fill('slot0'),\n            slot0sCalls,\n        )\n        const liquidities = await Multicall.call(\n            chainId,\n            poolContracts,\n            Array.from<'liquidity'>({ length: poolContracts.length }).fill('liquidity'),\n            liquiditiesCalls,\n        )\n\n        return poolKeys.map((_key, index) => {\n            const [token0, token1, fee] = transformed[index] ?? []\n            if (!token0 || !token1 || !fee) return [PoolState.INVALID, null]\n\n            const { value: slot0, error: slot0Error } = slot0s[index] ?? {}\n            const { value: liquidity, error: liquidityError } = liquidities[index] ?? {}\n\n            if (slot0Error || liquidityError) return [PoolState.INVALID, null]\n\n            if (!slot0 || !liquidity) return [PoolState.NOT_EXISTS, null]\n\n            if (isZero(slot0.sqrtPriceX96 ?? 0)) return [PoolState.NOT_EXISTS, null]\n\n            try {\n                return [\n                    PoolState.EXISTS,\n                    new Pool(token0, token1, fee, slot0.sqrtPriceX96, liquidity[0], Number.parseInt(slot0.tick, 10)),\n                ]\n            } catch (error) {\n                console.error('Error when constructing the pool', error)\n                return [PoolState.NOT_EXISTS, null]\n            }\n        })\n    }\n\n    public override async getBestTradeExactIn(\n        chainId: ChainId,\n        currencyAmountIn: CurrencyAmount<Currency>,\n        currencyOut: Currency,\n    ): Promise<TradeResult | null> {\n        const { UNISWAP_V3_QUOTER_ADDRESS } = getTraderConstants(chainId)\n        if (!UNISWAP_V3_QUOTER_ADDRESS) return null\n\n        const quoterContract = ContractReadonly.getQuoterContract(UNISWAP_V3_QUOTER_ADDRESS, { chainId })\n\n        const allCurrencyCombinations = this.getAllCommonPairs(chainId, currencyAmountIn?.currency, currencyOut)\n\n        const allCurrencyCombinationsWithAllFees = allCurrencyCombinations.flatMap<[Token, Token, FeeAmount]>(\n            ([tokenA, tokenB]) => [\n                [tokenA, tokenB, FeeAmount.LOW],\n                [tokenA, tokenB, FeeAmount.MEDIUM],\n                [tokenA, tokenB, FeeAmount.HIGH],\n            ],\n        )\n\n        const pools = await this.getPools(chainId, allCurrencyCombinationsWithAllFees)\n        const swapPools = pools\n            .filter((tuple): tuple is [PoolState.EXISTS, Pool] => {\n                return tuple[0] === PoolState.EXISTS && tuple[1] !== null\n            })\n            .map(([, pool]) => pool)\n\n        const routers = computeAllRoutes(\n            currencyAmountIn.currency,\n            currencyOut,\n            swapPools,\n            chainId,\n            [],\n            [],\n            currencyAmountIn?.currency,\n            2,\n        )\n\n        const quoteExactInInputs = this.getQuoteExactInInputs(routers, currencyAmountIn)\n\n        if (!quoterContract) return null\n\n        const quotesCalls = Multicall.createSingleContractMultipleData(\n            quoterContract,\n            Array.from<'quoteExactInput'>({ length: quoteExactInInputs.length }).fill('quoteExactInput'),\n            quoteExactInInputs,\n        )\n\n        const quotesResults = await Multicall.call(\n            chainId,\n            Array.from({ length: quoteExactInInputs.length }).map(() => quoterContract),\n            Array.from<'quoteExactInput'>({ length: quoteExactInInputs.length }).fill('quoteExactInput'),\n            quotesCalls,\n        )\n\n        const asyncBestTrade = (() => {\n            if (!currencyAmountIn || !currencyOut) {\n                return {\n                    value: undefined,\n                    loading: false,\n                    error: new Error('Invalid trade info.'),\n                }\n            }\n            if (routers.length && !quotesResults.length) {\n                return {\n                    value: undefined,\n                    loading: true,\n                    error: undefined,\n                }\n            }\n            const { bestRoute, amountOut } = quotesResults\n                .filter((x) => x.succeed)\n                .reduce(\n                    (\n                        currentBest: {\n                            bestRoute: Route<Currency, Currency> | null\n                            amountOut: string | null\n                        },\n                        { value },\n                        i,\n                    ) => {\n                        if (!value) return currentBest\n\n                        if (currentBest.amountOut === null) {\n                            return {\n                                bestRoute: routers[i],\n                                amountOut: value,\n                            }\n                        } else if (new BigNumber(currentBest.amountOut).lt(value)) {\n                            return {\n                                bestRoute: routers[i],\n                                amountOut: value,\n                            }\n                        }\n\n                        return currentBest\n                    },\n                    {\n                        bestRoute: null,\n                        amountOut: null,\n                    },\n                )\n\n            if (!bestRoute || !amountOut) {\n                return {\n                    value: undefined,\n                    loading: false,\n                    error: new Error('No route found.'),\n                }\n            }\n\n            try {\n                return {\n                    value: Trade.createUncheckedTrade({\n                        route: bestRoute,\n                        tradeType: TradeType.EXACT_INPUT,\n                        inputAmount: currencyAmountIn,\n                        outputAmount: CurrencyAmount.fromRawAmount(currencyOut, amountOut),\n                    }),\n                    loading: false,\n                    error: undefined,\n                }\n            } catch {\n                return {\n                    value: undefined,\n                    loading: false,\n                    error: new Error('Uniswap SDK Error'),\n                }\n            }\n        })()\n\n        if (!asyncBestTrade.value) return null\n\n        return asyncBestTrade.value\n    }\n}\n","import { useMemo } from 'react'\nimport { TradeProvider } from '@masknet/public-api'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useChainContext, useCustomBlockBeatRetry, useNetwork } from '@masknet/web3-hooks-base'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport type { ChainId, NetworkType } from '@masknet/web3-shared-evm'\nimport type { TraderAPI } from '@masknet/web3-providers/types'\nimport { useSlippageTolerance } from './useSlippageTolerance.js'\nimport { UniSwapV3LikeAPI } from '../providers/UniSwapV3.js'\nimport { getEVMAvailableTraderProviders } from '../helpers/index.js'\n\nexport function useUniswapV3Like(\n    inputAmount_: string,\n    scale: number,\n    inputToken?: Web3Helper.FungibleTokenAll,\n    outputToken?: Web3Helper.FungibleTokenAll,\n    temporarySlippage?: number,\n    isNativeTokenWrapper?: boolean,\n) {\n    const { chainId, account } = useChainContext<NetworkPluginID.PLUGIN_EVM>()\n    const network = useNetwork(undefined, chainId)\n    const slippageSetting = useSlippageTolerance()\n\n    const slippage = useMemo(() => {\n        return temporarySlippage ? temporarySlippage : slippageSetting\n    }, [temporarySlippage, slippageSetting])\n\n    const provider = useMemo(() => {\n        if (!network) return\n        const providers = getEVMAvailableTraderProviders(network.type as NetworkType)\n        if (!providers.includes(TradeProvider.UNISWAP_V3)) return\n        return new UniSwapV3LikeAPI()\n    }, [network])\n    return useCustomBlockBeatRetry<NetworkPluginID.PLUGIN_EVM, TraderAPI.TradeInfo | undefined | null>(\n        NetworkPluginID.PLUGIN_EVM,\n        async () => {\n            if (!provider) return\n            return isNativeTokenWrapper\n                ? provider.getNativeWrapperTradeInfo(chainId as ChainId, account, inputAmount_, inputToken, outputToken)\n                : provider.getTradeInfo(chainId as ChainId, account, inputAmount_, slippage, inputToken, outputToken)\n        },\n        [inputAmount_, isNativeTokenWrapper, chainId, account, provider, inputToken, outputToken],\n        scale,\n    )\n}\n","export const ZRX_NATIVE_TOKEN_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZRX_AFFILIATE_ADDRESS = '0x934B510D4C9103E6a87AEf13b816fb080286D649'\n","import urlcat from 'urlcat'\nimport { BigNumber } from 'bignumber.js'\nimport { first, pick } from 'lodash-es'\nimport { safeUnreachable } from '@masknet/kit'\nimport { TradeProvider } from '@masknet/public-api'\nimport {\n    NetworkType,\n    isNativeTokenAddress,\n    type ChainId,\n    ContractTransaction,\n    type SchemaType,\n    getTokenConstants,\n    isNativeTokenSchemaType,\n} from '@masknet/web3-shared-evm'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { ZERO, isZero } from '@masknet/web3-shared-base'\nimport { fetchJSON } from '@masknet/web3-providers/helpers'\nimport { TraderAPI } from '@masknet/web3-providers/types'\nimport { ChainResolver, ContractReadonly, Web3Readonly } from '@masknet/web3-providers'\nimport type {\n    SwapErrorResponse,\n    SwapQuoteRequest,\n    SwapQuoteResponse,\n    SwapServerErrorResponse,\n    SwapValidationErrorResponse,\n} from '../types/index.js'\nimport { BIPS_BASE, ZRX_AFFILIATE_ADDRESS, ZRX_NATIVE_TOKEN_ADDRESS } from '../constants/index.js'\n\nconst ZRX_BASE_URL = 'https://zrx-proxy.r2d2.to/'\n\nfunction getNativeTokenLabel(networkType: NetworkType) {\n    switch (networkType) {\n        case NetworkType.Ethereum:\n            return 'ETH'\n        case NetworkType.Binance:\n        case NetworkType.Base:\n        case NetworkType.Polygon:\n        case NetworkType.Arbitrum:\n        case NetworkType.xDai:\n        case NetworkType.Celo:\n        case NetworkType.Fantom:\n        case NetworkType.Aurora:\n        case NetworkType.Boba:\n        case NetworkType.Fuse:\n        case NetworkType.Metis:\n        case NetworkType.Avalanche:\n        case NetworkType.Optimism:\n        case NetworkType.Conflux:\n        case NetworkType.Astar:\n        case NetworkType.Scroll:\n        case NetworkType.Moonbeam:\n        case NetworkType.CustomNetwork:\n            return ZRX_NATIVE_TOKEN_ADDRESS\n        default:\n            safeUnreachable(networkType)\n            return ''\n    }\n}\n\nclass ZeroX_API implements TraderAPI.Provider {\n    public provider = TradeProvider.ZRX\n\n    async swapQuote(request: SwapQuoteRequest, chainId: ChainId) {\n        const params: Record<string, string | number> = {}\n        Object.entries(request).map(([key, value]) => {\n            params[key] = value\n        })\n        if (request.slippagePercentage)\n            params.slippagePercentage = new BigNumber(request.slippagePercentage).dividedBy(BIPS_BASE).toFixed()\n        if (request.buyTokenPercentageFee)\n            params.buyTokenPercentageFee = new BigNumber(request.buyTokenPercentageFee).dividedBy(100).toFixed()\n\n        params.affiliateAddress = ZRX_AFFILIATE_ADDRESS\n\n        const response_ = await fetchJSON<SwapQuoteResponse | SwapErrorResponse>(\n            urlcat(ZRX_BASE_URL, 'swap/v1/quote', {\n                ...params,\n                chain_id: chainId,\n            }),\n        )\n\n        const validationErrorResponse = response_ as SwapValidationErrorResponse\n        if (validationErrorResponse.code)\n            throw new Error(first(validationErrorResponse.validationErrors)?.reason ?? 'Unknown Error')\n\n        const serverErrorResponse = response_ as SwapServerErrorResponse\n        if (serverErrorResponse.reason)\n            throw new Error(first(validationErrorResponse.validationErrors)?.reason || 'Unknown Error')\n\n        const successResponse = response_ as SwapQuoteResponse\n        return successResponse\n    }\n\n    private async getTrade(\n        chainId: ChainId,\n        account: string,\n        inputAmount: string,\n        slippage: number,\n        inputToken?: Web3Helper.FungibleTokenAll,\n        outputToken?: Web3Helper.FungibleTokenAll,\n    ) {\n        if (isZero(inputAmount) || !inputToken || !outputToken) return null\n\n        const networkType = ChainResolver.networkType(chainId as ChainId)\n\n        if (!networkType) return\n        const sellToken = isNativeTokenAddress(inputToken.address)\n            ? getNativeTokenLabel(networkType)\n            : inputToken.address\n\n        const buyToken = isNativeTokenAddress(outputToken.address)\n            ? getNativeTokenLabel(networkType)\n            : outputToken.address\n\n        return this.swapQuote(\n            {\n                sellToken,\n                buyToken,\n                takerAddress: account,\n                sellAmount: inputAmount,\n                buyAmount: void 0,\n                skipValidation: true,\n                slippagePercentage: slippage,\n                affiliateAddress: ZRX_AFFILIATE_ADDRESS,\n            },\n            chainId,\n        )\n    }\n\n    public async getTradeInfo(\n        chainId: ChainId,\n        account: string,\n        inputAmount_: string,\n        slippage: number,\n        inputToken?: Web3Helper.FungibleTokenAll,\n        outputToken?: Web3Helper.FungibleTokenAll,\n    ) {\n        try {\n            const trade = await this.getTrade(chainId, account, inputAmount_, slippage, inputToken, outputToken)\n            if (!trade) return null\n\n            const inputAmount = new BigNumber(trade.sellAmount)\n            const outputAmount = new BigNumber(trade.buyAmount)\n\n            const computed = {\n                strategy: TraderAPI.TradeStrategy.ExactIn,\n                inputToken,\n                outputToken,\n                inputAmount,\n                outputAmount,\n                executionPrice: new BigNumber(trade.price),\n                fee: new BigNumber(trade.minimumProtocolFee),\n                maximumSold: new BigNumber(trade.sellAmount),\n                minimumReceived: outputAmount,\n\n                // minimumProtocolFee\n                priceImpact: ZERO,\n\n                trade_: { ...trade, buyAmount: outputAmount.toFixed() },\n            } as TraderAPI.TradeComputed<SwapQuoteResponse>\n\n            try {\n                const gas = await this.getTradeGasLimit(account, chainId, computed)\n\n                return {\n                    gas,\n                    value: computed,\n                    provider: this.provider,\n                }\n            } catch {\n                return {\n                    value: computed,\n                    provider: this.provider,\n                }\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                return {\n                    value: null,\n                    error,\n                    provider: this.provider,\n                }\n            }\n            return null\n        }\n    }\n\n    public async getNativeWrapperTradeInfo(\n        chainId: ChainId,\n        account: string,\n        inputAmount: string,\n        inputToken?: Web3Helper.FungibleTokenAll,\n        outputToken?: Web3Helper.FungibleTokenAll,\n    ) {\n        const { WNATIVE_ADDRESS } = getTokenConstants(chainId)\n        const tradeAmount = new BigNumber(inputAmount || '0')\n        if (tradeAmount.isZero() || !inputToken || !outputToken || !WNATIVE_ADDRESS) return null\n\n        const wrapperContract = ContractReadonly.getWETHContract(WNATIVE_ADDRESS, { chainId })\n\n        const computed = {\n            strategy: TraderAPI.TradeStrategy.ExactIn,\n            inputToken,\n            outputToken,\n            inputAmount: tradeAmount,\n            outputAmount: tradeAmount,\n            executionPrice: ZERO,\n            maximumSold: ZERO,\n            minimumReceived: tradeAmount,\n            priceImpact: ZERO,\n            fee: ZERO,\n            trade_: {\n                isWrap: isNativeTokenSchemaType(inputToken.schema as SchemaType),\n                isNativeTokenWrapper: true,\n            },\n        }\n\n        try {\n            const tx = await new ContractTransaction(wrapperContract).fillAll(wrapperContract?.methods.deposit(), {\n                from: account,\n                value: tradeAmount.toFixed(),\n            })\n\n            const gas = tx.gas ?? '0'\n\n            return {\n                gas,\n                provider: this.provider,\n                value: computed,\n            }\n        } catch {\n            return {\n                value: computed,\n                provider: this.provider,\n            }\n        }\n    }\n\n    public async getTradeGasLimit(\n        account: string,\n        chainId: ChainId,\n        trade: TraderAPI.TradeComputed<SwapQuoteResponse>,\n    ) {\n        if (!account || !trade.trade_) return '0'\n\n        const config = {\n            from: account,\n            ...pick(trade.trade_, 'to', 'data', 'value'),\n        }\n\n        return Web3Readonly.estimateTransaction(config, 0, { chainId })\n    }\n}\nexport const ZeroX = new ZeroX_API()\n","import { useMemo } from 'react'\nimport { TradeProvider } from '@masknet/public-api'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useChainContext, useCustomBlockBeatRetry, useNetwork } from '@masknet/web3-hooks-base'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport type { ChainId, NetworkType } from '@masknet/web3-shared-evm'\nimport type { TraderAPI } from '@masknet/web3-providers/types'\nimport { useSlippageTolerance } from './useSlippageTolerance.js'\nimport { getEVMAvailableTraderProviders } from '../helpers/index.js'\nimport { ZeroX } from '../providers/ZeroX.js'\n\nexport function useZeroX(\n    inputAmount_: string,\n    scale: number,\n    inputToken?: Web3Helper.FungibleTokenAll,\n    outputToken?: Web3Helper.FungibleTokenAll,\n    temporarySlippage?: number,\n    isNativeTokenWrapper?: boolean,\n) {\n    const { chainId, account } = useChainContext<NetworkPluginID.PLUGIN_EVM>()\n    const network = useNetwork(undefined, chainId)\n    const slippageSetting = useSlippageTolerance()\n\n    const slippage = useMemo(() => {\n        return temporarySlippage ? temporarySlippage : slippageSetting\n    }, [temporarySlippage, slippageSetting])\n\n    const provider = useMemo(() => {\n        if (!network) return\n        const providers = getEVMAvailableTraderProviders(network.type as NetworkType)\n        if (!providers.includes(TradeProvider.ZRX)) return\n        return ZeroX\n    }, [network])\n\n    return useCustomBlockBeatRetry<NetworkPluginID.PLUGIN_EVM, TraderAPI.TradeInfo | undefined | null>(\n        NetworkPluginID.PLUGIN_EVM,\n        async () => {\n            if (!provider) return\n            return isNativeTokenWrapper\n                ? provider.getNativeWrapperTradeInfo(chainId as ChainId, account, inputAmount_, inputToken, outputToken)\n                : provider.getTradeInfo(chainId as ChainId, account, inputAmount_, slippage, inputToken, outputToken)\n        },\n        [inputAmount_, isNativeTokenWrapper, chainId, account, provider, inputToken, outputToken],\n        scale,\n    )\n}\n","import { ChainId } from '@masknet/web3-shared-evm'\n\nexport const OPENOCEAN_BASE_URL = 'https://ethapi.openocean.finance/v2/'\n\n// https://docs.openocean.finance/api/openocean-dex-api-2.0\nexport const OPENOCEAN_SUPPORTED_CHAINS = [\n    ChainId.Mainnet,\n    ChainId.BSC,\n    ChainId.xDai,\n    ChainId.Matic,\n    ChainId.Fantom,\n    ChainId.Arbitrum,\n    ChainId.Avalanche,\n]\n","import urlcat from 'urlcat'\nimport { BigNumber } from 'bignumber.js'\nimport { pick } from 'lodash-es'\nimport { TradeProvider } from '@masknet/public-api'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport {\n    isNativeTokenAddress,\n    type ChainId,\n    getTraderConstants,\n    getOpenOceanConstants,\n    ProviderURL,\n    type Transaction,\n    ContractTransaction,\n    type SchemaType,\n    getTokenConstants,\n    isNativeTokenSchemaType,\n} from '@masknet/web3-shared-evm'\nimport { ZERO, isZero, leftShift, pow10 } from '@masknet/web3-shared-base'\nimport { ContractReadonly, Web3Readonly } from '@masknet/web3-providers'\nimport { TraderAPI } from '@masknet/web3-providers/types'\nimport { fetchJSON } from '@masknet/web3-providers/helpers'\nimport { OPENOCEAN_BASE_URL, OPENOCEAN_SUPPORTED_CHAINS } from '../constants/index.js'\nimport type { SwapOOData, SwapOORequest } from '../types/index.js'\n\nclass OpenOceanAPI implements TraderAPI.Provider {\n    public provider = TradeProvider.OPENOCEAN\n\n    async swapOO(request: SwapOORequest) {\n        const payload = await fetchJSON<{\n            data: string\n            outAmount: string\n            minOutAmount: number\n            to: string\n            value: string\n            estimatedGas: string\n        }>(\n            urlcat(OPENOCEAN_BASE_URL, `/${request.chainId}/swap`, {\n                inTokenSymbol: request.toToken?.symbol,\n                inTokenAddress: request.fromToken?.address,\n                outTokenSymbol: request.toToken?.symbol,\n                outTokenAddress: request.toToken?.address,\n                amount: request.fromAmount,\n                gasPrice: 5000000000,\n                slippage: request.slippage,\n                disabledDexIds: '',\n                account: request.userAddr,\n                referrer: getOpenOceanConstants(request.chainId).REFERRER_ADDRESS?.toLowerCase(),\n                disableRfq: '1',\n            }),\n        )\n\n        const { data, outAmount, minOutAmount, to, value, estimatedGas } = payload\n        const _resAmount = leftShift(outAmount, request.toToken.decimals).toNumber()\n        const _fromAmount = leftShift(request.fromAmount, request.fromToken.decimals).toNumber()\n\n        return {\n            data,\n            estimatedGas,\n            targetApproveAddr: request.fromToken.address,\n            targetDecimals: request.fromToken.decimals,\n            resAmount: _resAmount,\n            fromAmount: _fromAmount,\n            resPricePerFromToken: +(_fromAmount / _resAmount).toFixed(8),\n            resPricePerToToken: +(_resAmount / _fromAmount).toFixed(8),\n            to,\n            value,\n            slippage: request.slippage,\n            fromTokenSymbol: request.fromToken.symbol,\n            toTokenSymbol: request.toToken.symbol,\n            minOutAmount,\n        } as SwapOOData\n    }\n    private async getTrade(\n        chainId: ChainId,\n        account: string,\n        inputAmount: string,\n        slippage: number,\n        inputToken?: Web3Helper.FungibleTokenAll,\n        outputToken?: Web3Helper.FungibleTokenAll,\n    ) {\n        const { OPENOCEAN_ETH_ADDRESS } = getTraderConstants(chainId)\n        if (isZero(inputAmount) || !inputToken || !outputToken || !OPENOCEAN_SUPPORTED_CHAINS.includes(chainId))\n            return null\n\n        const sellToken = isNativeTokenAddress(inputToken.address)\n            ? { ...inputToken, address: OPENOCEAN_ETH_ADDRESS ?? '' }\n            : inputToken\n        const buyToken = isNativeTokenAddress(outputToken.address)\n            ? { ...outputToken, address: OPENOCEAN_ETH_ADDRESS ?? '' }\n            : outputToken\n\n        return this.swapOO({\n            isNativeSellToken: isNativeTokenAddress(inputToken.address),\n            fromToken: sellToken,\n            toToken: buyToken,\n            fromAmount: inputAmount,\n            slippage,\n            userAddr: account,\n            rpc: ProviderURL.from(chainId),\n            chainId,\n        })\n    }\n    public async getTradeInfo(\n        chainId: ChainId,\n        account: string,\n        inputAmount_: string,\n        slippage: number,\n        inputToken?: Web3Helper.FungibleTokenAll | undefined,\n        outputToken?: Web3Helper.FungibleTokenAll | undefined,\n    ) {\n        try {\n            const trade = await this.getTrade(chainId, account, inputAmount_, slippage, inputToken, outputToken)\n            if (!trade || !inputToken || !outputToken) return null\n\n            const inputAmount = new BigNumber(trade.fromAmount).multipliedBy(pow10(inputToken.decimals)).integerValue()\n            const executionPrice = new BigNumber(trade.resPricePerToToken)\n            const outputAmount = new BigNumber(trade.resAmount).multipliedBy(pow10(outputToken.decimals)).integerValue()\n            const priceImpact = new BigNumber(trade.priceImpact ?? 0)\n\n            const computed: TraderAPI.TradeComputed<SwapOOData> = {\n                strategy: TraderAPI.TradeStrategy.ExactIn,\n                inputToken,\n                outputToken,\n                inputAmount,\n                outputAmount,\n                executionPrice,\n                fee: ZERO,\n                maximumSold: inputAmount,\n                minimumReceived: new BigNumber(trade.minOutAmount),\n                // minimumProtocolFee\n                priceImpact,\n\n                trade_: { ...trade },\n            }\n\n            try {\n                const gas = await this.getTradeGasLimit(account, chainId, computed)\n\n                return {\n                    gas,\n                    value: computed,\n                    provider: this.provider,\n                }\n            } catch {\n                return {\n                    value: computed,\n                    provider: this.provider,\n                }\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                return {\n                    value: null,\n                    error,\n                    provider: this.provider,\n                }\n            }\n            return null\n        }\n    }\n\n    public async getNativeWrapperTradeInfo(\n        chainId: ChainId,\n        account: string,\n        inputAmount: string,\n        inputToken?: Web3Helper.FungibleTokenAll,\n        outputToken?: Web3Helper.FungibleTokenAll,\n    ) {\n        const { WNATIVE_ADDRESS } = getTokenConstants(chainId)\n        const tradeAmount = new BigNumber(inputAmount || '0')\n        if (tradeAmount.isZero() || !inputToken || !outputToken || !WNATIVE_ADDRESS) return null\n\n        const wrapperContract = ContractReadonly.getWETHContract(WNATIVE_ADDRESS, { chainId })\n\n        const computed = {\n            strategy: TraderAPI.TradeStrategy.ExactIn,\n            inputToken,\n            outputToken,\n            inputAmount: tradeAmount,\n            outputAmount: tradeAmount,\n            executionPrice: ZERO,\n            maximumSold: ZERO,\n            minimumReceived: tradeAmount,\n            priceImpact: ZERO,\n            fee: ZERO,\n            trade_: {\n                isWrap: isNativeTokenSchemaType(inputToken.schema as SchemaType),\n                isNativeTokenWrapper: true,\n            },\n        }\n\n        try {\n            const tx = await new ContractTransaction(wrapperContract).fillAll(wrapperContract?.methods.deposit(), {\n                from: account,\n                value: tradeAmount.toFixed(),\n            })\n\n            const gas = tx.gas ?? '0'\n\n            return {\n                gas,\n                provider: this.provider,\n                value: computed,\n            }\n        } catch {\n            return {\n                value: computed,\n                provider: this.provider,\n            }\n        }\n    }\n\n    public getTradeGasLimit(account: string, chainId: ChainId, tradeComputed: TraderAPI.TradeComputed<SwapOOData>) {\n        if (!tradeComputed.trade_?.estimatedGas) return tradeComputed.trade_?.estimatedGas\n        const config = {\n            from: account,\n            ...pick(tradeComputed.trade_, ['to', 'data', 'value']),\n        } as Transaction\n\n        if (!config.value) return '0'\n\n        return Web3Readonly.estimateTransaction(config, 0, { chainId })\n    }\n}\nexport const OpenOcean = new OpenOceanAPI()\n","import { useMemo } from 'react'\nimport { TradeProvider } from '@masknet/public-api'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useChainContext, useCustomBlockBeatRetry, useNetwork } from '@masknet/web3-hooks-base'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport type { ChainId, NetworkType } from '@masknet/web3-shared-evm'\nimport type { TraderAPI } from '@masknet/web3-providers/types'\nimport { useSlippageTolerance } from './useSlippageTolerance.js'\nimport { getEVMAvailableTraderProviders } from '../helpers/index.js'\nimport { OpenOcean } from '../providers/OpenOcean.js'\n\nexport function useOpenOcean(\n    inputAmount_: string,\n    scale: number,\n    inputToken?: Web3Helper.FungibleTokenAll,\n    outputToken?: Web3Helper.FungibleTokenAll,\n    temporarySlippage?: number,\n    isNativeTokenWrapper?: boolean,\n) {\n    const { chainId, account } = useChainContext()\n    const network = useNetwork(undefined, chainId)\n    const slippageSetting = useSlippageTolerance()\n\n    const slippage = useMemo(() => {\n        return temporarySlippage ? temporarySlippage : slippageSetting\n    }, [temporarySlippage, slippageSetting])\n\n    const provider = useMemo(() => {\n        if (!network) return\n        const providers = getEVMAvailableTraderProviders(network.type as NetworkType)\n\n        if (!providers.includes(TradeProvider.OPENOCEAN)) return\n        return OpenOcean\n    }, [network])\n    return useCustomBlockBeatRetry<NetworkPluginID.PLUGIN_EVM, TraderAPI.TradeInfo | undefined | null>(\n        NetworkPluginID.PLUGIN_EVM,\n        async () => {\n            if (!provider) return\n            return isNativeTokenWrapper\n                ? provider.getNativeWrapperTradeInfo(chainId as ChainId, account, inputAmount_, inputToken, outputToken)\n                : provider.getTradeInfo(chainId as ChainId, account, inputAmount_, slippage, inputToken, outputToken)\n        },\n        [inputAmount_, isNativeTokenWrapper, chainId, account, provider, inputToken, outputToken],\n        scale,\n    )\n}\n","import { useMemo } from 'react'\nimport { TradeProvider } from '@masknet/public-api'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useChainContext, useCustomBlockBeatRetry, useNetwork } from '@masknet/web3-hooks-base'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport type { TraderAPI } from '@masknet/web3-providers/types'\nimport type { ChainId, NetworkType } from '@masknet/web3-shared-evm'\nimport { useSlippageTolerance } from './useSlippageTolerance.js'\nimport { getEVMAvailableTraderProviders } from '../helpers/index.js'\nimport { Bancor } from '../providers/Bancor.js'\n\nexport function useBancor(\n    inputAmount_: string,\n    scale: number,\n    inputToken?: Web3Helper.FungibleTokenAll,\n    outputToken?: Web3Helper.FungibleTokenAll,\n    temporarySlippage?: number,\n    isNativeTokenWrapper?: boolean,\n) {\n    const { chainId, account } = useChainContext()\n    const network = useNetwork(undefined, chainId)\n    const slippageSetting = useSlippageTolerance()\n\n    const slippage = useMemo(() => {\n        return temporarySlippage ? temporarySlippage : slippageSetting\n    }, [temporarySlippage, slippageSetting])\n\n    const provider = useMemo(() => {\n        if (!network) return\n        const providers = getEVMAvailableTraderProviders(network.type as NetworkType)\n        if (!providers.includes(TradeProvider.BANCOR)) return\n        return Bancor\n    }, [network])\n    return useCustomBlockBeatRetry<NetworkPluginID.PLUGIN_EVM, TraderAPI.TradeInfo | undefined | null>(\n        NetworkPluginID.PLUGIN_EVM,\n        async () => {\n            if (!provider) return\n            return isNativeTokenWrapper\n                ? provider.getNativeWrapperTradeInfo(chainId as ChainId, account, inputAmount_, inputToken, outputToken)\n                : provider.getTradeInfo(chainId as ChainId, account, inputAmount_, slippage, inputToken, outputToken)\n        },\n        [inputAmount_, isNativeTokenWrapper, chainId, account, provider, inputToken, outputToken],\n        scale,\n    )\n}\n","import type { AsyncStateRetry } from 'react-use/lib/useAsyncRetry.js'\nimport type { TraderAPI } from '@masknet/web3-providers/types'\nimport { multipliedBy, pow10 } from '@masknet/web3-shared-base'\nimport { useChainContext } from '@masknet/web3-hooks-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { TradeProvider } from '@masknet/public-api'\nimport { useTrade as useNativeTokenTrade } from './native/useTrade.js'\nimport { useUniswapV2Like } from './useUniswapV2Like.js'\nimport { useAvailableTraderProviders } from '../trending/useAvailableTraderProviders.js'\nimport { useUniswapV3Like } from './useUniSwapV3Like.js'\nimport { useZeroX } from './useZeroX.js'\nimport { useOpenOcean } from './useOpenOcean.js'\nimport { useBancor } from './useBancor.js'\n\nexport function useAllTradeComputed(\n    inputAmount: string,\n    scale: number,\n    inputToken?: Web3Helper.FungibleTokenAll,\n    outputToken?: Web3Helper.FungibleTokenAll,\n    temporarySlippage?: number,\n) {\n    const { chainId } = useChainContext()\n    const inputTokenProduct = pow10(inputToken?.decimals ?? 0)\n    const inputAmount_ = multipliedBy(inputAmount || '0', inputTokenProduct)\n        .integerValue()\n        .toFixed()\n    const tradeProviders = useAvailableTraderProviders(chainId)\n\n    // NATIVE-WNATIVE pair\n    const { value: isNativeTokenWrapper } = useNativeTokenTrade(inputToken, outputToken)\n\n    // uniswap-v2\n    const uniswapV2 = useUniswapV2Like(\n        TradeProvider.UNISWAP_V2,\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n\n    // sushi swap\n    const sushiSwap = useUniswapV2Like(\n        TradeProvider.SUSHISWAP,\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n\n    // quick swap\n    const quickSwap = useUniswapV2Like(\n        TradeProvider.QUICKSWAP,\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n    // pancake swap\n    const pancakeSwap = useUniswapV2Like(\n        TradeProvider.PANCAKESWAP,\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n\n    // uniswap-v3 like providers\n    const uniswapV3 = useUniswapV3Like(\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n\n    // zrx\n    const zrx = useZeroX(inputAmount_, scale, inputToken, outputToken, temporarySlippage, isNativeTokenWrapper)\n\n    // bancor\n    const bancor = useBancor(inputAmount_, scale, inputToken, outputToken, temporarySlippage, isNativeTokenWrapper)\n    // traderjoe\n\n    const traderJoe = useUniswapV2Like(\n        TradeProvider.TRADERJOE,\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n\n    // pangolindex\n    const pangolindex = useUniswapV2Like(\n        TradeProvider.PANGOLIN,\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n    // openocean\n    const openocean = useOpenOcean(\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n\n    // trisolaris\n    const trisolaris = useUniswapV2Like(\n        TradeProvider.TRISOLARIS,\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n\n    // WannaSwap\n    const wannaswap = useUniswapV2Like(\n        TradeProvider.WANNASWAP,\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n    // Mdex\n    const mdex = useUniswapV2Like(\n        TradeProvider.MDEX,\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n\n    // Arthswap\n    const arthswap = useUniswapV2Like(\n        TradeProvider.ARTHSWAP,\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n    // Versa Finance\n    const versa = useUniswapV2Like(\n        TradeProvider.VERSA,\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n    // Astar Exchange\n    const astarexchange = useUniswapV2Like(\n        TradeProvider.ASTAREXCHANGE,\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n    // Yumi Swap\n    const yumiswap = useUniswapV2Like(\n        TradeProvider.YUMISWAP,\n        inputAmount_,\n        scale,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n        isNativeTokenWrapper,\n    )\n\n    const all: Array<AsyncStateRetry<TraderAPI.TradeInfo | null | undefined>> = [\n        uniswapV2,\n        sushiSwap,\n        quickSwap,\n        pancakeSwap,\n        uniswapV3,\n        zrx,\n        traderJoe,\n        bancor,\n        pangolindex,\n        openocean,\n        wannaswap,\n        trisolaris,\n        mdex,\n        arthswap,\n        versa,\n        astarexchange,\n        yumiswap,\n    ]\n\n    return all.filter((x) => {\n        return tradeProviders.some((provider) => provider === x.value?.provider) && !!x.value\n    }) as Array<AsyncStateRetry<TraderAPI.TradeInfo>>\n}\n","import { useReducer, useState } from 'react'\nimport type { AsyncStateRetry } from 'react-use/lib/useAsyncRetry.js'\nimport { createContainer } from 'unstated-next'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport type { TraderAPI } from '@masknet/web3-providers/types'\nimport { useChainContext } from '@masknet/web3-hooks-base'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport { useAllTradeComputed } from './useAllTradeComputed.js'\nimport { BLOCK_TIME_SCALE } from '../constants/trader.js'\n\nexport const INITIAL_STATE = {\n    inputAmount: '',\n    inputTokenBalance: '0',\n    outputTokenBalance: '0',\n}\n\nexport interface AllProviderTradeState {\n    inputAmount: string\n    inputToken?: Web3Helper.FungibleTokenAll\n    outputToken?: Web3Helper.FungibleTokenAll\n    inputTokenBalance: string\n    outputTokenBalance: string\n}\n\nexport enum AllProviderTradeActionType {\n    UPDATE_INPUT_TOKEN = 0,\n    UPDATE_OUTPUT_TOKEN = 1,\n    UPDATE_INPUT_AMOUNT = 2,\n    UPDATE_INPUT_TOKEN_BALANCE = 3,\n    UPDATE_OUTPUT_TOKEN_BALANCE = 4,\n    SWITCH_TOKEN = 5,\n}\n\nexport type AllProviderSwapAction =\n    | {\n          type: AllProviderTradeActionType.UPDATE_INPUT_TOKEN\n          token?: Web3Helper.FungibleTokenAll\n          balance?: string\n      }\n    | {\n          type: AllProviderTradeActionType.UPDATE_OUTPUT_TOKEN\n          token?: Web3Helper.FungibleTokenAll\n      }\n    | {\n          type: AllProviderTradeActionType.UPDATE_INPUT_AMOUNT\n          amount: string\n      }\n    | {\n          type: AllProviderTradeActionType.UPDATE_INPUT_TOKEN_BALANCE\n          balance: string\n      }\n    | {\n          type: AllProviderTradeActionType.UPDATE_OUTPUT_TOKEN_BALANCE\n          balance: string\n      }\n    | {\n          type: AllProviderTradeActionType.SWITCH_TOKEN\n          inputToken?: Web3Helper.FungibleTokenAll\n          outputToken?: Web3Helper.FungibleTokenAll\n          inputBalance: string\n          outputBalance: string\n      }\n\nfunction reducer(state: AllProviderTradeState, action: AllProviderSwapAction): AllProviderTradeState {\n    switch (action.type) {\n        case AllProviderTradeActionType.UPDATE_INPUT_TOKEN:\n            return {\n                ...state,\n                inputToken: action.token,\n                inputTokenBalance: action.balance ?? state.inputTokenBalance,\n            }\n        case AllProviderTradeActionType.UPDATE_OUTPUT_TOKEN:\n            return {\n                ...state,\n                outputToken: action.token,\n            }\n        case AllProviderTradeActionType.UPDATE_INPUT_AMOUNT:\n            return {\n                ...state,\n                inputAmount: action.amount,\n            }\n        case AllProviderTradeActionType.UPDATE_INPUT_TOKEN_BALANCE:\n            return {\n                ...state,\n                inputTokenBalance: action.balance,\n            }\n        case AllProviderTradeActionType.UPDATE_OUTPUT_TOKEN_BALANCE:\n            return {\n                ...state,\n                outputTokenBalance: action.balance,\n            }\n        case AllProviderTradeActionType.SWITCH_TOKEN:\n            return {\n                ...state,\n                inputToken: action.inputToken,\n                outputToken: action.outputToken,\n                inputTokenBalance: action.inputBalance,\n                outputTokenBalance: action.outputBalance,\n                inputAmount: '',\n            }\n        default:\n            return state\n    }\n}\n\nexport function useAllProviderTradeContext() {\n    const { chainId } = useChainContext<NetworkPluginID.PLUGIN_EVM>()\n    const [openConfirmDialog, setOpenConfirmDialog] = useState(false)\n    const [tradeStore, dispatchTradeStore] = useReducer(reducer, INITIAL_STATE)\n    const [isSwapping, setIsSwapping] = useState(false)\n    const [temporarySlippage, setTemporarySlippage] = useState<number>()\n    const { inputAmount, inputToken, outputToken } = tradeStore\n    const allTradeComputed: Array<AsyncStateRetry<TraderAPI.TradeInfo>> = useAllTradeComputed(\n        inputAmount,\n        openConfirmDialog ? 1 : BLOCK_TIME_SCALE[chainId] || 1,\n        inputToken,\n        outputToken,\n        temporarySlippage,\n    )\n\n    return {\n        isSwapping,\n        setIsSwapping,\n        tradeState: [tradeStore, dispatchTradeStore] as const,\n        temporarySlippage,\n        setTemporarySlippage,\n        allTradeComputed,\n        openConfirmDialog,\n        setOpenConfirmDialog,\n    }\n}\n\nexport const AllProviderTradeContext = createContainer(useAllProviderTradeContext)\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z\"\n}), 'HelpOutline');","import React, { useCallback, useMemo } from 'react'\nimport { unreachable } from '@masknet/kit'\nimport { TokenIcon } from '@masknet/shared'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport { ActionButton, ShadowRootTooltip, makeStyles, type ActionButtonProps } from '@masknet/theme'\nimport { useChainContext, useFungibleTokenBalance, useFungibleTokenSpenders } from '@masknet/web3-hooks-base'\nimport { ApproveStateType, useERC20TokenApproveCallback } from '@masknet/web3-hooks-evm'\nimport { isGte, isSameAddress, type FungibleToken, rightShift } from '@masknet/web3-shared-base'\nimport type { ChainId, SchemaType } from '@masknet/web3-shared-evm'\nimport { HelpOutline } from '@mui/icons-material'\nimport { useSharedTrans } from '../../../locales/index.js'\n\nconst useStyles = makeStyles<void, 'icon'>()((theme, _, refs) => ({\n    icon: {},\n    button: {\n        whiteSpace: 'nowrap',\n        // increase selector priority over button's\n        [`.${refs.icon}`]: {\n            width: 18,\n            height: 18,\n            fontSize: 10,\n        },\n    },\n    helpIcon: {\n        width: 18,\n        height: 18,\n    },\n}))\n\nexport interface EthereumERC20TokenApprovedBoundaryProps extends withClasses<'button' | 'container'> {\n    amount: string\n    balance?: string\n    spender?: string\n    token?: FungibleToken<ChainId, SchemaType>\n    fallback?: React.ReactNode\n    children?: React.ReactNode | ((allowance: string) => React.ReactNode)\n    infiniteUnlockContent?: React.ReactNode\n    ActionButtonProps?: ActionButtonProps\n    contractName?: string\n    showHelperToken?: boolean\n    failedContent?: React.ReactNode\n    callback?: () => void\n}\n\nexport function EthereumERC20TokenApprovedBoundary(props: EthereumERC20TokenApprovedBoundaryProps) {\n    const {\n        children = null,\n        amount,\n        balance,\n        spender,\n        token,\n        infiniteUnlockContent,\n        contractName,\n        showHelperToken = true,\n        failedContent,\n        callback,\n    } = props\n\n    const t = useSharedTrans()\n    const { classes } = useStyles(undefined, { props })\n    const { account, chainId } = useChainContext<NetworkPluginID.PLUGIN_EVM>({ chainId: token?.chainId })\n    const { data: tokenBalance } = useFungibleTokenBalance(NetworkPluginID.PLUGIN_EVM, token?.address, {\n        chainId,\n    })\n\n    const {\n        data: spenders,\n        isLoading: spendersLoading,\n        isError,\n        refetch,\n    } = useFungibleTokenSpenders(NetworkPluginID.PLUGIN_EVM, {\n        chainId,\n        account,\n    })\n\n    const approveAmount = balance || tokenBalance || amount\n    const [{ type: approveStateType, allowance }, transactionState, approveCallback] = useERC20TokenApproveCallback(\n        token?.address ?? '',\n        approveAmount,\n        spender ?? '',\n        () => {\n            callback?.()\n            refetch()\n        },\n        token?.chainId,\n    )\n    const approved = useMemo(() => {\n        if (isGte(allowance, amount)) return true\n        if (!token?.address || !spenders?.length) return false\n        return spenders.some((x) => {\n            return (\n                isSameAddress(x.tokenInfo.address, token.address) &&\n                isSameAddress(x.address, spender) &&\n                isGte(rightShift(x.amount || 0, x.tokenInfo.decimals || token.decimals), amount)\n            )\n        })\n    }, [allowance, amount, spenders, token?.address, token?.decimals, spender])\n\n    const loading =\n        spendersLoading ||\n        approveStateType === ApproveStateType.UPDATING ||\n        transactionState.loadingApprove ||\n        transactionState.loading\n\n    const onApprove = useCallback(async () => {\n        if (approved || loading) return\n        await approveCallback(true)\n    }, [approved, loading, approveCallback])\n\n    // not a valid erc20 token, please given token as undefined\n    if (!token) return <>{typeof children === 'function' ? children(allowance) : children}</>\n\n    if (isError)\n        return (\n            <ActionButton\n                className={classes.button}\n                fullWidth\n                variant=\"contained\"\n                onClick={() => refetch()}\n                {...props.ActionButtonProps}>\n                {failedContent ?? t.wallet_load_retry({ symbol: token.symbol ?? token.name ?? 'Token' })}\n            </ActionButton>\n        )\n    if (loading || !approved)\n        return (\n            <ActionButton\n                loading={loading}\n                className={classes.button}\n                fullWidth\n                variant=\"contained\"\n                startIcon={\n                    <TokenIcon\n                        className={classes.icon}\n                        address={token.address}\n                        chainId={token.chainId}\n                        name={token.name}\n                        disableDefaultIcon\n                    />\n                }\n                endIcon={\n                    showHelperToken ? (\n                        <ShadowRootTooltip\n                            title={t.plugin_wallet_token_infinite_unlock_tips({\n                                provider: contractName ?? '',\n                                symbol: token.symbol,\n                            })}\n                            placement=\"top\"\n                            arrow\n                            leaveDelay={2000}\n                            disableInteractive\n                            disableFocusListener\n                            disableTouchListener>\n                            <HelpOutline className={classes.helpIcon} />\n                        </ShadowRootTooltip>\n                    ) : null\n                }\n                onClick={onApprove}\n                {...props.ActionButtonProps}>\n                {infiniteUnlockContent ?? t.plugin_wallet_token_infinite_unlock({ symbol: token.symbol })}\n            </ActionButton>\n        )\n    if (approved) return <>{typeof children === 'function' ? children(allowance) : children}</>\n\n    unreachable(approved)\n}\n","import { useSubscription } from 'use-subscription'\nimport { FALSE, type NetworkPluginID } from '@masknet/shared-base'\nimport { useWeb3State } from './useWeb3State.js'\n\nexport function useRiskWarningApproved<T extends NetworkPluginID>(pluginID?: T) {\n    const { RiskWarning } = useWeb3State(pluginID)\n    return useSubscription(RiskWarning?.approved ?? FALSE)\n}\n","import { makeStyles, ActionButton, type ActionButtonProps } from '@masknet/theme'\nimport { useSharedTrans } from '../../../locales/index.js'\nimport { isZero } from '@masknet/web3-shared-base'\nimport {\n    useChainContext,\n    useNetworkContext,\n    useNativeTokenBalance,\n    useRiskWarningApproved,\n    useWallet,\n} from '@masknet/web3-hooks-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useAsync } from 'react-use'\nimport { SmartPayBundler } from '@masknet/web3-providers'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport { SelectProviderModal, WalletRiskWarningModal } from '../../modals/modals.js'\n\nconst useStyles = makeStyles()({\n    button: {\n        margin: 0,\n    },\n})\n\nexport interface WalletConnectedBoundaryProps extends withClasses<'connectWallet' | 'button'> {\n    offChain?: boolean\n    children?: React.ReactNode\n    expectedChainId: Web3Helper.ChainIdAll\n    hideRiskWarningConfirmed?: boolean\n    ActionButtonProps?: ActionButtonProps\n    startIcon?: React.ReactNode\n}\n\nexport function WalletConnectedBoundary(props: WalletConnectedBoundaryProps) {\n    const { children = null, offChain = false, hideRiskWarningConfirmed = false, expectedChainId } = props\n\n    const t = useSharedTrans()\n    const { classes, cx } = useStyles(undefined, { props })\n\n    const { pluginID } = useNetworkContext()\n    const { account, chainId: chainIdValid } = useChainContext({ chainId: expectedChainId })\n    const wallet = useWallet()\n    const { value: smartPayChainId } = useAsync(async () => SmartPayBundler.getSupportedChainId(), [])\n\n    const nativeTokenBalance = useNativeTokenBalance(undefined, {\n        chainId: chainIdValid,\n    })\n    const approved = useRiskWarningApproved()\n\n    const buttonClass = cx(classes.button, classes.connectWallet)\n\n    if (!account)\n        return (\n            <ActionButton\n                startIcon={props.startIcon}\n                className={buttonClass}\n                fullWidth\n                onClick={() => SelectProviderModal.open()}\n                {...props.ActionButtonProps}>\n                {t.plugin_wallet_connect_a_wallet()}\n            </ActionButton>\n        )\n\n    if (!approved && !hideRiskWarningConfirmed && pluginID === NetworkPluginID.PLUGIN_EVM)\n        return (\n            <ActionButton\n                className={buttonClass}\n                fullWidth\n                variant=\"contained\"\n                onClick={() => {\n                    WalletRiskWarningModal.open({\n                        account,\n                        pluginID,\n                    })\n                }}\n                {...props.ActionButtonProps}>\n                {t.plugin_wallet_confirm_risk_warning()}\n            </ActionButton>\n        )\n\n    if (!(wallet?.owner && chainIdValid === smartPayChainId) && isZero(nativeTokenBalance.value ?? '0') && !offChain)\n        return (\n            <ActionButton\n                className={buttonClass}\n                disabled={!nativeTokenBalance.error}\n                fullWidth\n                variant=\"contained\"\n                onClick={nativeTokenBalance.retry}\n                {...props.ActionButtonProps}>\n                {nativeTokenBalance.loading ? t.plugin_wallet_update_gas_fee() : t.plugin_wallet_no_gas_fee()}\n            </ActionButton>\n        )\n\n    if (!chainIdValid && !offChain)\n        return (\n            <ActionButton className={buttonClass} disabled fullWidth variant=\"contained\" {...props.ActionButtonProps}>\n                {t.plugin_wallet_invalid_network()}\n            </ActionButton>\n        )\n\n    return <>{children}</>\n}\n","import { memo, type PropsWithChildren, useRef } from 'react'\nimport { Box, Button } from '@mui/material'\nimport { useSharedTrans } from '../../../locales/index.js'\nimport { Sniffings } from '@masknet/shared-base'\n\ninterface ActionProps extends PropsWithChildren<{}> {\n    openSelectWalletDialog: () => void\n}\n\nexport const Action = memo<ActionProps>(function Action({ children, openSelectWalletDialog }) {\n    const ref = useRef<HTMLDivElement>()\n    const t = useSharedTrans()\n\n    return (\n        <Box display=\"flex\" columnGap={16} minWidth={!Sniffings.is_popup_page ? 276 : 176} ref={ref}>\n            {children ?? (\n                <Button fullWidth onClick={openSelectWalletDialog}>\n                    {t.wallet_status_button_change()}\n                </Button>\n            )}\n        </Box>\n    )\n})\n","import { memo, type PropsWithChildren, useCallback, useMemo } from 'react'\nimport { alpha, Box, Button } from '@mui/material'\nimport { Icons } from '@masknet/icons'\nimport { makeStyles, MaskColorVar } from '@masknet/theme'\nimport {\n    useNetworkContext,\n    useProviderDescriptor,\n    useRecentTransactions,\n    useNetworkDescriptor,\n    useWallet,\n    useReverseAddress,\n    useWeb3Others,\n    useChainContext,\n    NetworkContextProvider,\n    RevokeChainContextProvider,\n} from '@masknet/web3-hooks-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { type NetworkPluginID, Sniffings } from '@masknet/shared-base'\nimport { TransactionStatusType } from '@masknet/web3-shared-base'\nimport { ProviderType } from '@masknet/web3-shared-evm'\nimport { useSharedTrans } from '../../../locales/index.js'\nimport { WalletDescription } from './WalletDescription.js'\nimport { Action } from './Action.js'\nimport { SelectProviderModal, WalletStatusModal } from '../../../index.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    root: {\n        boxSizing: 'content-box',\n        display: 'flex',\n        backgroundColor: Sniffings.is_dashboard_page\n            ? MaskColorVar.mainBackground\n            : alpha(theme.palette.maskColor.bottom, 0.8),\n        boxShadow:\n            theme.palette.mode === 'dark'\n                ? '0px 0px 20px rgba(255, 255, 255, 0.12)'\n                : '0px 0px 20px rgba(0, 0, 0, 0.05)',\n        backdropFilter: 'blur(16px)',\n        padding: theme.spacing(2),\n        borderRadius: '0 0 12px 12px',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        flex: 1,\n        maxHeight: 40,\n    },\n    connection: {\n        width: 18,\n        height: 18,\n        marginRight: 8,\n    },\n}))\n\nexport interface WalletStatusBarProps<T extends NetworkPluginID> extends PropsWithChildren<{}> {\n    className?: string\n    actualPluginID?: T\n    expectedPluginID?: T\n    expectedChainId?: Web3Helper.Definition[T]['ChainId']\n    onClick?: (ev: React.MouseEvent<HTMLDivElement>) => void\n    requiredSupportChainIds?: Array<Web3Helper.Definition[T]['ChainId']>\n    requiredSupportPluginID?: NetworkPluginID\n}\n\nconst PluginWalletStatusBarWithoutContext = memo<WalletStatusBarProps<NetworkPluginID>>(\n    ({\n        className,\n        onClick,\n        expectedPluginID,\n        expectedChainId,\n        children,\n        requiredSupportChainIds,\n        requiredSupportPluginID,\n    }) => {\n        const t = useSharedTrans()\n        const { classes, cx } = useStyles()\n\n        const { pluginID } = useNetworkContext()\n        const { account, chainId, providerType } = useChainContext()\n        const wallet = useWallet(pluginID)\n        const providerDescriptor = useProviderDescriptor()\n        const networkDescriptor = useNetworkDescriptor(pluginID, chainId)\n        const expectedNetworkDescriptor = useNetworkDescriptor(expectedPluginID, expectedChainId)\n        const { data: domain } = useReverseAddress(pluginID, account)\n        const Others = useWeb3Others()\n\n        const openSelectProviderDialog = useCallback(() => {\n            SelectProviderModal.open({\n                requiredSupportChainIds,\n                requiredSupportPluginID,\n            })\n        }, [expectedNetworkDescriptor, requiredSupportChainIds, requiredSupportPluginID])\n\n        const pendingTransactions = useRecentTransactions(pluginID, TransactionStatusType.NOT_DEPEND)\n\n        const walletName = useMemo(() => {\n            if (domain) return domain\n            if (providerType === ProviderType.MaskWallet && wallet?.name) return wallet?.name\n            return providerDescriptor?.name || Others.formatAddress(account, 4)\n        }, [account, domain, providerType, wallet?.name, providerDescriptor?.name, Others.formatAddress])\n\n        if (!account) {\n            return (\n                <Box className={cx(classes.root, className)}>\n                    <Button fullWidth onClick={openSelectProviderDialog}>\n                        <Icons.Wallet className={classes.connection} /> {t.plugin_wallet_connect_a_wallet()}\n                    </Button>\n                </Box>\n            )\n        }\n\n        return (\n            <Box className={cx(classes.root, className)}>\n                <WalletDescription\n                    pending={!!pendingTransactions.length}\n                    providerIcon={providerDescriptor?.icon}\n                    networkIcon={networkDescriptor?.icon}\n                    iconFilterColor={providerDescriptor?.iconFilterColor}\n                    name={walletName}\n                    formattedAddress={Others.formatAddress(account, 4)}\n                    addressLink={Others.explorerResolver.addressLink(chainId, account)}\n                    onClick={onClick ?? openSelectProviderDialog}\n                    onPendingClick={() => WalletStatusModal.open()}\n                />\n                <Action openSelectWalletDialog={openSelectProviderDialog}>{children}</Action>\n            </Box>\n        )\n    },\n)\n\nPluginWalletStatusBarWithoutContext.displayName = 'PluginWalletStatusBarWithoutContext'\n\nexport const PluginWalletStatusBar = memo<WalletStatusBarProps<NetworkPluginID>>((props) => {\n    const children = (\n        <RevokeChainContextProvider>\n            <PluginWalletStatusBarWithoutContext {...props} />\n        </RevokeChainContextProvider>\n    )\n\n    return props.actualPluginID ? (\n        <NetworkContextProvider value={props.actualPluginID}>{children}</NetworkContextProvider>\n    ) : (\n        children\n    )\n})\n\nPluginWalletStatusBar.displayName = 'PluginWalletStatusBar'\n","import { makeStyles, LoadingBase } from '@masknet/theme'\nimport { memo } from 'react'\nimport { alpha, Box, Link, Typography } from '@mui/material'\nimport { CopyButton, WalletIcon } from '@masknet/shared'\nimport { Icons } from '@masknet/icons'\nimport { useSharedTrans } from '../../../locales/index.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    root: {\n        display: 'flex',\n        alignItems: 'center',\n        columnGap: 4,\n        cursor: 'pointer',\n    },\n    description: {\n        marginLeft: 10,\n    },\n    walletName: {\n        display: 'flex',\n        alignItems: 'center',\n        columnGap: 4,\n        color: theme.palette.maskColor.main,\n        fontWeight: 700,\n        lineHeight: '18px',\n    },\n    address: {\n        color: theme.palette.maskColor.second,\n        lineHeight: '18px',\n        display: 'flex',\n        alignItems: 'center',\n        columnGap: 2,\n    },\n    pending: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: 2,\n        borderRadius: 2,\n        padding: '2px 4px',\n        backgroundColor: alpha(theme.palette.maskColor.warn, 0.1),\n        color: theme.palette.maskColor.warn,\n        lineHeight: '18px',\n    },\n    progress: {\n        color: theme.palette.maskColor.warn,\n    },\n    linkIcon: {\n        color: theme.palette.maskColor.second,\n        cursor: 'pointer',\n        height: 14,\n    },\n}))\n\nexport interface WalletDescriptionProps {\n    onClick?: (ev: React.MouseEvent<HTMLDivElement>) => void\n    pending?: boolean\n    onPendingClick?: () => void\n    providerIcon?: string\n    networkIcon?: string\n    iconFilterColor?: string\n    name?: string\n    address?: string\n    formattedAddress?: string\n    addressLink?: string\n    verified?: boolean\n}\n\nexport const WalletDescription = memo<WalletDescriptionProps>(\n    ({\n        onClick,\n        providerIcon,\n        networkIcon,\n        iconFilterColor,\n        name,\n        address,\n        formattedAddress,\n        addressLink,\n        onPendingClick,\n        pending,\n        verified,\n    }) => {\n        const { classes } = useStyles()\n        const t = useSharedTrans()\n\n        return (\n            <Box onClick={onClick} className={classes.root}>\n                <WalletIcon\n                    size={30}\n                    badgeSize={12}\n                    mainIcon={providerIcon ?? networkIcon}\n                    badgeIcon={providerIcon ? networkIcon : undefined}\n                    iconFilterColor={iconFilterColor}\n                />\n                <Box className={classes.description}>\n                    <Typography className={classes.walletName}>\n                        <span>{name}</span>\n                        {verified ? <Icons.Verification size={18} /> : null}\n                        {onPendingClick ? <Icons.ArrowDrop /> : null}\n                    </Typography>\n                    <Typography className={classes.address}>\n                        <span>{formattedAddress}</span>\n                        {address ? <CopyButton size={14} className={classes.linkIcon} text={address} /> : null}\n                        <Link\n                            href={addressLink}\n                            target=\"_blank\"\n                            title=\"View on Explorer\"\n                            rel=\"noopener noreferrer\"\n                            onClick={(event) => {\n                                event.stopPropagation()\n                            }}\n                            className={classes.linkIcon}>\n                            <Icons.LinkOut size={14} className={classes.linkIcon} />\n                        </Link>\n                        {pending ? (\n                            <span\n                                className={classes.pending}\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    onPendingClick?.()\n                                }}>\n                                {t.recent_transaction_pending()}\n                                <LoadingBase size={12} className={classes.progress} />\n                            </span>\n                        ) : null}\n                    </Typography>\n                </Box>\n            </Box>\n        )\n    },\n)\n","import { type DependencyList, useState } from 'react'\nimport { useAsyncRetry, useTimeoutFn } from 'react-use'\nimport type { AsyncStateRetry } from 'react-use/lib/useAsyncRetry.js'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport { useChainContext } from './useContext.js'\nimport { useWeb3Others } from './useWeb3Others.js'\n\nconst DEFAULT_SINGLE_BLOCK_DELAY = 10 * 1000 // 10 seconds\nconst DEFAULT_DOUBLE_BLOCK_DELAY = DEFAULT_SINGLE_BLOCK_DELAY * 2\n\nexport function useBeat(delay = 1000) {\n    const [beat, setBeat] = useState(0)\n    const [, , reset] = useTimeoutFn(() => {\n        setBeat((x) => (x + 1) % Number.MAX_SAFE_INTEGER)\n        reset()\n    }, delay)\n    return beat\n}\n\n/**\n * @deprecated Use react-query with refetchInterval\n */\nexport function useBeatRetry<T>(fn: () => Promise<T>, delay = 1000, deps: DependencyList = []): AsyncStateRetry<T> {\n    const beat = useBeat(delay)\n    return useAsyncRetry(fn, deps.concat(beat))\n}\n\nexport function useSingleBlockBeatRetry<T extends NetworkPluginID, R>(\n    pluginID: T,\n    fn: () => Promise<R>,\n    deps: DependencyList = [],\n): AsyncStateRetry<R> {\n    const { chainId } = useChainContext()\n    const Others = useWeb3Others(pluginID)\n    return useBeatRetry(fn, Others.getAverageBlockDelay?.(chainId) ?? DEFAULT_SINGLE_BLOCK_DELAY, deps)\n}\n\nexport function useDoubleBlockBeatRetry<T extends NetworkPluginID, R>(\n    pluginID: T,\n    fn: () => Promise<R>,\n    deps: DependencyList = [],\n): AsyncStateRetry<R> {\n    const { chainId } = useChainContext()\n    const Others = useWeb3Others(pluginID)\n    return useBeatRetry(fn, Others.getAverageBlockDelay?.(chainId, 2) ?? DEFAULT_DOUBLE_BLOCK_DELAY, deps)\n}\n\nexport function useCustomBlockBeatRetry<T extends NetworkPluginID, R>(\n    pluginID: T,\n    fn: () => Promise<R>,\n    deps: DependencyList = [],\n    scale = 1,\n): AsyncStateRetry<R> {\n    const { chainId } = useChainContext()\n    const Others = useWeb3Others(pluginID)\n    return useBeatRetry(fn, Others.getAverageBlockDelay?.(chainId, scale) ?? DEFAULT_DOUBLE_BLOCK_DELAY, deps)\n}\n","import { useQuery } from '@tanstack/react-query'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport type { HubOptions } from '@masknet/web3-providers/types'\nimport { useChainContext } from './useContext.js'\nimport { useWeb3Hub } from './useWeb3Hub.js'\n\nexport function useFungibleTokenSpenders<T extends NetworkPluginID = NetworkPluginID>(\n    pluginID?: T,\n    options?: HubOptions<T>,\n) {\n    const { account, chainId } = useChainContext<T>({\n        account: options?.account,\n        chainId: options?.chainId,\n    })\n    const Hub = useWeb3Hub(pluginID, {\n        account,\n        chainId,\n        ...options,\n    })\n    return useQuery({\n        queryKey: ['fungible-tokens', 'spenders', chainId, account],\n        enabled: true,\n        queryFn: async () => Hub.getFungibleTokenSpenders(chainId, account),\n    })\n}\n","import { useAsyncRetry } from 'react-use'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport type { ConnectionOptions } from '@masknet/web3-providers/types'\nimport { useChainContext } from './useContext.js'\nimport { useWeb3Connection } from './useWeb3Connection.js'\n\nexport function useNativeTokenBalance<T extends NetworkPluginID = NetworkPluginID>(\n    pluginID?: T,\n    options?: ConnectionOptions<T>,\n) {\n    const { account } = useChainContext({ account: options?.account })\n    const Web3 = useWeb3Connection(pluginID, {\n        account,\n        ...options,\n    })\n\n    return useAsyncRetry(async () => {\n        return Web3.getNativeTokenBalance()\n    }, [account, Web3])\n}\n","import { Contract } from '@masknet/web3-providers'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport type { ConnectionOptions } from '@masknet/web3-providers/types'\nimport { useChainContext } from '@masknet/web3-hooks-base'\nimport { useQuery } from '@tanstack/react-query'\n\nexport function useERC20TokenAllowance(\n    address?: string,\n    spender?: string,\n    options?: ConnectionOptions<NetworkPluginID.PLUGIN_EVM>,\n) {\n    const { account, chainId } = useChainContext<NetworkPluginID.PLUGIN_EVM>({\n        account: options?.account,\n        chainId: options?.chainId,\n    })\n\n    return useQuery({\n        queryKey: ['erc20-allowance', address, account, spender],\n        queryFn: async () => {\n            if (!account || !address || !spender) return '0'\n            return Contract.getERC20Contract(address, { chainId })?.methods.allowance(account, spender).call({\n                from: account,\n            })\n        },\n        refetchInterval: 30 * 1000,\n    })\n}\n","import { useCallback, useMemo } from 'react'\nimport { useAsyncFn } from 'react-use'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport { Web3 } from '@masknet/web3-providers'\nimport { isLessThan, toFixed, isZero } from '@masknet/web3-shared-base'\nimport type { ChainId } from '@masknet/web3-shared-evm'\nimport { useChainContext, useFungibleTokenBalance } from '@masknet/web3-hooks-base'\nimport { useERC20TokenAllowance } from './useERC20TokenAllowance.js'\n\nconst MaxUint256 = toFixed('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\nexport enum ApproveStateType {\n    UNKNOWN = 0,\n    NOT_APPROVED = 1,\n    UPDATING = 2,\n    PENDING = 3,\n    APPROVED = 4,\n    FAILED = 5,\n}\n\nexport function useERC20TokenApproveCallback(\n    address: string,\n    amount: string,\n    spender: string,\n    callback?: () => void,\n    tokenChainId?: ChainId,\n) {\n    const { account, chainId } = useChainContext<NetworkPluginID.PLUGIN_EVM>()\n\n    // read the approved information from the chain\n    const {\n        data: balance = '0',\n        isLoading: loadingBalance,\n        error: errorBalance,\n        refetch: revalidateBalance,\n    } = useFungibleTokenBalance(NetworkPluginID.PLUGIN_EVM, address, { chainId: tokenChainId })\n    const {\n        data: allowance = '0',\n        isLoading: loadingAllowance,\n        error: errorAllowance,\n        refetch: revalidateAllowance,\n    } = useERC20TokenAllowance(address, spender, { chainId: tokenChainId })\n\n    // the computed approve state\n    const approveStateType = useMemo(() => {\n        if (!amount || !spender) return ApproveStateType.UNKNOWN\n        if (loadingBalance || loadingAllowance) return ApproveStateType.UPDATING\n        if (errorBalance || errorAllowance) return ApproveStateType.FAILED\n        return isLessThan(allowance, amount) || (allowance === amount && isZero(amount))\n            ? ApproveStateType.NOT_APPROVED\n            : ApproveStateType.APPROVED\n    }, [amount, spender, balance, allowance, errorBalance, errorAllowance, loadingAllowance, loadingBalance])\n\n    const [state, approveCallback] = useAsyncFn(\n        async (useExact = false, isRevoke = false) => {\n            if (approveStateType === ApproveStateType.UNKNOWN || !amount || !spender) {\n                return\n            }\n            // error: failed to approve token\n            if (approveStateType !== ApproveStateType.NOT_APPROVED && !isRevoke) {\n                return\n            }\n\n            if (tokenChainId !== chainId) {\n                await Web3.switchChain?.(tokenChainId ?? chainId)\n            }\n\n            const hash = await Web3.approveFungibleToken(address, spender, useExact ? amount : MaxUint256, {\n                chainId: tokenChainId,\n            })\n\n            const receipt = await Web3.confirmTransaction(hash, {\n                chainId: tokenChainId,\n                signal: AbortSignal.timeout(5 * 60 * 1000),\n            })\n\n            if (receipt) {\n                callback?.()\n                revalidateBalance()\n                revalidateAllowance()\n            }\n        },\n        [account, amount, spender, address, approveStateType, tokenChainId, chainId],\n    )\n\n    const resetCallback = useCallback(() => {\n        revalidateBalance()\n        revalidateAllowance()\n    }, [revalidateBalance])\n\n    return [\n        {\n            type: approveStateType,\n            allowance,\n            amount,\n            spender,\n            balance,\n        },\n        { ...state, loading: loadingAllowance || loadingBalance || state.loading, loadingApprove: state.loading },\n        approveCallback,\n        resetCallback,\n    ] as const\n}\n","import type { BigNumber } from 'bignumber.js'\nimport type { TradeProvider } from '@masknet/public-api'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport type { PartialRequired } from '@masknet/shared-base'\nimport type { ChainIdOptionalRecord, ChainId } from '@masknet/web3-shared-evm'\n\nexport namespace TraderAPI {\n    export interface TradeContext {\n        TYPE: TradeProvider\n        IS_UNISWAP_V2_LIKE?: boolean\n        IS_UNISWAP_V3_LIKE?: boolean\n        GRAPH_API?: string\n        INIT_CODE_HASH?: string\n        ROUTER_CONTRACT_ADDRESS?: string\n        FACTORY_CONTRACT_ADDRESS?: string\n        SPENDER_CONTRACT_ADDRESS?: string\n        ADDITIONAL_TOKENS?: ChainIdOptionalRecord<Record<string, Web3Helper.FungibleTokenAll[]>>\n        AGAINST_TOKENS?: ChainIdOptionalRecord<Web3Helper.FungibleTokenAll[]>\n        CUSTOM_TOKENS?: ChainIdOptionalRecord<Record<string, Web3Helper.FungibleTokenAll[]>>\n    }\n\n    export enum TradeStrategy {\n        ExactIn = 0,\n        ExactOut = 1,\n    }\n\n    export interface TradeComputed<T = unknown> {\n        strategy: TradeStrategy\n        inputToken?: Web3Helper.FungibleTokenAll\n        outputToken?: Web3Helper.FungibleTokenAll\n        inputAmount: BigNumber\n        outputAmount: BigNumber\n        executionPrice: BigNumber\n        priceImpact: BigNumber\n        maximumSold: BigNumber\n        minimumReceived: BigNumber\n        fee: BigNumber\n        path?: Array<\n            Array<\n                | PartialRequired<Web3Helper.FungibleTokenAll, 'address'>\n                | PartialRequired<Web3Helper.FungibleTokenAll, 'address'>\n            >\n        >\n        trade_?: T\n    }\n    export interface TradeInfo {\n        value: TradeComputed | null\n        provider: TradeProvider\n        error?: Error\n        gas?: string\n        finalPrice?: BigNumber.Value\n    }\n\n    export interface Provider {\n        provider: TradeProvider\n\n        getTradeInfo: (\n            chainId: ChainId,\n            account: string,\n            inputAmount_: string,\n            slippage: number,\n            inputToken?: Web3Helper.FungibleTokenAll,\n            outputToken?: Web3Helper.FungibleTokenAll,\n        ) => Promise<TradeInfo | null>\n\n        getNativeWrapperTradeInfo: (\n            chainId: ChainId,\n            account: string,\n            inputAmount: string,\n            inputToken?: Web3Helper.FungibleTokenAll,\n            outputToken?: Web3Helper.FungibleTokenAll,\n        ) => Promise<TradeInfo | null>\n    }\n}\n","import { utf8ToHex } from 'web3-utils'\n\nexport function pack(types: string[], values: any[]) {\n    if (types.length !== values.length) {\n        throw new Error('Number of types does not match number of values.')\n    }\n\n    let result = '0x'\n\n    for (let i = 0; i < types.length; i += 1) {\n        switch (types[i]) {\n            case 'address':\n                result += values[i].slice(2).padStart(40, '0')\n                break\n            case 'uint256':\n                result += BigInt(values[i]).toString(16).padStart(64, '0')\n                break\n            case 'bytes32':\n                result += utf8ToHex(values[i]).slice(2).padStart(64, '0')\n                break\n            case 'bool':\n                result += values[i] ? '01' : '00'\n                break\n            // ... you can continue adding more cases for other data types\n            default:\n                throw new Error(`Unsupported type ${types[i]}`)\n        }\n    }\n\n    return result\n}\n","import { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nexport function id(text) {\n    return keccak256(toUtf8Bytes(text));\n}\n","export const version = \"solidity/5.7.0\";\n","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return zeroPad(value, 32);\n            }\n            return arrayify(value);\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return arrayify(value);\n        case \"bool\":\n            value = (value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return zeroPad(value, 32);\n            }\n            return arrayify(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        let size = parseInt(match[2] || \"256\");\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type);\n        }\n        if (isArray) {\n            size = 256;\n        }\n        value = BigNumber.from(value).toTwos(size);\n        return zeroPad(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n        }\n        if (arrayify(value).byteLength !== size) {\n            logger.throwArgumentError(`invalid value for ${type}`, \"value\", value);\n        }\n        if (isArray) {\n            return arrayify((value + Zeros).substring(0, 66));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(`invalid array length for ${type}`, \"value\", value);\n        }\n        const result = [];\n        value.forEach(function (value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return concat(result);\n    }\n    return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nexport function pack(types, values) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n    }\n    const tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\nexport function keccak256(types, values) {\n    return hashKeccak256(pack(types, values));\n}\nexport function sha256(types, values) {\n    return hashSha256(pack(types, values));\n}\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    throw new Error(prefix + \": \" + (message || ''));\n}\n\nexport default invariant;\n","/*\r\n *  toFormat v2.0.0\r\n *  Adds a toFormat instance method to big.js or decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin\r\n *  MIT Licence\r\n */\r\n\r\n /*\r\n * Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\r\n * a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\r\n */\r\nfunction toFormat(Ctor) {\r\n  'use strict';\r\n\r\n  /*\r\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\r\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\r\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\r\n   *\r\n   *  Example:\r\n   *\r\n   *  x = new Decimal('123456789.987654321')\r\n   *\r\n   *  // Add a format object to the constructor...\r\n   *  Decimal.format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ',',\r\n   *    groupSize: 3,\r\n   *    secondaryGroupSize: 0,\r\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 0\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123,456,789.987654321\r\n   *  x.toFormat(2, 1);            // 123,456,789.98\r\n   *\r\n   *  // And/or add a format object to the big number itself...\r\n   *  x.format = {\r\n   *    decimalSeparator: ',',\r\n   *    groupSeparator: '',\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123456789,987654321\r\n   *\r\n   *  format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ' ',\r\n   *    groupSize: 3,\r\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 5\r\n   *  }\r\n\r\n   *  // And/or pass a format object to the method call.\r\n   *  x.toFormat(format);          // 123 456 789.98765 4321\r\n   *  x.toFormat(4, format);       // 123 456 789.9877\r\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\r\n   *\r\n   *  [dp] {number} Decimal places. Integer.\r\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\r\n   *  [fmt] {Object} A format object.\r\n   *\r\n   */\r\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\r\n\r\n    if (!this.e && this.e !== 0) return this.toString();   // Infinity/NaN\r\n\r\n    var arr, g1, g2, i,\r\n      u,                             // undefined\r\n      nd,                            // number of integer digits\r\n      intd,                          // integer digits\r\n      intp,                          // integer part\r\n      fracp,                         // fraction part\r\n      dsep,                          // decimalSeparator\r\n      gsep,                          // groupSeparator\r\n      gsize,                         // groupSize\r\n      sgsize,                        // secondaryGroupSize\r\n      fgsep,                         // fractionGroupSeparator\r\n      fgsize,                        // fractionGroupSize\r\n      tfmt = this.format || {},\r\n      cfmt = this.constructor.format || {};\r\n\r\n    if (dp != u) {\r\n      if (typeof dp == 'object') {\r\n        fmt = dp;\r\n        dp = u;\r\n      } else if (rm != u) {\r\n        if (typeof rm == 'object') {\r\n          fmt = rm;\r\n          rm = u;\r\n        } else if (typeof fmt != 'object') {\r\n          fmt = {};\r\n        }\r\n      } else {\r\n        fmt = {};\r\n      }\r\n    } else {\r\n      fmt = {};\r\n    }\r\n\r\n    arr = this.toFixed(dp, rm).split('.');\r\n    intp = arr[0];\r\n    fracp = arr[1];\r\n    intd = this.s < 0 ? intp.slice(1) : intp;\r\n    nd = intd.length;\r\n\r\n    dsep = fmt.decimalSeparator;\r\n    if (dsep == u) {\r\n      dsep = tfmt.decimalSeparator;\r\n      if (dsep == u) {\r\n        dsep = cfmt.decimalSeparator;\r\n        if (dsep == u) dsep = '.';\r\n      }\r\n    }\r\n\r\n    gsep = fmt.groupSeparator;\r\n    if (gsep == u) {\r\n      gsep = tfmt.groupSeparator;\r\n      if (gsep == u) gsep = cfmt.groupSeparator;\r\n    }\r\n\r\n    if (gsep) {\r\n      gsize = fmt.groupSize;\r\n      if (gsize == u) {\r\n        gsize = tfmt.groupSize;\r\n        if (gsize == u) {\r\n          gsize = cfmt.groupSize;\r\n          if (gsize == u) gsize = 0;\r\n        }\r\n      }\r\n\r\n      sgsize = fmt.secondaryGroupSize;\r\n      if (sgsize == u) {\r\n        sgsize = tfmt.secondaryGroupSize;\r\n        if (sgsize == u) {\r\n          sgsize = cfmt.secondaryGroupSize;\r\n          if (sgsize == u) sgsize = 0;\r\n        }\r\n      }\r\n\r\n      if (sgsize) {\r\n        g1 = +sgsize;\r\n        g2 = +gsize;\r\n        nd -= g2;\r\n      } else {\r\n        g1 = +gsize;\r\n        g2 = +sgsize;\r\n      }\r\n\r\n      if (g1 > 0 && nd > 0) {\r\n        i = nd % g1 || g1;\r\n        intp = intd.substr(0, i);\r\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\r\n        if (g2 > 0) intp += gsep + intd.slice(i);\r\n        if (this.s < 0) intp = '-' + intp;\r\n      }\r\n    }\r\n\r\n    if (fracp) {\r\n      fgsep = fmt.fractionGroupSeparator;\r\n      if (fgsep == u) {\r\n        fgsep = tfmt.fractionGroupSeparator;\r\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\r\n      }\r\n\r\n      if (fgsep) {\r\n        fgsize = fmt.fractionGroupSize;\r\n        if (fgsize == u) {\r\n          fgsize = tfmt.fractionGroupSize;\r\n          if (fgsize == u) {\r\n            fgsize = cfmt.fractionGroupSize;\r\n            if (fgsize == u) fgsize = 0;\r\n          }\r\n        }\r\n\r\n        fgsize = +fgsize;\r\n\r\n        if (fgsize) {\r\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\r\n        }\r\n      }\r\n\r\n      return intp + dsep + fracp;\r\n    } else {\r\n\r\n      return intp;\r\n    }\r\n  };\r\n\r\n  Ctor.format = {\r\n    decimalSeparator: '.',\r\n    groupSeparator: ',',\r\n    groupSize: 3,\r\n    secondaryGroupSize: 0,\r\n    fractionGroupSeparator: '',\r\n    fractionGroupSize: 0\r\n  };\r\n\r\n  return Ctor;\r\n}\r\n\r\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;\r\n"],"names":["ChainId","USDC","USDT","WNATIVE","WNATIVE_ONLY","ARTHSWAP_CUSTOM_BASES","ARTHSWAP_BASE_AGAINST_TOKENS","Astar","map","x","ASTAREXCHANGE_CUSTOM_BASES","ASTAREXCHANGE_BASE_AGAINST_TOKENS","DAI","MDEX_CUSTOM_BASES","MDEX_BASE_AGAINST_TOKENS","Mainnet","BSC","BTCB","BUSD","ETHER","UST","PANCAKESWAP_CUSTOM_BASES","PANCAKESWAP_BASE_AGAINST_TOKENS","DAIe","PNG","USDCe","USDTe","WBTCe","PANGOLIN_CUSTOM_BASES","PANGOLIN_BASE_AGAINST_TOKENS","Avalanche","maUSDC","QUICK","WBTC","QUICKSWAP_CUSTOM_BASES","QUICKSWAP_BASE_AGAINST_TOKENS","Matic","RUNE","fUSDT","NFTX","STETH","CUSD","CEUR","SUSHISWAP_CUSTOM_BASES","SUSHISWAP_BASE_AGAINST_TOKENS","xDai","Celo","Fantom","Optimism","BigNumber","ONE","MIN_GAS_LIMIT","MIN_SLIPPAGE","MAX_SLIPPAGE","BIPS_BASE","ONE_BIPS","dividedBy","SLIPPAGE_MIN","SLIPPAGE_DEFAULT","SLIPPAGE_MAX","DEFAULT_TRANSACTION_DEADLINE","L2_TRANSACTION_DEADLINE","MINIMUM_AMOUNT","BLOCK_TIME_SCALE","Ropsten","Rinkeby","Gorli","Kovan","BSCT","Base","Base_Goerli","Mumbai","Arbitrum","Arbitrum_Rinkeby","Avalanche_Fuji","Aurora","Aurora_Testnet","Fuse","Boba","Metis","Optimism_Kovan","Optimism_Goerli","Conflux","ZKSync_Alpha_Testnet","Crossbell","Moonbeam","Invalid","TRADERJOE_CUSTOM_BASES","TRADERJOE_BASE_AGAINST_TOKENS","TRISOLARIS_CUSTOM_BASES","TRISOLARIS_BASE_AGAINST_TOKENS","Percent","AMPL","OP","UNISWAP_BIPS_BASE","UNISWAP_CUSTOM_BASES","address","UNISWAP_BASE_AGAINST_TOKENS","MAX_HOP","BETTER_TRADE_LESS_HOPS_THRESHOLD","BASE_FEE","ZERO_PERCENT","ONE_HUNDRED_PERCENT","INPUT_FRACTION_AFTER_FEE","subtract","VERSA","VERSA_CUSTOM_BASES","VERSA_BASE_AGAINST_TOKENS","WANNA","WANNASWAP_CUSTOM_BASES","WANNASWAP_BASE_AGAINST_TOKENS","YUMI","xYUMI","YUMISWAP_CUSTOM_BASES","YUMISWAP_BASE_AGAINST_TOKENS","Router","TradeProvider","swapCallParameters","trade","options","tradeProvider","parameters","PANGOLIN","TRADERJOE","methodName","swapErrorToUserReadableMessage","error","reason","message","data","originalError","startsWith","slice","length","includes","console","BANCOR_API_BASE_URL","urlcat","toChecksumAddress","pick","getTraderConstants","isNativeTokenAddress","ContractTransaction","getTokenConstants","isNativeTokenSchemaType","isZero","leftShift","rightShift","ZERO","TraderAPI","fetchJSON","ContractReadonly","Web3Readonly","roundDecimal","value","decimals","Math","round","Number","pow","calculateMinimumReturn","toToken","toAmount","slippage","toWei","slippageWei","minReturnWei","times","minus","toFixed","BancorAPI","provider","BANCOR","swapTransactionBancor","request","baseUrl","chainId","url","source_dlt_type","source_dlt_id","fromToken","target_dlt_type","target_dlt_id","amount","fromAmount","min_return","minimumReceived","user_source_dlt_id","user","swapBancor","response","validationErrorResponse","Error","messages","fromTokenSymbol","symbol","toTokenSymbol","getTrade","account","inputAmount","inputToken","outputToken","BANCOR_ETH_ADDRESS","strategy","TradeStrategy","ExactIn","getTradeInfo","inputAmount_","inputAmountWei","outputAmountWei","minimumReceivedWei","computed","outputAmount","executionPrice","fee","maximumSold","priceImpact","trade_","gas","getTradeGasLimit","getNativeWrapperTradeInfo","WNATIVE_ADDRESS","tradeAmount","wrapperContract","getWETHContract","isWrap","schema","isNativeTokenWrapper","tx","fillAll","methods","deposit","from","tradeComputed","transaction","estimateTransaction","Bancor","createGlobalSettings","PLUGIN_ID","currentSlippageSettings","useAsyncRetry","isSameAddress","useTokenConstant","useChainContext","useNetworkContext","useWeb3Others","NetworkPluginID","useTrade","targetChainId","pluginID","Others","PLUGIN_EVM","clamp","useValueRef","useSlippageTolerance","slippage_","safeUnreachable","EMPTY_LIST","NetworkType","getEVMAvailableTraderProviders","networkType","Ethereum","UNISWAP_V2","UNISWAP_V3","SUSHISWAP","ZRX","DODO","OPENOCEAN","MDEX","Polygon","QUICKSWAP","TRISOLARIS","Binance","PANCAKESWAP","WANNASWAP","ARTHSWAP","ASTAREXCHANGE","YUMISWAP","Scroll","CustomNetwork","unreachable","getTradeContext","DEX_TRADE","TYPE","IS_UNISWAP_V2_LIKE","GRAPH_API","UNISWAP_V2_THEGRAPH","INIT_CODE_HASH","UNISWAP_V2_INIT_CODE_HASH","ROUTER_CONTRACT_ADDRESS","UNISWAP_V2_ROUTER_ADDRESS","SPENDER_CONTRACT_ADDRESS","FACTORY_CONTRACT_ADDRESS","UNISWAP_V2_FACTORY_ADDRESS","AGAINST_TOKENS","ADDITIONAL_TOKENS","CUSTOM_TOKENS","IS_UNISWAP_V3_LIKE","UNISWAP_V3_THEGRAPH","UNISWAP_V3_INIT_CODE_HASH","UNISWAP_SWAP_ROUTER_ADDRESS","UNISWAP_V3_FACTORY_ADDRESS","SUSHISWAP_THEGRAPH","SUSHISWAP_INIT_CODE_HASH","SUSHISWAP_ROUTER_ADDRESS","SUSHISWAP_FACTORY_ADDRESS","QUICKSWAP_THEGRAPH","QUICKSWAP_INIT_CODE_HASH","QUICKSWAP_ROUTER_ADDRESS","QUICKSWAP_FACTORY_ADDRESS","PANCAKESWAP_THEGRAPH","PANCAKESWAP_INIT_CODE_HASH","PANCAKESWAP_ROUTER_ADDRESS","PANCAKESWAP_FACTORY_ADDRESS","TRADERJOE_THEGRAPH","TRADERJOE_INIT_CODE_HASH","TRADERJOE_ROUTER_ADDRESS","TRADERJOE_FACTORY_ADDRESS","PANGOLIN_THEGRAPH","PANGOLIN_INIT_CODE_HASH","PANGOLIN_ROUTER_ADDRESS","PANGOLIN_FACTORY_ADDRESS","WANNASWAP_THEGRAPH","WANNASWAP_INIT_CODE_HASH","WANNASWAP_ROUTER_V2_ADDRESS","WANNASWAP_FACTORY_ADDRESS","TRISOLARIS_THEGRAPH","TRISOLARIS_INIT_CODE_HASH","TRISOLARIS_ROUTER_ADDRESS","TRISOLARIS_FACTORY_ADDRESS","MDEX_THEGRAPH","MDEX_INIT_CODE_HASH","MDEX_ROUTER_ADDRESS","MDEX_FACTORY_ADDRESS","ARTHSWAP_THEGRAPH","ARTHSWAP_INIT_CODE_HASH","ARTHSWAP_ROUTER_ADDRESS","ARTHSWAP_FACTORY_ADDRESS","VERSA_THEGRAPH","VERSA_INIT_CODE_HASH","VERSA_ROUTER_ADDRESS","VERSA_FACTORY_ADDRESS","ASTAREXCHANGE_THEGRAPH","ASTAREXCHANGE_INIT_CODE_HASH","ASTAREXCHANGE_ROUTER_ADDRESS","ASTAREXCHANGE_FACTORY_ADDRESS","YUMISWAP_THEGRAPH","YUMISWAP_INIT_CODE_HASH","YUMISWAP_ROUTER_ADDRESS","YUMISWAP_FACTORY_ADDRESS","DODO_EXCHANGE_PROXY_ADDRESS","BANCOR_EXCHANGE_PROXY_ADDRESS","OPENOCEAN_EXCHANGE_PROXY_ADDRESS","toUniswapChainId","memoize","Token","formatEthereumAddress","toUniswapToken","token","name","toUniswapTokenMemo","keccak256","getCreate2Address","fromAddress","salt","initCode","formula","toLowerCase","join","addressBytes","pack","Map","getPairAddress","factoryAddress","initCodeHash","tokenA","tokenB","tokens","sortsBefore","cache","get","token0Addr","token1Addr","undefined","set","Ether","ExtendedEther","wrapped","_cachedEther","onChain","SchemaType","toUniswapCurrency","extendedEther","weth","Native","CurrencyAmount","isGreaterThan","toUniswapCurrencyAmount","currency","fromRawAmount","isTradeBetter","tradeA","tradeB","minimumDelta","tradeType","equals","equalTo","lessThan","asFraction","multiply","add","Trade","V2Trade","Fraction","computeRealizedLPFeePercent","percent","route","pairs","reduce","currentFee","numerator","denominator","pools","pool","toUniswapPercent","pow10","uniswapCurrencyAmountTo","currencyAmount","multipliedBy","uniswapPriceTo","price","scalar","toString","uniswapPercentTo","uniswapChainIdTo","TokenType","uniswapTokenTo","type","Fungible","ERC20","id","PairState","NOT_EXISTS","EXISTS","INVALID","PoolState","LOADING","toHex","flatMap","compact","TradeType","Pair","UniSwapPair","UniSwapTrade","SwapRouter","V3Router","isValidChainId","Multicall","UniSwapV2LikeAPI","constructor","getAllCommonPairs","currencyA","currencyB","chainIdValid","context","bases","basePairs","base","otherBase","filter","t0","t1","customBases","customBasesA","customBasesB","find","getPairs","tokenPairs","listOfPairAddress","contracts","Set","getPairContract","names","Array","fill","calls","createMultipleContractSingleData","results","call","listOfReserves","i","reserve0","_reserve0","reserve1","_reserve1","token0","token1","getSwapParameters","allowedSlippage","timestamp","getBlockTimestamp","timestamp_","deadline","plus","routerV2Contract","getRouterV2Contract","swapRouterContract","getSwapRouterContract","allowedSlippage_","feeOnTransfer","recipient","ttl","toNumber","EXACT_INPUT","push","args","calldata","encodeABI","slippageTolerance","isTradable","isNotAvailable","inputCurrency","outputCurrency","getBestTradeExactIn","currencyAmountIn","currencyOut","allCurrencyCombinations","allPairs","filtered","state","pair","liquidityToken","has","allowedPairs","values","bestTradeSoFar","currentTrade","bestTradeExactIn","maxHops","maxNumResults","realizedLPFeePercent","realizedLPFee","percent_","path","maximumAmountIn","minimumAmountOut","tradeParameters","estimatedCalls","Promise","all","config","to","test","gasEstimate","callTransaction","then","catch","bestCallOption","el","ix","list","errorCalls","firstNoErrorCall","useMemo","useCustomBlockBeatRetry","useNetwork","useUniswapV2Like","traderProvider","scale","temporarySlippage","network","slippageSetting","providers","useAvailableTraderProviders","chainResolver","PLUGIN_FLOW","PLUGIN_SOLANA","Route","computeAllRoutes","currencyIn","currentPath","allPaths","startCurrencyIn","tokenIn","tokenOut","involvesToken","FeeAmount","Pool","computePoolAddress","encodeRouteToPath","UniSwapV3LikeAPI","getPoolAddresses","transformed","getQuoteExactInInputs","routes","amountIn","quotient","getPools","poolKeys","feeAmount","poolAddresses","poolContracts","getPoolStateV3","slot0sCalls","liquiditiesCalls","slot0s","liquidities","_key","index","slot0","slot0Error","liquidity","liquidityError","sqrtPriceX96","parseInt","tick","UNISWAP_V3_QUOTER_ADDRESS","quoterContract","getQuoterContract","allCurrencyCombinationsWithAllFees","LOW","MEDIUM","HIGH","swapPools","tuple","routers","quoteExactInInputs","quotesCalls","createSingleContractMultipleData","quotesResults","asyncBestTrade","loading","bestRoute","amountOut","succeed","currentBest","lt","createUncheckedTrade","useUniswapV3Like","ZRX_NATIVE_TOKEN_ADDRESS","ZRX_AFFILIATE_ADDRESS","first","ChainResolver","ZRX_BASE_URL","getNativeTokenLabel","ZeroX_API","swapQuote","params","Object","entries","key","slippagePercentage","buyTokenPercentageFee","affiliateAddress","response_","chain_id","code","validationErrors","serverErrorResponse","successResponse","sellToken","buyToken","takerAddress","sellAmount","buyAmount","skipValidation","minimumProtocolFee","ZeroX","useZeroX","OPENOCEAN_BASE_URL","OPENOCEAN_SUPPORTED_CHAINS","getOpenOceanConstants","ProviderURL","OpenOceanAPI","swapOO","payload","inTokenSymbol","inTokenAddress","outTokenSymbol","outTokenAddress","gasPrice","disabledDexIds","userAddr","referrer","REFERRER_ADDRESS","disableRfq","outAmount","minOutAmount","estimatedGas","_resAmount","_fromAmount","targetApproveAddr","targetDecimals","resAmount","resPricePerFromToken","resPricePerToToken","OPENOCEAN_ETH_ADDRESS","isNativeSellToken","rpc","integerValue","OpenOcean","useOpenOcean","useBancor","useNativeTokenTrade","useAllTradeComputed","inputTokenProduct","tradeProviders","uniswapV2","sushiSwap","quickSwap","pancakeSwap","uniswapV3","zrx","bancor","traderJoe","pangolindex","openocean","trisolaris","wannaswap","mdex","arthswap","versa","astarexchange","yumiswap","some","useReducer","useState","createContainer","INITIAL_STATE","inputTokenBalance","outputTokenBalance","AllProviderTradeActionType","UPDATE_INPUT_TOKEN","UPDATE_OUTPUT_TOKEN","UPDATE_INPUT_AMOUNT","UPDATE_INPUT_TOKEN_BALANCE","UPDATE_OUTPUT_TOKEN_BALANCE","SWITCH_TOKEN","reducer","action","balance","inputBalance","outputBalance","useAllProviderTradeContext","openConfirmDialog","setOpenConfirmDialog","tradeStore","dispatchTradeStore","isSwapping","setIsSwapping","setTemporarySlippage","allTradeComputed","tradeState","AllProviderTradeContext","React","useCallback","TokenIcon","ActionButton","ShadowRootTooltip","makeStyles","useFungibleTokenBalance","useFungibleTokenSpenders","ApproveStateType","useERC20TokenApproveCallback","isGte","HelpOutline","useSharedTrans","useStyles","theme","_","refs","icon","button","whiteSpace","width","height","fontSize","helpIcon","EthereumERC20TokenApprovedBoundary","props","children","spender","infiniteUnlockContent","contractName","showHelperToken","failedContent","callback","t","classes","tokenBalance","spenders","isLoading","spendersLoading","isError","refetch","approveAmount","approveStateType","allowance","transactionState","approveCallback","approved","tokenInfo","UPDATING","loadingApprove","onApprove","className","fullWidth","variant","onClick","ActionButtonProps","wallet_load_retry","startIcon","disableDefaultIcon","endIcon","title","plugin_wallet_token_infinite_unlock_tips","placement","arrow","leaveDelay","disableInteractive","disableFocusListener","disableTouchListener","plugin_wallet_token_infinite_unlock","useSubscription","FALSE","useWeb3State","useRiskWarningApproved","RiskWarning","useNativeTokenBalance","useWallet","useAsync","SmartPayBundler","SelectProviderModal","WalletRiskWarningModal","margin","WalletConnectedBoundary","offChain","hideRiskWarningConfirmed","expectedChainId","cx","wallet","smartPayChainId","getSupportedChainId","nativeTokenBalance","buttonClass","connectWallet","open","plugin_wallet_connect_a_wallet","plugin_wallet_confirm_risk_warning","owner","disabled","retry","plugin_wallet_update_gas_fee","plugin_wallet_no_gas_fee","plugin_wallet_invalid_network","memo","useRef","Box","Button","Sniffings","Action","openSelectWalletDialog","ref","display","columnGap","minWidth","is_popup_page","wallet_status_button_change","alpha","Icons","MaskColorVar","useProviderDescriptor","useRecentTransactions","useNetworkDescriptor","useReverseAddress","NetworkContextProvider","RevokeChainContextProvider","TransactionStatusType","ProviderType","WalletDescription","WalletStatusModal","root","boxSizing","backgroundColor","is_dashboard_page","mainBackground","palette","maskColor","bottom","boxShadow","mode","backdropFilter","padding","spacing","borderRadius","alignItems","justifyContent","flex","maxHeight","connection","marginRight","PluginWalletStatusBarWithoutContext","expectedPluginID","requiredSupportChainIds","requiredSupportPluginID","providerType","providerDescriptor","networkDescriptor","expectedNetworkDescriptor","domain","openSelectProviderDialog","pendingTransactions","NOT_DEPEND","walletName","MaskWallet","formatAddress","Wallet","pending","providerIcon","networkIcon","iconFilterColor","formattedAddress","addressLink","explorerResolver","onPendingClick","displayName","PluginWalletStatusBar","actualPluginID","LoadingBase","Link","Typography","CopyButton","WalletIcon","cursor","description","marginLeft","color","main","fontWeight","lineHeight","second","gap","warn","progress","linkIcon","verified","size","badgeSize","mainIcon","badgeIcon","span","Verification","ArrowDrop","text","href","target","rel","event","stopPropagation","LinkOut","e","recent_transaction_pending","useTimeoutFn","DEFAULT_SINGLE_BLOCK_DELAY","DEFAULT_DOUBLE_BLOCK_DELAY","useBeat","delay","beat","setBeat","reset","MAX_SAFE_INTEGER","useBeatRetry","fn","deps","concat","useSingleBlockBeatRetry","getAverageBlockDelay","useDoubleBlockBeatRetry","useQuery","useWeb3Hub","Hub","queryKey","enabled","queryFn","getFungibleTokenSpenders","useWeb3Connection","Web3","getNativeTokenBalance","Contract","useERC20TokenAllowance","getERC20Contract","refetchInterval","useAsyncFn","isLessThan","MaxUint256","UNKNOWN","NOT_APPROVED","PENDING","APPROVED","FAILED","tokenChainId","loadingBalance","errorBalance","revalidateBalance","loadingAllowance","errorAllowance","revalidateAllowance","useExact","isRevoke","switchChain","hash","approveFungibleToken","receipt","confirmTransaction","signal","AbortSignal","timeout","resetCallback","ExactOut","utf8ToHex","types","result","padStart","BigInt"],"sourceRoot":"","x_google_ignoreList":[54,68,69,70,71,72]}