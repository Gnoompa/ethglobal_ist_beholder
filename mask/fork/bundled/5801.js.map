{"version":3,"file":"bundled/5801.js","mappings":"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","sources":["webpack://mask-network/./packages/base/src/WebCrypto/JsonWebKey.ts","webpack://mask-network/./packages/base/src/WebCrypto/k256.ts","webpack://mask-network/./packages/encryption/src/encryption/EncryptionTypes.ts","webpack://mask-network/./packages/flags/src/index.ts","webpack://mask-network/./packages/mask/shared-ui/initialization/async-setup.ts","webpack://mask-network/./packages/mask/shared-ui/initialization/debugger.ts","webpack://mask-network/./packages/mask/shared-ui/initialization/fetch.ts","webpack://mask-network/./packages/shared-base-ui/src/locales/languages.ts","webpack://mask-network/./packages/mask/shared-ui/locales/languages.ts","webpack://mask-network/./packages/mask/shared-ui/initialization/locales.ts","webpack://mask-network/./packages/mask/shared-ui/initialization/storage.ts","webpack://mask-network/./packages/mask/shared-ui/initialization/telemetry-update.ts","webpack://mask-network/./packages/mask/shared-ui/initialization/walletSetup.ts","webpack://mask-network/./packages/mask/shared-ui/initialization/post-async-setup.ts","webpack://mask-network/./packages/mask/shared-ui/initialization/telemetry.ts","webpack://mask-network/./packages/shared-base/src/Histories/Popups.ts","webpack://mask-network/./packages/shared-base/src/LegacySettings/createSettings.ts","webpack://mask-network/./packages/shared-base/src/helpers/pvtutils.ts","webpack://mask-network/./packages/shared/src/locales/languages.ts","webpack://mask-network/./packages/web3-providers/src/Manager/index.ts","webpack://mask-network/./packages/web3-providers/src/Manager/io.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/AddressBook.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/Identity.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/Network.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/Provider.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/Settings.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/Transaction.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/apis/Web3StateAPI.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/AddressBook.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/BalanceNotifier.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/BalanceNotifier.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/BlockNumberNotifier.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/BlockNumberNotifier.ts","webpack://mask-network/./packages/web3-providers/src/types/MaskX.ts","webpack://mask-network/./packages/web3-providers/src/MaskX/constants.ts","webpack://mask-network/./packages/web3-providers/src/MaskX/index.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/IdentityService.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/Message.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/Message.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/NameService.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/NameService.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/schemas/ChainDescriptor.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/Network.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/Provider.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/RiskWarning.ts","webpack://mask-network/./packages/web3-providers/src/RiskWarning/index.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/RiskWarning.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/Settings.ts","webpack://mask-network/./packages/shared-base/src/helpers/safeEmptyList.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/Token.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/Token.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/Transaction.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/abi.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/Base.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/utils.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/TransferToken.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/ContractDeployment.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/Cancel.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/Gitcoin.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/MaskBox.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/RedPacket.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/ERC20.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/ERC721.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/Swap.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/Savings.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/SmartPay.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/Lens.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter/descriptors/Airdrop.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/TransactionFormatter.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionFormatter.ts","webpack://mask-network/./packages/web3-providers/src/Etherscan/helpers.ts","webpack://mask-network/./packages/web3-providers/src/Etherscan/apis/ExplorerAPI.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionWatcher/checkers/AccountChecker.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionWatcher/checkers/ReceiptChecker.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionWatcher/checker.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Base/state/TransactionWatcher.ts","webpack://mask-network/./packages/web3-providers/src/Web3/EVM/state/TransactionWatcher.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Flow/apis/Web3StateAPI.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Flow/state/AddressBook.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Flow/state/IdentityService.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Flow/state/Network.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Flow/state/Provider.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Flow/state/Settings.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Flow/state/Transaction.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Solana/apis/Web3StateAPI.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Solana/state/AddressBook.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Solana/apis/DomainAPI.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Solana/state/IdentityService.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Solana/state/Network.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Solana/state/Provider.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Solana/state/Settings.ts","webpack://mask-network/./packages/web3-providers/src/Web3/Solana/state/Transaction.ts","webpack://mask-network/./packages/web3-providers/src/helpers/fetchChainId.ts","webpack://mask-network/./packages/web3-shared/evm/src/helpers/decodeEvents.ts","webpack://mask-network/./node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/lib.esm/types.js","webpack://mask-network/./node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/lib.esm/_version.js","webpack://mask-network/./node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/lib.esm/sha2.js","webpack://mask-network/./node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/lib.esm/index.js","webpack://mask-network/./node_modules/.pnpm/html-parse-stringify@3.0.1/node_modules/html-parse-stringify/dist/html-parse-stringify.module.js","webpack://mask-network/./node_modules/.pnpm/void-elements@3.1.0/node_modules/void-elements/index.js"],"sourcesContent":["export type JsonWebKeyPair<Pub extends JsonWebKey & Nominal<unknown>, Priv extends JsonWebKey & Nominal<unknown>> = {\n    publicKey: Pub\n    privateKey: Priv\n}\n// Create nominal typing interfaces for different JsonWebKey type\n// So they will no longer assignable to each other\n\nexport type EC_JsonWebKey = EC_Private_JsonWebKey | EC_Public_JsonWebKey\nexport interface EC_Public_JsonWebKey extends JsonWebKey, Nominal<'EC public'> {}\nexport interface EC_Private_JsonWebKey extends JsonWebKey, Nominal<'EC private'> {}\nexport interface AESJsonWebKey extends JsonWebKey, Nominal<'AES'> {}\n\nexport function isAESJsonWebKey(x: unknown): x is AESJsonWebKey {\n    if (typeof x !== 'object' || x === null) return false\n    const { alg, k, key_ops, kty } = x as JsonWebKey\n    if (!alg || !k || !Array.isArray(key_ops) || kty !== 'oct') return false\n    return true\n}\nexport function isEC_JsonWebKey(o: unknown): o is EC_JsonWebKey {\n    if (typeof o !== 'object' || o === null) return false\n    const { crv, key_ops, kty, x, y } = o as JsonWebKey\n    if (!crv || !Array.isArray(key_ops) || !kty || !x || !y) return false\n    return true\n}\nexport function isEC_Public_JsonWebKey(o: unknown): o is EC_Public_JsonWebKey {\n    if (!isEC_JsonWebKey(o)) return false\n    return !o.d\n}\nexport function isEC_Private_JsonWebKey(o: unknown): o is EC_Private_JsonWebKey {\n    if (!isEC_JsonWebKey(o)) return false\n    return !!o.d\n}\ndeclare class Nominal<T> {\n    /** Ghost property, don't use it! */\n    private __brand: T\n}\n","import { encodeArrayBuffer, decodeArrayBuffer, concatArrayBuffer } from '@masknet/kit'\nimport type { EC_JsonWebKey, EC_Public_JsonWebKey } from './JsonWebKey.js'\nimport { Convert } from 'pvtsutils'\n\n/**\n * Compress x & y into a single x\n */\nexport async function compressK256Point(x: string, y: string): Promise<Uint8Array> {\n    const { isPoint, pointCompress } = await import('tiny-secp256k1')\n    const xb = new Uint8Array(Convert.FromBase64Url(x))\n    const yb = new Uint8Array(Convert.FromBase64Url(y))\n    const point = new Uint8Array(concatArrayBuffer(new Uint8Array([0x04]), xb, yb))\n    if (isPoint(point)) {\n        return pointCompress(point, true)\n    } else {\n        throw new TypeError('Not a point on secp256k1.')\n    }\n}\n/**\n * Decompress x into x & y\n */\nexport async function decompressK256Point(point: Uint8Array): Promise<{ x: string; y: string }> {\n    const { isPoint, isPointCompressed, pointCompress } = await import('tiny-secp256k1')\n    if (!isPoint(point)) throw new TypeError('Not a point on secp256k1.')\n    const uncompressed = isPointCompressed(point) ? pointCompress(point, false) : point\n    const len = (uncompressed.length - 1) / 2\n    const x = uncompressed.slice(1, len + 1)\n    const y = uncompressed.slice(len + 1)\n    return { x: Convert.ToBase64Url(x), y: Convert.ToBase64Url(y) }\n}\n\nexport async function compressK256KeyRaw(point: Uint8Array) {\n    const { isPoint, isPointCompressed, pointCompress } = await import('tiny-secp256k1')\n    if (!isPoint(point)) throw new TypeError('Not a point on secp256k1.')\n    if (isPointCompressed(point)) return point\n    return pointCompress(point, true)\n}\nexport async function decompressK256Raw(point: Uint8Array) {\n    const { isPoint, isPointCompressed, pointCompress } = await import('tiny-secp256k1')\n    if (!isPoint(point)) throw new TypeError('Not a point on secp256k1.')\n    if (!isPointCompressed(point)) return point\n    return pointCompress(point, false)\n}\n\nexport async function compressK256Key(key: EC_JsonWebKey): Promise<string> {\n    const arr = await compressK256Point(key.x!, key.y!)\n    return encodeArrayBuffer(arr)\n}\nexport async function decompressK256Key(compressedPublic: string): Promise<EC_Public_JsonWebKey> {\n    const arr = decodeArrayBuffer(compressedPublic)\n    const key = await decompressK256Point(new Uint8Array(arr))\n    const jwk: JsonWebKey = {\n        crv: 'K-256',\n        ext: true,\n        x: key.x,\n        y: key.y,\n        key_ops: ['deriveKey', 'deriveBits'],\n        kty: 'EC',\n    }\n    return jwk as EC_Public_JsonWebKey\n}\n\nexport async function isK256Point(x: Uint8Array) {\n    const { isPoint } = await import('tiny-secp256k1')\n    return isPoint(x)\n}\n\nexport async function isK256PrivateKey(d: Uint8Array) {\n    const { isPrivate } = await import('tiny-secp256k1')\n    return isPrivate(d)\n}\n","import type {\n    ProfileIdentifier,\n    EC_Public_CryptoKey,\n    AESCryptoKey,\n    EC_Private_CryptoKey,\n    PostIVIdentifier,\n} from '@masknet/base'\nimport type { SerializableTypedMessages } from '@masknet/typed-message'\nimport type { EC_Key, EC_KeyCurve } from '../payload/index.js'\nimport type { Option } from 'ts-results-es'\n\nexport interface EncryptOptions {\n    /** Payload version to use. */\n    version: -38 | -37\n    /** Current author who started the encryption. */\n    author: Option<ProfileIdentifier>\n    /** Public key of the current author. */\n    authorPublicKey: Option<EC_Key<EC_Public_CryptoKey>>\n    /** Network of the encryption */\n    network: string\n    /** The message to be encrypted. */\n    message: SerializableTypedMessages\n    /** Encryption target. */\n    target: EncryptTargetPublic | EncryptTargetE2E\n}\nexport interface EncryptTargetPublic {\n    type: 'public'\n}\nexport interface EncryptTargetE2E {\n    type: 'E2E'\n    target: ReadonlyArray<EC_Key<EC_Public_CryptoKey>>\n}\nexport interface EncryptIO {\n    /**\n     * This is only used in v38.\n     *\n     * Note: Due to historical reason (misconfiguration), some user may not have localKey.\n     *\n     * Throw in this case.\n     */\n    encryptByLocalKey(content: Uint8Array, iv: Uint8Array): Promise<Uint8Array | ArrayBuffer>\n    /**\n     * Derive a group of AES key by ECDH(selfPriv, targetPub).\n     *\n     * Host should derive a new AES-GCM key for each private key they have access to.\n     *\n     * If the provided key cannot derive AES with any key (e.g. The given key is ED25519 but there is only P-256 private keys)\n     * please throw an error.\n     *\n     * Error from this function will become a fatal error.\n     * This is only used in v38 or older\n     *\n     * @param publicKey The public key used in ECDH\n     */\n    deriveAESKey(publicKey: EC_Public_CryptoKey): Promise<AESCryptoKey>\n    /**\n     * Fill the arr with random values.\n     * This should be only provided in the test environment to create a deterministic result.\n     */\n    getRandomValues?(arr: Uint8Array): Uint8Array\n    /**\n     * Generate a new AES Key.\n     * This should be only provided in the test environment to create a deterministic result.\n     */\n    getRandomAESKey?(): Promise<AESCryptoKey>\n    /**\n     * Generate a pair of new EC key used for ECDH.\n     * This should be only provided in the test environment to create a deterministic result.\n     */\n    getRandomECKey?(algr: EC_KeyCurve): Promise<readonly [EC_Public_CryptoKey, EC_Private_CryptoKey]>\n}\nexport interface EncryptResult {\n    postKey: AESCryptoKey\n    output: string | Uint8Array\n    identifier: PostIVIdentifier\n    author?: ProfileIdentifier\n    e2e?: EncryptionResultE2EMap\n}\n/** Additional information that need to be send to the internet in order to allow recipients to decrypt */\nexport type EncryptionResultE2EMap = Map<EC_Key<EC_Public_CryptoKey>, PromiseSettledResult<EncryptionResultE2E>>\nexport interface EncryptionResultE2E {\n    target: EC_Key<EC_Public_CryptoKey>\n    encryptedPostKey: Uint8Array\n    /** This is used in v38. */\n    ivToBePublished?: Uint8Array\n    /** This feature is supported since v37. */\n    ephemeralPublicKey?: EC_Public_CryptoKey\n}\nexport enum EncryptErrorReasons {\n    ComplexTypedMessageNotSupportedInPayload38 = '[@masknet/encryption] Complex TypedMessage is not supported in payload v38.',\n    PublicKeyNotFound = '[@masknet/encryption] Target public key not found.',\n    AESKeyUsageError = \"[@masknet/encryption] AES key generated by IO doesn't have the correct usages or extractable property.\",\n}\nexport class EncryptError extends Error {\n    static Reasons = EncryptErrorReasons\n    constructor(\n        public override message: EncryptErrorReasons,\n        cause?: any,\n    ) {\n        super(message, { cause })\n    }\n}\n","import { flags as defaultFlags } from './flags/index.js'\nimport { RemoteFlags } from './libs/RemoteFlags.js'\n\nconst flags = new RemoteFlags('https://mask-flags.r2d2.to/', defaultFlags)\n\n// fetch each time starts the app, updates will be enabled\nflags.fetchAndActive()\n\nexport const Flags = flags.accessor\nexport { env, type BuildInfoFile } from './flags/buildInfo.js'\n","import { setupBuildInfo } from '@masknet/flags/build-info'\nimport Telemetry from './telemetry.js'\n\nawait Promise.allSettled([Telemetry, setupBuildInfo()])\n","import { BigNumber } from 'bignumber.js'\n\n// Run this file multiple times should be safe\nimport.meta.webpackHot?.accept()\n\n// #region BigNumber to Number\nObject.defineProperty(BigNumber.prototype, '__debug__amount__', {\n    get(this: BigNumber) {\n        return this.toNumber()\n    },\n    configurable: true,\n})\n// #endregion\n","import Services from '#services'\n\nimport.meta.webpackHot?.accept()\n\nconst { fetch: original_fetch } = globalThis\n\nfunction contentFetch(input: RequestInfo | URL, init?: RequestInit) {\n    const request = new Request(input, init)\n\n    if (canAccessAsContent(request.url)) {\n        if (\n            navigator.userAgent.includes('Firefox') &&\n            browser.runtime.getManifest().manifest_version === 2 &&\n            typeof content === 'object'\n        ) {\n            return content.fetch(request, init)\n        } else {\n            return original_fetch(request, init)\n        }\n    }\n\n    const signal = init?.signal\n    if (init) delete init.signal\n\n    return Services.Helper.fetchGlobal(request, init).then((response) => {\n        signal?.throwIfAborted()\n        return response\n    })\n}\n\nconst extensionOrigin = (() => {\n    try {\n        return new URL(browser.runtime.getURL('')).origin\n    } catch {\n        return null\n    }\n})()\n\nfunction fetchingTwitterResource(target: URL) {\n    return (\n        location.origin.endsWith('twitter.com') &&\n        (target.origin.endsWith('twitter.com') || target.origin.endsWith('twimg.com'))\n    )\n}\n\nfunction fetchingInsResource(target: URL) {\n    return location.origin.endsWith('instagram.com') && target.origin.match(/(fbcdn\\.net|cdninstagram\\.com)$/)\n}\n\nfunction canAccessAsContent(url: string) {\n    const target = new URL(url, location.href)\n    if (fetchingTwitterResource(target) || fetchingInsResource(target)) return true\n\n    // eg: https://maskbook-backup-server-staging.s3.ap-east-1.amazonaws.com/backups/xxx.zip\n    // The content-length needs to be used in the client request in order to realize the progress of the download.\n    if (target.origin.includes('maskbook-backup')) return true\n    if (isHostName(location, 'mirror.xyz') && isHostName(target, 'mirror-api.com')) return true\n    if (extensionOrigin === target.origin) return true\n    return target.origin === location.origin\n}\n\nfunction isHostName(url: URL | Location, domain: string) {\n    // either example.com or *.example.com\n    return url.hostname === domain || url.hostname.endsWith('.' + domain)\n}\n\nglobalThis.fetch = contentFetch\n","// This file is auto generated. DO NOT EDIT\n// Run `npx gulp sync-languages` to regenerate.\n// Default fallback language in a family of languages are chosen by the alphabet order\n// To overwrite this, please overwrite packages/scripts/src/locale-kit-next/index.ts\nimport en_US from './en-US.json'\nimport ja_JP from './ja-JP.json'\nimport ko_KR from './ko-KR.json'\nimport qya_AA from './qya-AA.json'\nimport zh_CN from './zh-CN.json'\nimport zh_TW from './zh-TW.json'\nexport const languages = {\n    en: en_US,\n    ja: ja_JP,\n    ko: ko_KR,\n    qy: qya_AA,\n    'zh-CN': zh_CN,\n    zh: zh_TW,\n}\nimport { createI18NBundle } from '@masknet/shared-base'\nexport const addShareBaseI18N = createI18NBundle('shareBase', languages)\n// @ts-ignore\nif (import.meta.webpackHot) {\n    // @ts-ignore\n    import.meta.webpackHot.accept(\n        ['./en-US.json', './ja-JP.json', './ko-KR.json', './qya-AA.json', './zh-CN.json', './zh-TW.json'],\n        () =>\n            globalThis.dispatchEvent?.(\n                new CustomEvent('MASK_I18N_HMR', {\n                    detail: ['shareBase', { en: en_US, ja: ja_JP, ko: ko_KR, qy: qya_AA, 'zh-CN': zh_CN, zh: zh_TW }],\n                }),\n            ),\n    )\n}\n","// This file is auto generated. DO NOT EDIT\n// Run `npx gulp sync-languages` to regenerate.\n// Default fallback language in a family of languages are chosen by the alphabet order\n// To overwrite this, please overwrite packages/scripts/src/locale-kit-next/index.ts\nimport en_US from './en-US.json'\nimport ja_JP from './ja-JP.json'\nimport ko_KR from './ko-KR.json'\nimport qya_AA from './qya-AA.json'\nimport zh_CN from './zh-CN.json'\nimport zh_TW from './zh-TW.json'\nexport const languages = {\n    en: en_US,\n    ja: ja_JP,\n    ko: ko_KR,\n    qy: qya_AA,\n    'zh-CN': zh_CN,\n    zh: zh_TW,\n}\nimport { createI18NBundle } from '@masknet/shared-base'\nexport const addMaskI18N = createI18NBundle('mask', languages)\n// @ts-ignore\nif (import.meta.webpackHot) {\n    // @ts-ignore\n    import.meta.webpackHot.accept(\n        ['./en-US.json', './ja-JP.json', './ko-KR.json', './qya-AA.json', './zh-CN.json', './zh-TW.json'],\n        () =>\n            globalThis.dispatchEvent?.(\n                new CustomEvent('MASK_I18N_HMR', {\n                    detail: ['mask', { en: en_US, ja: ja_JP, ko: ko_KR, qy: qya_AA, 'zh-CN': zh_CN, zh: zh_TW }],\n                }),\n            ),\n    )\n}\n","import { initReactI18next } from 'react-i18next'\nimport { addSharedI18N } from '@masknet/shared'\nimport { i18NextInstance } from '@masknet/shared-base'\nimport { addShareBaseI18N } from '@masknet/shared-base-ui'\n\nimport { addMaskI18N } from '../locales/languages.js'\n\ninitReactI18next.init(i18NextInstance)\naddMaskI18N(i18NextInstance)\naddSharedI18N(i18NextInstance)\naddShareBaseI18N(i18NextInstance)\n","import {\n    setupLegacySettingsAtNonBackground,\n    setupMaskKVStorageBackend,\n    type KVStorageBackend,\n} from '@masknet/shared-base'\nimport Services from '#services'\n\nconst memory: KVStorageBackend = {\n    beforeAutoSync: Promise.resolve(),\n    getValue(...args) {\n        return Services.Settings.__kv_storage_read__('memory', ...args)\n    },\n    async setValue(...args) {\n        await Services.Settings.__kv_storage_write__('memory', ...args)\n    },\n}\nconst indexedDB: KVStorageBackend = {\n    beforeAutoSync: Promise.resolve(),\n    getValue(...args) {\n        return Services.Settings.__kv_storage_read__('indexedDB', ...args)\n    },\n    async setValue(...args) {\n        await Services.Settings.__kv_storage_write__('indexedDB', ...args)\n    },\n}\nsetupMaskKVStorageBackend(indexedDB, memory)\nsetupLegacySettingsAtNonBackground(Services.Settings.getLegacySettingsInitialValue)\n","import { MaskMessages, TelemetryID } from '@masknet/shared-base'\n\nMaskMessages.events.telemetryIDReset.on((id) => (TelemetryID.value = id))\n","import Services from '#services'\nimport { initWallet } from '@masknet/web3-providers'\nimport { allPersonas } from '../initUIContext.js'\nimport { CrossIsolationMessages, EMPTY_LIST, Sniffings, createSubscriptionFromAsync } from '@masknet/shared-base'\nimport { WalletConnectQRCodeModal } from '@masknet/shared'\nimport { defer, delay } from '@masknet/kit'\n\ninitWallet({\n    addWallet: Services.Wallet.addWallet,\n    signWithPersona: (a, b, c, d) => Services.Identity.signWithPersona(a, b, c, location.origin, d),\n    closeWalletConnectDialog: () => {\n        if (Sniffings.is_popup_page) {\n            CrossIsolationMessages.events.popupWalletConnectEvent.sendToAll({ open: false })\n            return\n        }\n        WalletConnectQRCodeModal.close()\n    },\n    openPopupWindow: Services.Helper.openPopupWindow,\n    openWalletConnectDialog: async (uri: string) => {\n        if (Sniffings.is_popup_page) {\n            const [promise, resolve, reject] = defer<boolean>()\n            const callback = ({ open }: { open: boolean }) => (!open ? resolve(true) : undefined)\n\n            delay(5000).then(() => reject(new Error('timeout')))\n            CrossIsolationMessages.events.popupWalletConnectEvent.on(callback)\n            CrossIsolationMessages.events.popupWalletConnectEvent.sendToAll({ uri, open: true })\n\n            await promise.finally(() => CrossIsolationMessages.events.popupWalletConnectEvent.off(callback))\n        } else {\n            await WalletConnectQRCodeModal.openAndWaitForClose({\n                uri,\n            })\n        }\n    },\n\n    send: Services.Wallet.send,\n    selectMaskWalletAccount: Services.Wallet.selectMaskAccount,\n\n    grantEIP2255Permission: Services.Wallet.grantEIP2255Permission,\n    disconnectAllWalletsFromOrigin: Services.Wallet.disconnectAllWalletsFromOrigin,\n    wallets: createSubscriptionFromAsync(\n        () => Services.Wallet.getWallets(),\n        EMPTY_LIST,\n        CrossIsolationMessages.events.walletsUpdated.on,\n    ),\n    hasPaymentPassword: Services.Wallet.hasPassword,\n    MaskWalletContext: {\n        allPersonas,\n        resetAllWallets: Services.Wallet.resetAllWallets,\n        removeWallet: Services.Wallet.removeWallet,\n        renameWallet: Services.Wallet.renameWallet,\n    },\n})\n","import './locales.js'\nimport './storage.js'\nimport './telemetry-update.js'\nimport './walletSetup.js'\n","import { TelemetryID } from '../../../shared-base/src/Telemetry/index.js'\nimport Services from '#services'\n\nconst timeStart = Date.now()\nconst task = Services.Helper.getTelemetryID().then((id) => {\n    TelemetryID.value = id\n    const timeEnd = Date.now()\n    if (timeEnd - timeStart > 500) {\n        console.warn(`Services.Helper.getTelemetryID took ${timeEnd - timeStart}ms.`)\n    }\n})\n\nexport default task\n","import { createHashHistory } from 'history'\n\nfunction __create__<T>(creator: () => T): NonNullable<T> {\n    const run = () => {\n        if (process.env.NODE_ENV === 'test') return\n        return creator()\n    }\n    return run()!\n}\n\nexport const PopupsHistory = __create__(() => {\n    if (location.href.includes('popups.html')) return createHashHistory()\n    return\n})\n","import { type Option, None } from 'ts-results-es'\nimport { MaskMessages } from '../Messages/index.js'\nimport { type ValueRef, ValueRefJSON, ValueRefWithReady, type ValueComparer } from '../helpers/index.js'\n\nlet getValue: (key: string) => Promise<Option<any>> = async () => {\n    return None\n}\nexport function setupLegacySettingsAtBackground(\n    getStorage: (key: string) => Promise<any>,\n    setStorage: (key: string, val: unknown) => Promise<void>,\n) {\n    getValue = getStorage\n    MaskMessages.events.legacySettings_set.on(async (payload) => {\n        const { key, value } = payload\n        await setStorage(key, value)\n        MaskMessages.events.legacySettings_broadcast.sendToAll({ key, value })\n    })\n}\nexport function setupLegacySettingsAtNonBackground(getStorage: (key: string) => Promise<Option<any>>) {\n    getValue = getStorage\n}\n\nfunction setupValueRef<T>(settings: ValueRef<T>, key: string) {\n    let duringInitialValueSet = false\n    let duringBroadcastSet = false\n    Promise.resolve()\n        .then(() => getValue(key))\n        .then((value) => {\n            duringInitialValueSet = true\n            if (value.isSome()) settings.value = value.value\n            else if (settings instanceof ValueRefWithReady) settings.nowReady?.()\n        })\n        .finally(() => (duringInitialValueSet = false))\n\n    MaskMessages.events.legacySettings_broadcast.on((payload) => {\n        if (key !== payload.key) return\n        duringBroadcastSet = true\n        settings.value = payload.value\n        duringBroadcastSet = false\n    })\n\n    settings.addListener((newVal) => {\n        if (duringInitialValueSet || duringBroadcastSet) return\n        MaskMessages.events.legacySettings_set.sendToAll({\n            key,\n            value: newVal,\n        })\n    })\n    return settings\n}\n\n/** @deprecated */\nexport function createNSSettingsJSON<T extends object>(ns: string, key: string, value: T): ValueRefJSON<T> {\n    const settings = new ValueRefJSON(value)\n    setupValueRef(settings, `${ns}+${key}`)\n    return settings\n}\n\n/** @deprecated */\nexport function createGlobalSettings<T>(key: string, value: T, comparer?: ValueComparer<T>) {\n    const settings = new ValueRefWithReady(value, comparer)\n    setupValueRef(settings, `settings+${key}`)\n    return settings\n}\n\n/** @deprecated */\nexport function createBulkSettings<T>(settingsKey: string, defaultValue: T, comparer?: ValueComparer<T>) {\n    const item: Record<string, ValueRefWithReady<T>> = { __proto__: null! }\n    MaskMessages.events.legacySettings_bulkDiscoverNS.on((ns) => {\n        if (ns.startsWith('plugin:') || settingsKey === 'pluginsEnabled') return\n        setup(ns)\n    })\n    function setup(ns: string) {\n        if (ns in item) return false\n        const settings = new ValueRefWithReady(defaultValue, comparer)\n        setupValueRef(settings, `${ns}+${settingsKey}`)\n        item[ns] = settings\n        return true\n    }\n    return new Proxy(item, {\n        get(target, ns) {\n            if (typeof ns !== 'string') return undefined\n            // if we're the first one to access this property, notify all others to create this property too.\n            if (setup(ns)) {\n                target[ns].readyPromise.then(() => MaskMessages.events.legacySettings_bulkDiscoverNS.sendToAll(ns))\n            }\n            return target[ns]\n        },\n    })\n}\n","import { Convert } from 'pvtsutils'\n\nexport function fromBase64URL(x: string) {\n    return new Uint8Array(Convert.FromBase64Url(x))\n}\n\nexport function toBase64URL(x: BufferSource) {\n    return Convert.ToBase64Url(x)\n}\n\nexport function toBase64(x: BufferSource) {\n    return Convert.ToBase64(x)\n}\n\nexport function toHex(x: BufferSource) {\n    return Convert.ToHex(x)\n}\n\nexport function fromHex(x: string) {\n    if (x.startsWith('0x')) x = x.slice(2)\n    return new Uint8Array(Convert.FromHex(x))\n}\n","// This file is auto generated. DO NOT EDIT\n// Run `npx gulp sync-languages` to regenerate.\n// Default fallback language in a family of languages are chosen by the alphabet order\n// To overwrite this, please overwrite packages/scripts/src/locale-kit-next/index.ts\nimport en_US from './en-US.json'\nimport ja_JP from './ja-JP.json'\nimport ko_KR from './ko-KR.json'\nimport qya_AA from './qya-AA.json'\nimport zh_CN from './zh-CN.json'\nimport zh_TW from './zh-TW.json'\nexport const languages = {\n    en: en_US,\n    ja: ja_JP,\n    ko: ko_KR,\n    qy: qya_AA,\n    'zh-CN': zh_CN,\n    zh: zh_TW,\n}\nimport { createI18NBundle } from '@masknet/shared-base'\nexport const addSharedI18N = createI18NBundle('shared', languages)\n// @ts-ignore\nif (import.meta.webpackHot) {\n    // @ts-ignore\n    import.meta.webpackHot.accept(\n        ['./en-US.json', './ja-JP.json', './ko-KR.json', './qya-AA.json', './zh-CN.json', './zh-TW.json'],\n        () =>\n            globalThis.dispatchEvent?.(\n                new CustomEvent('MASK_I18N_HMR', {\n                    detail: ['shared', { en: en_US, ja: ja_JP, ko: ko_KR, qy: qya_AA, 'zh-CN': zh_CN, zh: zh_TW }],\n                }),\n            ),\n    )\n}\n","import { NetworkPluginID } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { evm, flow, solana } from './registry.js'\n\nexport { initWallet } from './io.js'\nconst all = {\n    [NetworkPluginID.PLUGIN_EVM]: evm,\n    [NetworkPluginID.PLUGIN_FLOW]: flow,\n    [NetworkPluginID.PLUGIN_SOLANA]: solana,\n} as const\n/**\n * Get Web3 providers, for example, WalletConnect, MetaMask, etc.\n * @param ID Network name\n */\nexport function getRegisteredWeb3Providers<T extends NetworkPluginID>(\n    ID: T,\n): ReadonlyArray<Web3Helper.Web3ProviderDescriptor<T>>\nexport function getRegisteredWeb3Providers(\n    ID: NetworkPluginID,\n): ReadonlyArray<Web3Helper.Web3ProviderDescriptor<NetworkPluginID>> {\n    return all[ID].provider\n}\n\n/**\n * Get Web3 Networks, for example, mainnet, testnet, Optimism, etc.\n * @param ID Network name\n */\nexport function getRegisteredWeb3Networks<T extends NetworkPluginID>(\n    ID: T,\n): ReadonlyArray<Web3Helper.Web3NetworkDescriptor<T>>\nexport function getRegisteredWeb3Networks(\n    ID: NetworkPluginID,\n): ReadonlyArray<Web3Helper.Web3NetworkDescriptor<NetworkPluginID>> {\n    return all[ID].network\n}\n\nexport function getRegisteredWeb3Chains<T extends NetworkPluginID>(\n    ID: T,\n): ReadonlyArray<Web3Helper.ChainDescriptorScope<void, T>> {\n    return all[ID].chain\n}\nexport function getAllPluginsWeb3State(): {\n    [key in NetworkPluginID]: Web3Helper.Web3State<key>\n} {\n    return {\n        [NetworkPluginID.PLUGIN_EVM]: evm.state,\n        [NetworkPluginID.PLUGIN_FLOW]: flow.state,\n        [NetworkPluginID.PLUGIN_SOLANA]: solana.state,\n    }\n}\n\nexport function getActivatedPluginWeb3State<T extends NetworkPluginID>(pluginID: T): Web3Helper.Web3State<T>\nexport function getActivatedPluginWeb3State(pluginID: NetworkPluginID): Web3Helper.Web3State<NetworkPluginID> {\n    return all[pluginID].state\n}\n","import type { WalletAPI } from '../entry-types.js'\nimport { evm, flow, solana } from './registry.js'\n\nexport async function initWallet(io: WalletAPI.IOContext) {\n    await Promise.all([\n        import(/* webpackMode: 'eager' */ '../Web3/EVM/apis/Web3StateAPI.js').then((mod) =>\n            mod.createEVMState(io).then((state) => (evm.state = state)),\n        ),\n        import(/* webpackMode: 'eager' */ '../Web3/Flow/apis/Web3StateAPI.js').then((mod) =>\n            mod.createFlowState(io).then((state) => (flow.state = state)),\n        ),\n        import(/* webpackMode: 'eager' */ '../Web3/Solana/apis/Web3StateAPI.js').then((mod) =>\n            mod.createSolanaState(io).then((state) => (solana.state = state)),\n        ),\n    ])\n}\n","import type { Subscription } from 'use-subscription'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport { EMPTY_LIST, type NetworkPluginID, PersistentStorages, type StorageItem } from '@masknet/shared-base'\nimport type { Contact, AddressBookState as Web3AddressBookState } from '@masknet/web3-shared-base'\n\nexport class AddressBookState implements Web3AddressBookState {\n    public storage: StorageItem<Contact[]> = null!\n    public contacts?: Subscription<Contact[]>\n\n    constructor(\n        protected context: WalletAPI.IOContext,\n        protected options: {\n            pluginID: NetworkPluginID\n            isValidAddress(a: string): boolean\n            isSameAddress(a: string, b: string): boolean\n            formatAddress(a: string): string\n        },\n    ) {\n        const { storage } = PersistentStorages.Web3.createSubScope(`${this.options.pluginID}_AddressBookV2`, {\n            value: EMPTY_LIST,\n        })\n        this.storage = storage.value\n        this.contacts = this.storage.subscription\n    }\n\n    get ready() {\n        return this.storage.initialized\n    }\n\n    get readyPromise() {\n        return this.storage.initializedPromise\n    }\n\n    async addContact({ address, name }: Contact) {\n        if (!this.options.isValidAddress(address)) throw new Error(`Invalid address: ${address}`)\n        await this.storage.setValue(this.storage.value.concat({ name, address }))\n    }\n    async removeContact(address: string) {\n        if (!this.options.isValidAddress(address)) throw new Error(`Invalid address: ${address}`)\n        await this.storage.setValue(this.storage.value.filter((x) => !this.options.isSameAddress(x.address, address)))\n    }\n\n    async renameContact({ address, name }: Contact) {\n        if (!this.options.isValidAddress(address)) throw new Error(`Invalid address: ${address}`)\n\n        await this.storage.setValue(\n            this.storage.value.map((x) => {\n                if (this.options.isSameAddress(x.address, address)) {\n                    return { address, name }\n                }\n                return x\n            }),\n        )\n    }\n}\n","import { LRUCache } from 'lru-cache'\nimport { groupBy, compact, uniq, first } from 'lodash-es'\nimport {\n    type SocialAddress,\n    type SocialIdentity,\n    type SocialAccount,\n    SocialAddressType,\n    EMPTY_LIST,\n} from '@masknet/shared-base'\nimport { type IdentityServiceState as Web3SocialIdentityState } from '@masknet/web3-shared-base'\n\nexport class IdentityServiceState<ChainId> implements Web3SocialIdentityState<ChainId> {\n    protected cache = new LRUCache<string, Promise<Array<SocialAddress<ChainId>>>>({\n        max: 20,\n        ttl: Number.MAX_SAFE_INTEGER,\n    })\n\n    private getIdentityID(identity: SocialIdentity) {\n        if (!identity.identifier) return ''\n        return [\n            '1', // version\n            identity.identifier.network,\n            identity.identifier.userId,\n            identity.bio,\n            identity.homepage,\n            identity.publicKey ?? '',\n        ].join('_')\n    }\n\n    protected getFromCache(identity: SocialIdentity) {\n        return this.cache.get(this.getIdentityID(identity))\n    }\n\n    protected getFromRemote(identity: SocialIdentity): Promise<Array<SocialAddress<ChainId>>> {\n        throw new Error('Method not implemented.')\n    }\n\n    async lookup(identity: SocialIdentity): Promise<Array<SocialAddress<ChainId>>> {\n        const ID = this.getIdentityID(identity)\n        if (!ID) return EMPTY_LIST\n\n        const fromCache = this.getFromCache(identity)\n        if (fromCache && !identity.isOwner) return fromCache\n\n        const fromRemote = this.getFromRemote(identity)\n        if (!identity.isOwner) {\n            this.cache.set(ID, fromRemote)\n        }\n\n        return fromRemote\n    }\n\n    __mergeSocialAddressesAll__(socialAddresses: Array<SocialAddress<ChainId>>) {\n        const accountGroups = groupBy(socialAddresses, (x) => `${x.pluginID}_${x.address.toLowerCase()}`)\n        const domainAddressTypes = [\n            SocialAddressType.ENS,\n            SocialAddressType.SPACE_ID,\n            SocialAddressType.ARBID,\n            SocialAddressType.Lens,\n            SocialAddressType.RSS3,\n            SocialAddressType.SOL,\n        ]\n        return Object.entries(accountGroups).map<SocialAccount<ChainId>>(([, accounts]) => {\n            const domainLabels = compact(domainAddressTypes.map((x) => accounts.find((y) => y.type === x)?.label))\n            const theFirstAccount = accounts[0]\n            return {\n                pluginID: theFirstAccount.pluginID,\n                address: theFirstAccount.address,\n                label: first(domainLabels) || theFirstAccount.label,\n                // The supportedChainIds support all chains by default. If not set value, should keep it.\n                supportedChainIds: accounts.find((x) => !x.chainId)\n                    ? undefined\n                    : uniq(compact(accounts.map((x) => x.chainId))),\n                supportedAddressTypes: uniq(accounts.map((x) => x.type)),\n            }\n        })\n    }\n}\n","import { v4 as uuid } from 'uuid'\nimport { omit } from 'lodash-es'\nimport type { Subscription } from 'use-subscription'\nimport { getRegisteredWeb3Chains, getRegisteredWeb3Networks } from '../../../Manager/index.js'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport {\n    mapSubscription,\n    PersistentStorages,\n    type NetworkPluginID,\n    type StorageObject,\n    mergeSubscription,\n} from '@masknet/shared-base'\nimport type {\n    ReasonableNetwork,\n    TransferableNetwork,\n    NetworkState as Web3NetworkState,\n} from '@masknet/web3-shared-base'\n\nexport class NetworkState<ChainId, SchemaType, NetworkType>\n    implements Web3NetworkState<ChainId, SchemaType, NetworkType>\n{\n    /** default network can't be removed */\n    private DEFAULT_NETWORK_ID = '1_ETH'\n    public storage: StorageObject<{\n        networkID: string\n        networks: Record<string, ReasonableNetwork<ChainId, SchemaType, NetworkType>>\n    }> = null!\n\n    public networkID?: Subscription<string>\n    public network?: Subscription<ReasonableNetwork<ChainId, SchemaType, NetworkType>>\n    public networks: Subscription<Array<ReasonableNetwork<ChainId, SchemaType, NetworkType>>>\n\n    constructor(\n        protected context: WalletAPI.IOContext,\n        protected options: {\n            pluginID: NetworkPluginID\n        },\n    ) {\n        const { storage } = PersistentStorages.Web3.createSubScope(`${this.options.pluginID}_Network`, {\n            networkID: this.DEFAULT_NETWORK_ID,\n            networks: {},\n        })\n\n        this.storage = storage\n\n        this.networkID = this.storage.networkID.subscription\n\n        this.networks = mapSubscription(this.storage.networks.subscription, (storage) => {\n            // Newest to oldest\n            const customizedNetworks = Object.values(storage).sort(\n                (a, z) => z.createdAt.getTime() - a.createdAt.getTime(),\n            )\n            const registeredChains = getRegisteredWeb3Chains(this.options.pluginID)\n            const registeredNetworks = getRegisteredWeb3Networks(this.options.pluginID)\n\n            return [\n                ...registeredNetworks\n                    .filter((x) => x.isMainnet)\n                    .map((x) => registeredChains.find((y) => y.chainId === x.chainId)!),\n                ...customizedNetworks.map((x) => ({\n                    ...x,\n                    isCustomized: true,\n                })),\n            ] as Array<ReasonableNetwork<ChainId, SchemaType, NetworkType>>\n        })\n\n        this.network = mapSubscription(\n            mergeSubscription(this.storage.networkID.subscription, this.storage.networks.subscription),\n            ([networkID, networks]) => networks[networkID],\n        )\n    }\n\n    get ready() {\n        return this.storage.networkID.initialized && this.storage.networks.initialized\n    }\n\n    get readyPromise() {\n        return Promise.all([this.storage.networkID.initializedPromise, this.storage.networks.initializedPromise]).then(\n            () => {},\n        )\n    }\n\n    private assertNetwork(id: string) {\n        const network = this.networks.getCurrentValue().find((x) => x.ID === id)\n        if (!network) throw new Error('Not a valid network ID.')\n        return network\n    }\n\n    protected async validateNetwork(network: TransferableNetwork<ChainId, SchemaType, NetworkType>) {\n        return true\n    }\n\n    protected async pingNetwork(network: TransferableNetwork<ChainId, SchemaType, NetworkType>) {\n        return true\n    }\n\n    async addNetwork(network: TransferableNetwork<ChainId, SchemaType, NetworkType>) {\n        const valid = await this.validateNetwork(network)\n        if (!valid) throw new Error('Not a valid network.')\n\n        const ID = uuid()\n        const now = new Date()\n\n        await this.storage.networks.setValue({\n            ...this.storage.networks.value,\n            [ID]: {\n                ...network,\n                ID,\n                createdAt: now,\n                updatedAt: now,\n            },\n        })\n    }\n\n    async switchNetwork(id: string) {\n        const network = this.assertNetwork(id)\n\n        const valid = await this.pingNetwork(network)\n        if (!valid) throw new Error('Cannot build connection with the network at this time, please try again later.')\n\n        await this.storage.networkID.setValue(id)\n    }\n\n    async updateNetwork(id: string, updates: Partial<TransferableNetwork<ChainId, SchemaType, NetworkType>>) {\n        const network = this.assertNetwork(id)\n\n        await this.storage.networks.setValue({\n            ...this.storage.networks.value,\n            [id]: {\n                ...network,\n                ...updates,\n                updatedAt: new Date(),\n            },\n        })\n    }\n\n    async removeNetwork(id: string) {\n        this.assertNetwork(id)\n\n        // If remove current network, reset to default network\n        if (id === this.networkID?.getCurrentValue()) {\n            await this.switchNetwork(this.DEFAULT_NETWORK_ID)\n        }\n\n        await Promise.all([\n            this.storage.networks.setValue(omit(this.storage.networks.value, id)),\n            this.networkID?.getCurrentValue() === id ? await this.storage.networkID.setValue('') : Promise.resolve(),\n        ])\n    }\n}\n","import { clone, first } from 'lodash-es'\nimport type { Subscription } from 'use-subscription'\nimport { delay } from '@masknet/kit'\nimport {\n    type Account,\n    type ECKeyIdentifier,\n    getSiteType,\n    mapSubscription,\n    mergeSubscription,\n    type StorageObject,\n    InMemoryStorages,\n    type NetworkPluginID,\n} from '@masknet/shared-base'\nimport type { ProviderState as Web3ProviderState } from '@masknet/web3-shared-base'\nimport type { WalletAPI } from '../../../entry-types.js'\n\ninterface ProviderStorage<Account, ProviderType extends string> {\n    account: Account\n    providerType: ProviderType\n}\n\nexport abstract class ProviderState<\n    ChainId extends number,\n    ProviderType extends string,\n    NetworkType extends string,\n    Web3Provider,\n    Web3,\n> implements Web3ProviderState<ChainId, ProviderType, NetworkType>\n{\n    protected site = getSiteType()\n\n    abstract storage: StorageObject<ProviderStorage<Account<ChainId>, ProviderType>>\n    public account?: Subscription<string>\n    public chainId?: Subscription<ChainId>\n    public networkType?: Subscription<NetworkType>\n    public providerType?: Subscription<ProviderType>\n\n    protected abstract providers: Record<ProviderType, WalletAPI.Provider<ChainId, ProviderType, Web3Provider, Web3>>\n    protected abstract isValidAddress(address: string | undefined): boolean\n    protected abstract isValidChainId(chainID: number | undefined): boolean\n    protected abstract isSameAddress(a: string | undefined, b: string | undefined): boolean\n    protected abstract getInvalidChainId(): ChainId\n    protected abstract getDefaultNetworkType(): NetworkType\n    protected abstract getDefaultChainId(): ChainId\n    protected abstract getDefaultProviderType(): ProviderType\n    protected abstract getNetworkTypeFromChainId(chainId: ChainId): NetworkType\n    protected constructor(protected context: WalletAPI.IOContext) {\n        this.signWithPersona = context.signWithPersona\n    }\n    signWithPersona\n    protected static createStorage<ChainId extends number, ProviderType extends string>(\n        pluginID: NetworkPluginID,\n        defaultChainId: ChainId,\n        defaultProviderType: ProviderType,\n    ) {\n        const { storage } = InMemoryStorages.Web3.createSubScope(`${pluginID}_${getSiteType() ?? 'Provider'}`, {\n            account: {\n                account: '',\n                chainId: defaultChainId,\n            },\n            providerType: defaultProviderType,\n        })\n        return storage\n    }\n\n    get ready() {\n        return this.storage.account.initialized && this.storage.providerType.initialized\n    }\n\n    get readyPromise() {\n        return Promise.all([\n            this.storage.account.initializedPromise,\n            this.storage.providerType.initializedPromise,\n        ]).then(() => {})\n    }\n\n    async setup() {\n        await this.readyPromise\n        this.setupSubscriptions()\n        this.setupProviders()\n    }\n\n    protected setupSubscriptions() {\n        if (!this.site) return\n\n        this.chainId = mapSubscription(\n            mergeSubscription(this.storage.account.subscription),\n            ([account]) => account.chainId,\n        )\n        this.account = mapSubscription(\n            mergeSubscription(this.storage.account.subscription),\n            ([account]) => account.account,\n        )\n        this.networkType = mapSubscription(mergeSubscription(this.storage.account.subscription), ([account]) =>\n            this.getNetworkTypeFromChainId(account.chainId),\n        )\n        this.providerType = mapSubscription(this.storage.providerType.subscription, (provider) => provider)\n    }\n\n    private setupProviders() {\n        const providers = Object.entries(this.providers) as Array<\n            [ProviderType, WalletAPI.Provider<ChainId, ProviderType, Web3Provider, Web3>]\n        >\n\n        providers.map(async ([providerType, provider]) => {\n            try {\n                await provider.readyPromise\n                if (!provider.ready) return\n            } catch {\n                return\n            }\n\n            provider.emitter.on('chainId', async (chainId) => {\n                await this.setAccount(providerType, {\n                    chainId: Number.parseInt(chainId, 16) as ChainId,\n                })\n            })\n            provider.emitter.on('connect', async ({ account }) => {\n                if (!this.isValidAddress(account)) return\n                // provider should update before account, otherwise account failed to update\n                await this.setProvider(providerType)\n                await this.setAccount(providerType, {\n                    account,\n                })\n            })\n            provider.emitter.on('accounts', async (accounts) => {\n                const account = first(accounts)\n\n                if (account && this.isValidAddress(account))\n                    await this.setAccount(providerType, {\n                        account,\n                    })\n            })\n            provider.emitter.on('disconnect', async () => {\n                await this.setAccount(providerType, {\n                    account: '',\n                    chainId: this.getDefaultChainId(),\n                })\n\n                if (!this.site) return\n                await this.storage.providerType.setValue(this.getDefaultProviderType())\n            })\n\n            try {\n                await provider.setup(this.context)\n            } catch {\n                // ignore setup errors\n            }\n        })\n    }\n\n    private async setAccount(providerType: ProviderType, account: Partial<Account<ChainId>>) {\n        if (this.storage.providerType.value !== providerType) return\n        if (!this.site) return\n\n        const account_ = this.storage.account.value\n        const accountCopied = clone(account)\n\n        if (accountCopied.account !== '' && !this.isValidAddress(accountCopied.account)) delete accountCopied.account\n        if (accountCopied.chainId && !this.isValidChainId(accountCopied.chainId)) {\n            accountCopied.chainId = this.getInvalidChainId()\n        }\n\n        const needToUpdateAccount =\n            accountCopied.account === '' || !this.isSameAddress(account_.account, account.account)\n        const needToUpdateChainId = accountCopied.chainId && account_.chainId !== accountCopied.chainId\n\n        if (needToUpdateAccount || needToUpdateChainId) {\n            await this.storage.account.setValue({\n                ...account_,\n                ...accountCopied,\n            })\n        }\n    }\n\n    private async setProvider(providerType: ProviderType) {\n        if (!this.site) return\n\n        if (this.storage.providerType.value !== providerType) {\n            await this.storage.providerType.setValue(providerType)\n        }\n    }\n\n    isReady(providerType: ProviderType) {\n        return this.providers[providerType].ready\n    }\n\n    untilReady(providerType: ProviderType) {\n        return this.providers[providerType].readyPromise\n    }\n\n    async connect(\n        providerType: ProviderType,\n        chainId: ChainId,\n        address?: string,\n        owner?: {\n            account: string\n            identifier?: ECKeyIdentifier\n        },\n        silent?: boolean,\n    ) {\n        const provider = this.providers[providerType]\n\n        // compose the connection result\n        const result = await provider.connect(chainId, address, owner, silent)\n\n        // failed to connect provider\n        if (!result.account) throw new Error('Failed to connect provider.')\n\n        // switch the sub-network to the expected one\n        if (chainId !== result.chainId && providerType !== 'WalletConnect') {\n            await Promise.race([\n                (async () => {\n                    await delay(30 /* seconds */ * 1000 /* milliseconds */)\n                    throw new Error(`Timeout of switching chain to ${chainId}.`)\n                })(),\n                provider.switchChain(chainId),\n            ])\n            result.chainId = chainId\n        }\n\n        // update local storage\n        await this.setProvider(providerType)\n        await this.setAccount(providerType, result)\n\n        provider.emitter.emit('connect', result)\n        return result\n    }\n\n    async disconnect(providerType: ProviderType) {\n        const provider = this.providers[providerType]\n        await provider.disconnect()\n\n        // update local storage\n        await this.setAccount(providerType, {\n            account: '',\n        })\n\n        provider.emitter.emit('disconnect', providerType)\n    }\n}\n","import type { Subscription } from 'use-subscription'\nimport {\n    createConstantSubscription,\n    InMemoryStorages,\n    type NetworkPluginID,\n    type StorageObject,\n} from '@masknet/shared-base'\nimport {\n    CurrencyType,\n    GasOptionType,\n    SourceType,\n    type SettingsState as Web3SettingsState,\n} from '@masknet/web3-shared-base'\nimport type { WalletAPI } from '../../../entry-types.js'\n\ninterface SettingsStorage {\n    currencyType: CurrencyType\n    gasOptionType: GasOptionType\n    fungibleAssetSourceType: SourceType\n    nonFungibleAssetSourceType: SourceType\n}\n\nexport class SettingsState implements Web3SettingsState {\n    public storage: StorageObject<SettingsStorage> = null!\n    public allowTestnet?: Subscription<boolean>\n    public currencyType?: Subscription<CurrencyType>\n    public gasOptionType?: Subscription<GasOptionType>\n    public fungibleAssetSourceType?: Subscription<SourceType>\n    public nonFungibleAssetSourceType?: Subscription<SourceType>\n\n    constructor(\n        context: WalletAPI.IOContext,\n        protected options: {\n            pluginID: NetworkPluginID\n        },\n    ) {\n        const { storage } = InMemoryStorages.Web3.createSubScope(`${this.options.pluginID}_Settings`, {\n            currencyType: CurrencyType.USD,\n            gasOptionType: GasOptionType.NORMAL,\n            fungibleAssetSourceType: SourceType.DeBank,\n            nonFungibleAssetSourceType: SourceType.OpenSea,\n        })\n        this.storage = storage\n\n        this.allowTestnet = createConstantSubscription(process.env.NODE_ENV === 'development')\n        this.currencyType = this.storage.currencyType.subscription\n        this.gasOptionType = this.storage.gasOptionType.subscription\n        this.fungibleAssetSourceType = this.storage.fungibleAssetSourceType.subscription\n        this.nonFungibleAssetSourceType = this.storage.nonFungibleAssetSourceType.subscription\n    }\n\n    get ready() {\n        return (\n            this.storage.currencyType.initialized &&\n            this.storage.gasOptionType.initialized &&\n            this.storage.fungibleAssetSourceType.initialized &&\n            this.storage.nonFungibleAssetSourceType.initialized\n        )\n    }\n\n    get readyPromise() {\n        return Promise.all([\n            this.storage.currencyType.initializedPromise,\n            this.storage.gasOptionType.initializedPromise,\n            this.storage.fungibleAssetSourceType.initializedPromise,\n            this.storage.nonFungibleAssetSourceType.initializedPromise,\n        ]).then(() => {})\n    }\n\n    async setDefaultCurrencyType(currencyType: CurrencyType) {\n        await this.storage.currencyType.setValue(currencyType)\n    }\n}\n","import type { Subscription } from 'use-subscription'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport {\n    mapSubscription,\n    mergeSubscription,\n    PersistentStorages,\n    type NetworkPluginID,\n    type StorageItem,\n} from '@masknet/shared-base'\nimport {\n    type RecentTransaction,\n    TransactionStatusType,\n    type TransactionState as Web3TransactionState,\n} from '@masknet/web3-shared-base'\n\ntype TransactionStorage<ChainId extends PropertyKey, Transaction> = Record<\n    ChainId,\n    | Record<\n          // address\n          string,\n          Array<RecentTransaction<ChainId, Transaction>>\n      >\n    | undefined\n>\n\nexport class TransactionState<ChainId extends PropertyKey, Transaction>\n    implements Web3TransactionState<ChainId, Transaction>\n{\n    static MAX_RECORD_SIZE = 20\n\n    public storage: StorageItem<TransactionStorage<ChainId, Transaction>> = null!\n    public transactions?: Subscription<Array<RecentTransaction<ChainId, Transaction>>>\n\n    constructor(\n        protected context: WalletAPI.IOContext,\n        protected chainIds: ChainId[],\n        protected subscriptions: {\n            account?: Subscription<string>\n            chainId?: Subscription<ChainId>\n        },\n        protected options: {\n            pluginID: NetworkPluginID\n            formatAddress(a: string): string\n            isValidChainId(chainId?: ChainId): boolean\n        },\n    ) {\n        const { storage } = PersistentStorages.Web3.createSubScope(`${this.options.pluginID}_Transaction`, {\n            value: Object.fromEntries(chainIds.map((x) => [x, {}])) as TransactionStorage<ChainId, Transaction>,\n        })\n        this.storage = storage.value\n\n        if (this.subscriptions.chainId && this.subscriptions.account) {\n            this.transactions = mapSubscription(\n                mergeSubscription(this.subscriptions.chainId, this.subscriptions.account, this.storage.subscription),\n                ([chainId, account, transactionStorage]) => {\n                    if (!this.options.isValidChainId(chainId)) return []\n                    return transactionStorage[chainId]?.[this.options.formatAddress(account)] ?? []\n                },\n            )\n        }\n    }\n\n    get ready() {\n        return this.storage.initialized\n    }\n\n    get readyPromise() {\n        return this.storage.initializedPromise\n    }\n\n    async getTransaction(chainId: ChainId, address: string, id: string): Promise<Transaction | undefined> {\n        const all = this.storage.value\n        const address_ = this.options.formatAddress(address)\n\n        for (const recentTransaction of all[chainId]?.[address_] ?? []) {\n            for (const [id_, transaction] of Object.entries(recentTransaction.candidates)) {\n                if (id_ === id) return transaction\n            }\n        }\n        return\n    }\n\n    async addTransaction(\n        chainId: ChainId,\n        address: string,\n        id: string,\n        transaction: Transaction & { draftedAt: Date },\n    ) {\n        const now = new Date()\n        const all = this.storage.value\n        const address_ = this.options.formatAddress(address)\n\n        // to ensure that the transaction doesn't exist\n        const transaction_ = all[chainId]?.[address_]?.find((x) => Object.keys(x.candidates).includes(id))\n        if (transaction_) return\n\n        const transactions: Array<RecentTransaction<ChainId, Transaction>> = [\n            // new records go first then we will remove it last\n            {\n                id,\n                indexId: id,\n                chainId,\n                draftedAt: transaction.draftedAt,\n                createdAt: now,\n                updatedAt: now,\n                status: TransactionStatusType.NOT_DEPEND,\n                candidates: {\n                    [id]: transaction,\n                },\n            },\n            ...(all[chainId]?.[address_] ?? []),\n        ]\n\n        await this.storage.setValue({\n            ...all,\n            [chainId]: {\n                ...all[chainId],\n                [address_]: transactions.slice(0, TransactionState.MAX_RECORD_SIZE),\n            },\n        })\n    }\n\n    async replaceTransaction(chainId: ChainId, address: string, id: string, newId: string, transaction: Transaction) {\n        const now = new Date()\n        const all = this.storage.value\n        const address_ = this.options.formatAddress(address)\n\n        // to ensure that the transaction exists\n        const transaction_ = all[chainId]?.[address_]?.find((x) => Object.keys(x.candidates).includes(id))\n        if (!transaction_) return\n\n        const transactions: Array<RecentTransaction<ChainId, Transaction>> = (all[chainId]?.[address_] ?? []).map(\n            (x) =>\n                Object.keys(x.candidates).includes(id)\n                    ? {\n                          ...x,\n                          indexId: newId,\n                          candidates: {\n                              ...x.candidates,\n                              [newId]: transaction,\n                          },\n                          updatedAt: now,\n                      }\n                    : x,\n        )\n\n        await this.storage.setValue({\n            ...all,\n            [chainId]: {\n                ...all[chainId],\n                [address_]: transactions,\n            },\n        })\n    }\n\n    async updateTransaction(\n        chainId: ChainId,\n        address: string,\n        id: string,\n        status: Exclude<TransactionStatusType, TransactionStatusType.NOT_DEPEND>,\n    ) {\n        const now = new Date()\n        const all = this.storage.value\n        const address_ = this.options.formatAddress(address)\n\n        // to ensure that the transaction exists\n        const transaction_ = all[chainId]?.[address_]?.find((x) => Object.keys(x.candidates).includes(id))\n        if (!transaction_) return\n\n        const transactions: Array<RecentTransaction<ChainId, Transaction>> = (all[chainId]?.[address_] ?? []).map(\n            (x) =>\n                Object.keys(x.candidates).includes(id)\n                    ? {\n                          ...x,\n                          indexId: id,\n                          status,\n                          updatedAt: now,\n                      }\n                    : x,\n        )\n\n        await this.storage.setValue({\n            ...all,\n            [chainId]: {\n                ...all[chainId],\n                [address_]: transactions,\n            },\n        })\n    }\n\n    async removeTransaction(chainId: ChainId, address: string, id: string) {\n        const all = this.storage.value\n        const address_ = this.options.formatAddress(address)\n\n        await this.storage.setValue({\n            ...all,\n            [chainId]: {\n                ...all[chainId],\n                [address_]: all[chainId]?.[address_]?.filter((x) => !Object.keys(x.candidates).includes(id)),\n            },\n        })\n    }\n\n    async getTransactions(chainId: ChainId, address: string): Promise<Array<RecentTransaction<ChainId, Transaction>>> {\n        const all = this.storage.value\n        const address_ = this.options.formatAddress(address)\n\n        return all[chainId]?.[address_] ?? []\n    }\n\n    async clearTransactions(chainId: ChainId, address: string) {\n        const all = this.storage.value\n        const address_ = this.options.formatAddress(address)\n\n        await this.storage.setValue({\n            ...all,\n            [chainId]: {\n                ...all[chainId],\n                [address_]: [],\n            },\n        })\n    }\n}\n","import type { Web3State } from '@masknet/web3-shared-evm'\nimport { AddressBook } from '../state/AddressBook.js'\nimport { RiskWarning } from '../state/RiskWarning.js'\nimport { Token } from '../state/Token.js'\nimport { Transaction } from '../state/Transaction.js'\nimport { NameService } from '../state/NameService.js'\nimport { Provider } from '../state/Provider.js'\nimport { Settings } from '../state/Settings.js'\nimport { TransactionFormatter } from '../state/TransactionFormatter.js'\nimport { TransactionWatcher } from '../state/TransactionWatcher.js'\nimport { IdentityService } from '../state/IdentityService.js'\nimport { BalanceNotifier } from '../state/BalanceNotifier.js'\nimport { BlockNumberNotifier } from '../state/BlockNumberNotifier.js'\nimport { Message } from '../state/Message.js'\nimport { Network } from '../state/Network.js'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport { evm } from '../../../Manager/registry.js'\n\nexport const Web3StateRef = {\n    get value() {\n        return evm.state\n    },\n}\nexport async function createEVMState(context: WalletAPI.IOContext): Promise<Web3State> {\n    const Provider_ = await Provider.new(context)\n\n    const Transaction_ = new Transaction(context, {\n        chainId: Provider_.chainId,\n        account: Provider_.account,\n    })\n\n    return {\n        Settings: new Settings(context),\n        Provider: Provider_,\n        BalanceNotifier: new BalanceNotifier(),\n        BlockNumberNotifier: new BlockNumberNotifier(),\n        Network: new Network(context),\n        AddressBook: new AddressBook(context),\n        IdentityService: new IdentityService(context),\n        NameService: new NameService(context),\n        RiskWarning: new RiskWarning(context, {\n            account: Provider_.account,\n        }),\n        Message: new Message(context),\n        Token: new Token(context, {\n            account: Provider_.account,\n            chainId: Provider_.chainId,\n        }),\n        Transaction: Transaction_,\n        TransactionFormatter: new TransactionFormatter(context),\n        TransactionWatcher: new TransactionWatcher(context, {\n            chainId: Provider_.chainId!,\n            transactions: Transaction_.transactions!,\n        }),\n    }\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport { isSameAddress } from '@masknet/web3-shared-base'\nimport { formatEthereumAddress, isValidAddress } from '@masknet/web3-shared-evm'\nimport { AddressBookState } from '../../Base/state/AddressBook.js'\n\nexport class AddressBook extends AddressBookState {\n    constructor(context: WalletAPI.IOContext) {\n        super(context, {\n            pluginID: NetworkPluginID.PLUGIN_EVM,\n            isValidAddress,\n            isSameAddress,\n            formatAddress: formatEthereumAddress,\n        })\n    }\n}\n","import { Emitter } from '@servie/events'\nimport type { BalanceEvent, BalanceNotifierState as Web3BalanceNotifierState } from '@masknet/web3-shared-base'\n\nexport class BalanceNotifierState<ChainId> implements Web3BalanceNotifierState<ChainId> {\n    emitter: Emitter<BalanceEvent<ChainId>> = new Emitter()\n}\n","import type { ChainId } from '@masknet/web3-shared-evm'\nimport { BalanceNotifierState } from '../../Base/state/BalanceNotifier.js'\n\nexport class BalanceNotifier extends BalanceNotifierState<ChainId> {}\n","import { Emitter } from '@servie/events'\nimport type {\n    BlockNumberEvent,\n    BlockNumberNotifierState as Web3BlockNumberNotifierState,\n} from '@masknet/web3-shared-base'\n\nexport class BlockNumberNotifierState<ChainId> implements Web3BlockNumberNotifierState<ChainId> {\n    emitter: Emitter<BlockNumberEvent<ChainId>> = new Emitter()\n}\n","import type { ChainId } from '@masknet/web3-shared-evm'\nimport { BlockNumberNotifierState } from '../../Base/state/BlockNumberNotifier.js'\n\nexport class BlockNumberNotifier extends BlockNumberNotifierState<ChainId> {}\n","export namespace MaskX_BaseAPI {\n    export enum PlatformType {\n        Ethereum = 'eth',\n        Twitter = 'twitter',\n    }\n\n    export enum SourceType {\n        CyberConnect = 'cyber',\n        Firefly = 'firefly',\n        OpenSea = 'opensea',\n        Sybil = 'sybil',\n        Uniswap = 'uniswap',\n        Leaderboard = 'ethLeaderboard',\n        RSS3 = 'rss3',\n        HandWriting = 'hand_writing',\n        TwitterHexagon = 'twitter_hexagon',\n    }\n\n    export interface Identity {\n        // internal uuid\n        id: string\n        sns_handle: string\n        sns_platform: PlatformType\n        // an EVM EOA\n        web3_addr: string\n        web3_platform: PlatformType\n        // data source\n        source: SourceType\n        ens?: string\n        // timestamp in milliseconds\n        create_timestamp: string\n        // timestamp in milliseconds\n        modify_timestamp: string\n        is_verified: boolean\n    }\n\n    export interface Options {\n        size?: number\n        page?: number\n    }\n\n    export interface Response {\n        pagination: {\n            current: number\n            next: number\n        }\n        records: Identity[]\n    }\n}\n","/* cspell:disable-next-line */\nexport const MASK_X_ROOT_URL = 'https://a8fq5hs9nk.execute-api.us-east-1.amazonaws.com/'\nexport const MASK_X_DEFAULT_PAGINATION = {\n    size: 20,\n    page: 1,\n}\n","import urlcat from 'urlcat'\nimport { compact } from 'lodash-es'\nimport { MASK_X_DEFAULT_PAGINATION, MASK_X_ROOT_URL } from './constants.js'\nimport { MaskX_BaseAPI } from '../entry-types.js'\nimport { fetchCachedJSON } from '../helpers/fetchJSON.js'\n\nclass MaskX_API {\n    private async fetchFromMaskX(pathname: string) {\n        return fetchCachedJSON<MaskX_BaseAPI.Response>(urlcat(MASK_X_ROOT_URL, pathname))\n    }\n\n    private getOptions({ size = 20, page = 1 }: MaskX_BaseAPI.Options = MASK_X_DEFAULT_PAGINATION) {\n        return {\n            size,\n            page,\n        }\n    }\n\n    private async getRNSIdentity(identity: MaskX_BaseAPI.Identity) {\n        const handle = identity.sns_handle.toLowerCase()\n        if (handle.endsWith('.rss3')) {\n            return {\n                ...identity,\n                sns_handle: handle,\n            }\n        }\n\n        return identity\n    }\n\n    private async getResponse(response: MaskX_BaseAPI.Response) {\n        const allSettled = await Promise.allSettled(\n            response.records.map(async (x) => {\n                switch (x.source) {\n                    case MaskX_BaseAPI.SourceType.RSS3:\n                        return this.getRNSIdentity(x)\n                    default:\n                        return x\n                }\n            }),\n        )\n\n        return {\n            ...response,\n            records: compact(allSettled.map((x) => (x.status === 'fulfilled' ? x.value : undefined))),\n        }\n    }\n\n    async getIdentitiesExact(\n        handle: string,\n        platform: MaskX_BaseAPI.PlatformType,\n        initial: MaskX_BaseAPI.Options = { size: 20, page: 1 },\n    ): Promise<MaskX_BaseAPI.Response> {\n        const response = await this.fetchFromMaskX(\n            urlcat('/prod/identity', {\n                identity: handle,\n                platform,\n                ...this.getOptions(initial),\n            }),\n        )\n        return this.getResponse(response)\n    }\n    async getIdentitiesFuzzy(\n        handle: string,\n        platform: MaskX_BaseAPI.PlatformType,\n        initial: MaskX_BaseAPI.Options = { size: 20, page: 1 },\n    ): Promise<MaskX_BaseAPI.Response> {\n        const response = await this.fetchFromMaskX(\n            urlcat('/prod/identity/search', {\n                identity: handle,\n                platform,\n                ...this.getOptions(initial),\n            }),\n        )\n        return this.getResponse(response)\n    }\n    async getAllIdentities(initial: MaskX_BaseAPI.Options = { size: 20, page: 1 }): Promise<MaskX_BaseAPI.Response> {\n        const response = await this.fetchFromMaskX(urlcat('/prod/identity/all', this.getOptions(initial)))\n        return this.getResponse(response)\n    }\n}\nexport const MaskX = new MaskX_API()\n","import { compact, uniqBy } from 'lodash-es'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport {\n    EMPTY_LIST,\n    NetworkPluginID,\n    NextIDPlatform,\n    PluginID,\n    SocialAddressType,\n    createLookupTableResolver,\n    type BindingProof,\n    type SocialAddress,\n    type SocialIdentity,\n    Sniffings,\n} from '@masknet/shared-base'\nimport { ChainId, isValidAddress, isZeroAddress } from '@masknet/web3-shared-evm'\nimport { IdentityServiceState } from '../../Base/state/Identity.js'\nimport { ConnectionReadonlyAPI } from '../apis/ConnectionReadonlyAPI.js'\nimport { MaskX_BaseAPI } from '../../../entry-types.js'\nimport { ARBID } from '../../../ARBID/index.js'\nimport { ENS } from '../../../ENS/index.js'\nimport { Firefly } from '../../../Firefly/index.js'\nimport { Lens } from '../../../Lens/index.js'\nimport { MaskX } from '../../../MaskX/index.js'\nimport { NextIDProof } from '../../../NextID/proof.js'\nimport { RSS3 } from '../../../RSS3/index.js'\nimport { SpaceID } from '../../../SpaceID/index.js'\nimport { Twitter } from '../../../Twitter/index.js'\nimport { NextIDStorageProvider } from '../../../NextID/kv.js'\n\nconst ENS_RE = /[^\\s()[\\]]{1,256}\\.(eth|kred|xyz|luxe)\\b/gi\nconst SID_RE = /[^\\s()[\\]]{1,256}\\.bnb\\b/gi\nconst ARBID_RE = /[^\\s()[\\]]{1,256}\\.arb\\b/gi\nconst ADDRESS_FULL = /0x\\w{40,}/i\nconst CROSSBELL_HANDLE_RE = /[\\w.]+\\.csb/gi\nconst LENS_RE = /[^\\s()[\\]]{1,256}\\.lens\\b/i\nconst LENS_URL_RE = /https?:\\/\\/.+\\/(\\w+\\.lens)/\n\nfunction getENSNames(userId: string, nickname: string, bio: string) {\n    return [userId.match(ENS_RE), nickname.match(ENS_RE), bio.match(ENS_RE)].flatMap((result) => result ?? [])\n}\n\nfunction getLensNames(nickname: string, bio: string, homepage: string) {\n    const homepageNames = homepage.match(LENS_URL_RE)?.[1]\n    const names = [nickname.match(LENS_RE), bio.match(LENS_RE)].map((result) => result?.[0] ?? '')\n    return [...names, homepageNames].filter(Boolean) as string[]\n}\n\nfunction getARBIDNames(userId: string, nickname: string, bio: string) {\n    return [userId.match(ARBID_RE), nickname.match(ARBID_RE), bio.match(ARBID_RE)].flatMap((result) => result ?? [])\n}\n\nfunction getSIDNames(userId: string, nickname: string, bio: string) {\n    return [userId.match(SID_RE), nickname.match(SID_RE), bio.match(SID_RE)]\n        .flatMap((result) => result || [])\n        .map((x) => x.toLowerCase())\n}\n\nfunction getCrossBellHandles(nickname: string, bio: string) {\n    return [nickname.match(CROSSBELL_HANDLE_RE), bio.match(CROSSBELL_HANDLE_RE)]\n        .flatMap((result) => result || [])\n        .map((x) => x.toLowerCase())\n}\n\nfunction getAddress(text: string) {\n    const [matched] = text.match(ADDRESS_FULL) ?? []\n    if (matched && isValidAddress(matched)) return matched\n    return\n}\n\nfunction getNextIDPlatform() {\n    if (Sniffings.is_twitter_page) return NextIDPlatform.Twitter\n    return\n}\n\nasync function getWalletAddressesFromNextID({ identifier, publicKey }: SocialIdentity): Promise<BindingProof[]> {\n    if (!identifier?.userId) return EMPTY_LIST\n\n    const platform = getNextIDPlatform()\n    if (!platform) return EMPTY_LIST\n\n    const latestActivatedBinding = await NextIDProof.queryLatestBindingByPlatform(\n        platform,\n        identifier.userId,\n        publicKey,\n    )\n    if (!latestActivatedBinding) return EMPTY_LIST\n    return latestActivatedBinding.proofs.filter(\n        (x) => x.platform === NextIDPlatform.Ethereum && isValidAddress(x.identity),\n    )\n}\n\nconst resolveMaskXAddressType = createLookupTableResolver<MaskX_BaseAPI.SourceType, SocialAddressType>(\n    {\n        [MaskX_BaseAPI.SourceType.CyberConnect]: SocialAddressType.CyberConnect,\n        [MaskX_BaseAPI.SourceType.Firefly]: SocialAddressType.Firefly,\n        [MaskX_BaseAPI.SourceType.HandWriting]: SocialAddressType.Firefly,\n        [MaskX_BaseAPI.SourceType.Leaderboard]: SocialAddressType.Leaderboard,\n        [MaskX_BaseAPI.SourceType.OpenSea]: SocialAddressType.OpenSea,\n        [MaskX_BaseAPI.SourceType.Sybil]: SocialAddressType.Sybil,\n        [MaskX_BaseAPI.SourceType.Uniswap]: SocialAddressType.Sybil,\n        [MaskX_BaseAPI.SourceType.RSS3]: SocialAddressType.RSS3,\n        [MaskX_BaseAPI.SourceType.TwitterHexagon]: SocialAddressType.TwitterBlue,\n    },\n    (x) => {\n        throw new Error(`Unknown source type: ${x}`)\n    },\n)\n\nexport class IdentityService extends IdentityServiceState<ChainId> {\n    private Web3 = new ConnectionReadonlyAPI()\n\n    constructor(protected context: WalletAPI.IOContext) {\n        super()\n    }\n\n    private createSocialAddress(\n        type: SocialAddressType,\n        address: string,\n        label = '',\n        chainId?: ChainId,\n        updatedAt?: string,\n        createdAt?: string,\n        verified?: boolean,\n    ): SocialAddress<ChainId> | undefined {\n        if (isValidAddress(address) && !isZeroAddress(address)) {\n            return {\n                pluginID: NetworkPluginID.PLUGIN_EVM,\n                chainId,\n                type,\n                label,\n                address,\n                updatedAt,\n                createdAt,\n                verified,\n            }\n        }\n        return\n    }\n\n    /** Read a social address from bio. */\n    private async getSocialAddressFromBio({ bio = '' }: SocialIdentity) {\n        const address = getAddress(bio)\n        if (!address) return\n        return this.createSocialAddress(SocialAddressType.Address, address)\n    }\n\n    /** Read a social address from bio when it contains a csb handle. */\n    private async getSocialAddressFromCrossbell({ nickname = '', bio = '' }: SocialIdentity) {\n        const handles = getCrossBellHandles(nickname, bio)\n        if (!handles.length) return\n\n        const allSettled = await Promise.allSettled(\n            handles.map(async (handle) => {\n                const info = await RSS3.getNameInfo(handle)\n                if (!info?.crossbell) return\n                return this.createSocialAddress(SocialAddressType.Crossbell, info.address, info.crossbell)\n            }),\n        )\n        return compact(allSettled.map((x) => (x.status === 'fulfilled' ? x.value : undefined)))\n    }\n\n    /** Read a social address from avatar NextID storage. */\n    private async getSocialAddressFromAvatarNextID({ identifier, publicKey }: SocialIdentity) {\n        const userId = identifier?.userId\n        if (!userId || !publicKey) return\n\n        const response = await NextIDStorageProvider.getByIdentity<{ ownerAddress?: string }>(\n            publicKey,\n            NextIDPlatform.Twitter,\n            userId.toLowerCase(),\n            PluginID.Avatar,\n        )\n\n        if (!response.isOk() || !response.value.ownerAddress) return\n        return this.createSocialAddress(SocialAddressType.Mask, response.value.ownerAddress)\n    }\n\n    /** Read a social address from NextID. */\n    private async getSocialAddressesFromNextID(identity: SocialIdentity) {\n        const listOfAddress = await getWalletAddressesFromNextID(identity)\n        return compact(\n            listOfAddress.map((x) =>\n                this.createSocialAddress(\n                    SocialAddressType.NEXT_ID,\n                    x.identity,\n                    '',\n                    undefined,\n                    x.latest_checked_at,\n                    x.created_at,\n                ),\n            ),\n        )\n    }\n\n    /** Read a social address from nickname, bio if them contain a ENS. */\n    private async getSocialAddressFromENS({ identifier, nickname = '', bio = '' }: SocialIdentity) {\n        const names = getENSNames(identifier?.userId ?? '', nickname, bio)\n        if (!names.length) return\n\n        const allSettled = await Promise.allSettled(\n            names.map(async (name) => {\n                const address = await ENS.lookup(name)\n                if (!address) return\n                return [\n                    this.createSocialAddress(SocialAddressType.ENS, address, name),\n                    this.createSocialAddress(SocialAddressType.Address, address, name),\n                ]\n            }),\n        )\n        return compact(allSettled.flatMap((x) => (x.status === 'fulfilled' ? x.value : undefined)))\n    }\n\n    private async getSocialAddressFromARBID({ identifier, nickname = '', bio = '' }: SocialIdentity) {\n        const names = getARBIDNames(identifier?.userId ?? '', nickname, bio)\n        if (!names.length) return\n\n        const allSettled = await Promise.allSettled(\n            names.map(async (name) => {\n                const address = await ARBID.lookup(name)\n                if (!address) return\n                return [\n                    this.createSocialAddress(SocialAddressType.ARBID, address, name, ChainId.Arbitrum),\n                    this.createSocialAddress(SocialAddressType.Address, address, name, ChainId.Arbitrum),\n                ]\n            }),\n        )\n        return compact(allSettled.flatMap((x) => (x.status === 'fulfilled' ? x.value : undefined)))\n    }\n\n    private async getSocialAddressFromSpaceID({ identifier, nickname = '', bio = '' }: SocialIdentity) {\n        const names = getSIDNames(identifier?.userId ?? '', nickname, bio)\n        if (!names.length) return\n\n        const allSettled = await Promise.allSettled(\n            names.map(async (name) => {\n                const address = await SpaceID.lookup(name)\n                if (!address) return\n                return [\n                    this.createSocialAddress(SocialAddressType.SPACE_ID, address, name, ChainId.BSC),\n                    this.createSocialAddress(SocialAddressType.Address, address, name, ChainId.BSC),\n                ]\n            }),\n        )\n        return compact(allSettled.flatMap((x) => (x.status === 'fulfilled' ? x.value : undefined)))\n    }\n\n    private async getSocialAddressFromLens({ nickname = '', bio = '', homepage = '' }: SocialIdentity) {\n        const names = getLensNames(nickname, bio, homepage)\n        if (!names.length) return\n\n        const allSettled = await Promise.allSettled(\n            names.map(async (name) => {\n                const profile = await Lens.getProfileByHandle(name)\n                if (!profile) return\n                return [\n                    this.createSocialAddress(SocialAddressType.Lens, profile.ownedBy, name),\n                    this.createSocialAddress(SocialAddressType.Address, profile.ownedBy, name),\n                ]\n            }),\n        )\n        return compact(allSettled.flatMap((x) => (x.status === 'fulfilled' ? x.value : undefined)))\n    }\n\n    /** Read a social address from Twitter Blue. */\n    private async getSocialAddressFromTwitterBlue({ identifier }: SocialIdentity) {\n        const userId = identifier?.userId\n        if (!userId) return\n\n        const response = await Twitter.getUserNftContainer(userId)\n        if (!response) return\n        const ownerAddress = await this.Web3.getNonFungibleTokenOwner(response.address, response.token_id, undefined, {\n            chainId: ChainId.Mainnet,\n        })\n        if (!ownerAddress || !isValidAddress(ownerAddress)) return\n        return this.createSocialAddress(\n            SocialAddressType.TwitterBlue,\n            ownerAddress,\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            true,\n        )\n    }\n\n    /** Read social addresses from MaskX */\n    private async getSocialAddressesFromMaskX({ identifier }: SocialIdentity) {\n        const userId = identifier?.userId\n        if (!userId) return\n\n        const response = await MaskX.getIdentitiesExact(userId, MaskX_BaseAPI.PlatformType.Twitter)\n        const results = response.records.filter((x) => {\n            if (!isValidAddress(x.web3_addr) || !x.is_verified) return false\n\n            try {\n                // detect if a valid data source\n                resolveMaskXAddressType(x.source)\n                return true\n            } catch {\n                return false\n            }\n        })\n\n        const allSettled = await Promise.allSettled(\n            results.map(async (y) => {\n                try {\n                    const name = await ENS.reverse(y.web3_addr)\n\n                    return this.createSocialAddress(resolveMaskXAddressType(y.source), y.web3_addr, name)\n                } catch {\n                    return this.createSocialAddress(resolveMaskXAddressType(y.source), y.web3_addr)\n                }\n            }),\n        )\n        return compact(allSettled.map((x) => (x.status === 'fulfilled' ? x.value : undefined)))\n    }\n\n    override async getFromRemote(identity: SocialIdentity, includes?: SocialAddressType[]) {\n        const socialAddressFromMaskX = this.getSocialAddressesFromMaskX(identity)\n        const socialAddressFromNextID = this.getSocialAddressesFromNextID(identity)\n        const allSettled = await Promise.allSettled([\n            this.getSocialAddressFromBio(identity),\n            this.getSocialAddressFromENS(identity),\n            this.getSocialAddressFromSpaceID(identity),\n            this.getSocialAddressFromARBID(identity),\n            this.getSocialAddressFromAvatarNextID(identity),\n            this.getSocialAddressFromCrossbell(identity),\n            this.getSocialAddressFromTwitterBlue(identity),\n            socialAddressFromNextID,\n            socialAddressFromMaskX,\n            this.getSocialAddressFromLens(identity),\n        ])\n        const identities_ = compact(allSettled.flatMap((x) => (x.status === 'fulfilled' ? x.value : [])))\n\n        const identities = uniqBy(identities_, (x) => [x.type, x.label, x.address.toLowerCase()].join('_'))\n        const identitiesFromNextID = await socialAddressFromNextID\n\n        const handle = identity.identifier?.userId\n        const verifiedResult = await Promise.allSettled(\n            uniqBy(identities, (x) => x.address.toLowerCase()).map(async (x) => {\n                const address = x.address.toLowerCase()\n                if (x.verified) return address\n                const isReliable = await Firefly.verifyTwitterHandleByAddress(address, handle)\n                return isReliable ? address : null\n            }),\n        )\n        const trustedAddresses = compact(verifiedResult.map((x) => (x.status === 'fulfilled' ? x.value : null)))\n\n        return identities\n            .filter((x) => trustedAddresses.includes(x.address.toLowerCase()) || x.type === SocialAddressType.Address)\n            .concat(identitiesFromNextID)\n    }\n}\n","import { v4 as uuid } from 'uuid'\nimport type { Subscription } from 'use-subscription'\nimport {\n    MessageStateType,\n    type ReasonableMessage,\n    type TransferableMessage,\n    type MessageState as Web3MessageState,\n} from '@masknet/web3-shared-base'\nimport { type NetworkPluginID, PersistentStorages, type StorageObject, mapSubscription } from '@masknet/shared-base'\nimport type { WalletAPI } from '../../../entry-types.js'\n\nexport class MessageState<Request, Response> implements Web3MessageState<Request, Response> {\n    public storage: StorageObject<{\n        messages: Record<string, ReasonableMessage<Request, Response>>\n    }> = null!\n\n    public messages?: Subscription<Array<ReasonableMessage<Request, Response>>>\n\n    constructor(\n        protected context: WalletAPI.IOContext,\n        protected options: {\n            pluginID: NetworkPluginID\n        },\n    ) {\n        const { storage } = PersistentStorages.Web3.createSubScope(`${this.options.pluginID}_Message`, {\n            messages: {},\n        })\n\n        this.storage = storage\n\n        this.messages = mapSubscription(this.storage.messages.subscription, (storage) => {\n            return Object.values(storage)\n                .filter((x) => x.state === MessageStateType.NOT_DEPEND)\n                .sort((a, z) => a.createdAt.getTime() - z.createdAt.getTime())\n        })\n    }\n\n    get ready() {\n        return this.storage.messages.initialized\n    }\n\n    get readyPromise() {\n        return this.storage.messages.initializedPromise\n    }\n\n    protected assertMessage(id: string) {\n        const message = this.storage.messages.value[id]\n        if (!message) throw new Error('Invalid message ID')\n        return message\n    }\n\n    protected async validateMessage(message: TransferableMessage<Request, Response>) {\n        return true\n    }\n\n    protected async waitForApprovingRequest(id: string): Promise<ReasonableMessage<Request, Response>> {\n        return new Promise((resolve, reject) => {\n            const observe = () => {\n                const message = this.storage.messages.value[id]\n\n                if (message) {\n                    // not a state to be resolved\n                    if (message.state === MessageStateType.NOT_DEPEND) return\n\n                    if (message.state === MessageStateType.APPROVED) resolve(message)\n                    else reject(new Error('User rejected the message.'))\n                } else {\n                    reject(new Error('Invalid request ID'))\n                }\n\n                unsubscribe()\n            }\n\n            const unsubscribe = this.storage.messages.subscription.subscribe(observe)\n            observe()\n        })\n    }\n\n    async applyRequest<T>(\n        message: TransferableMessage<Request, Response>,\n    ): Promise<ReasonableMessage<Request, Response>> {\n        await this.validateMessage(message)\n\n        const ID = uuid()\n        const now = new Date()\n        const message_ = {\n            ...message,\n            ID,\n            state: MessageStateType.NOT_DEPEND,\n            createdAt: now,\n            updatedAt: now,\n        }\n\n        await this.storage.messages.setValue(\n            Object.fromEntries([\n                ...Object.entries(this.storage.messages.value).filter(\n                    // remove those resolved messages\n                    ([_, message]) => message.state === MessageStateType.NOT_DEPEND,\n                ),\n                [ID, message_],\n            ]),\n        )\n\n        return message_\n    }\n\n    async applyAndWaitResponse(\n        message: TransferableMessage<Request, Response>,\n    ): Promise<ReasonableMessage<Request, Response>> {\n        const { ID } = await this.applyRequest(message)\n        const reasonableMessage = await this.waitForApprovingRequest(ID)\n        if (!reasonableMessage.response) throw new Error('Invalid response')\n        return reasonableMessage\n    }\n\n    async updateMessage(id: string, updates: Partial<TransferableMessage<Request, Response>>): Promise<void> {\n        const message = this.assertMessage(id)\n\n        await this.storage.messages.setValue({\n            ...this.storage.messages.value,\n            [id]: {\n                ...message,\n                ...updates,\n                updatedAt: new Date(),\n            },\n        })\n    }\n\n    async approveRequest(id: string, updates?: Request): Promise<Response | void> {\n        const message = this.assertMessage(id)\n\n        await this.updateMessage(id, {\n            request: {\n                ...message.request,\n                ...updates,\n            },\n            state: MessageStateType.APPROVED,\n        })\n    }\n\n    async denyRequest(id: string): Promise<void> {\n        await this.updateMessage(id, {\n            state: MessageStateType.DENIED,\n        })\n    }\n\n    async denyAllRequests(): Promise<void> {\n        await this.storage.messages.setValue(\n            Object.fromEntries(\n                Object.entries(this.storage.messages.value).map(([id, message]) => [\n                    id,\n                    {\n                        ...message,\n                        state: message.state === MessageStateType.NOT_DEPEND ? MessageStateType.DENIED : message.state,\n                    },\n                ]),\n            ),\n        )\n    }\n}\n","import { omitBy } from 'lodash-es'\nimport urlcat from 'urlcat'\nimport type { JsonRpcResponse } from 'web3-core-helpers'\nimport { EMPTY_OBJECT, NetworkPluginID, PopupRoutes, PopupsHistory, Sniffings } from '@masknet/shared-base'\nimport { MessageStateType, type ReasonableMessage } from '@masknet/web3-shared-base'\nimport {\n    createJsonRpcPayload,\n    PayloadEditor,\n    type MessageRequest,\n    type MessageResponse,\n    type TransactionOptions,\n    EthereumMethodType,\n    ErrorEditor,\n} from '@masknet/web3-shared-evm'\nimport { isUndefined } from '@walletconnect/utils'\nimport { MessageState } from '../../Base/state/Message.js'\nimport { ConnectionReadonlyAPI } from '../apis/ConnectionReadonlyAPI.js'\nimport type { WalletAPI } from '../../../entry-types.js'\n\nexport class Message extends MessageState<MessageRequest, MessageResponse> {\n    private Web3 = new ConnectionReadonlyAPI()\n\n    constructor(context: WalletAPI.IOContext) {\n        super(context, { pluginID: NetworkPluginID.PLUGIN_EVM })\n    }\n\n    protected resolveRequest(request: MessageRequest, updates?: MessageRequest): MessageRequest {\n        return {\n            arguments: updates?.arguments\n                ? {\n                      ...request.arguments,\n                      ...updates.arguments,\n                  }\n                : request.arguments,\n            options: updates?.options\n                ? {\n                      ...request.options,\n                      ...updates.options,\n                  }\n                : request.options,\n        }\n    }\n\n    protected async updateRequest(request_: MessageRequest, updates?: MessageRequest): Promise<MessageRequest> {\n        const request = this.resolveRequest(request_, updates)\n\n        const { method, chainId, config } = PayloadEditor.fromMethod(request.arguments.method, request.arguments.params)\n        if (method !== EthereumMethodType.ETH_SEND_TRANSACTION) return request\n\n        // recheck the nonce and update it if needed before sending with the transaction\n        if (config.from && typeof config.nonce !== 'undefined') {\n            const nonce = await this.Web3.getTransactionNonce(config.from, {\n                chainId,\n            })\n\n            if (nonce > config.nonce) {\n                request.arguments.params = [\n                    {\n                        ...config,\n                        nonce,\n                    },\n                ]\n            }\n        }\n\n        return request\n    }\n\n    protected override async waitForApprovingRequest(\n        id: string,\n    ): Promise<ReasonableMessage<MessageRequest, MessageResponse>> {\n        const { request } = this.assertMessage(id)\n\n        if (request.options.silent) {\n            await this.approveRequest(id)\n        } else {\n            // TODO: make this for Mask Wallet only\n            const hasPassword = await this.context.hasPaymentPassword()\n            const route = !hasPassword ? PopupRoutes.SetPaymentPassword : PopupRoutes.ContractInteraction\n\n            const fromState =\n                route !== PopupRoutes.ContractInteraction ? { from: PopupRoutes.ContractInteraction } : EMPTY_OBJECT\n\n            if (Sniffings.is_popup_page && !location.hash.includes('/swap')) {\n                PopupsHistory.push(urlcat(PopupRoutes.Wallet, fromState))\n            } else {\n                // open the popups window and wait for approval from the user.\n                await this.context.openPopupWindow(route, {\n                    source: location.origin,\n                    ...fromState,\n                })\n            }\n        }\n\n        return super.waitForApprovingRequest(id)\n    }\n\n    override async approveRequest(id: string, updates?: MessageRequest): Promise<JsonRpcResponse | void> {\n        const { request: request_ } = this.assertMessage(id)\n\n        const request = await this.updateRequest(request_, updates)\n        const response = await this.context.send(\n            createJsonRpcPayload(0, request.arguments),\n            omitBy<TransactionOptions>(request.options, isUndefined),\n        )\n        const error = ErrorEditor.from(null, response)\n        if (error.presence) return\n\n        await this.updateMessage(id, {\n            request,\n            response,\n            state: MessageStateType.APPROVED,\n        })\n\n        // deny all requests after approving one\n        await this.denyAllRequests()\n\n        return response\n    }\n}\n","import { getEnumAsArray } from '@masknet/kit'\nimport { type StorageItem, NameServiceID, InMemoryStorages, type NetworkPluginID } from '@masknet/shared-base'\nimport { attemptUntil, type NameServiceState as Web3NameServiceState } from '@masknet/web3-shared-base'\nimport type { NameServiceAPI, WalletAPI } from '../../../entry-types.js'\n\nexport class NameServiceState<\n    DomainBook extends Record<string, string> = Record<string, string>,\n    DomainBooks extends Record<NameServiceID, DomainBook> = Record<NameServiceID, DomainBook>,\n> implements Web3NameServiceState\n{\n    public storage: StorageItem<DomainBooks> = null!\n\n    constructor(\n        protected context: WalletAPI.IOContext,\n        protected options: {\n            pluginID: NetworkPluginID\n            isValidName(a: string): boolean\n            isValidAddress(a: string): boolean\n            formatAddress(a: string): string\n        },\n    ) {\n        const { storage } = InMemoryStorages.Web3.createSubScope(`${this.options.pluginID}_NameServiceV2`, {\n            value: Object.fromEntries(getEnumAsArray(NameServiceID).map((x) => [x.value, {}])) as DomainBooks,\n        })\n        this.storage = storage.value\n    }\n\n    get ready() {\n        return this.storage.initialized\n    }\n\n    get readyPromise() {\n        return this.storage.initializedPromise\n    }\n\n    private async addName(id: NameServiceID, address: string, name: string) {\n        if (!this.options.isValidAddress(address)) return\n        const all = this.storage.value\n        const formattedAddress = this.options.formatAddress(address)\n        await this.storage.setValue({\n            ...all,\n            [id]: {\n                ...all[id],\n                [formattedAddress]: name,\n                [name]: formattedAddress,\n            },\n        })\n    }\n\n    private async addAddress(id: NameServiceID, name: string, address: string) {\n        if (!this.options.isValidAddress(address)) return\n        const all = this.storage.value\n        const formattedAddress = this.options.formatAddress(address)\n        await this.storage.setValue({\n            ...all,\n            [id]: {\n                ...all[id],\n                [name]: formattedAddress,\n                [formattedAddress]: name,\n            },\n        })\n    }\n\n    async lookup(name: string) {\n        if (!name) return\n        const callbacks = this.createResolvers().map((resolver) => {\n            return async () => {\n                const address = this.storage.value[resolver.id][name] || (await resolver.lookup?.(name))\n                if (address && this.options.isValidAddress(address)) {\n                    const formattedAddress = this.options.formatAddress(address)\n                    await this.addAddress(resolver.id, name, formattedAddress)\n                    return formattedAddress\n                }\n                return\n            }\n        })\n        return attemptUntil(callbacks, undefined, () => false)\n    }\n\n    async reverse(address: string, domainOnly?: boolean) {\n        if (!this.options.isValidAddress(address)) return\n        const callbacks = this.createResolvers(domainOnly).map((resolver) => {\n            return async () => {\n                let name: string | undefined = this.storage.value[resolver.id][this.options.formatAddress(address)]\n                if (!name) name = await resolver.reverse?.(address)\n                if (name) {\n                    await this.addName(resolver.id, address, name)\n                    return name\n                }\n                return\n            }\n        })\n        return attemptUntil(callbacks, undefined, (result) => !result)\n    }\n\n    async safeReverse(address: string, domainOnly?: boolean) {\n        try {\n            return await this.reverse(address, domainOnly)\n        } catch {}\n        return\n    }\n\n    createResolvers(domainOnly?: boolean): NameServiceAPI.Provider[] {\n        throw new Error('Method not implemented.')\n    }\n}\n","import { NetworkPluginID } from '@masknet/shared-base'\nimport { formatEthereumAddress, isValidAddress, isZeroAddress } from '@masknet/web3-shared-evm'\nimport { NameServiceState } from '../../Base/state/NameService.js'\nimport { ENS } from '../../../ENS/index.js'\nimport { SpaceID } from '../../../SpaceID/index.js'\nimport type { WalletAPI, NameServiceAPI } from '../../../entry-types.js'\nimport { Lens } from '../../../Lens/index.js'\n\nexport class NameService extends NameServiceState {\n    constructor(context: WalletAPI.IOContext) {\n        super(context, {\n            pluginID: NetworkPluginID.PLUGIN_EVM,\n            isValidName: (x) => x !== '0x',\n            isValidAddress: (x) => isValidAddress(x) && !isZeroAddress(x),\n            formatAddress: formatEthereumAddress,\n        })\n    }\n\n    override createResolvers(domainOnly?: boolean) {\n        if (domainOnly) return [ENS, SpaceID] as NameServiceAPI.Provider[]\n        return [ENS, SpaceID, Lens] as NameServiceAPI.Provider[]\n    }\n}\n","import { z } from 'zod'\nimport { isSameURL, type ChainDescriptor } from '@masknet/web3-shared-base'\nimport { type ChainId, type NetworkType, type SchemaType } from '@masknet/web3-shared-evm'\n\nexport function createSchema(descriptors: Array<ChainDescriptor<ChainId, SchemaType, NetworkType>>) {\n    return (\n        z\n            .object({\n                type: z.string(),\n                chainId: z.number().int().gt(0, { message: 'Incorrect chain Id.' }),\n                coinMarketCapChainId: z.string().optional(),\n                coinGeckoChainId: z.string().optional(),\n                coinGeckoPlatformId: z.string().optional(),\n                name: z.string().trim().nonempty(),\n                color: z.string().optional(),\n                fullName: z.string().trim().optional(),\n                shortName: z.string().trim().optional(),\n                network: z.union([z.literal('mainnet'), z.literal('testnet')]),\n                nativeCurrency: z.object({\n                    name: z.string(),\n                    symbol: z.string(),\n                    decimals: z.number(),\n                }),\n                rpcUrl: z\n                    .string()\n                    .trim()\n                    .url('Invalid URL')\n                    .refine((rpc: string) => rpc.startsWith('https://'), 'Required HTTPs URL'),\n                iconUrl: z.string().trim().optional(),\n                explorerUrl: z.object({\n                    url: z.union([z.string().url(), z.literal('')]),\n                    parameters: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),\n                }),\n                features: z.array(z.string()).optional(),\n                isCustomized: z.boolean(),\n            })\n\n            // Validate duplication of rpcUrl\n            .superRefine(async (schema, context) => {\n                const conflict = descriptors.find((x) => isSameURL(x.rpcUrl, schema.rpcUrl))\n\n                if (conflict) {\n                    context.addIssue({\n                        code: z.ZodIssueCode.custom,\n                        path: ['rpcUrl'],\n                        message: `The rpcUrl is already used by ${conflict.name} network.`,\n                    })\n                }\n            })\n    )\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport { type ChainId, type NetworkType, type SchemaType } from '@masknet/web3-shared-evm'\nimport type { ReasonableNetwork, TransferableNetwork } from '@masknet/web3-shared-base'\nimport { NetworkState } from '../../Base/state/Network.js'\nimport { createSchema } from '../schemas/ChainDescriptor.js'\nimport { fetchChainId } from '../../../helpers/fetchChainId.js'\n\nexport class Network extends NetworkState<ChainId, SchemaType, NetworkType> {\n    constructor(context: WalletAPI.IOContext) {\n        super(context, {\n            pluginID: NetworkPluginID.PLUGIN_EVM,\n        })\n    }\n\n    protected override async validateNetwork(\n        network: TransferableNetwork<ChainId, SchemaType, NetworkType>,\n    ): Promise<boolean> {\n        const schema = createSchema(this.networks?.getCurrentValue() ?? [])\n        const result = await schema.safeParseAsync(network)\n        return result.success\n    }\n\n    protected override async pingNetwork(\n        network: ReasonableNetwork<ChainId, SchemaType, NetworkType>,\n    ): Promise<boolean> {\n        if (!network.isCustomized) return true\n        const chainId = await fetchChainId(network.rpcUrl)\n        return network.chainId === chainId\n    }\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport {\n    type ECKeyIdentifier,\n    mapSubscription,\n    mergeSubscription,\n    type Account,\n    NetworkPluginID,\n} from '@masknet/shared-base'\nimport { isSameAddress } from '@masknet/web3-shared-base'\nimport {\n    type ChainId,\n    isValidAddress,\n    NetworkType,\n    ProviderType,\n    type Web3,\n    type Web3Provider,\n    isValidChainId,\n    getInvalidChainId,\n    getDefaultChainId,\n    getDefaultNetworkType,\n    getDefaultProviderType,\n} from '@masknet/web3-shared-evm'\nimport { ChainResolver } from '../apis/ResolverAPI.js'\nimport { Providers } from '../providers/index.js'\nimport { ProviderState } from '../../Base/state/Provider.js'\n\nexport class Provider extends ProviderState<ChainId, ProviderType, NetworkType, Web3Provider, Web3> {\n    protected providers = Providers\n    protected override isValidAddress = isValidAddress\n    protected override isValidChainId = isValidChainId\n    protected override isSameAddress = isSameAddress\n    protected override getInvalidChainId = getInvalidChainId\n    protected override getDefaultNetworkType = getDefaultNetworkType\n    protected override getDefaultProviderType = getDefaultProviderType\n    protected override getDefaultChainId = getDefaultChainId\n    protected override getNetworkTypeFromChainId(chainId: ChainId) {\n        return ChainResolver.networkType(chainId) ?? NetworkType.Ethereum\n    }\n\n    private constructor(io: WalletAPI.IOContext) {\n        super(io)\n    }\n    storage = ProviderState.createStorage(NetworkPluginID.PLUGIN_EVM, getDefaultChainId(), getDefaultProviderType())\n\n    static async new(io: WalletAPI.IOContext) {\n        const provider = new this(io)\n        await provider.setup()\n        return provider\n    }\n\n    protected override async setupSubscriptions() {\n        this.chainId = mapSubscription(\n            mergeSubscription(this.storage.account.subscription),\n            ([account]) => account.chainId,\n        )\n        this.account = mapSubscription(\n            mergeSubscription(this.storage.account.subscription),\n            ([account]) => account.account,\n        )\n        this.networkType = mapSubscription(mergeSubscription(this.storage.account.subscription), ([account]) => {\n            return this.getNetworkTypeFromChainId(account.chainId)\n        })\n        this.providerType = mapSubscription(this.storage.providerType.subscription, (provider) => provider)\n    }\n\n    override async connect(\n        providerType: ProviderType,\n        chainId: ChainId,\n        address?: string | undefined,\n        owner?: {\n            account: string\n            identifier?: ECKeyIdentifier\n        },\n        silent?: boolean,\n    ): Promise<Account<ChainId>> {\n        // Disconnect WalletConnect, prevents its session lasting too long.\n        if (providerType !== ProviderType.WalletConnect && this.providers[ProviderType.WalletConnect].connected) {\n            try {\n                await super.disconnect(ProviderType.WalletConnect)\n            } catch {\n                // do nothing\n            }\n        }\n\n        return super.connect(providerType, chainId, address, owner, silent)\n    }\n}\n","import type { Subscription } from 'use-subscription'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport {\n    InMemoryStorages,\n    mapSubscription,\n    mergeSubscription,\n    type NetworkPluginID,\n    type StorageItem,\n} from '@masknet/shared-base'\nimport type { RiskWarningState as Web3RiskWarningState } from '@masknet/web3-shared-base'\n\nexport class RiskWarningState implements Web3RiskWarningState {\n    public storage: StorageItem<{\n        [key: string]: boolean\n    }> = null!\n    public approved?: Subscription<boolean>\n\n    constructor(\n        protected context: WalletAPI.IOContext,\n        protected subscriptions: {\n            account?: Subscription<string>\n        },\n        protected options: {\n            pluginID: NetworkPluginID\n            formatAddress(a: string): string\n        },\n    ) {\n        const { storage } = InMemoryStorages.Web3.createSubScope(`${this.options.pluginID}_RiskWarning`, {\n            value: {},\n        })\n\n        this.storage = storage.value\n\n        if (this.subscriptions.account) {\n            this.approved = mapSubscription(\n                mergeSubscription(this.subscriptions.account, this.storage.subscription),\n                ([account, storage]) => storage[this.options.formatAddress(account)],\n            )\n        }\n    }\n\n    get ready() {\n        return this.storage.initialized\n    }\n\n    get readyPromise() {\n        return this.storage.initializedPromise\n    }\n\n    async isApproved(address: string) {\n        return Reflect.has(this.storage.value, this.options.formatAddress(address))\n    }\n\n    async approve(address: string, pluginID?: string | undefined) {\n        await this.storage.setValue({\n            ...this.storage.value,\n            [this.options.formatAddress(address)]: true,\n        })\n    }\n\n    async revoke(address: string, pluginID?: string | undefined) {\n        await this.storage.setValue({\n            ...this.storage.value,\n            [this.options.formatAddress(address)]: false,\n        })\n    }\n}\n","const BASE_URL_MAP: Record<typeof process.env.NODE_ENV, string> = {\n    production: 'https://backup.mask.io/api',\n    development: 'https://vaalh28dbi.execute-api.ap-east-1.amazonaws.com/api',\n    test: 'https://vaalh28dbi.execute-api.ap-east-1.amazonaws.com/api',\n}\n\nconst BASE_URL = BASE_URL_MAP[process.env.NODE_ENV]\n\nclass RiskWarningAPI {\n    async approve(address: string, pluginID = '') {\n        await fetch(`${BASE_URL}/v1/risk_warning/confirm`, {\n            method: 'POST',\n            body: JSON.stringify({\n                address,\n                plugin_id: pluginID,\n            }),\n        })\n    }\n}\nexport const RiskWarning = new RiskWarningAPI()\n","import type { Subscription } from 'use-subscription'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport { formatEthereumAddress } from '@masknet/web3-shared-evm'\nimport { RiskWarningState } from '../../Base/state/RiskWarning.js'\nimport { RiskWarning as Warning } from '../../../RiskWarning/index.js'\n\nexport class RiskWarning extends RiskWarningState {\n    constructor(\n        context: WalletAPI.IOContext,\n        subscription: {\n            account?: Subscription<string>\n        },\n    ) {\n        super(context, subscription, {\n            pluginID: NetworkPluginID.PLUGIN_EVM,\n            formatAddress: formatEthereumAddress,\n        })\n    }\n\n    override async approve(address: string, pluginID?: string | undefined) {\n        await Warning.approve(address, pluginID)\n        await super.approve(address)\n    }\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport { SettingsState } from '../../Base/state/Settings.js'\n\nexport class Settings extends SettingsState {\n    constructor(context: WalletAPI.IOContext) {\n        super(context, {\n            pluginID: NetworkPluginID.PLUGIN_EVM,\n        })\n    }\n}\n","import { EMPTY_LIST } from '../constants.js'\n\nexport function safeEmptyList<T>(list?: T[]): T[] {\n    if (!list?.length) return EMPTY_LIST\n    return list\n}\n","import { uniq, uniqBy } from 'lodash-es'\nimport { produce, type Draft } from 'immer'\nimport type { Subscription } from 'use-subscription'\nimport {\n    mapSubscription,\n    mergeSubscription,\n    PersistentStorages,\n    safeEmptyList,\n    type NetworkPluginID,\n    type StorageObject,\n} from '@masknet/shared-base'\nimport {\n    type FungibleToken,\n    type NonFungibleToken,\n    type Token,\n    TokenType,\n    type TokenState as Web3TokenState,\n    type NonFungibleTokenContract,\n    isSameAddress,\n} from '@masknet/web3-shared-base'\nimport type { WalletAPI } from '../../../entry-types.js'\n\nexport interface TokenStorage<ChainId extends number, SchemaType> {\n    fungibleTokenList: Record<string, Array<FungibleToken<ChainId, SchemaType>>>\n    nonFungibleTokenList: Record<string, Array<NonFungibleToken<ChainId, SchemaType>>>\n    fungibleTokenBlockedBy: Record<string, string[]>\n    /** For non-fungible token, we store `${chainId}.${address}.${tokenId}` as token id */\n    nonFungibleTokenBlockedBy: Record<string, string[]>\n    credibleFungibleTokenList: Partial<Record<ChainId, Array<FungibleToken<ChainId, SchemaType>>>>\n    credibleNonFungibleTokenList: Partial<Record<ChainId, Array<NonFungibleToken<ChainId, SchemaType>>>>\n    /** account as key */\n    nonFungibleCollectionMap: Record<\n        string,\n        Array<{\n            contract: NonFungibleTokenContract<ChainId, SchemaType>\n            tokenIds: string[]\n        }>\n    >\n}\n\nexport class TokenState<ChainId extends number, SchemaType> implements Web3TokenState<ChainId, SchemaType> {\n    public storage: StorageObject<TokenStorage<ChainId, SchemaType>> = null!\n    public trustedFungibleTokens?: Subscription<Array<FungibleToken<ChainId, SchemaType>>>\n    public trustedNonFungibleTokens?: Subscription<Array<NonFungibleToken<ChainId, SchemaType>>>\n    public blockedFungibleTokens?: Subscription<Array<FungibleToken<ChainId, SchemaType>>>\n    public blockedNonFungibleTokens?: Subscription<Array<NonFungibleToken<ChainId, SchemaType>>>\n    public credibleFungibleTokens?: Subscription<Array<FungibleToken<ChainId, SchemaType>>>\n    public credibleNonFungibleTokens?: Subscription<Array<NonFungibleToken<ChainId, SchemaType>>>\n    public nonFungibleCollectionMap?: Subscription<\n        Record<\n            string,\n            Array<{\n                contract: NonFungibleTokenContract<ChainId, SchemaType>\n                tokenIds: string[]\n            }>\n        >\n    >\n\n    get ready() {\n        const { storage } = this\n        return (\n            storage.fungibleTokenList.initialized &&\n            storage.nonFungibleTokenList.initialized &&\n            storage.fungibleTokenBlockedBy.initialized &&\n            storage.nonFungibleTokenBlockedBy.initialized &&\n            storage.credibleFungibleTokenList.initialized &&\n            storage.credibleNonFungibleTokenList.initialized &&\n            storage.nonFungibleCollectionMap.initialized\n        )\n    }\n\n    get readyPromise() {\n        const { storage } = this\n        return Promise.all([\n            storage.fungibleTokenList.initializedPromise,\n            storage.nonFungibleTokenList.initializedPromise,\n            storage.fungibleTokenBlockedBy.initializedPromise,\n            storage.nonFungibleTokenBlockedBy.initializedPromise,\n            storage.credibleFungibleTokenList.initializedPromise,\n            storage.credibleNonFungibleTokenList.initializedPromise,\n            storage.nonFungibleCollectionMap.initialized,\n        ]).then(() => {})\n    }\n\n    constructor(\n        protected context: WalletAPI.IOContext,\n        protected defaultValue: TokenStorage<ChainId, SchemaType>,\n        protected subscriptions: {\n            account?: Subscription<string>\n            chainId?: Subscription<ChainId>\n        },\n        protected options: {\n            pluginID: NetworkPluginID\n            isValidAddress(a: string): boolean\n            isSameAddress(a: string, b: string): boolean\n            formatAddress(a: string): string\n        },\n    ) {\n        const { storage } = PersistentStorages.Web3.createSubScope(`${this.options.pluginID}_Token`, defaultValue)\n        this.storage = storage\n\n        if (this.subscriptions.account) {\n            this.trustedFungibleTokens = mapSubscription(\n                mergeSubscription(\n                    this.subscriptions.account,\n                    storage.fungibleTokenList.subscription,\n                    storage.fungibleTokenBlockedBy.subscription,\n                ),\n                ([account, tokens, blockedBy]) => {\n                    const key = account.toLowerCase()\n                    return safeEmptyList(tokens[key]?.filter((x) => !blockedBy[key]?.includes(x.address)))\n                },\n            )\n            this.trustedNonFungibleTokens = mapSubscription(\n                mergeSubscription(\n                    this.subscriptions.account,\n                    storage.nonFungibleTokenList.subscription,\n                    storage.nonFungibleTokenBlockedBy.subscription,\n                ),\n                ([account, tokens, blockedBy]) => {\n                    const key = account.toLowerCase()\n                    return safeEmptyList(tokens[key]?.filter((x) => !blockedBy[key]?.includes(x.address)))\n                },\n            )\n            this.blockedFungibleTokens = mapSubscription(\n                mergeSubscription(\n                    this.subscriptions.account,\n                    storage.fungibleTokenList.subscription,\n                    storage.fungibleTokenBlockedBy.subscription,\n                ),\n                ([account, tokens, blockedBy]) => {\n                    const key = account.toLowerCase()\n                    return safeEmptyList(tokens[key]?.filter((x) => blockedBy[key]?.includes(x.id)))\n                },\n            )\n            this.blockedNonFungibleTokens = mapSubscription(\n                mergeSubscription(\n                    this.subscriptions.account,\n                    storage.nonFungibleTokenList.subscription,\n                    storage.nonFungibleTokenBlockedBy.subscription,\n                ),\n                ([account, tokens, blockedBy]) => {\n                    const key = account.toLowerCase()\n                    return safeEmptyList(tokens[key]?.filter((x) => blockedBy[key]?.includes(x.id)))\n                },\n            )\n            if (this.subscriptions.chainId) {\n                this.credibleFungibleTokens = mapSubscription(\n                    mergeSubscription(this.subscriptions.chainId, storage.credibleFungibleTokenList.subscription),\n                    ([chainId, tokens]) => safeEmptyList(tokens[chainId]),\n                )\n\n                this.credibleNonFungibleTokens = mapSubscription(\n                    mergeSubscription(this.subscriptions.chainId, storage.credibleNonFungibleTokenList.subscription),\n                    ([chainId, tokens]) => safeEmptyList(tokens[chainId]),\n                )\n            }\n        }\n        this.nonFungibleCollectionMap = storage.nonFungibleCollectionMap.subscription\n    }\n\n    // add or remove by contract address from user\n    private async addOrRemoveToken(account: string, token: Token<ChainId, SchemaType>, strategy: 'add' | 'remove') {\n        if (!token.id) throw new Error('Token id is required')\n\n        const key = account.toLowerCase()\n        const tokens: Record<string, Array<Token<ChainId, SchemaType>>> = token.type === TokenType.Fungible\n            ? this.storage.fungibleTokenList.value\n            : this.storage.nonFungibleTokenList.value\n        const id = token.id.toLowerCase()\n\n        const oldList: Array<Token<ChainId, SchemaType>> = tokens[key] ?? []\n        const newList =\n            strategy === 'add'\n                ? uniqBy([{ ...token, id }, ...oldList], (x) => x.id)\n                : oldList.filter((x) => x.id !== id)\n\n        const updatedValue = { ...tokens, [key]: newList }\n\n        if (token.type === TokenType.Fungible) {\n            await this.storage.fungibleTokenList.setValue(\n                updatedValue as Record<string, Array<FungibleToken<ChainId, SchemaType>>>,\n            )\n        } else {\n            await this.storage.nonFungibleTokenList.setValue(\n                updatedValue as Record<string, Array<NonFungibleToken<ChainId, SchemaType>>>,\n            )\n        }\n    }\n\n    // trust or block exist token in token list\n    private async blockOrUnblockToken(account: string, token: Token<ChainId, SchemaType>, strategy: 'trust' | 'block') {\n        if (!token.id) throw new Error('Token id is required')\n\n        const key = account.toLowerCase()\n        const blocked =\n            token.type === TokenType.Fungible\n                ? this.storage.fungibleTokenBlockedBy.value\n                : this.storage.nonFungibleTokenBlockedBy.value\n        const oldList = blocked[key] ?? []\n        const id = token.id.toLowerCase()\n        const blockedUpdated = {\n            ...blocked,\n            [key]:\n                strategy === 'trust'\n                    ? oldList.filter((x) => x.toLowerCase() !== id)\n                    : uniqBy([id, ...oldList], (x) => x.toLowerCase()),\n        }\n\n        if (token.type === TokenType.Fungible) {\n            await this.storage.fungibleTokenBlockedBy.setValue(blockedUpdated)\n        } else {\n            await this.storage.nonFungibleTokenBlockedBy.setValue(blockedUpdated)\n        }\n    }\n\n    async addToken(address: string, token: Token<ChainId, SchemaType>) {\n        this.addOrRemoveToken(address, token, 'add')\n    }\n    async removeToken(address: string, token: Token<ChainId, SchemaType>) {\n        this.addOrRemoveToken(address, token, 'remove')\n    }\n    async trustToken(address: string, token: Token<ChainId, SchemaType>) {\n        this.addOrRemoveToken(address, token, 'remove')\n        this.blockOrUnblockToken(address, token, 'trust')\n    }\n    async blockToken(address: string, token: Token<ChainId, SchemaType>) {\n        this.blockOrUnblockToken(address, token, 'block')\n        this.addOrRemoveToken(address, token, 'add')\n    }\n    async addNonFungibleTokens(\n        owner: string,\n        contract: NonFungibleTokenContract<ChainId, SchemaType>,\n        tokenIds: string[],\n    ) {\n        type StorageCollection = {\n            contract: NonFungibleTokenContract<ChainId, SchemaType>\n            tokenIds: string[]\n        }\n        const key = owner.toLowerCase()\n        const { nonFungibleCollectionMap: collectionMap, nonFungibleTokenBlockedBy: blockedBy } = this.storage\n        const list: StorageCollection[] = collectionMap.value[key] || []\n        const newList = produce(list, (draft) => {\n            const index = draft.findIndex(\n                (x) => x.contract.chainId === contract.chainId && isSameAddress(x.contract.address, contract.address),\n            )\n            const oldRecord = draft[index]\n            if (oldRecord) {\n                // Just override the original record\n                Object.assign(draft[index], {\n                    contract,\n                    tokenIds: uniq([...oldRecord.tokenIds, ...tokenIds]),\n                })\n            } else {\n                draft.push({ contract, tokenIds } as Draft<StorageCollection>)\n            }\n        })\n        await collectionMap.setValue({\n            ...collectionMap.value,\n            [key]: newList,\n        })\n\n        // Also remove from block ids\n        const ids = tokenIds.map((x) => `${contract.chainId}.${contract.address.toLowerCase()}.${x}`)\n        const blockIds = blockedBy.value[key]\n        if (!blockIds?.length) return\n        await blockedBy.setValue({\n            ...blockedBy.value,\n            [key]: blockIds.filter((x) => !ids.includes(x)),\n        })\n    }\n    async removeNonFungibleTokens(\n        owner: string,\n        contract: NonFungibleTokenContract<ChainId, SchemaType>,\n        tokenIds: string[],\n    ) {\n        type StorageCollection = {\n            contract: NonFungibleTokenContract<ChainId, SchemaType>\n            tokenIds: string[]\n        }\n        const key = owner.toLowerCase()\n        const { nonFungibleCollectionMap: collectionMap, nonFungibleTokenBlockedBy: blockedBy } = this.storage\n        const list: StorageCollection[] = collectionMap.value[key] || []\n        const newList = produce(list, (draft) => {\n            const index = draft.findIndex(\n                (x) => x.contract.chainId === contract.chainId && isSameAddress(x.contract.address, contract.address),\n            )\n            const record = draft[index]\n            if (record) {\n                // Just override the original record\n                Object.assign(draft[index], {\n                    contract: record.contract,\n                    tokenIds: record.tokenIds.filter((tokenId) => !tokenIds.includes(tokenId)),\n                })\n            }\n        })\n        await collectionMap.setValue({\n            ...collectionMap.value,\n            [key]: newList,\n        })\n\n        // Also remove from block ids\n        const ids = tokenIds.map((x) => `${contract.chainId}.${contract.address.toLowerCase()}.${x}`)\n        const blockIds = blockedBy.value[key]\n        if (!blockIds?.length) return\n        await blockedBy.setValue({\n            ...blockedBy.value,\n            [key]: blockIds.filter((x) => !ids.includes(x)),\n        })\n    }\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport { queryClient } from '@masknet/shared-base-ui'\nimport { isSameAddress, type FungibleToken, type NonFungibleToken } from '@masknet/web3-shared-base'\nimport {\n    formatEthereumAddress,\n    isValidAddress,\n    isValidChainId,\n    type ChainId,\n    type SchemaType,\n} from '@masknet/web3-shared-evm'\nimport type { Subscription } from 'use-subscription'\nimport { TokenState, type TokenStorage } from '../../Base/state/Token.js'\nimport { HubAPI } from '../apis/HubAPI.js'\nimport { ChainResolver } from '../apis/ResolverAPI.js'\n\nexport class Token extends TokenState<ChainId, SchemaType> {\n    private Hub = new HubAPI().create()\n\n    constructor(\n        context: WalletAPI.IOContext,\n        subscriptions: {\n            account?: Subscription<string>\n            chainId?: Subscription<ChainId>\n        },\n    ) {\n        const defaultValue: TokenStorage<ChainId, SchemaType> = {\n            fungibleTokenList: {},\n            credibleFungibleTokenList: {},\n            nonFungibleTokenList: {},\n            credibleNonFungibleTokenList: {},\n            fungibleTokenBlockedBy: {},\n            nonFungibleTokenBlockedBy: {},\n            nonFungibleCollectionMap: {},\n        }\n        super(context, defaultValue, subscriptions, {\n            pluginID: NetworkPluginID.PLUGIN_EVM,\n            isValidAddress,\n            isSameAddress,\n            formatAddress: formatEthereumAddress,\n        })\n    }\n\n    private async getStoredFungibleTokens(chainId: ChainId) {\n        const storedTokensMap = this.storage.credibleFungibleTokenList.value\n        const storedTokens = storedTokensMap[chainId]\n        if (storedTokens) return storedTokens\n        return queryClient.fetchQuery(['evm', 'get-fungible-token-list', chainId], async () => {\n            const fungibleTokenList = await this.Hub.getFungibleTokensFromTokenList(chainId)\n            // No need to wait for storage\n            this.storage.credibleFungibleTokenList.setValue({\n                ...storedTokensMap,\n                [chainId]: fungibleTokenList.length ? fungibleTokenList : [ChainResolver.nativeCurrency(chainId)],\n            })\n            return fungibleTokenList\n        })\n    }\n\n    async createFungibleToken(\n        chainId: ChainId,\n        address: string,\n        token?: FungibleToken<ChainId, SchemaType>,\n    ): Promise<FungibleToken<ChainId, SchemaType> | undefined> {\n        if (!isValidChainId(chainId) || !address) return\n\n        const fungibleTokens = await this.getStoredFungibleTokens(chainId)\n        const credibleToken = fungibleTokens.find((x) => isSameAddress(x.address, address))\n\n        return credibleToken ?? token\n    }\n\n    async createNonFungibleToken(\n        chainId: ChainId,\n        address: string,\n        token?: NonFungibleToken<ChainId, SchemaType>,\n    ): Promise<NonFungibleToken<ChainId, SchemaType> | undefined> {\n        if (!isValidChainId(chainId) || !address) return\n\n        const nonFungibleTokenListFromStorage = this.storage.credibleNonFungibleTokenList.value\n        const nonFungibleTokenListByChainFromStorage = nonFungibleTokenListFromStorage?.[chainId]\n\n        if (!nonFungibleTokenListByChainFromStorage) {\n            const nonFungibleTokenList = await this.Hub.getNonFungibleTokensFromTokenList(chainId, { chainId })\n            await this.storage.credibleNonFungibleTokenList.setValue({\n                ...nonFungibleTokenListFromStorage,\n                [chainId]: nonFungibleTokenList,\n            })\n\n            const credibleToken = nonFungibleTokenList?.find((x) => isSameAddress(x.address, address))\n            return credibleToken ?? token\n        }\n\n        const credibleToken = nonFungibleTokenListByChainFromStorage.find((x) => isSameAddress(x.address, address))\n        return credibleToken ?? token\n    }\n}\n","import type { Subscription } from 'use-subscription'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport {\n    type ChainId,\n    type Transaction as EVM_Transaction,\n    formatEthereumAddress,\n    isValidChainId,\n    ChainIdList,\n} from '@masknet/web3-shared-evm'\nimport { TransactionState } from '../../Base/state/Transaction.js'\n\nexport class Transaction extends TransactionState<ChainId, EVM_Transaction> {\n    constructor(\n        context: WalletAPI.IOContext,\n        subscriptions: {\n            account?: Subscription<string>\n            chainId?: Subscription<ChainId>\n        },\n    ) {\n        super(context, ChainIdList, subscriptions, {\n            pluginID: NetworkPluginID.PLUGIN_EVM,\n            formatAddress: formatEthereumAddress,\n            isValidChainId,\n        })\n    }\n}\n","import { uniqBy } from 'lodash-es'\nimport type { AbiItem } from 'web3-utils'\nimport { abiCoder } from '@masknet/web3-shared-evm'\nimport type { TransactionMethodABI } from './types.js'\n\n// built-in abis\nimport BulkCheckout from '@masknet/web3-contracts/abis/BulkCheckout.json'\nimport NftRedPacket from '@masknet/web3-contracts/abis/NftRedPacket.json'\nimport HappyRedPacketV4 from '@masknet/web3-contracts/abis/HappyRedPacketV4.json'\nimport ERC20 from '@masknet/web3-contracts/abis/ERC20.json'\nimport ERC721 from '@masknet/web3-contracts/abis/ERC721.json'\nimport RouterV2ABI from '@masknet/web3-contracts/abis/RouterV2.json'\nimport SwapRouter from '@masknet/web3-contracts/abis/SwapRouter.json'\nimport MaskBox from '@masknet/web3-contracts/abis/MaskBox.json'\nimport DODORouteProxy from '@masknet/web3-contracts/abis/DODORouteProxy.json'\nimport WETH from '@masknet/web3-contracts/abis/WETH.json'\nimport BancorNetwork from '@masknet/web3-contracts/abis/BancorNetwork.json'\nimport OpenOceanExchangeV2 from '@masknet/web3-contracts/abis/OpenOceanExchangeV2.json'\nimport ZeroXSwap from '@masknet/web3-contracts/abis/ZeroXSwap.json'\nimport Lido from '@masknet/web3-contracts/abis/Lido.json'\nimport AaveLendingPool from '@masknet/web3-contracts/abis/AaveLendingPool.json'\nimport SmartPayEntryPoint from '@masknet/web3-contracts/abis/SmartPayEntryPoint.json'\nimport WalletContract from '@masknet/web3-contracts/abis/Wallet.json'\nimport Create2Factory from '@masknet/web3-contracts/abis/Create2Factory.json'\nimport LensHub from '@masknet/web3-contracts/abis/LensHub.json'\nimport LensFollowNFT from '@masknet/web3-contracts/abis/LensFollowNFT.json'\nimport Airdrop from '@masknet/web3-contracts/abis/AirdropV2.json'\n\nclass ABI {\n    private abis: Map<string, TransactionMethodABI[]> = new Map()\n\n    constructor() {\n        this.construct(BulkCheckout as AbiItem[]) // donate gitcoin grants\n        this.construct(NftRedPacket as AbiItem[])\n        this.construct(HappyRedPacketV4 as AbiItem[])\n        this.construct(MaskBox as AbiItem[])\n        this.construct(ERC721 as AbiItem[])\n        this.construct(ERC20 as AbiItem[])\n        this.construct(RouterV2ABI as AbiItem[]) // uniswap V2 like\n        this.construct(SwapRouter as AbiItem[]) // uniswap V3 like\n        this.construct(DODORouteProxy as AbiItem[]) // dodo swap\n        this.construct(BancorNetwork as AbiItem[]) // bancor swap\n        this.construct(OpenOceanExchangeV2 as AbiItem[]) // openocean swap\n        this.construct(ZeroXSwap as AbiItem[]) // 0x swap\n        this.construct(WETH as AbiItem[]) // wrap & unwrap\n        this.construct(Lido as AbiItem[]) // lido saving\n        this.construct(AaveLendingPool as AbiItem[]) // Aave saving\n        this.construct(SmartPayEntryPoint as AbiItem[]) // smart pay entrypoint\n        this.construct(WalletContract as AbiItem[]) // Contract Wallet\n        this.construct(Create2Factory as AbiItem[]) // Create2Factory\n        this.construct(LensHub as AbiItem[])\n        this.construct(LensFollowNFT as AbiItem[])\n        this.construct(Airdrop as AbiItem[])\n    }\n\n    read(signature?: string) {\n        if (!signature) return\n        return this.abis.get(signature)\n    }\n    construct(abi: AbiItem[]) {\n        abi.forEach((x) => {\n            if (x.type !== 'function') return\n            if (x.stateMutability === 'pure' || x.stateMutability === 'view') return\n            const { name, inputs = [] } = x\n            if (!name) return\n            try {\n                const signature = abiCoder.encodeFunctionSignature(x)\n\n                const all = uniqBy(\n                    [\n                        ...(this.abis.get(signature) ?? []),\n                        {\n                            name,\n                            parameters:\n                                inputs.map((y) => ({\n                                    name: y.name,\n                                    type: y.type,\n                                    components: y.components,\n                                })) ?? [],\n                        },\n                    ],\n                    (x) => `${x.name}_${x.parameters.map((y) => `${y.type}_${y.name}`)}`,\n                )\n                this.abis.set(signature, all)\n            } catch (error) {\n                console.log('Failed to encode function signature from below ABI:')\n                console.log(x)\n            }\n        })\n    }\n}\n\nlet abi: ABI\n\nexport function readABIs(signature?: string) {\n    return (abi ||= new ABI()).read(signature)\n}\n","import type { TransactionContext, TransactionDescriptor as TransactionDescriptorBase } from '@masknet/web3-shared-base'\nimport { getTokenConstants, type ChainId, type Transaction, type TransactionParameter } from '@masknet/web3-shared-evm'\nimport type { TransactionDescriptor } from '../types.js'\nimport { getTokenAmountDescription } from '../utils.js'\nimport { ConnectionReadonlyAPI } from '../../../apis/ConnectionReadonlyAPI.js'\nimport { HubAPI } from '../../../apis/HubAPI.js'\n\nexport class BaseDescriptor implements TransactionDescriptor {\n    protected Hub = new HubAPI().create()\n    protected Web3 = new ConnectionReadonlyAPI()\n\n    async compute(\n        context: TransactionContext<ChainId, TransactionParameter>,\n    ): Promise<Omit<TransactionDescriptorBase<ChainId, Transaction>, 'type' | '_tx'> | undefined> {\n        const { NATIVE_TOKEN_ADDRESS } = getTokenConstants(context.chainId)\n        const nativeToken = await this.Hub.getFungibleToken(NATIVE_TOKEN_ADDRESS!, { chainId: context.chainId })\n\n        return {\n            chainId: context.chainId,\n            title: context.methods?.find((x) => x.name)?.name ?? 'Contract Interaction',\n            description: getTokenAmountDescription(context.value, nativeToken),\n        }\n    }\n}\n","import type { AbiItem } from 'web3-utils'\nimport { type FungibleToken, scale10, formatBalance } from '@masknet/web3-shared-base'\nimport { type ChainId, type SchemaType, decodeEvents } from '@masknet/web3-shared-evm'\nimport { ContractReadonlyAPI } from '../../apis/ContractReadonlyAPI.js'\nimport { BaseDescriptor } from './descriptors/Base.js'\n\nexport function getTokenAmountDescription(amount = '0', token?: FungibleToken<ChainId, SchemaType>) {\n    const value = scale10(1, 9 + (token?.decimals ?? 18)).isGreaterThanOrEqualTo(amount)\n        ? formatBalance(amount, token?.decimals)\n        : 'infinite'\n\n    return `${value} ${token?.symbol?.trim()}`\n}\n\nexport class DescriptorWithTransactionDecodedReceipt extends BaseDescriptor {\n    private Contract = new ContractReadonlyAPI()\n\n    async getReceipt(\n        chainId: ChainId,\n        contractAddress: string | undefined,\n        abi: AbiItem[] | undefined,\n        hash: string | undefined,\n    ) {\n        if (!hash || !contractAddress || !abi) return\n\n        const receipt = await this.Web3.getTransactionReceipt(hash, { chainId })\n        if (!receipt) return\n\n        const contract = this.Contract.getWeb3Contract(contractAddress, abi)\n        if (!contract) return\n\n        return decodeEvents(contract.options.jsonInterface, receipt.logs)\n    }\n}\n","import type { TransactionContext } from '@masknet/web3-shared-base'\nimport { i18NextInstance } from '@masknet/shared-base'\nimport type { ChainId, TransactionParameter } from '@masknet/web3-shared-evm'\nimport { getTokenAmountDescription } from '../utils.js'\nimport type { TransactionDescriptor } from '../types.js'\nimport { BaseDescriptor } from './Base.js'\n\nexport class TransferTokenDescriptor extends BaseDescriptor implements TransactionDescriptor {\n    override async compute(context: TransactionContext<ChainId, TransactionParameter>) {\n        const token = await this.Web3.getNativeToken({\n            chainId: context.chainId,\n        })\n\n        return {\n            chainId: context.chainId,\n            title: i18NextInstance.t('plugin_infra_descriptor_token_transfer_title'),\n            description: i18NextInstance.t('plugin_infra_descriptor_token_transfer', {\n                tokenAmountDescription: getTokenAmountDescription(context.value, token),\n            }),\n            snackbar: {\n                successfulDescription: i18NextInstance.t('plugin_infra_descriptor_token_transfer_success', {\n                    tokenAmountDescription: getTokenAmountDescription(context.value, token),\n                }),\n                failedDescription: i18NextInstance.t('plugin_infra_descriptor_token_transfer_fail'),\n            },\n        }\n    }\n}\n","import type { TransactionContext } from '@masknet/web3-shared-base'\nimport type { ChainId, TransactionParameter } from '@masknet/web3-shared-evm'\nimport { BaseDescriptor } from './Base.js'\nimport { getTokenAmountDescription } from '../utils.js'\nimport type { TransactionDescriptor } from '../types.js'\n\nexport class ContractDeploymentDescriptor extends BaseDescriptor implements TransactionDescriptor {\n    override async compute(context: TransactionContext<ChainId, TransactionParameter>) {\n        return {\n            chainId: context.chainId,\n            title: 'Contract Deployment',\n            description: `Contract Deployment ${getTokenAmountDescription(\n                context.value,\n                await this.Web3.getNativeToken({\n                    chainId: context.chainId,\n                }),\n            )}`,\n        }\n    }\n}\n","import type { TransactionContext } from '@masknet/web3-shared-base'\nimport type { ChainId, TransactionParameter } from '@masknet/web3-shared-evm'\nimport { BaseDescriptor } from './Base.js'\nimport type { TransactionDescriptor } from '../types.js'\n\nexport class CancelDescriptor extends BaseDescriptor implements TransactionDescriptor {\n    override compute(context: TransactionContext<ChainId, TransactionParameter>) {\n        return Promise.resolve({\n            chainId: context.chainId,\n            title: 'Cancel Transaction',\n        })\n    }\n}\n","import { BigNumber } from 'bignumber.js'\nimport { i18NextInstance } from '@masknet/shared-base'\nimport { type TransactionContext, formatBalance } from '@masknet/web3-shared-base'\nimport { type ChainId, getGitcoinConstant, getNativeTokenAddress } from '@masknet/web3-shared-evm'\nimport type { TransactionDescriptor } from '../types.js'\nimport { BaseDescriptor } from './Base.js'\n\ntype ParameterTuple = {\n    0: string\n    1: string\n    2: string\n    /** #0 */\n    token: string\n    /** #1 */\n    amount: string\n    /** #2 */\n    dest: string\n}\nexport class GitcoinDescriptor extends BaseDescriptor implements TransactionDescriptor {\n    override async compute(context_: TransactionContext<ChainId, string | boolean | undefined>) {\n        const context = context_ as unknown as TransactionContext<ChainId, ParameterTuple[]>\n        if (!context.methods?.length) return\n\n        const GITCOIN_ETH_ADDRESS = getGitcoinConstant(context.chainId, 'GITCOIN_ETH_ADDRESS')\n        const nativeTokenAddress = getNativeTokenAddress(context.chainId)\n\n        for (const { name, parameters } of context.methods) {\n            if (name === 'donate' && parameters) {\n                const tokenAddress = parameters._donations[0].token\n                const address = tokenAddress === GITCOIN_ETH_ADDRESS ? nativeTokenAddress : tokenAddress\n                const token = await this.Hub.getFungibleToken(address, { chainId: context.chainId })\n                const amount = new BigNumber(parameters._donations[0].amount)\n                    .plus(parameters._donations[1].amount)\n                    .toFixed()\n                return {\n                    chainId: context.chainId,\n                    tokenInAddress: address,\n                    tokenInAmount: amount,\n                    title: i18NextInstance.t('plugin_infra_descriptor_gitcoin_donate_title'),\n                    description: i18NextInstance.t('plugin_infra_descriptor_gitcoin_submitted', {\n                        amount: formatBalance(amount, token?.decimals, 6),\n                        symbol: token?.symbol,\n                    }),\n                    snackbar: {\n                        successfulDescription: i18NextInstance.t('plugin_infra_descriptor_gitcoin_donate_success', {\n                            amount: formatBalance(amount, token?.decimals, 6),\n                            symbol: token?.symbol,\n                        }),\n                        failedDescription: i18NextInstance.t('plugin_infra_descriptor_gitcoin_donate_fail'),\n                    },\n                    popup: {\n                        method: name,\n                    },\n                }\n            }\n        }\n\n        return\n    }\n}\n","import type { AbiItem } from 'web3-utils'\nimport { i18NextInstance } from '@masknet/shared-base'\nimport { type TransactionContext, isSameAddress } from '@masknet/web3-shared-base'\nimport { type ChainId, getMaskBoxConstants, type TransactionParameter } from '@masknet/web3-shared-evm'\nimport MaskBox_ABI from '@masknet/web3-contracts/abis/MaskBox.json'\nimport type { TransactionDescriptor } from '../types.js'\nimport { DescriptorWithTransactionDecodedReceipt, getTokenAmountDescription } from '../utils.js'\n\nexport class MaskBoxDescriptor extends DescriptorWithTransactionDecodedReceipt implements TransactionDescriptor {\n    async getPurchaseTokenInfo(chainId: ChainId, contractAddress: string | undefined, hash: string | undefined) {\n        const events = await this.getReceipt(chainId, contractAddress, MaskBox_ABI as AbiItem[], hash)\n\n        const { amount, token_address } = (events?.ClaimPayment?.returnValues ?? {}) as {\n            amount: string\n            token_address: string\n        }\n        if (!token_address) return\n\n        const token = await this.Hub.getFungibleToken(token_address ?? '', { chainId })\n        if (!token) return\n\n        return getTokenAmountDescription(amount, token)\n    }\n\n    override async compute(context_: TransactionContext<ChainId, TransactionParameter>) {\n        const context = context_ as TransactionContext<ChainId>\n\n        const { MASK_BOX_CONTRACT_ADDRESS } = getMaskBoxConstants(context.chainId)\n        if (!isSameAddress(context.to, MASK_BOX_CONTRACT_ADDRESS)) return\n        const method = context.methods?.find((x) => ['claimPayment'].includes(x.name ?? ''))\n\n        if (method?.name === 'claimPayment') {\n            return {\n                chainId: context.chainId,\n                title: i18NextInstance.t('plugin_infra_descriptor_mask_box_purchase_title'),\n                description: i18NextInstance.t('plugin_infra_descriptor_mask_box_purchase'),\n                snackbar: {\n                    successfulDescription: i18NextInstance.t('plugin_infra_descriptor_mask_box_purchase_success', {\n                        tokenAmountDescription: await this.getPurchaseTokenInfo(\n                            context.chainId,\n                            MASK_BOX_CONTRACT_ADDRESS,\n                            context.hash,\n                        ),\n                    }),\n                    failedDescription: i18NextInstance.t('plugin_infra_descriptor_mask_box_purchase_fail'),\n                },\n                popup: {\n                    method: method.name,\n                },\n            }\n        }\n        return\n    }\n}\n","import type { AbiItem } from 'web3-utils'\nimport { i18NextInstance } from '@masknet/shared-base'\nimport {\n    type ChainId,\n    getNftRedPacketConstant,\n    getRedPacketConstants,\n    type TransactionParameter,\n} from '@masknet/web3-shared-evm'\nimport HappyRedPacketV4ABI from '@masknet/web3-contracts/abis/HappyRedPacketV4.json'\nimport NftRedPacketABI from '@masknet/web3-contracts/abis/NftRedPacket.json'\nimport { isSameAddress, type TransactionContext } from '@masknet/web3-shared-base'\nimport type { TransactionDescriptor } from '../types.js'\nimport { DescriptorWithTransactionDecodedReceipt, getTokenAmountDescription } from '../utils.js'\n\nexport class RedPacketDescriptor extends DescriptorWithTransactionDecodedReceipt implements TransactionDescriptor {\n    async getClaimTokenInfo(chainId: ChainId, contractAddress: string | undefined, hash: string | undefined) {\n        const events = await this.getReceipt(chainId, contractAddress, HappyRedPacketV4ABI as AbiItem[], hash)\n\n        const { claimed_value, token_address } = (events?.ClaimSuccess?.returnValues ?? {}) as {\n            claimed_value: string\n            token_address: string\n        }\n        if (!token_address) return\n\n        const token = await this.Hub.getFungibleToken(token_address ?? '', { chainId })\n        if (!token) return\n\n        return getTokenAmountDescription(claimed_value, token)\n    }\n\n    async getRefundTokenInfo(chainId: ChainId, contractAddress: string | undefined, hash: string | undefined) {\n        const events = await this.getReceipt(chainId, contractAddress, HappyRedPacketV4ABI as AbiItem[], hash)\n\n        const { remaining_balance, token_address } = (events?.RefundSuccess?.returnValues ?? {}) as {\n            token_address: string\n            remaining_balance: string\n        }\n\n        if (!token_address) return\n\n        const token = await this.Hub.getFungibleToken(token_address ?? '', { chainId })\n        if (!token) return\n\n        return getTokenAmountDescription(remaining_balance, token)\n    }\n\n    async getClaimedNFTSymbol(chainId: ChainId, contractAddress: string | undefined, hash: string | undefined) {\n        const events = await this.getReceipt(chainId, contractAddress, NftRedPacketABI as AbiItem[], hash)\n\n        const { token_address } = (events?.ClaimSuccess?.returnValues ?? {}) as {\n            token_address: string\n        }\n        if (!token_address) return\n\n        return this.getNonFungibleContractSymbol(chainId, token_address)\n    }\n\n    async getNonFungibleContractSymbol(chainId: ChainId, address: string) {\n        const contract = await this.Web3.getNonFungibleTokenContract(address, undefined, { chainId })\n        return contract?.symbol && contract?.symbol.length > 15\n            ? `${contract?.symbol.slice(0, 12)}...`\n            : contract?.symbol\n    }\n\n    // TODO: 6002: avoid using i18n text in a service. delegate it to ui.\n    override async compute(context_: TransactionContext<ChainId, TransactionParameter>) {\n        const context = context_ as TransactionContext<ChainId>\n\n        const {\n            HAPPY_RED_PACKET_ADDRESS_V1,\n            HAPPY_RED_PACKET_ADDRESS_V2,\n            HAPPY_RED_PACKET_ADDRESS_V3,\n            HAPPY_RED_PACKET_ADDRESS_V4,\n        } = getRedPacketConstants(context.chainId)\n        const RED_PACKET_NFT_ADDRESS = getNftRedPacketConstant(context.chainId, 'RED_PACKET_NFT_ADDRESS')\n        const method = context.methods?.find((x) => ['create_red_packet', 'claim', 'refund'].includes(x.name ?? ''))\n\n        if (\n            [\n                HAPPY_RED_PACKET_ADDRESS_V1,\n                HAPPY_RED_PACKET_ADDRESS_V2,\n                HAPPY_RED_PACKET_ADDRESS_V3,\n                HAPPY_RED_PACKET_ADDRESS_V4,\n            ].some((x) => isSameAddress(x, context.to))\n        ) {\n            if (\n                method?.name === 'create_red_packet' &&\n                method?.parameters?._token_addr &&\n                method?.parameters?._total_tokens\n            ) {\n                const token = await this.Hub.getFungibleToken(method?.parameters?._token_addr ?? '', {\n                    chainId: context.chainId,\n                })\n                const tokenAmountDescription = getTokenAmountDescription(method.parameters?._total_tokens, token)\n                return {\n                    chainId: context.chainId,\n                    tokenInAddress: token?.address,\n                    tokenInAmount: method?.parameters?._total_tokens,\n                    title: i18NextInstance.t('plugin_red_packet_create_with_token_title'),\n                    description: i18NextInstance.t('plugin_red_packet_create_with_token'),\n                    snackbar: {\n                        successfulDescription: i18NextInstance.t('plugin_red_packet_create_with_token_success', {\n                            tokenAmountDescription,\n                        }),\n                        failedDescription: i18NextInstance.t('plugin_red_packet_create_with_token_fail'),\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            } else if (method?.name === 'claim') {\n                const tokenAmountDescription = await this.getClaimTokenInfo(context.chainId, context.to, context.hash)\n\n                return {\n                    chainId: context.chainId,\n                    title: i18NextInstance.t('plugin_red_packet_claim_title'),\n                    description: i18NextInstance.t('plugin_red_packet_claim_notification'),\n                    snackbar: {\n                        successfulDescription: tokenAmountDescription\n                            ? i18NextInstance.t('plugin_red_packet_claim_success', {\n                                  tokenAmountDescription,\n                              })\n                            : i18NextInstance.t('plugin_red_packet_claim_success_without_details'),\n                        failedDescription: i18NextInstance.t('plugin_red_packet_claim_fail'),\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            } else {\n                const tokenAmountDescription = await this.getRefundTokenInfo(context.chainId, context.to, context.hash)\n                return {\n                    chainId: context.chainId,\n                    title: i18NextInstance.t('plugin_red_packet_refund_with_token_title'),\n                    description: i18NextInstance.t('plugin_red_packet_refund_with_token'),\n                    snackbar: {\n                        successfulDescription: tokenAmountDescription\n                            ? i18NextInstance.t('plugin_red_packet_refund_with_token_success', {\n                                  tokenAmountDescription,\n                              })\n                            : i18NextInstance.t('plugin_red_packet_refund_with_token_success_without_detail'),\n                        failedDescription: i18NextInstance.t('plugin_red_packet_refund_with_token_fail'),\n                    },\n                    popup: {\n                        method: method?.name,\n                    },\n                }\n            }\n        } else if (isSameAddress(context.to, RED_PACKET_NFT_ADDRESS)) {\n            if (method?.name === 'create_red_packet') {\n                const symbol = await this.getNonFungibleContractSymbol(\n                    context.chainId,\n                    method.parameters?._token_addr ?? '',\n                )\n                return {\n                    chainId: context.chainId,\n                    title: i18NextInstance.t('plugin_nft_red_packet_create_title'),\n                    description: i18NextInstance.t('plugin_nft_red_packet_create'),\n                    snackbar: {\n                        successfulDescription: symbol\n                            ? i18NextInstance.t('plugin_nft_red_packet_create_success', {\n                                  symbol,\n                              })\n                            : i18NextInstance.t('plugin_nft_red_packet_create_success_without_detail'),\n                        failedDescription: i18NextInstance.t('plugin_red_packet_create_with_token_fail'),\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            } else if (method?.name === 'claim') {\n                const symbol = await this.getClaimedNFTSymbol(context.chainId, RED_PACKET_NFT_ADDRESS, context.hash)\n                return {\n                    chainId: context.chainId,\n                    title: i18NextInstance.t('plugin_nft_red_packet_claim_title'),\n                    description: i18NextInstance.t('plugin_nft_red_packet_claim'),\n                    snackbar: {\n                        successfulDescription: symbol\n                            ? i18NextInstance.t('plugin_nft_red_packet_claim_success', {\n                                  symbol,\n                              })\n                            : i18NextInstance.t('plugin_nft_red_packet_claim_success_without_detail'),\n                        failedDescription: i18NextInstance.t('plugin_red_packet_claim_fail'),\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            }\n        }\n        return\n    }\n}\n","import { BigNumber } from 'bignumber.js'\nimport { i18NextInstance } from '@masknet/shared-base'\nimport { type TransactionContext, isZero, leftShift, pow10, isSameAddress } from '@masknet/web3-shared-base'\nimport {\n    type ChainId,\n    type TransactionParameter,\n    SchemaType,\n    ProviderType,\n    formatEthereumAddress,\n} from '@masknet/web3-shared-evm'\nimport { Web3StateRef } from '../../../apis/Web3StateAPI.js'\nimport { BaseDescriptor } from './Base.js'\nimport type { TransactionDescriptor } from '../types.js'\nimport { getTokenAmountDescription } from '../utils.js'\n\nexport class ERC20Descriptor extends BaseDescriptor implements TransactionDescriptor {\n    override async compute(context_: TransactionContext<ChainId, TransactionParameter>) {\n        const context = context_ as TransactionContext<ChainId>\n        if (!context.methods?.length) return\n\n        for (const { name, parameters } of context.methods) {\n            switch (name) {\n                case 'approve':\n                    if (parameters?.spender === undefined || parameters?.value === undefined) break\n                    const token = await this.Hub.getFungibleToken(context.to ?? '', { chainId: context.chainId })\n\n                    const revokeTitle = i18NextInstance.t('plugin_infra_descriptor_token_revoke_title')\n                    const approveTitle = i18NextInstance.t('plugin_infra_descriptor_token_approve_title')\n                    const revokeDescription = i18NextInstance.t('plugin_infra_descriptor_token_revoke', {\n                        symbol: token?.symbol ?? 'token',\n                    })\n                    const approveDescription = i18NextInstance.t('plugin_infra_descriptor_token_approve', {\n                        tokenAmountDescription: getTokenAmountDescription(parameters?.value, token),\n                    })\n                    const revokeSuccessDescription = i18NextInstance.t('plugin_infra_descriptor_token_revoke_success')\n                    const approveSuccessDescription = i18NextInstance.t(\n                        'plugin_infra_descriptor_token_approve_success',\n                        {\n                            tokenAmountDescription: getTokenAmountDescription(parameters?.value, token),\n                        },\n                    )\n                    const revokeFailedDescription = i18NextInstance.t('plugin_infra_descriptor_token_revoke_fail')\n                    const approveFailedDescription = i18NextInstance.t('plugin_infra_descriptor_token_fail')\n\n                    if (Web3StateRef.value.Provider?.providerType?.getCurrentValue() === ProviderType.MetaMask) {\n                        const spenders = await this.Hub.getFungibleTokenSpenders(context.chainId, context.from, {\n                            chainId: context.chainId,\n                        })\n\n                        const spender = spenders?.find(\n                            (x) =>\n                                isSameAddress(x.address, parameters?.spender) &&\n                                isSameAddress(x.tokenInfo.address, context.to),\n                        )\n\n                        const spendingCap = new BigNumber(spender?.amount ?? spender?.rawAmount ?? 0).toString()\n\n                        const successfulDescription = isZero(parameters.value)\n                            ? isZero(spendingCap)\n                                ? revokeSuccessDescription\n                                : i18NextInstance.t('plugin_infra_descriptor_token_revoke_but_set_positive_cap', {\n                                      tokenAmountDescription: getTokenAmountDescription(spendingCap, token),\n                                      spender: spender?.address\n                                          ? formatEthereumAddress(spender?.address, 4)\n                                          : 'spender',\n                                  })\n                            : isZero(spendingCap)\n                            ? i18NextInstance.t('plugin_infra_descriptor_token_approve_but_set_zero_cap', {\n                                  symbol: token?.symbol,\n                              })\n                            : approveSuccessDescription\n\n                        const successfulTitle =\n                            isZero(parameters.value) && !isZero(spendingCap) ? approveTitle : undefined\n\n                        return {\n                            chainId: context.chainId,\n                            tokenInAddress: token?.address,\n                            title: isZero(parameters.value) ? revokeTitle : approveTitle,\n                            description: isZero(parameters.value) ? revokeDescription : approveDescription,\n                            snackbar: {\n                                successfulDescription,\n                                successfulTitle,\n                                failedDescription: isZero(parameters.value)\n                                    ? revokeFailedDescription\n                                    : approveFailedDescription,\n                            },\n                            popup: {\n                                method: name,\n                            },\n                        }\n                    }\n\n                    if (isZero(parameters.value)) {\n                        return {\n                            chainId: context.chainId,\n                            tokenInAddress: token?.address,\n                            title: revokeTitle,\n                            description: revokeDescription,\n                            popup: {\n                                tokenDescription: token?.symbol ?? 'token',\n                                method: name,\n                            },\n                            snackbar: {\n                                successfulDescription: revokeSuccessDescription,\n                                failedDescription: revokeFailedDescription,\n                            },\n                        }\n                    }\n\n                    return {\n                        chainId: context.chainId,\n                        title: approveTitle,\n                        tokenInAddress: token?.address,\n                        tokenInAmount: parameters?.value,\n                        description: approveDescription,\n                        popup: {\n                            spender: parameters.spender,\n                            tokenDescription: leftShift(parameters?.value, token?.decimals).gt(pow10(9))\n                                ? i18NextInstance.t('popups_wallet_token_infinite_unlock')\n                                : undefined,\n                            method: name,\n                        },\n                        snackbar: {\n                            successfulDescription: approveSuccessDescription,\n                            failedDescription: approveFailedDescription,\n                        },\n                    }\n            }\n\n            if (\n                (name === 'transfer' || name === 'transferFrom') &&\n                parameters?.to &&\n                parameters.value &&\n                !parameters.tokenId\n            ) {\n                const schemaType = await this.Web3.getSchemaType(context.to ?? '', { chainId: context.chainId })\n                if (schemaType === SchemaType.ERC721) return\n                const token = await this.Hub.getFungibleToken(context.to ?? '', { chainId: context.chainId })\n                return {\n                    chainId: context.chainId,\n                    tokenInAddress: token?.address,\n                    tokenInAmount: parameters?.value,\n                    title: i18NextInstance.t('plugin_infra_descriptor_token_transfer_title'),\n                    description: i18NextInstance.t('plugin_infra_descriptor_token_transfer', {\n                        tokenAmountDescription: getTokenAmountDescription(parameters?.value, token),\n                    }),\n                    snackbar: {\n                        successfulDescription: i18NextInstance.t('plugin_infra_descriptor_token_transfer_success', {\n                            tokenAmountDescription: getTokenAmountDescription(parameters?.value, token),\n                        }),\n                        failedDescription: i18NextInstance.t('plugin_infra_descriptor_token_transfer_fail'),\n                    },\n                    popup: {\n                        method: name,\n                    },\n                }\n            }\n        }\n\n        return\n    }\n}\n","import { i18NextInstance } from '@masknet/shared-base'\nimport type { TransactionContext } from '@masknet/web3-shared-base'\nimport type { ChainId, TransactionParameter } from '@masknet/web3-shared-evm'\nimport type { TransactionDescriptor } from '../types.js'\nimport { BaseDescriptor } from './Base.js'\n\nexport class ERC721Descriptor extends BaseDescriptor implements TransactionDescriptor {\n    async getContractSymbol(chainId: ChainId, address: string) {\n        const contract = await this.Web3.getNonFungibleTokenContract(address, undefined, { chainId })\n        return contract?.symbol && contract?.symbol.length > 15\n            ? `${contract?.symbol.slice(0, 12)}...`\n            : contract?.symbol\n    }\n\n    override async compute(context: TransactionContext<ChainId, TransactionParameter>) {\n        if (!context.methods?.length) return\n\n        for (const { name, parameters } of context.methods) {\n            switch (name) {\n                case 'approve': {\n                    const schemaType = await this.Web3.getSchemaType(context.to)\n                    if (parameters?.to === undefined || parameters?.tokenId === undefined || !schemaType) break\n\n                    const symbol = await this.getContractSymbol(context.chainId, context.to)\n\n                    return {\n                        chainId: context.chainId,\n                        title: i18NextInstance.t('plugin_infra_descriptor_nft_approve_title', {\n                            action: 'Unlock',\n                        }),\n                        description: i18NextInstance.t('plugin_infra_descriptor_nft_approve', {\n                            symbol,\n                            action: 'Unlock',\n                        }),\n                        snackbar: {\n                            successfulDescription: i18NextInstance.t('plugin_infra_descriptor_nft_approve_success', {\n                                symbol,\n                                action: 'Unlock',\n                            }),\n                            failedDescription: i18NextInstance.t('plugin_infra_descriptor_nft_approve_fail', {\n                                action: 'unlock',\n                            }),\n                        },\n                        popup: {\n                            method: name,\n                        },\n                    }\n                }\n                case 'setApprovalForAll': {\n                    if (parameters?.operator === undefined || parameters?.approved === undefined) break\n\n                    const action = parameters?.approved === false ? 'Revoke' : 'Unlock'\n                    const symbol = await this.getContractSymbol(context.chainId, context.to)\n\n                    return {\n                        chainId: context.chainId,\n                        title: i18NextInstance.t('plugin_infra_descriptor_nft_approve_title', {\n                            action,\n                        }),\n                        description: i18NextInstance.t('plugin_infra_descriptor_nft_approve', {\n                            symbol,\n                            action,\n                        }),\n                        snackbar: {\n                            successfulDescription:\n                                parameters?.approved === false\n                                    ? i18NextInstance.t('plugin_infra_descriptor_nft_revoke_success', {\n                                          symbol,\n                                          action,\n                                      })\n                                    : i18NextInstance.t('plugin_infra_descriptor_nft_approve_success', {\n                                          symbol,\n                                          action,\n                                      }),\n                            failedDescription: i18NextInstance.t('plugin_infra_descriptor_nft_approve_fail', {\n                                action: action.toLowerCase(),\n                            }),\n                        },\n                        popup: {\n                            erc721Spender:\n                                typeof parameters.operator === 'string' && action === 'Unlock'\n                                    ? parameters.operator\n                                    : undefined,\n                            method: name,\n                        },\n                    }\n                }\n                case 'transferFrom':\n                case 'safeTransferFrom': {\n                    if (!parameters?.tokenId) return\n                    const symbol = await this.getContractSymbol(context.chainId, context.to)\n                    return {\n                        chainId: context.chainId,\n                        title: i18NextInstance.t('plugin_infra_descriptor_nft_transfer_title'),\n                        description: i18NextInstance.t('plugin_infra_descriptor_nft_transfer', { symbol }),\n                        snackbar: {\n                            successfulDescription: i18NextInstance.t('plugin_infra_descriptor_nft_transfer_success', {\n                                symbol,\n                            }),\n                            failedDescription: i18NextInstance.t('plugin_infra_descriptor_nft_transfer_fail'),\n                        },\n                        popup: {\n                            method: name,\n                            tokenId: parameters.tokenId as string,\n                        },\n                    }\n                }\n                default:\n                    return\n            }\n        }\n\n        return\n    }\n}\n","import { first, last } from 'lodash-es'\nimport { i18NextInstance } from '@masknet/shared-base'\nimport UniswapV3MulticallFunctionExactInputABI from '@masknet/web3-contracts/abis/UniswapV3MulticallFunctionExactInput.json'\nimport UniswapV3MulticallFunctionExactInputSingleABI from '@masknet/web3-contracts/abis/UniswapV3MulticallFunctionExactInputSingle.json'\nimport { type TransactionContext, isSameAddress } from '@masknet/web3-shared-base'\nimport {\n    ChainId,\n    type TransactionParameter,\n    getTraderConstants,\n    isNativeTokenAddress,\n    getTokenConstant,\n    abiCoder,\n} from '@masknet/web3-shared-evm'\nimport type { TransactionDescriptor } from '../types.js'\nimport { getTokenAmountDescription } from '../utils.js'\nimport { BaseDescriptor } from './Base.js'\n\nexport class SwapDescriptor extends BaseDescriptor implements TransactionDescriptor {\n    override async compute(context_: TransactionContext<ChainId, TransactionParameter>) {\n        const context = context_ as TransactionContext<ChainId>\n        const { DODO_ETH_ADDRESS, OPENOCEAN_ETH_ADDRESS, ZERO_X_ETH_ADDRESS, BANCOR_ETH_ADDRESS } = getTraderConstants(\n            context.chainId,\n        )\n        if (!context.methods?.find((x) => x.name)) return\n\n        const nativeToken = await this.Web3.getNativeToken({ chainId: context.chainId })\n\n        for (const method of context.methods) {\n            const parameters = method.parameters\n\n            if (method.name === 'swapExactETHForTokens' && parameters?.path && parameters.amountOutMin) {\n                const outputToken = await this.Hub.getFungibleToken(last(parameters.path) ?? '', {\n                    chainId: context.chainId,\n                })\n                return {\n                    chainId: context.chainId,\n                    title: 'Swap Token',\n                    tokenInAddress: nativeToken?.address,\n                    tokenInAmount: context.value,\n                    description: `Swap ${getTokenAmountDescription(context.value, nativeToken)} for ${\n                        outputToken?.symbol ?? ''\n                    }.`,\n                    snackbar: {\n                        successfulDescription: `Swap ${getTokenAmountDescription(\n                            context.value,\n                            nativeToken,\n                        )} for ${getTokenAmountDescription(parameters.amountOutMin, outputToken)} successfully.`,\n                        failedDescription: `Failed to swap ${outputToken?.symbol ?? ''}.`,\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            }\n\n            if (\n                method.name === 'swapExactTokensForETH' &&\n                parameters?.path &&\n                parameters?.amountOutMin &&\n                parameters?.amountIn\n            ) {\n                const outputToken = await this.Hub.getFungibleToken(first(parameters.path) ?? '', {\n                    chainId: context.chainId,\n                })\n                return {\n                    chainId: context.chainId,\n                    title: 'Swap Token',\n                    tokenInAddress: outputToken?.address,\n                    tokenInAmount: parameters?.amountIn,\n                    description: `Swap ${getTokenAmountDescription(parameters.amountIn, outputToken)} for ${\n                        nativeToken?.symbol ?? ''\n                    }.`,\n                    snackbar: {\n                        successfulDescription: `Swap ${getTokenAmountDescription(\n                            parameters.amountIn,\n                            outputToken,\n                        )} for ${getTokenAmountDescription(parameters.amountOutMin, nativeToken)} successfully.`,\n                        failedDescription: `Failed to swap ${nativeToken?.symbol ?? ''}.`,\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            }\n\n            if (\n                method.name === 'swapExactTokensForTokens' &&\n                parameters?.path &&\n                parameters?.amountIn &&\n                parameters?.amountOutMin\n            ) {\n                const tokenIn = await this.Hub.getFungibleToken(first(parameters.path) ?? '', {\n                    chainId: context.chainId,\n                })\n\n                const tokenOut = await this.Hub.getFungibleToken(last(parameters.path) ?? '', {\n                    chainId: context.chainId,\n                })\n\n                return {\n                    chainId: context.chainId,\n                    title: 'Swap Token',\n                    tokenInAddress: tokenIn?.address,\n                    tokenInAmount: parameters.amountIn,\n                    description: `Swap ${getTokenAmountDescription(parameters.amountIn, tokenIn)} for ${\n                        tokenOut?.symbol ?? ''\n                    }.`,\n                    snackbar: {\n                        successfulDescription: `Swap ${getTokenAmountDescription(\n                            parameters.amountIn,\n                            tokenIn,\n                        )} for ${getTokenAmountDescription(parameters.amountOutMin, tokenOut)} successfully.`,\n                        failedDescription: `Failed to swap ${tokenOut?.symbol ?? ''}.`,\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            }\n\n            // DODO\n            if (\n                method.name === 'mixSwap' &&\n                parameters?.fromToken &&\n                parameters?.toToken &&\n                parameters?.fromTokenAmount &&\n                parameters?.minReturnAmount\n            ) {\n                const tokenIn = isSameAddress(parameters.fromToken, DODO_ETH_ADDRESS)\n                    ? nativeToken\n                    : await this.Hub.getFungibleToken(parameters.fromToken ?? '', { chainId: context.chainId })\n                const tokenOut = isSameAddress(parameters.toToken, DODO_ETH_ADDRESS)\n                    ? nativeToken\n                    : await this.Hub.getFungibleToken(parameters.toToken ?? '', { chainId: context.chainId })\n                return {\n                    chainId: context.chainId,\n                    title: 'Swap Token',\n                    tokenInAddress: tokenIn?.address,\n                    tokenInAmount: parameters.fromTokenAmount,\n                    description: `Swap ${getTokenAmountDescription(parameters.fromTokenAmount, tokenIn)} for ${\n                        tokenOut?.symbol ?? ''\n                    }.`,\n                    snackbar: {\n                        successfulDescription: `Swap ${getTokenAmountDescription(\n                            parameters.fromTokenAmount,\n                            tokenIn,\n                        )} for ${getTokenAmountDescription(parameters.minReturnAmount, tokenOut)} successfully.`,\n                        failedDescription: `Failed to swap ${tokenOut?.symbol ?? ''}.`,\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            }\n\n            // DODO: swap DODO for eth\n            if (\n                method.name === 'dodoSwapV2TokenToETH' &&\n                parameters?.fromToken &&\n                parameters?.fromTokenAmount &&\n                parameters?.minReturnAmount\n            ) {\n                const tokenIn = await this.Hub.getFungibleToken(parameters.fromToken ?? '', {\n                    chainId: context.chainId,\n                })\n                const tokenOut = nativeToken\n                return {\n                    chainId: context.chainId,\n                    title: 'Swap Token',\n                    tokenInAddress: tokenIn?.address,\n                    tokenInAmount: parameters.fromTokenAmount,\n                    description: `Swap ${getTokenAmountDescription(parameters.fromTokenAmount, tokenIn)} for ${\n                        tokenOut?.symbol ?? ''\n                    }.`,\n                    snackbar: {\n                        successfulDescription: `Swap ${getTokenAmountDescription(\n                            parameters.fromTokenAmount,\n                            tokenIn,\n                        )} for ${getTokenAmountDescription(parameters.minReturnAmount, tokenOut)} successfully.`,\n                        failedDescription: `Failed to swap ${tokenOut?.symbol ?? ''}.`,\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            }\n\n            // Openocean\n            if (method.name === 'swap') {\n                const _parameters = parameters as\n                    | {\n                          [key: string]:\n                              | {\n                                    [key: string]: string\n                                }\n                              | undefined\n                      }\n                    | undefined\n                if (\n                    !_parameters?.[1]?.srcToken ||\n                    !_parameters?.[1]?.dstToken ||\n                    !_parameters?.[1]?.amount ||\n                    !_parameters?.[1]?.minReturnAmount\n                )\n                    return\n                const tokenIn = isSameAddress(_parameters[1].srcToken, OPENOCEAN_ETH_ADDRESS)\n                    ? nativeToken\n                    : await this.Hub.getFungibleToken(_parameters[1].srcToken ?? '', { chainId: context.chainId })\n                const tokenOut = isSameAddress(_parameters[1].dstToken, OPENOCEAN_ETH_ADDRESS)\n                    ? nativeToken\n                    : await this.Hub.getFungibleToken(_parameters[1].dstToken ?? '', { chainId: context.chainId })\n                return {\n                    chainId: context.chainId,\n                    title: 'Swap Token',\n                    tokenInAddress: tokenIn?.address,\n                    tokenInAmount: _parameters[1].amount,\n                    description: `Swap ${getTokenAmountDescription(_parameters[1].amount, tokenIn)} for ${\n                        tokenOut?.symbol ?? ''\n                    }.`,\n                    snackbar: {\n                        successfulDescription: `Swap ${getTokenAmountDescription(\n                            _parameters[1].amount,\n                            tokenIn,\n                        )} for ${getTokenAmountDescription(_parameters?.[1]?.minReturnAmount, tokenOut)} successfully.`,\n                        failedDescription: `Failed to swap ${tokenOut?.symbol ?? ''}.`,\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            }\n\n            if (\n                method.name === 'transformERC20' &&\n                parameters?.inputToken &&\n                parameters?.inputTokenAmount &&\n                parameters?.minOutputTokenAmount &&\n                parameters?.outputToken\n            ) {\n                const tokenIn = isSameAddress(parameters.inputToken, ZERO_X_ETH_ADDRESS)\n                    ? nativeToken\n                    : await this.Hub.getFungibleToken(parameters.inputToken ?? '', { chainId: context.chainId })\n                const tokenOut = isSameAddress(parameters.outputToken, ZERO_X_ETH_ADDRESS)\n                    ? nativeToken\n                    : await this.Hub.getFungibleToken(parameters.outputToken ?? '', { chainId: context.chainId })\n                return {\n                    chainId: context.chainId,\n                    title: 'Swap Token',\n                    tokenInAddress: tokenIn?.address,\n                    tokenInAmount: parameters.inputTokenAmount,\n                    description: `Swap ${getTokenAmountDescription(parameters.inputTokenAmount, tokenIn)} for ${\n                        tokenOut?.symbol ?? ''\n                    }.`,\n                    snackbar: {\n                        successfulDescription: `Swap ${getTokenAmountDescription(\n                            parameters.inputTokenAmount,\n                            tokenIn,\n                        )} for ${getTokenAmountDescription(parameters.minOutputTokenAmount, tokenOut)} successfully.`,\n                        failedDescription: `Failed to swap ${tokenOut?.symbol ?? ''}.`,\n                    },\n                }\n            }\n            // Bancor\n            if (\n                method.name === 'convertByPath' &&\n                parameters?._amount &&\n                parameters?._beneficiary &&\n                parameters?._minReturn &&\n                parameters?._path\n            ) {\n                const tokenInAddress = first(parameters._path)\n                const tokenOutAddress = last(parameters._path)\n                const tokenIn = isSameAddress(tokenInAddress, BANCOR_ETH_ADDRESS)\n                    ? nativeToken\n                    : await this.Hub.getFungibleToken(tokenInAddress ?? '', { chainId: context.chainId })\n                const tokenOut = isSameAddress(tokenOutAddress, BANCOR_ETH_ADDRESS)\n                    ? nativeToken\n                    : await this.Hub.getFungibleToken(tokenOutAddress ?? '', { chainId: context.chainId })\n                return {\n                    chainId: context.chainId,\n                    title: 'Swap Token',\n                    tokenInAddress: tokenIn?.address,\n                    tokenInAmount: parameters._amount,\n                    description: `Swap ${getTokenAmountDescription(parameters._amount, tokenIn)} for ${\n                        tokenOut?.symbol ?? ''\n                    }.`,\n                    snackbar: {\n                        successfulDescription: `Swap ${getTokenAmountDescription(\n                            parameters._amount,\n                            tokenIn,\n                        )} for ${getTokenAmountDescription(parameters._minReturn, tokenOut)} successfully.`,\n                        failedDescription: `Failed to swap ${tokenOut?.symbol ?? ''}.`,\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            }\n            // Uniswap V3\n            if (method.name === 'multicall' && method.parameters?.[0]?.[0]) {\n                try {\n                    const results = abiCoder.decodeParameters(\n                        context.chainId === ChainId.Arbitrum\n                            ? UniswapV3MulticallFunctionExactInputSingleABI\n                            : UniswapV3MulticallFunctionExactInputABI,\n                        method.parameters[0][0].slice(10),\n                    ) as {\n                        [key: string]: string[]\n                    }\n                    let path: string\n                    let tokenInAddress: string\n                    let tokenOutAddress: string\n                    let recipient: string\n                    let amountIn: string\n                    let amountOutMinimum: string\n                    if (context.chainId === ChainId.Arbitrum) {\n                        const WETH_ADDRESS = getTokenConstant(context.chainId, 'WETH_ADDRESS')\n\n                        ;[tokenInAddress, tokenOutAddress, , recipient, , amountIn, amountOutMinimum] = results['0']\n\n                        if (isSameAddress(WETH_ADDRESS, tokenOutAddress) && isNativeTokenAddress(recipient)) {\n                            tokenOutAddress = nativeToken?.address ?? ''\n                        }\n                    } else {\n                        ;[path, tokenOutAddress, , amountIn, amountOutMinimum] = results['0']\n                        tokenInAddress = path.slice(0, 42)\n                    }\n\n                    const tokenIn = isNativeTokenAddress(tokenInAddress)\n                        ? nativeToken\n                        : await this.Hub.getFungibleToken(tokenInAddress ?? '', { chainId: context.chainId })\n                    const tokenOut = isNativeTokenAddress(tokenOutAddress)\n                        ? nativeToken\n                        : await this.Hub.getFungibleToken(tokenOutAddress ?? '', { chainId: context.chainId })\n                    return {\n                        chainId: context.chainId,\n                        title: 'Swap Token',\n                        tokenInAddress: tokenIn?.address,\n                        tokenInAmount: amountIn,\n                        description: `Swap ${getTokenAmountDescription(amountIn, tokenIn)} for ${\n                            tokenOut?.symbol ?? ''\n                        }.`,\n                        snackbar: {\n                            successfulDescription: `Swap ${getTokenAmountDescription(\n                                amountIn,\n                                tokenIn,\n                            )} for ${getTokenAmountDescription(amountOutMinimum, tokenOut)} successfully.`,\n                            failedDescription: `Failed to swap ${tokenOut?.symbol ?? ''}.`,\n                        },\n                        popup: {\n                            method: method.name,\n                        },\n                    }\n                } catch {\n                    return {\n                        chainId: context.chainId,\n                        title: 'Swap Token',\n                        description: 'Swap with Uniswap V3',\n                        popup: {\n                            method: method.name,\n                        },\n                    }\n                }\n            }\n            // 0x ETH mainnet\n            if (\n                ['sellToUniswap', 'sellToPancakeSwap'].includes(method.name ?? '') &&\n                parameters?.minBuyAmount &&\n                parameters?.sellAmount &&\n                parameters?.tokens\n            ) {\n                const tokenInAddress = first(parameters.tokens)\n                const tokenOutAddress = last(parameters.tokens)\n                const tokenIn = isSameAddress(tokenInAddress, ZERO_X_ETH_ADDRESS)\n                    ? nativeToken\n                    : await this.Hub.getFungibleToken(tokenInAddress ?? '', { chainId: context.chainId })\n                const tokenOut = isSameAddress(tokenOutAddress, ZERO_X_ETH_ADDRESS)\n                    ? nativeToken\n                    : await this.Hub.getFungibleToken(tokenOutAddress ?? '', { chainId: context.chainId })\n                return {\n                    chainId: context.chainId,\n                    title: 'Swap Token',\n                    tokenInAddress: tokenIn?.address,\n                    tokenInAmount: parameters.sellAmount,\n                    description: `Swap ${getTokenAmountDescription(parameters.sellAmount, tokenIn)} for ${\n                        tokenOut?.symbol ?? ''\n                    }.`,\n                    snackbar: {\n                        successfulDescription: `Swap ${getTokenAmountDescription(\n                            parameters.sellAmount,\n                            tokenIn,\n                        )} for ${getTokenAmountDescription(parameters.minBuyAmount, tokenOut)} successfully.`,\n                        failedDescription: `Failed to swap ${tokenOut?.symbol ?? ''}.`,\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            }\n\n            // Wrap & Unwrap, e.g. WETH <=> ETH\n            if (['withdraw', 'deposit'].includes(method.name ?? '')) {\n                const actionName =\n                    method.name === 'withdraw'\n                        ? i18NextInstance.t('plugin_trader_unwrap')\n                        : i18NextInstance.t('plugin_trader_wrap')\n                const amount = method.name === 'withdraw' ? parameters?.wad : context.value\n                const withdrawToken = await this.Hub.getFungibleToken(context.to ?? '', { chainId: context.chainId })\n                const tokenIn = method.name === 'withdraw' ? withdrawToken : nativeToken\n                const tokenOut = method.name === 'withdraw' ? nativeToken : withdrawToken\n                return {\n                    chainId: context.chainId,\n                    title: `${actionName} Token`,\n                    tokenInAddress: tokenIn?.address,\n                    tokenInAmount: amount,\n                    description: `${actionName} ${getTokenAmountDescription(amount, tokenIn)} for ${\n                        tokenOut?.symbol ?? ''\n                    }.`,\n                    snackbar: {\n                        successfulDescription: `${actionName} ${getTokenAmountDescription(\n                            amount,\n                            tokenIn,\n                        )} for ${getTokenAmountDescription(amount, tokenOut)} successfully.`,\n                        failedDescription: `Failed to ${actionName} ${tokenOut?.symbol ?? ''}.`,\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            }\n\n            if (\n                method.name === 'swapExactTokensForAVAX' &&\n                parameters?.amountIn &&\n                parameters?.amountOutMin &&\n                parameters?.path\n            ) {\n                const tokenIn = await this.Hub.getFungibleToken(first(parameters.path) ?? '', {\n                    chainId: context.chainId,\n                })\n                const tokenOut = nativeToken\n\n                return {\n                    chainId: context.chainId,\n                    title: 'Swap Token',\n                    tokenInAddress: tokenIn?.address,\n                    tokenInAmount: parameters.amountIn,\n                    description: `Swap ${getTokenAmountDescription(parameters.amountIn, tokenIn)} for ${\n                        tokenOut?.symbol ?? ''\n                    }.`,\n                    snackbar: {\n                        successfulDescription: `Swap ${getTokenAmountDescription(\n                            parameters.amountIn,\n                            tokenIn,\n                        )} for ${getTokenAmountDescription(parameters.amountOutMin, tokenOut)} successfully.`,\n                        failedDescription: `Failed to swap ${tokenOut?.symbol ?? ''}.`,\n                    },\n                    popup: {\n                        method: method.name,\n                    },\n                }\n            }\n        }\n        return\n    }\n}\n","import { i18NextInstance } from '@masknet/shared-base'\nimport type { TransactionContext } from '@masknet/web3-shared-base'\nimport type { ChainId, TransactionParameter } from '@masknet/web3-shared-evm'\nimport { getTokenAmountDescription } from '../utils.js'\nimport type { TransactionDescriptor } from '../types.js'\nimport { BaseDescriptor } from './Base.js'\n\nexport class SavingsDescriptor extends BaseDescriptor implements TransactionDescriptor {\n    override async compute(context_: TransactionContext<ChainId, TransactionParameter>) {\n        const context = context_ as TransactionContext<ChainId>\n        if (!context.methods?.length) return\n\n        for (const { name, parameters } of context.methods) {\n            // Lido\n            if (name === 'submit' && parameters?._referral) {\n                const token = await this.Web3.getNativeToken({\n                    chainId: context.chainId,\n                })\n\n                return {\n                    chainId: context.chainId,\n                    tokenInAddress: token?.address,\n                    tokenInAmount: context.value,\n                    title: i18NextInstance.t('plugin_infra_descriptor_token_deposit_title'),\n                    description: i18NextInstance.t('plugin_infra_descriptor_token_deposit', {\n                        tokenAmountDescription: getTokenAmountDescription(context.value, token),\n                    }),\n                    snackbar: {\n                        successfulDescription: i18NextInstance.t('plugin_infra_descriptor_token_deposit_success', {\n                            tokenAmountDescription: getTokenAmountDescription(context.value, token),\n                        }),\n                        failedDescription: i18NextInstance.t('plugin_infra_descriptor_token_deposit_fail', {\n                            symbol: token?.symbol ?? 'token',\n                        }),\n                    },\n                    popup: {\n                        method: name,\n                    },\n                }\n            }\n\n            // Aave\n            if (name === 'deposit' && parameters?.amount && parameters?.asset) {\n                const token = await this.Hub.getFungibleToken(parameters?.asset ?? '', { chainId: context.chainId })\n\n                return {\n                    chainId: context.chainId,\n                    tokenInAddress: token?.address,\n                    tokenInAmount: parameters?.amount,\n                    title: i18NextInstance.t('plugin_infra_descriptor_token_deposit_title'),\n                    description: i18NextInstance.t('plugin_infra_descriptor_token_deposit', {\n                        tokenAmountDescription: getTokenAmountDescription(parameters?.amount, token),\n                    }),\n                    snackbar: {\n                        successfulDescription: i18NextInstance.t('plugin_infra_descriptor_token_deposit_success', {\n                            tokenAmountDescription: getTokenAmountDescription(parameters?.amount, token),\n                        }),\n                        failedDescription: i18NextInstance.t('plugin_infra_descriptor_token_deposit_fail', {\n                            symbol: token?.symbol ?? 'token',\n                        }),\n                    },\n                    popup: {\n                        method: name,\n                    },\n                }\n            }\n\n            if (name === 'withdraw' && parameters?.amount && parameters?.asset) {\n                const token = await this.Hub.getFungibleToken(parameters?.asset ?? '', { chainId: context.chainId })\n\n                return {\n                    chainId: context.chainId,\n                    tokenInAddress: token?.address,\n                    tokenInAmount: parameters?.amount,\n                    title: i18NextInstance.t('plugin_infra_descriptor_token_withdraw_title'),\n                    description: i18NextInstance.t('plugin_infra_descriptor_token_withdraw', {\n                        tokenAmountDescription: getTokenAmountDescription(parameters?.amount, token),\n                    }),\n                    snackbar: {\n                        successfulDescription: i18NextInstance.t('plugin_infra_descriptor_token_withdraw_success', {\n                            tokenAmountDescription: getTokenAmountDescription(parameters?.amount, token),\n                        }),\n                        failedDescription: i18NextInstance.t('plugin_infra_descriptor_token_withdraw_fail', {\n                            symbol: token?.symbol ?? 'token',\n                        }),\n                    },\n                    popup: {\n                        method: name,\n                    },\n                }\n            }\n        }\n\n        return\n    }\n}\n","import type { TransactionContext } from '@masknet/web3-shared-base'\nimport type { ChainId, TransactionParameter } from '@masknet/web3-shared-evm'\nimport { BaseDescriptor } from './Base.js'\nimport type { TransactionDescriptor } from '../types.js'\n\nexport class SmartPayDescriptor extends BaseDescriptor implements TransactionDescriptor {\n    override async compute(context_: TransactionContext<ChainId, TransactionParameter>) {\n        const context = context_ as TransactionContext<ChainId>\n        if (!context.methods?.length) return\n\n        for (const { name, parameters } of context.methods) {\n            switch (name) {\n                case 'fund':\n                    if (!parameters?.owner || !parameters.nonce) break\n                    return {\n                        chainId: context.chainId,\n                        title: 'Create Smart Pay wallet',\n                        description: 'Transaction submitted.',\n                        snackbar: {\n                            successfulDescription: 'Created a SmartPay wallet on Polygon network.',\n                            failedDescription: '',\n                        },\n                        popup: {\n                            method: name,\n                        },\n                    }\n                case 'deploy':\n                    return {\n                        chainId: context.chainId,\n                        title: 'Deploy Smarty Pay wallet',\n                        description: 'Transaction submitted.',\n                        snackbar: {\n                            successfulDescription: 'Deploy a SmartPay wallet on Polygon network.',\n                            failedDescription: '',\n                        },\n                        popup: {\n                            method: name,\n                        },\n                    }\n                case 'changeOwner':\n                    return {\n                        chainId: context.chainId,\n                        title: 'Change Owner',\n                        description: 'Transaction submitted.',\n                        snackbar: {\n                            successfulDescription: 'Change owner Successfully.',\n                            failedDescription: '',\n                        },\n                        popup: {\n                            method: name,\n                        },\n                    }\n                default:\n                    continue\n            }\n        }\n        return\n    }\n}\n","import type { TransactionContext } from '@masknet/web3-shared-base'\nimport type { ChainId, TransactionParameter } from '@masknet/web3-shared-evm'\nimport { BaseDescriptor } from './Base.js'\nimport type { TransactionDescriptor } from '../types.js'\n\nexport class LensDescriptor extends BaseDescriptor implements TransactionDescriptor {\n    override async compute(context_: TransactionContext<ChainId, TransactionParameter>) {\n        const context = context_ as TransactionContext<ChainId>\n        if (!context.methods?.length) return\n\n        for (const { name } of context.methods) {\n            switch (name) {\n                case 'followWithSig':\n                    return {\n                        chainId: context.chainId,\n                        title: 'Follow User',\n                        description: 'Transaction submitted.',\n                        snackbar: {\n                            failedDescription: 'Transaction was Rejected!',\n                        },\n                        popup: {\n                            method: name,\n                        },\n                    }\n            }\n        }\n        return\n    }\n}\n","import { type TransactionContext } from '@masknet/web3-shared-base'\nimport { type ChainId, type TransactionParameter } from '@masknet/web3-shared-evm'\nimport { BaseDescriptor } from './Base.js'\nimport { getTokenAmountDescription } from '../utils.js'\nimport type { TransactionDescriptor } from '../types.js'\nimport { AirdropAPI } from '../../../../../Airdrop/index.js'\n\nexport class AirdropDescriptor extends BaseDescriptor implements TransactionDescriptor {\n    private Airdrop = new AirdropAPI()\n\n    override async compute(context_: TransactionContext<ChainId, TransactionParameter>) {\n        const context = context_ as TransactionContext<ChainId>\n        if (!context.methods?.length) return\n\n        for (const { name, parameters } of context.methods) {\n            if (name === 'claim' && parameters?._eventIndex !== undefined) {\n                const result = await this.Airdrop.getPoolInfo(context.chainId, parameters._eventIndex)\n                const token = result?.token\n                    ? await this.Hub.getFungibleToken(result.token, { chainId: context.chainId })\n                    : undefined\n                return {\n                    chainId: context.chainId,\n                    title: 'Claim your Airdrop',\n                    description: 'Transaction submitted.',\n                    snackbar: {\n                        successfulDescription: `${getTokenAmountDescription(\n                            parameters?._amount,\n                            token,\n                        )} were successfully claimed`,\n                        failedDescription: 'Transaction was Rejected!',\n                    },\n                    popup: {\n                        method: name,\n                    },\n                }\n            }\n        }\n        return\n    }\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport type {\n    TransactionContext,\n    TransactionDescriptor,\n    TransactionFormatterState as Web3TransactionFormatterState,\n} from '@masknet/web3-shared-base'\n\nexport class TransactionFormatterState<ChainId, TransactionParameter, Transaction>\n    implements Web3TransactionFormatterState<ChainId, TransactionParameter, Transaction>\n{\n    constructor(context: WalletAPI.IOContext) {}\n\n    async formatTransaction(chainId: ChainId, transaction: Transaction, txHash?: string) {\n        const context = await this.createContext(chainId, transaction, txHash)\n        return this.createDescriptor(chainId, transaction, context)\n    }\n    createContext(\n        chainId: ChainId,\n        transaction: Transaction,\n        txHash?: string,\n    ): Promise<TransactionContext<ChainId, TransactionParameter>> {\n        throw new Error('Method not implemented.')\n    }\n    createDescriptor(\n        chainId: ChainId,\n        transaction: Transaction,\n        context: TransactionContext<ChainId, TransactionParameter>,\n    ): Promise<TransactionDescriptor<ChainId, Transaction, TransactionParameter>> {\n        throw new Error('Method not implemented.')\n    }\n}\n","import {\n    type TransactionContext,\n    type TransactionDescriptor as TransactionDescriptorBase,\n    TransactionDescriptorType,\n} from '@masknet/web3-shared-base'\nimport {\n    abiCoder,\n    AccountTransaction,\n    type ChainId,\n    isEmptyHex,\n    isZeroAddress,\n    type Transaction,\n    type TransactionParameter,\n} from '@masknet/web3-shared-evm'\nimport { readABIs } from './TransactionFormatter/abi.js'\nimport type { TransactionDescriptor } from './TransactionFormatter/types.js'\nimport type { WalletAPI } from '../../../entry-types.js'\n\n// built-in descriptors\nimport { TransferTokenDescriptor } from './TransactionFormatter/descriptors/TransferToken.js'\nimport { ContractDeploymentDescriptor } from './TransactionFormatter/descriptors/ContractDeployment.js'\nimport { CancelDescriptor } from './TransactionFormatter/descriptors/Cancel.js'\nimport { BaseDescriptor } from './TransactionFormatter/descriptors/Base.js'\nimport { GitcoinDescriptor } from './TransactionFormatter/descriptors/Gitcoin.js'\nimport { MaskBoxDescriptor } from './TransactionFormatter/descriptors/MaskBox.js'\nimport { RedPacketDescriptor } from './TransactionFormatter/descriptors/RedPacket.js'\nimport { ERC20Descriptor } from './TransactionFormatter/descriptors/ERC20.js'\nimport { ERC721Descriptor } from './TransactionFormatter/descriptors/ERC721.js'\nimport { SwapDescriptor } from './TransactionFormatter/descriptors/Swap.js'\nimport { SavingsDescriptor } from './TransactionFormatter/descriptors/Savings.js'\nimport { SmartPayDescriptor } from './TransactionFormatter/descriptors/SmartPay.js'\nimport { LensDescriptor } from './TransactionFormatter/descriptors/Lens.js'\nimport { AirdropDescriptor } from './TransactionFormatter/descriptors/Airdrop.js'\nimport { TransactionFormatterState } from '../../Base/state/TransactionFormatter.js'\nimport { ConnectionReadonlyAPI } from '../apis/ConnectionReadonlyAPI.js'\n\nexport class TransactionFormatter extends TransactionFormatterState<ChainId, TransactionParameter, Transaction> {\n    private Web3 = new ConnectionReadonlyAPI()\n\n    private descriptors: Record<TransactionDescriptorType, TransactionDescriptor[]> = {\n        [TransactionDescriptorType.TRANSFER]: [new TransferTokenDescriptor()],\n        [TransactionDescriptorType.INTERACTION]: [\n            new AirdropDescriptor(),\n            new LensDescriptor(),\n            new SavingsDescriptor(),\n            new GitcoinDescriptor(),\n            new MaskBoxDescriptor(),\n            new RedPacketDescriptor(),\n            new SmartPayDescriptor(),\n            new ERC20Descriptor(),\n            new ERC721Descriptor(),\n            new SwapDescriptor(),\n            new BaseDescriptor(),\n        ],\n        [TransactionDescriptorType.DEPLOYMENT]: [new ContractDeploymentDescriptor()],\n        [TransactionDescriptorType.RETRY]: [],\n        [TransactionDescriptorType.CANCEL]: [new CancelDescriptor()],\n    }\n\n    constructor(context: WalletAPI.IOContext) {\n        super(context)\n    }\n\n    override async createContext(\n        chainId: ChainId,\n        transaction: Transaction,\n        hash?: string,\n    ): Promise<TransactionContext<ChainId>> {\n        const { from, value, data, to, functionSignature, functionParameters } = new AccountTransaction(transaction)\n        const context: TransactionContext<ChainId> = {\n            type: TransactionDescriptorType.INTERACTION,\n            chainId,\n            from,\n            to,\n            value,\n            hash,\n        }\n\n        if (data) {\n            // contract interaction\n            const abis = readABIs(functionSignature)\n\n            if (abis?.length) {\n                try {\n                    return {\n                        ...context,\n                        type: TransactionDescriptorType.INTERACTION,\n                        methods: abis.map((x) => ({\n                            name: x.name,\n                            parameters: abiCoder.decodeParameters(x.parameters, functionParameters ?? ''),\n                        })),\n                    }\n                } catch {\n                    // do nothing\n                }\n            }\n\n            // contract deployment\n            if (isZeroAddress(to)) {\n                return {\n                    ...context,\n                    type: TransactionDescriptorType.DEPLOYMENT,\n                    code: data,\n                }\n            }\n        }\n\n        if (to) {\n            let code = ''\n            try {\n                code = await this.Web3.getCode(to, { chainId })\n            } catch {\n                code = ''\n            }\n\n            // send ether tx\n            if (isEmptyHex(code)) {\n                return { ...context, type: TransactionDescriptorType.TRANSFER }\n            }\n\n            return { ...context, type: TransactionDescriptorType.INTERACTION }\n        }\n\n        throw new Error('Failed to format transaction.')\n    }\n\n    override async createDescriptor(\n        chainId: ChainId,\n        transaction: Transaction,\n        context: TransactionContext<ChainId, TransactionParameter>,\n    ): Promise<TransactionDescriptorBase<ChainId, Transaction, TransactionParameter>> {\n        for (const descriptor of this.descriptors[context.type]) {\n            const computed = await descriptor.compute(context)\n\n            if (computed)\n                return {\n                    ...computed,\n                    context,\n                    chainId,\n                    type: context.type,\n                    _tx: transaction,\n                }\n        }\n\n        throw new Error('Failed to computed transaction descriptor.')\n    }\n}\n","import type { Transaction } from './types.js'\nimport type { ExplorerAPI } from '../entry-types.js'\n\nexport function toTransaction(transaction: Transaction): ExplorerAPI.Transaction {\n    return {\n        nonce: Number.parseInt(transaction.nonce, 10),\n        blockHash: transaction.blockHash,\n        blockNumber: Number.parseInt(transaction.blockNumber, 10),\n        from: transaction.from,\n        to: transaction.to,\n        gas: Number.parseInt(transaction.gas, 10),\n        gasPrice: transaction.gasPrice,\n        hash: transaction.hash,\n        input: transaction.input,\n        transactionIndex: Number.parseInt(transaction.transactionIndex, 10),\n        value: transaction.value,\n        status: transaction.txreceipt_status,\n        confirmations: Number.parseInt(transaction.confirmations, 10),\n    }\n}\n","import urlcat from 'urlcat'\nimport { type ChainId, EtherscanURL } from '@masknet/web3-shared-evm'\nimport type { Transaction } from '../types.js'\nimport { toTransaction } from '../helpers.js'\nimport { fetchJSON } from '../../helpers/fetchJSON.js'\nimport type { ExplorerAPI } from '../../entry-types.js'\n\nclass EtherscanExplorerAPI {\n    async getLatestTransactions(\n        chainId: ChainId,\n        account: string,\n        { offset = 10 }: ExplorerAPI.Options = {},\n    ): Promise<ExplorerAPI.Transaction[]> {\n        const { result: transactions = [] } = await fetchJSON<{\n            message: string\n            result?: Transaction[]\n            status: '0' | '1'\n        }>(\n            urlcat(EtherscanURL.from(chainId), {\n                chain_id: chainId,\n                module: 'account',\n                action: 'txlist',\n                address: account.toLowerCase(),\n                startBlock: 0,\n                endblock: 999999999999,\n                page: 1,\n                offset,\n                sort: 'desc',\n            }),\n        )\n        return transactions.map(toTransaction)\n    }\n}\nexport const EtherscanExplorer = new EtherscanExplorerAPI()\n","import { sha3, toHex } from 'web3-utils'\nimport { type TransactionChecker, TransactionStatusType } from '@masknet/web3-shared-base'\nimport type { ChainId, Transaction } from '@masknet/web3-shared-evm'\nimport { EtherscanExplorer } from '../../../../../Etherscan/index.js'\nimport type { ExplorerAPI } from '../../../../../entry-types.js'\n\nclass TTL<T> {\n    private cache: Record<string, { value: T; ttl: number; at: number }> = {}\n\n    get(key: string): T | undefined {\n        if (!this.cache[key]) return\n        const { value, at, ttl } = this.cache[key]\n        return Date.now() - at < ttl ? value : undefined\n    }\n    set(key: string, value: T, ttl = Number.MAX_SAFE_INTEGER) {\n        this.cache[key] = {\n            at: Date.now(),\n            ttl,\n            value,\n        }\n    }\n}\n\n/**\n * Fetch latest tx list of the the given account. It creates a signature for each transaction.\n * Treat two transactions the same with the identical transaction hash or signature.\n */\nexport class AccountChecker implements TransactionChecker<ChainId, Transaction> {\n    static CHECK_LATEST_TRANSACTION_SIZE = 5\n\n    private ttl = new TTL<ExplorerAPI.Transaction[]>()\n\n    private getExplorerTransactionId(transaction: ExplorerAPI.Transaction | null) {\n        if (!transaction) return ''\n        const { from, to, input, value } = transaction\n        return sha3([from, to, input || '0x0', toHex(value || '0x0') || '0x0'].join('_')) ?? ''\n    }\n\n    private getTransactionId(transaction: Transaction) {\n        const { from, to, data = '0x0', value = '0x0' } = transaction\n        if (!from || !to) return ''\n        return sha3([from, to, data, value].join('_')) ?? ''\n    }\n\n    private async fetchLatestTransactions(chainId: ChainId, account: string) {\n        const key = `${chainId}_${account.toLowerCase}`\n        const hit = this.ttl.get(key)\n        if (hit) return hit\n\n        const transactions = await EtherscanExplorer.getLatestTransactions(chainId, account, {\n            offset: AccountChecker.CHECK_LATEST_TRANSACTION_SIZE,\n        })\n        this.ttl.set(key, transactions, 15 * 1000)\n        return transactions\n    }\n\n    async getStatus(chainId: ChainId, id: string, transaction: Transaction): Promise<TransactionStatusType> {\n        const account = transaction.from\n        if (!account) throw new Error('Cannot found account.')\n        const latestTransactions = await this.fetchLatestTransactions(chainId, account)\n        const txId = this.getTransactionId(transaction)\n        const tx = latestTransactions.find((x) => x.hash === id || this.getExplorerTransactionId(x) === txId)\n        if (!tx) return TransactionStatusType.NOT_DEPEND\n        // '1' for successful transactions and '0' for failed transactions.\n        return tx.status === '1' ? TransactionStatusType.SUCCEED : TransactionStatusType.FAILED\n    }\n}\n","import type { TransactionChecker, TransactionStatusType } from '@masknet/web3-shared-base'\nimport { type ChainId, type Transaction, getTransactionStatusType } from '@masknet/web3-shared-evm'\nimport { ConnectionReadonlyAPI } from '../../../apis/ConnectionReadonlyAPI.js'\n\nexport class ReceiptChecker implements TransactionChecker<ChainId, Transaction> {\n    private Web3 = new ConnectionReadonlyAPI()\n\n    async getStatus(chainId: ChainId, id: string, transaction: Transaction): Promise<TransactionStatusType> {\n        const receipt = await this.Web3.getTransactionReceipt(id, { chainId })\n        return getTransactionStatusType(receipt ?? null)\n    }\n}\n","import { AccountChecker } from './checkers/AccountChecker.js'\nimport { ReceiptChecker } from './checkers/ReceiptChecker.js'\n\nexport const TransactionCheckers = [new AccountChecker(), new ReceiptChecker()]\n","import type { Subscription } from 'use-subscription'\nimport { Emitter } from '@servie/events'\nimport type { JsonRpcPayload } from 'web3-core-helpers'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport { mergeSubscription, type NetworkPluginID } from '@masknet/shared-base'\nimport {\n    type TransactionChecker,\n    TransactionStatusType,\n    type WatchEvents,\n    type TransactionWatcherState as Web3TransactionWatcherState,\n    type RecentTransaction,\n    type RecognizableError,\n} from '@masknet/web3-shared-base'\n\nclass Checker<ChainId extends PropertyKey, Transaction> {\n    private timer: ReturnType<typeof setTimeout> | null = null\n\n    constructor(\n        protected checkers: Array<TransactionChecker<ChainId, Transaction>>,\n        protected subscriptions: {\n            chainId: Subscription<ChainId>\n            transactions: Subscription<Array<RecentTransaction<ChainId, Transaction>>>\n        },\n        protected options: {\n            delay: number\n            onNotify: (\n                chainId: ChainId,\n                id: string,\n                transaction: Transaction,\n                status: TransactionStatusType,\n            ) => Promise<void>\n        },\n    ) {}\n\n    private async check() {\n        const chainId = this.subscriptions.chainId.getCurrentValue()\n        const transactions = this.subscriptions.transactions\n            .getCurrentValue()\n            .filter((x) => x.status === TransactionStatusType.NOT_DEPEND)\n            .flatMap((x) => Object.entries(x.candidates))\n        if (!transactions.length) return\n\n        for (const [id, transaction] of transactions) {\n            for (const checker of this.checkers) {\n                try {\n                    const status = await checker.getStatus(chainId, id, transaction)\n                    if (status !== TransactionStatusType.NOT_DEPEND) {\n                        await this.options.onNotify(chainId, id, transaction, status)\n                        break\n                    }\n                } catch (error) {\n                    console.warn('Failed to check transaction status.')\n                }\n            }\n        }\n\n        // kick to the next round\n        this.startCheck()\n    }\n\n    public startCheck() {\n        this.stopCheck()\n        this.timer = setTimeout(this.check.bind(this), this.options.delay)\n    }\n\n    public stopCheck() {\n        if (this.timer !== null) clearTimeout(this.timer)\n        this.timer = null\n    }\n}\n\nexport class TransactionWatcherState<ChainId extends PropertyKey, Transaction>\n    implements Web3TransactionWatcherState<ChainId, Transaction>\n{\n    public emitter: Emitter<WatchEvents<ChainId, Transaction>> = new Emitter()\n\n    constructor(\n        protected context: WalletAPI.IOContext,\n        protected subscriptions: {\n            chainId: Subscription<ChainId>\n            transactions: Subscription<Array<RecentTransaction<ChainId, Transaction>>>\n        },\n        protected options: {\n            pluginID: NetworkPluginID\n            /** Default block delay in seconds */\n            defaultBlockDelay: number\n            /** Get all supported checkers */\n            getTransactionCheckers: () => Array<TransactionChecker<ChainId, Transaction>>\n        },\n    ) {\n        const checker = new Checker(this.options.getTransactionCheckers(), this.subscriptions, {\n            delay: this.options.defaultBlockDelay * 1000,\n            onNotify: this.notifyTransaction.bind(this),\n        })\n\n        mergeSubscription(subscriptions.chainId, subscriptions.transactions).subscribe(() => {\n            checker.startCheck()\n        })\n    }\n\n    async notifyError(error: RecognizableError, request: JsonRpcPayload) {\n        this.emitter.emit('error', error, request)\n    }\n\n    async notifyTransaction(chainId: ChainId, id: string, transaction: Transaction, status: TransactionStatusType) {\n        throw new Error('Method not implemented.')\n    }\n}\n","import type { Subscription } from 'use-subscription'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport { type ChainId, type Transaction } from '@masknet/web3-shared-evm'\nimport { type RecentTransaction, TransactionStatusType } from '@masknet/web3-shared-base'\nimport { TransactionCheckers } from './TransactionWatcher/checker.js'\nimport { Web3StateRef } from '../apis/Web3StateAPI.js'\nimport { TransactionWatcherState } from '../../Base/state/TransactionWatcher.js'\n\nexport class TransactionWatcher extends TransactionWatcherState<ChainId, Transaction> {\n    constructor(\n        context: WalletAPI.IOContext,\n        subscriptions: {\n            chainId: Subscription<ChainId>\n            transactions: Subscription<Array<RecentTransaction<ChainId, Transaction>>>\n        },\n    ) {\n        super(context, subscriptions, {\n            pluginID: NetworkPluginID.PLUGIN_EVM,\n            defaultBlockDelay: 15,\n            getTransactionCheckers: () => TransactionCheckers,\n        })\n    }\n\n    override async notifyTransaction(\n        chainId: ChainId,\n        id: string,\n        transaction: Transaction,\n        status: TransactionStatusType,\n    ) {\n        const { Transaction } = Web3StateRef.value\n\n        if (Transaction && transaction.from && status !== TransactionStatusType.NOT_DEPEND) {\n            await Transaction.updateTransaction?.(chainId, transaction.from, id, status)\n        }\n\n        this.emitter.emit('progress', chainId, id, status, transaction)\n    }\n}\n","import type { Web3State } from '@masknet/web3-shared-flow'\nimport { AddressBook } from '../state/AddressBook.js'\nimport { Provider } from '../state/Provider.js'\nimport { Settings } from '../state/Settings.js'\nimport { Transaction } from '../state/Transaction.js'\nimport { IdentityService } from '../state/IdentityService.js'\nimport { Network } from '../state/Network.js'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport { flow } from '../../../Manager/registry.js'\n\nexport const FlowWeb3StateRef = {\n    get value() {\n        return flow.state\n    },\n}\nexport async function createFlowState(context: WalletAPI.IOContext): Promise<Web3State> {\n    const Provider_ = await Provider.new(context)\n\n    return {\n        AddressBook: new AddressBook(context),\n        IdentityService: new IdentityService(context),\n        Settings: new Settings(context),\n        Network: new Network(context),\n        Transaction: new Transaction(context, {\n            chainId: Provider_.chainId,\n            account: Provider_.account,\n        }),\n        Provider: Provider_,\n    }\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport { isSameAddress } from '@masknet/web3-shared-base'\nimport { isValidAddress, formatAddress } from '@masknet/web3-shared-flow'\nimport { AddressBookState } from '../../Base/state/AddressBook.js'\n\nexport class AddressBook extends AddressBookState {\n    constructor(protected override context: WalletAPI.IOContext) {\n        super(context, {\n            pluginID: NetworkPluginID.PLUGIN_FLOW,\n            isValidAddress,\n            isSameAddress,\n            formatAddress,\n        })\n    }\n}\n","import { compact } from 'lodash-es'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport { type ChainId, isValidAddress } from '@masknet/web3-shared-flow'\nimport { NetworkPluginID, type SocialIdentity, type SocialAddress, SocialAddressType } from '@masknet/shared-base'\nimport { IdentityServiceState } from '../../Base/state/Identity.js'\n\nfunction getFlowAddress(bio: string) {\n    const addressMatched = bio.match(/\\b0x\\w{16}\\b/) ?? null\n    const address = addressMatched?.[0]\n    if (address && isValidAddress(address)) return address\n    return\n}\n\nexport class IdentityService extends IdentityServiceState<ChainId> {\n    constructor(protected context: WalletAPI.IOContext) {\n        super()\n    }\n\n    protected override async getFromRemote({ bio = '' }: SocialIdentity) {\n        const address = getFlowAddress(bio)\n\n        return compact<SocialAddress<ChainId>>([\n            address\n                ? {\n                      pluginID: NetworkPluginID.PLUGIN_FLOW,\n                      type: SocialAddressType.Address,\n                      label: address,\n                      address,\n                  }\n                : null,\n        ])\n    }\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport type { ChainId, NetworkType, SchemaType } from '@masknet/web3-shared-flow'\nimport { NetworkState } from '../../Base/state/Network.js'\n\nexport class Network extends NetworkState<ChainId, SchemaType, NetworkType> {\n    constructor(context: WalletAPI.IOContext) {\n        super(context, {\n            pluginID: NetworkPluginID.PLUGIN_FLOW,\n        })\n    }\n}\n","import { NetworkPluginID } from '@masknet/shared-base'\nimport { isSameAddress } from '@masknet/web3-shared-base'\nimport {\n    type ChainId,\n    isValidAddress,\n    isValidChainId,\n    getInvalidChainId,\n    NetworkType,\n    type ProviderType,\n    type Web3,\n    type Web3Provider,\n    getDefaultChainId,\n    getDefaultProviderType,\n    getDefaultNetworkType,\n} from '@masknet/web3-shared-flow'\nimport { FlowProviders } from '../providers/index.js'\nimport { FlowChainResolver } from '../apis/ResolverAPI.js'\nimport { ProviderState } from '../../Base/state/Provider.js'\nimport type { WalletAPI } from '../../../entry-types.js'\n\nexport class Provider extends ProviderState<ChainId, ProviderType, NetworkType, Web3Provider, Web3> {\n    protected override providers = FlowProviders\n    protected override isValidAddress = isValidAddress\n    protected override isValidChainId = isValidChainId\n    protected override isSameAddress = isSameAddress\n    protected override getInvalidChainId = getInvalidChainId\n    protected override getDefaultNetworkType = getDefaultNetworkType\n    protected override getDefaultProviderType = getDefaultProviderType\n    protected override getDefaultChainId = getDefaultChainId\n    protected override getNetworkTypeFromChainId(chainId: ChainId): NetworkType {\n        return FlowChainResolver.networkType(chainId) ?? NetworkType.Flow\n    }\n    private constructor(io: WalletAPI.IOContext) {\n        super(io)\n    }\n    storage = ProviderState.createStorage(NetworkPluginID.PLUGIN_FLOW, getDefaultChainId(), getDefaultProviderType())\n\n    static async new(io: WalletAPI.IOContext) {\n        const provider = new this(io)\n        await provider.setup()\n        return provider\n    }\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport { SettingsState } from '../../Base/state/Settings.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\n\nexport class Settings extends SettingsState {\n    constructor(context: WalletAPI.IOContext) {\n        super(context, {\n            pluginID: NetworkPluginID.PLUGIN_FLOW,\n        })\n    }\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport {\n    ChainIdList,\n    formatAddress,\n    isValidChainId,\n    type ChainId,\n    type Transaction as FlowTransaction,\n} from '@masknet/web3-shared-flow'\nimport type { Subscription } from 'use-subscription'\nimport { TransactionState } from '../../Base/state/Transaction.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\n\nexport class Transaction extends TransactionState<ChainId, FlowTransaction> {\n    constructor(\n        protected override context: WalletAPI.IOContext,\n        protected override subscriptions: {\n            account?: Subscription<string>\n            chainId?: Subscription<ChainId>\n        },\n    ) {\n        super(context, ChainIdList, subscriptions, {\n            pluginID: NetworkPluginID.PLUGIN_FLOW,\n            formatAddress,\n            isValidChainId,\n        })\n    }\n}\n","import type { Web3State } from '@masknet/web3-shared-solana'\nimport { AddressBook } from '../state/AddressBook.js'\nimport { Provider } from '../state/Provider.js'\nimport { Settings } from '../state/Settings.js'\nimport { Transaction } from '../state/Transaction.js'\nimport { IdentityService } from '../state/IdentityService.js'\nimport { Network } from '../state/Network.js'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport { solana } from '../../../Manager/registry.js'\n\nexport const SolanaWeb3StateRef = {\n    get value() {\n        return solana.state\n    },\n}\nexport async function createSolanaState(context: WalletAPI.IOContext): Promise<Web3State> {\n    const Provider_ = await Provider.new(context)\n\n    return {\n        AddressBook: new AddressBook(context),\n        IdentityService: new IdentityService(context),\n        Settings: new Settings(context),\n        Network: new Network(context),\n        Transaction: new Transaction(context, {\n            chainId: Provider_.chainId,\n            account: Provider_.account,\n        }),\n        Provider: Provider_,\n    }\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport { isSameAddress } from '@masknet/web3-shared-base'\nimport { formatAddress, isValidAddress } from '@masknet/web3-shared-solana'\nimport { AddressBookState } from '../../Base/state/AddressBook.js'\n\nexport class AddressBook extends AddressBookState {\n    constructor(context: WalletAPI.IOContext) {\n        super(context, {\n            pluginID: NetworkPluginID.PLUGIN_SOLANA,\n            isValidAddress,\n            isSameAddress,\n            formatAddress,\n        })\n    }\n}\n","import { first } from 'lodash-es'\nimport { PublicKey } from '@solana/web3.js'\nimport {\n    performReverseLookup,\n    getHashedName,\n    getNameAccountKey,\n    NameRegistryState,\n    getAllDomains,\n} from '@bonfida/spl-name-service'\nimport { NameServiceID } from '@masknet/shared-base'\nimport { ChainId, createClient } from '@masknet/web3-shared-solana'\nimport type { NameServiceAPI } from '../../../entry-types.js'\n\nclass SolanaDomainAPI implements NameServiceAPI.Provider {\n    private client = createClient(ChainId.Mainnet)\n\n    private SOL_TLD_AUTHORITY = new PublicKey('58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx')\n\n    id = NameServiceID.SOL\n\n    private async getKey(name: string) {\n        const hashedName = await getHashedName(name)\n        const domainKey = await getNameAccountKey(hashedName, undefined, this.SOL_TLD_AUTHORITY)\n        return { domainKey, hashedName }\n    }\n\n    async lookup(name: string): Promise<string | undefined> {\n        try {\n            const { domainKey } = await this.getKey(name.replace('.sol', ''))\n            const registry = await NameRegistryState.retrieve(this.client, domainKey)\n            const owner = registry.registry.owner.toBase58()\n            return owner\n        } catch {\n            return ''\n        }\n    }\n    async reverse(address: string): Promise<string | undefined> {\n        const domainKey = new PublicKey(address)\n        const keys = await getAllDomains(this.client, domainKey)\n        // resolve the first domain\n        const key = first(keys)\n        if (!key) return\n\n        const domain = await performReverseLookup(this.client, key)\n        return `${domain}.sol`\n    }\n}\nexport const SolanaDomain = new SolanaDomainAPI()\n","import { compact } from 'lodash-es'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID, type SocialIdentity, type SocialAddress, SocialAddressType } from '@masknet/shared-base'\nimport { type ChainId, isValidAddress } from '@masknet/web3-shared-solana'\nimport { IdentityServiceState } from '../../Base/state/Identity.js'\nimport { SolanaDomain } from '../apis/DomainAPI.js'\n\nconst SOL_RE = /\\S{1,256}\\.sol\\b/i\n\nfunction getSolanaAddress(bio: string) {\n    const addressMatched = bio.match(/\\b\\w{32,44}\\b/)\n    const address = addressMatched?.[0]\n    if (address && !address.startsWith('0x') && isValidAddress(address)) return address\n    return\n}\n\nfunction getSolanaDomain(nickname: string, bio: string) {\n    const [matched] = nickname.match(SOL_RE) ?? bio.match(SOL_RE) ?? []\n    return matched\n}\n\nfunction getSolanaDomainAddress(domain: string) {\n    if (!domain) return\n    return SolanaDomain.lookup(domain)\n}\n\nexport class IdentityService extends IdentityServiceState<ChainId> {\n    constructor(protected context: WalletAPI.IOContext) {\n        super()\n    }\n\n    protected override async getFromRemote(identity: SocialIdentity) {\n        const { bio = '', nickname = '' } = identity\n        const address = getSolanaAddress(bio)\n        const domain = getSolanaDomain(nickname, bio)\n        const domainAddress = domain ? await getSolanaDomainAddress(domain) : undefined\n\n        return compact<SocialAddress<ChainId>>([\n            address\n                ? {\n                      pluginID: NetworkPluginID.PLUGIN_SOLANA,\n                      type: SocialAddressType.Address,\n                      label: '',\n                      address,\n                  }\n                : undefined,\n            domainAddress\n                ? {\n                      pluginID: NetworkPluginID.PLUGIN_SOLANA,\n                      type: SocialAddressType.SOL,\n                      label: domain ?? domainAddress,\n                      address: domainAddress,\n                  }\n                : undefined,\n        ])\n    }\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport type { ChainId, NetworkType, SchemaType } from '@masknet/web3-shared-solana'\nimport { NetworkState } from '../../Base/state/Network.js'\n\nexport class Network extends NetworkState<ChainId, SchemaType, NetworkType> {\n    constructor(context: WalletAPI.IOContext) {\n        super(context, {\n            pluginID: NetworkPluginID.PLUGIN_SOLANA,\n        })\n    }\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport { isSameAddress } from '@masknet/web3-shared-base'\nimport {\n    isValidChainId,\n    getInvalidChainId,\n    isValidAddress,\n    type ChainId,\n    NetworkType,\n    type ProviderType,\n    type Web3Provider,\n    type Web3,\n    getDefaultChainId,\n    getDefaultNetworkType,\n    getDefaultProviderType,\n} from '@masknet/web3-shared-solana'\nimport { SolanaProviders } from '../providers/index.js'\nimport { SolanaChainResolver } from '../apis/ResolverAPI.js'\nimport { ProviderState } from '../../Base/state/Provider.js'\n\nexport class Provider extends ProviderState<ChainId, ProviderType, NetworkType, Web3Provider, Web3> {\n    protected override providers = SolanaProviders\n    protected override isValidAddress = isValidAddress\n    protected override isValidChainId = isValidChainId\n    protected override isSameAddress = isSameAddress\n    protected override getInvalidChainId = getInvalidChainId\n    protected override getDefaultNetworkType = getDefaultNetworkType\n    protected override getDefaultProviderType = getDefaultProviderType\n    protected override getDefaultChainId = getDefaultChainId\n    protected override getNetworkTypeFromChainId(chainId: ChainId): NetworkType {\n        return SolanaChainResolver.networkType(chainId) ?? NetworkType.Solana\n    }\n    private constructor(io: WalletAPI.IOContext) {\n        super(io)\n    }\n    storage = ProviderState.createStorage(NetworkPluginID.PLUGIN_SOLANA, getDefaultChainId(), getDefaultProviderType())\n\n    static async new(io: WalletAPI.IOContext) {\n        const provider = new this(io)\n        await provider.setup()\n        return provider\n    }\n}\n","import type { WalletAPI } from '../../../entry-types.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\nimport { SettingsState } from '../../Base/state/Settings.js'\n\nexport class Settings extends SettingsState {\n    constructor(context: WalletAPI.IOContext) {\n        super(context, {\n            pluginID: NetworkPluginID.PLUGIN_SOLANA,\n        })\n    }\n}\n","import type { Subscription } from 'use-subscription'\nimport type { WalletAPI } from '../../../entry-types.js'\nimport {\n    type ChainId,\n    type Transaction as SolanaTransaction,\n    formatAddress,\n    isValidChainId,\n    ChainIdList,\n} from '@masknet/web3-shared-solana'\nimport { TransactionState } from '../../Base/state/Transaction.js'\nimport { NetworkPluginID } from '@masknet/shared-base'\n\nexport class Transaction extends TransactionState<ChainId, SolanaTransaction> {\n    constructor(\n        context: WalletAPI.IOContext,\n        subscriptions: {\n            account?: Subscription<string>\n            chainId?: Subscription<ChainId>\n        },\n    ) {\n        super(context, ChainIdList, subscriptions, {\n            pluginID: NetworkPluginID.PLUGIN_SOLANA,\n            formatAddress,\n            isValidChainId,\n        })\n    }\n}\n","import { EthereumMethodType, createJsonRpcPayload } from '@masknet/web3-shared-evm'\nimport { fetchJsonRpcResponse } from './fetchJsonRpcResponse.js'\n\nexport async function fetchChainId(url: string, init?: RequestInit) {\n    const { result } = await fetchJsonRpcResponse(\n        url,\n        createJsonRpcPayload(0, {\n            method: EthereumMethodType.ETH_CHAIN_ID,\n            params: [],\n        }),\n        init,\n    )\n    return Number.parseInt(result, 16)\n}\n","import type { EventLog, Log } from 'web3-core'\nimport { type AbiItem, keccak256 } from 'web3-utils'\nimport { abiCoder } from './abiCoder.js'\n\nexport function decodeEvents(abis: AbiItem[], logs: Log[]) {\n    // the topic0 for identifying which abi to be used for decoding the event\n    const listOfTopic0 = abis.map((abi) => keccak256(`${abi.name}(${abi.inputs?.map((x) => x.type).join(',')})`))\n\n    // decode events\n    const events = logs.map((log) => {\n        const idx = listOfTopic0.indexOf(log.topics[0])\n        if (idx === -1) return\n        const abi = abis[idx]\n        const inputs = abi?.inputs ?? []\n\n        return {\n            // more: https://web3js.readthedocs.io/en/v1.2.11/web3-eth-abi.html?highlight=decodeLog#decodelog\n            returnValues: abiCoder.decodeLog(inputs, log.data, abi.anonymous ? log.topics : log.topics.slice(1)),\n            raw: {\n                data: log.data,\n                topics: log.topics,\n            },\n            event: abi.name,\n            signature: listOfTopic0[idx],\n            ...log,\n        } as EventLog\n    })\n    return events.reduce<{\n        [eventName: string]: EventLog | undefined\n    }>((accumulate, event) => {\n        if (event) accumulate[event.event] = event\n        return accumulate\n    }, {})\n}\n","export var SupportedAlgorithm;\n(function (SupportedAlgorithm) {\n    SupportedAlgorithm[\"sha256\"] = \"sha256\";\n    SupportedAlgorithm[\"sha512\"] = \"sha512\";\n})(SupportedAlgorithm || (SupportedAlgorithm = {}));\n;\n","export const version = \"sha2/5.7.0\";\n","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n","import { computeHmac, ripemd160, sha256, sha512 } from \"./sha2\";\nimport { SupportedAlgorithm } from \"./types\";\nexport { computeHmac, ripemd160, sha256, sha512, SupportedAlgorithm };\n","import e from\"void-elements\";var t=/\\s([^'\"/\\s><]+?)[\\s/>]|([^\\s=]+)=\\s?(\".*?\"|'.*?')/g;function n(n){var r={type:\"tag\",name:\"\",voidElement:!1,attrs:{},children:[]},i=n.match(/<\\/?([^\\s]+?)[/\\s>]/);if(i&&(r.name=i[1],(e[i[1]]||\"/\"===n.charAt(n.length-2))&&(r.voidElement=!0),r.name.startsWith(\"!--\"))){var s=n.indexOf(\"--\\x3e\");return{type:\"comment\",comment:-1!==s?n.slice(4,s):\"\"}}for(var a=new RegExp(t),c=null;null!==(c=a.exec(n));)if(c[0].trim())if(c[1]){var o=c[1].trim(),l=[o,\"\"];o.indexOf(\"=\")>-1&&(l=o.split(\"=\")),r.attrs[l[0]]=l[1],a.lastIndex--}else c[2]&&(r.attrs[c[2]]=c[3].trim().substring(1,c[3].length-1));return r}var r=/<[a-zA-Z0-9\\-\\!\\/](?:\"[^\"]*\"|'[^']*'|[^'\">])*>/g,i=/^\\s*$/,s=Object.create(null);function a(e,t){switch(t.type){case\"text\":return e+t.content;case\"tag\":return e+=\"<\"+t.name+(t.attrs?function(e){var t=[];for(var n in e)t.push(n+'=\"'+e[n]+'\"');return t.length?\" \"+t.join(\" \"):\"\"}(t.attrs):\"\")+(t.voidElement?\"/>\":\">\"),t.voidElement?e:e+t.children.reduce(a,\"\")+\"</\"+t.name+\">\";case\"comment\":return e+\"\\x3c!--\"+t.comment+\"--\\x3e\"}}var c={parse:function(e,t){t||(t={}),t.components||(t.components=s);var a,c=[],o=[],l=-1,m=!1;if(0!==e.indexOf(\"<\")){var u=e.indexOf(\"<\");c.push({type:\"text\",content:-1===u?e:e.substring(0,u)})}return e.replace(r,function(r,s){if(m){if(r!==\"</\"+a.name+\">\")return;m=!1}var u,f=\"/\"!==r.charAt(1),h=r.startsWith(\"\\x3c!--\"),p=s+r.length,d=e.charAt(p);if(h){var v=n(r);return l<0?(c.push(v),c):((u=o[l]).children.push(v),c)}if(f&&(l++,\"tag\"===(a=n(r)).type&&t.components[a.name]&&(a.type=\"component\",m=!0),a.voidElement||m||!d||\"<\"===d||a.children.push({type:\"text\",content:e.slice(p,e.indexOf(\"<\",p))}),0===l&&c.push(a),(u=o[l-1])&&u.children.push(a),o[l]=a),(!f||a.voidElement)&&(l>-1&&(a.voidElement||a.name===r.slice(2,-1))&&(l--,a=-1===l?c:o[l]),!m&&\"<\"!==d&&d)){u=-1===l?c:o[l].children;var x=e.indexOf(\"<\",p),g=e.slice(p,-1===x?void 0:x);i.test(g)&&(g=\" \"),(x>-1&&l+u.length>=0||\" \"!==g)&&u.push({type:\"text\",content:g})}}),c},stringify:function(e){return e.reduce(function(e,t){return e+a(\"\",t)},\"\")}};export default c;\n","/**\n * This file automatically generated from `pre-publish.js`.\n * Do not manually edit.\n */\n\nmodule.exports = {\n  \"area\": true,\n  \"base\": true,\n  \"br\": true,\n  \"col\": true,\n  \"embed\": true,\n  \"hr\": true,\n  \"img\": true,\n  \"input\": true,\n  \"link\": true,\n  \"meta\": true,\n  \"param\": true,\n  \"source\": true,\n  \"track\": true,\n  \"wbr\": true\n};\n"],"names":["isAESJsonWebKey","x","alg","k","key_ops","kty","Array","isArray","isEC_JsonWebKey","o","crv","y","isEC_Public_JsonWebKey","d","isEC_Private_JsonWebKey","encodeArrayBuffer","decodeArrayBuffer","concatArrayBuffer","Convert","compressK256Point","isPoint","pointCompress","xb","Uint8Array","FromBase64Url","yb","point","TypeError","decompressK256Point","isPointCompressed","uncompressed","len","length","slice","ToBase64Url","compressK256KeyRaw","decompressK256Raw","compressK256Key","key","arr","decompressK256Key","compressedPublic","jwk","ext","isK256Point","isK256PrivateKey","isPrivate","EncryptErrorReasons","ComplexTypedMessageNotSupportedInPayload38","PublicKeyNotFound","AESKeyUsageError","EncryptError","Error","message","Reasons","constructor","cause","flags","defaultFlags","RemoteFlags","fetchAndActive","Flags","accessor","env","setupBuildInfo","Telemetry","Promise","allSettled","BigNumber","webpackHot","accept","Object","defineProperty","prototype","get","toNumber","configurable","Services","fetch","original_fetch","globalThis","contentFetch","input","init","request","Request","canAccessAsContent","url","navigator","userAgent","includes","browser","runtime","getManifest","manifest_version","content","signal","Helper","fetchGlobal","then","response","throwIfAborted","extensionOrigin","URL","getURL","origin","fetchingTwitterResource","target","location","endsWith","fetchingInsResource","match","href","isHostName","domain","hostname","en_US","ja_JP","ko_KR","qya_AA","zh_CN","zh_TW","languages","en","ja","ko","qy","zh","createI18NBundle","addShareBaseI18N","dispatchEvent","CustomEvent","detail","addMaskI18N","initReactI18next","addSharedI18N","i18NextInstance","setupLegacySettingsAtNonBackground","setupMaskKVStorageBackend","memory","beforeAutoSync","resolve","getValue","args","Settings","__kv_storage_read__","setValue","__kv_storage_write__","indexedDB","getLegacySettingsInitialValue","MaskMessages","TelemetryID","events","telemetryIDReset","on","id","value","initWallet","allPersonas","CrossIsolationMessages","EMPTY_LIST","Sniffings","createSubscriptionFromAsync","WalletConnectQRCodeModal","defer","delay","addWallet","Wallet","signWithPersona","a","b","c","Identity","closeWalletConnectDialog","is_popup_page","popupWalletConnectEvent","sendToAll","open","close","openPopupWindow","openWalletConnectDialog","uri","promise","reject","callback","undefined","finally","off","openAndWaitForClose","send","selectMaskWalletAccount","selectMaskAccount","grantEIP2255Permission","disconnectAllWalletsFromOrigin","wallets","getWallets","walletsUpdated","hasPaymentPassword","hasPassword","MaskWalletContext","resetAllWallets","removeWallet","renameWallet","timeStart","Date","now","task","getTelemetryID","timeEnd","console","warn","createHashHistory","__create__","creator","run","process","NODE_ENV","PopupsHistory","None","ValueRefJSON","ValueRefWithReady","setupLegacySettingsAtBackground","getStorage","setStorage","legacySettings_set","payload","legacySettings_broadcast","setupValueRef","settings","duringInitialValueSet","duringBroadcastSet","isSome","nowReady","addListener","newVal","createNSSettingsJSON","ns","createGlobalSettings","comparer","createBulkSettings","settingsKey","defaultValue","item","__proto__","legacySettings_bulkDiscoverNS","startsWith","setup","Proxy","readyPromise","fromBase64URL","toBase64URL","toBase64","ToBase64","toHex","ToHex","fromHex","FromHex","NetworkPluginID","evm","flow","solana","all","PLUGIN_EVM","PLUGIN_FLOW","PLUGIN_SOLANA","getRegisteredWeb3Providers","ID","provider","getRegisteredWeb3Networks","network","getRegisteredWeb3Chains","chain","getAllPluginsWeb3State","state","getActivatedPluginWeb3State","pluginID","io","mod","createEVMState","createFlowState","createSolanaState","PersistentStorages","AddressBookState","context","options","storage","contacts","Web3","createSubScope","subscription","ready","initialized","initializedPromise","addContact","address","name","isValidAddress","concat","removeContact","filter","isSameAddress","renameContact","map","LRUCache","groupBy","compact","uniq","first","SocialAddressType","IdentityServiceState","cache","max","ttl","Number","MAX_SAFE_INTEGER","getIdentityID","identity","identifier","userId","bio","homepage","publicKey","join","getFromCache","getFromRemote","lookup","fromCache","isOwner","fromRemote","set","__mergeSocialAddressesAll__","socialAddresses","accountGroups","toLowerCase","domainAddressTypes","ENS","SPACE_ID","ARBID","Lens","RSS3","SOL","entries","accounts","domainLabels","find","type","label","theFirstAccount","supportedChainIds","chainId","supportedAddressTypes","v4","uuid","omit","mapSubscription","mergeSubscription","NetworkState","DEFAULT_NETWORK_ID","networkID","networks","customizedNetworks","values","sort","z","createdAt","getTime","registeredChains","registeredNetworks","isMainnet","isCustomized","assertNetwork","getCurrentValue","validateNetwork","pingNetwork","addNetwork","valid","updatedAt","switchNetwork","updateNetwork","updates","removeNetwork","clone","getSiteType","InMemoryStorages","ProviderState","site","account","networkType","providerType","createStorage","defaultChainId","defaultProviderType","setupSubscriptions","setupProviders","getNetworkTypeFromChainId","providers","emitter","setAccount","parseInt","setProvider","getDefaultChainId","getDefaultProviderType","account_","accountCopied","isValidChainId","getInvalidChainId","needToUpdateAccount","needToUpdateChainId","isReady","untilReady","connect","owner","silent","result","race","switchChain","emit","disconnect","createConstantSubscription","CurrencyType","GasOptionType","SourceType","SettingsState","allowTestnet","currencyType","gasOptionType","fungibleAssetSourceType","nonFungibleAssetSourceType","USD","NORMAL","DeBank","OpenSea","setDefaultCurrencyType","TransactionStatusType","TransactionState","chainIds","subscriptions","MAX_RECORD_SIZE","transactions","fromEntries","transactionStorage","formatAddress","getTransaction","address_","recentTransaction","id_","transaction","candidates","addTransaction","transaction_","keys","indexId","draftedAt","status","NOT_DEPEND","replaceTransaction","newId","updateTransaction","removeTransaction","getTransactions","clearTransactions","AddressBook","RiskWarning","Token","Transaction","NameService","Provider","TransactionFormatter","TransactionWatcher","IdentityService","BalanceNotifier","BlockNumberNotifier","Message","Network","Web3StateRef","Provider_","new","Transaction_","formatEthereumAddress","Emitter","BalanceNotifierState","BlockNumberNotifierState","MaskX_BaseAPI","PlatformType","Ethereum","Twitter","CyberConnect","Firefly","Sybil","Uniswap","Leaderboard","HandWriting","TwitterHexagon","MASK_X_ROOT_URL","MASK_X_DEFAULT_PAGINATION","size","page","urlcat","fetchCachedJSON","MaskX_API","fetchFromMaskX","pathname","getOptions","getRNSIdentity","handle","sns_handle","getResponse","records","source","getIdentitiesExact","platform","initial","getIdentitiesFuzzy","getAllIdentities","MaskX","uniqBy","NextIDPlatform","PluginID","createLookupTableResolver","ChainId","isZeroAddress","ConnectionReadonlyAPI","NextIDProof","SpaceID","NextIDStorageProvider","ENS_RE","SID_RE","ARBID_RE","ADDRESS_FULL","CROSSBELL_HANDLE_RE","LENS_RE","LENS_URL_RE","getENSNames","nickname","flatMap","getLensNames","homepageNames","names","Boolean","getARBIDNames","getSIDNames","getCrossBellHandles","getAddress","text","matched","getNextIDPlatform","is_twitter_page","getWalletAddressesFromNextID","latestActivatedBinding","queryLatestBindingByPlatform","proofs","resolveMaskXAddressType","TwitterBlue","createSocialAddress","verified","getSocialAddressFromBio","Address","getSocialAddressFromCrossbell","handles","info","getNameInfo","crossbell","Crossbell","getSocialAddressFromAvatarNextID","getByIdentity","Avatar","isOk","ownerAddress","Mask","getSocialAddressesFromNextID","listOfAddress","NEXT_ID","latest_checked_at","created_at","getSocialAddressFromENS","getSocialAddressFromARBID","Arbitrum","getSocialAddressFromSpaceID","BSC","getSocialAddressFromLens","profile","getProfileByHandle","ownedBy","getSocialAddressFromTwitterBlue","getUserNftContainer","getNonFungibleTokenOwner","token_id","Mainnet","getSocialAddressesFromMaskX","results","web3_addr","is_verified","reverse","socialAddressFromMaskX","socialAddressFromNextID","identities_","identities","identitiesFromNextID","verifiedResult","isReliable","verifyTwitterHandleByAddress","trustedAddresses","MessageStateType","MessageState","messages","assertMessage","validateMessage","waitForApprovingRequest","observe","APPROVED","unsubscribe","subscribe","applyRequest","message_","_","applyAndWaitResponse","reasonableMessage","updateMessage","approveRequest","denyRequest","DENIED","denyAllRequests","omitBy","EMPTY_OBJECT","PopupRoutes","createJsonRpcPayload","PayloadEditor","EthereumMethodType","ErrorEditor","isUndefined","resolveRequest","arguments","updateRequest","request_","method","config","fromMethod","params","ETH_SEND_TRANSACTION","from","nonce","getTransactionNonce","route","SetPaymentPassword","ContractInteraction","fromState","hash","push","error","presence","getEnumAsArray","NameServiceID","attemptUntil","NameServiceState","addName","formattedAddress","addAddress","callbacks","createResolvers","resolver","domainOnly","safeReverse","isValidName","isSameURL","createSchema","descriptors","object","string","number","int","gt","coinMarketCapChainId","optional","coinGeckoChainId","coinGeckoPlatformId","trim","nonempty","color","fullName","shortName","union","literal","nativeCurrency","symbol","decimals","rpcUrl","refine","rpc","iconUrl","explorerUrl","parameters","record","boolean","features","array","superRefine","schema","conflict","addIssue","code","ZodIssueCode","custom","path","fetchChainId","safeParseAsync","success","NetworkType","ProviderType","getDefaultNetworkType","ChainResolver","Providers","WalletConnect","connected","RiskWarningState","approved","isApproved","Reflect","has","approve","revoke","BASE_URL_MAP","production","development","test","BASE_URL","RiskWarningAPI","body","JSON","stringify","plugin_id","Warning","safeEmptyList","list","produce","TokenType","TokenState","trustedFungibleTokens","trustedNonFungibleTokens","blockedFungibleTokens","blockedNonFungibleTokens","credibleFungibleTokens","credibleNonFungibleTokens","nonFungibleCollectionMap","fungibleTokenList","nonFungibleTokenList","fungibleTokenBlockedBy","nonFungibleTokenBlockedBy","credibleFungibleTokenList","credibleNonFungibleTokenList","tokens","blockedBy","addOrRemoveToken","token","strategy","Fungible","oldList","newList","updatedValue","blockOrUnblockToken","blocked","blockedUpdated","addToken","removeToken","trustToken","blockToken","addNonFungibleTokens","contract","tokenIds","collectionMap","draft","index","findIndex","oldRecord","assign","ids","blockIds","removeNonFungibleTokens","tokenId","queryClient","HubAPI","Hub","create","getStoredFungibleTokens","storedTokensMap","storedTokens","fetchQuery","getFungibleTokensFromTokenList","createFungibleToken","fungibleTokens","credibleToken","createNonFungibleToken","nonFungibleTokenListFromStorage","nonFungibleTokenListByChainFromStorage","getNonFungibleTokensFromTokenList","ChainIdList","abiCoder","BulkCheckout","NftRedPacket","HappyRedPacketV4","ERC20","ERC721","RouterV2ABI","SwapRouter","MaskBox","DODORouteProxy","WETH","BancorNetwork","OpenOceanExchangeV2","ZeroXSwap","Lido","AaveLendingPool","SmartPayEntryPoint","WalletContract","Create2Factory","LensHub","LensFollowNFT","Airdrop","ABI","abis","Map","construct","read","signature","abi","forEach","stateMutability","inputs","encodeFunctionSignature","components","log","readABIs","getTokenConstants","getTokenAmountDescription","BaseDescriptor","compute","NATIVE_TOKEN_ADDRESS","nativeToken","getFungibleToken","title","methods","description","scale10","formatBalance","decodeEvents","ContractReadonlyAPI","amount","isGreaterThanOrEqualTo","DescriptorWithTransactionDecodedReceipt","Contract","getReceipt","contractAddress","receipt","getTransactionReceipt","getWeb3Contract","jsonInterface","logs","TransferTokenDescriptor","getNativeToken","t","tokenAmountDescription","snackbar","successfulDescription","failedDescription","ContractDeploymentDescriptor","CancelDescriptor","getGitcoinConstant","getNativeTokenAddress","GitcoinDescriptor","context_","GITCOIN_ETH_ADDRESS","nativeTokenAddress","tokenAddress","_donations","plus","toFixed","tokenInAddress","tokenInAmount","popup","getMaskBoxConstants","MaskBox_ABI","MaskBoxDescriptor","getPurchaseTokenInfo","token_address","ClaimPayment","returnValues","MASK_BOX_CONTRACT_ADDRESS","to","getNftRedPacketConstant","getRedPacketConstants","HappyRedPacketV4ABI","NftRedPacketABI","RedPacketDescriptor","getClaimTokenInfo","claimed_value","ClaimSuccess","getRefundTokenInfo","remaining_balance","RefundSuccess","getClaimedNFTSymbol","getNonFungibleContractSymbol","getNonFungibleTokenContract","HAPPY_RED_PACKET_ADDRESS_V1","HAPPY_RED_PACKET_ADDRESS_V2","HAPPY_RED_PACKET_ADDRESS_V3","HAPPY_RED_PACKET_ADDRESS_V4","RED_PACKET_NFT_ADDRESS","some","_token_addr","_total_tokens","isZero","leftShift","pow10","SchemaType","ERC20Descriptor","spender","revokeTitle","approveTitle","revokeDescription","approveDescription","revokeSuccessDescription","approveSuccessDescription","revokeFailedDescription","approveFailedDescription","MetaMask","spenders","getFungibleTokenSpenders","tokenInfo","spendingCap","rawAmount","toString","successfulTitle","tokenDescription","schemaType","getSchemaType","ERC721Descriptor","getContractSymbol","action","operator","erc721Spender","last","UniswapV3MulticallFunctionExactInputABI","UniswapV3MulticallFunctionExactInputSingleABI","getTraderConstants","isNativeTokenAddress","getTokenConstant","SwapDescriptor","DODO_ETH_ADDRESS","OPENOCEAN_ETH_ADDRESS","ZERO_X_ETH_ADDRESS","BANCOR_ETH_ADDRESS","amountOutMin","outputToken","amountIn","tokenIn","tokenOut","fromToken","toToken","fromTokenAmount","minReturnAmount","_parameters","srcToken","dstToken","inputToken","inputTokenAmount","minOutputTokenAmount","_amount","_beneficiary","_minReturn","_path","tokenOutAddress","decodeParameters","recipient","amountOutMinimum","WETH_ADDRESS","minBuyAmount","sellAmount","actionName","wad","withdrawToken","SavingsDescriptor","_referral","asset","SmartPayDescriptor","LensDescriptor","AirdropAPI","AirdropDescriptor","_eventIndex","getPoolInfo","TransactionFormatterState","formatTransaction","txHash","createContext","createDescriptor","TransactionDescriptorType","AccountTransaction","isEmptyHex","TRANSFER","INTERACTION","DEPLOYMENT","RETRY","CANCEL","data","functionSignature","functionParameters","getCode","descriptor","computed","_tx","toTransaction","blockHash","blockNumber","gas","gasPrice","transactionIndex","txreceipt_status","confirmations","EtherscanURL","fetchJSON","EtherscanExplorerAPI","getLatestTransactions","offset","chain_id","module","startBlock","endblock","EtherscanExplorer","sha3","TTL","at","AccountChecker","CHECK_LATEST_TRANSACTION_SIZE","getExplorerTransactionId","getTransactionId","fetchLatestTransactions","hit","getStatus","latestTransactions","txId","tx","SUCCEED","FAILED","getTransactionStatusType","ReceiptChecker","TransactionCheckers","Checker","checkers","timer","check","checker","onNotify","startCheck","stopCheck","setTimeout","bind","clearTimeout","TransactionWatcherState","getTransactionCheckers","defaultBlockDelay","notifyTransaction","notifyError","FlowWeb3StateRef","getFlowAddress","addressMatched","FlowProviders","FlowChainResolver","Flow","SolanaWeb3StateRef","PublicKey","performReverseLookup","getHashedName","getNameAccountKey","NameRegistryState","getAllDomains","createClient","SolanaDomainAPI","client","SOL_TLD_AUTHORITY","getKey","hashedName","domainKey","replace","registry","retrieve","toBase58","SolanaDomain","SOL_RE","getSolanaAddress","getSolanaDomain","getSolanaDomainAddress","domainAddress","SolanaProviders","SolanaChainResolver","Solana","fetchJsonRpcResponse","ETH_CHAIN_ID","keccak256","listOfTopic0","idx","indexOf","topics","decodeLog","anonymous","raw","event","reduce","accumulate"],"sourceRoot":"","x_google_ignoreList":[94,95,96,97,98,99]}