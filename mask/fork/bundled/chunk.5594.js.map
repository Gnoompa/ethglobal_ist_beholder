{"version":3,"file":"bundled/chunk.5594.js","mappings":"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","sources":["webpack://mask-network/./packages/plugins/FileService/src/Worker/database.ts","webpack://mask-network/./packages/plugins/FileService/src/Worker/index.ts","webpack://mask-network/./packages/plugins/FileService/src/helpers.ts","webpack://mask-network/./packages/plugins/FileService/src/types.ts","webpack://mask-network/./packages/shared-base-ui/src/bom/open-window.ts","webpack://mask-network/./packages/typed-message/react/src/Metadata/index.ts"],"sourcesContent":["import type { Plugin } from '@masknet/plugin-infra'\nimport { compareDesc } from 'date-fns'\nimport { migrateFileInfoV1 } from '../helpers.js'\nimport type { FileInfo, FileInfoV1 } from '../types.js'\n\ntype DatabaseTypes = FileInfo | FileInfoV1\n\nlet Database: Plugin.Worker.DatabaseStorage<DatabaseTypes>\n\nexport function setupDatabase(_: typeof Database) {\n    Database = _\n}\n\nlet migrationDone = false\nasync function migrationV1() {\n    if (!Database) return\n    if (migrationDone) return\n    for await (const x of Database.iterate_mutate('arweave')) {\n        for (const file of migrateFileInfoV1(x.value)) {\n            await Database.add({\n                ...file,\n                createdAt: typeof file.createdAt !== 'number' ? new Date(file.createdAt).getTime() : file.createdAt,\n            })\n        }\n        await x.delete()\n    }\n    migrationDone = true\n}\n\nexport async function getAllFiles() {\n    await migrationV1()\n    const files: FileInfo[] = []\n    for await (const { value } of Database.iterate('file')) {\n        files.push(value)\n    }\n    return files.sort((a, b) => compareDesc(new Date(a.createdAt), new Date(b.createdAt)))\n}\n\nexport async function setFileInfo(info: FileInfo) {\n    await migrationV1()\n    return Database.add(info)\n}\n\nexport async function renameFile(id: string, newName: string) {\n    const file = await Database.get('file', id)\n    if (!file) throw new Error(\"File to rename doesn't exist\")\n    await Database.remove('file', id)\n    Database.add({ ...file, name: newName })\n}\n\nexport async function deleteFile(id: string) {\n    await Database.remove('file', id)\n}\n","import type { Plugin } from '@masknet/plugin-infra'\nimport { None, Result, Some } from 'ts-results-es'\nimport { base } from '../base.js'\nimport type { FileInfo } from '../types.js'\nimport { getAllFiles, setFileInfo, setupDatabase } from './database.js'\n\nconst worker: Plugin.Worker.Definition = {\n    ...base,\n    init(signal, context) {\n        context.startService(import('./service.js').then(({ upload, ...rest }) => rest))\n        context.startGeneratorService(import('./service.js').then(({ upload }) => ({ upload })))\n        setupDatabase(context.getDatabaseStorage())\n    },\n    backup: {\n        onBackup: async () => {\n            const files = await getAllFiles()\n            const result = files?.length ? new Some(files) : None\n\n            return result\n        },\n        onRestore: async (files: FileInfo[]) => {\n            return Result.wrap(() => {\n                files.map(async (file) => {\n                    await setFileInfo(file)\n                })\n            })\n        },\n    },\n}\n\nexport default worker\n","import urlcat from 'urlcat'\nimport { isNil } from 'lodash-es'\nimport type { Result } from 'ts-results-es'\nimport { isAfter } from 'date-fns'\nimport { encodeArrayBuffer, encodeText } from '@masknet/kit'\nimport { createLookupTableResolver } from '@masknet/shared-base'\nimport { openWindow } from '@masknet/shared-base-ui'\nimport type { TypedMessage } from '@masknet/typed-message'\nimport { createTypedMessageMetadataReader } from '@masknet/typed-message-react'\nimport { META_KEY_1, META_KEY_2, META_KEY_3, RECOVERY_PAGE } from './constants.js'\nimport { type FileInfo, type FileInfoV1, Provider } from './types.js'\nimport schemaV1 from './schema-v1.json'\nimport schemaV2 from './schema-v2.json'\nimport schemaV3 from './schema-v3.json'\n\n// Note: if the latest version has been changed, please update packages/mask/content-script/components/CompositionDialog/useSubmit.ts\nconst reader_v1 = createTypedMessageMetadataReader<FileInfoV1>(META_KEY_1, schemaV1)\nconst reader_v2 = createTypedMessageMetadataReader<FileInfo>(META_KEY_2, schemaV2)\nconst reader_v3 = createTypedMessageMetadataReader<FileInfo[]>(META_KEY_3, schemaV3)\n\nexport function getFileInfoMetadata(meta: TypedMessage['meta']): Result<FileInfo[], void> {\n    const v3 = reader_v3(meta)\n    if (v3.isOk()) return v3\n    const v2 = reader_v2(meta).map((info) => [info])\n    if (v2.isOk()) return v2\n    return reader_v1(meta).map(migrateFileInfoV1)\n}\n\nexport function migrateFileInfoV1(info: FileInfoV1): FileInfo[] {\n    return [{ ...info, type: 'file', provider: 'arweave' as Provider }]\n}\n\nexport async function makeFileKeySigned(fileKey: string | undefined | null) {\n    if (isNil(fileKey)) {\n        return null\n    }\n    const encodedKey = encodeText(fileKey)\n    const key = await crypto.subtle.generateKey({ name: 'HMAC', hash: { name: 'SHA-256' } }, true, ['sign', 'verify'])\n    const exportedKey = await crypto.subtle.exportKey('raw', key)\n    const signed = await crypto.subtle.sign({ name: 'HMAC' }, key, encodedKey)\n    return [signed, exportedKey].map(encodeArrayBuffer)\n}\n\nconst resolveGatewayAPI = createLookupTableResolver<Provider, string>(\n    {\n        [Provider.Arweave]: 'https://arweave.net',\n        [Provider.IPFS]: 'https://mask.infura-ipfs.io/ipfs',\n    },\n    () => 'Unknown provider',\n)\n\nexport function makeFileKey(length = 16) {\n    let key = ''\n    // cspell:disable-next-line\n    const table = 'ABDEFGHJKMNPQRTWXYadefhijkmnprstuvwxyz03478'\n    for (let i = 0; i < length; i += 1) {\n        key += table.charAt(Math.floor(Math.random() * table.length))\n    }\n    return key\n}\n\nexport function downloadFile(file: FileInfo) {\n    const gateway = resolveGatewayAPI(file.provider)\n    let link = urlcat(gateway, '/:txId', { txId: file.landingTxID })\n    if (isAfter(new Date(2022, 8, 1), new Date(file.createdAt))) {\n        link = urlcat(RECOVERY_PAGE, {\n            url: encodeURIComponent(link),\n        })\n    }\n    openWindow(file.key ? `${link}#${file.key}` : link)\n}\n\nasync function digestFile(file: File) {\n    const buffer = await file.arrayBuffer()\n    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer)\n    const hashHex = Array.from(new Uint8Array(hashBuffer)).map((b) => b.toString(16).padStart(2, '0'))\n    return hashHex\n}\n\nasync function digestMessage(message: string) {\n    const buffer = new TextEncoder().encode(message)\n    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer)\n    const hashHex = Array.from(new Uint8Array(hashBuffer))\n        .map((b) => b.toString(16).padStart(2, '0'))\n        .join('')\n    return hashHex\n}\n\nexport async function digest(file: File, extraData: Array<number | string | boolean | null>) {\n    const fileDigest = await digestFile(file)\n    const dataDigest = await digestMessage(JSON.stringify(extraData))\n    return digestMessage(JSON.stringify([fileDigest, dataDigest]))\n}\n","import type { FileFrameProps } from '@masknet/shared'\n\nexport enum Provider {\n    Arweave = 'arweave',\n    IPFS = 'ipfs',\n}\n\nexport interface ProviderConfig {\n    name: string\n    provider: Provider\n}\n\nexport interface LandingPageMetadata {\n    key: string | null | undefined\n    name: string\n    size: number\n    type: string\n    txId: string\n    useCDN: boolean\n}\n\nexport interface AttachmentOptions {\n    key?: string | null\n    type: string\n    block: Uint8Array\n    name: string\n}\n\nexport interface ProviderAgent {\n    makeAttachment(options: AttachmentOptions): Promise<string>\n    upload(id: string): AsyncGenerator<number>\n    uploadLandingPage(metadata: LandingPageMetadata): Promise<string>\n}\n\nexport interface FileInfo {\n    type: 'file'\n    provider: Provider\n    /**\n     * Before v3, it's checksum of the file.\n     * Since v3, it's digest(file, [provider, useCDN, encrypted])\n     */\n    id: string\n\n    name: string\n    size: number\n    /**\n     * Before v3, it's Date\n     * Since v3, it's number\n     */\n    createdAt: number | string\n\n    key: string | undefined\n    /** Doesn't exist in uploading file info */\n    payloadTxID?: string\n    /** Doesn't exist in uploading file info */\n    landingTxID?: string\n}\n\nexport type FileBaseProps = Omit<FileFrameProps, 'fileName'>\n\nexport type FileInfoV1 = Omit<FileInfo, 'type' | 'provider'> & {\n    type: 'arweave'\n}\n","type WindowTarget = LiteralUnion<'_top' | '_self' | '_parent' | '_blank'>\n\ninterface BehaviorFlags {\n    popup?: boolean\n    toolbar?: boolean\n    status?: boolean\n    resizable?: boolean\n    scrollbars?: boolean\n}\n\ninterface WindowFeatureFlags {\n    // Behavior\n    opener?: boolean\n    referrer?: boolean\n    behaviors?: BehaviorFlags\n    // Dimension\n    width?: number\n    height?: number\n    screenX?: number\n    screenY?: number\n}\n\nexport function openWindow(\n    url: string | URL | undefined | null,\n    target: WindowTarget = '_blank',\n    features: WindowFeatureFlags = {},\n): Window | null {\n    if (!url) return null\n    const flags = []\n    for (const [name, value] of Object.entries(features.behaviors ?? {})) {\n        if (value) flags.push(`${name}=1`)\n    }\n    if (!features.opener) flags.push('noopener')\n    if (!features.referrer) flags.push('noreferrer')\n    if (Number.isFinite(features.width)) flags.push(`width=${features.width}`)\n    if (Number.isFinite(features.height)) flags.push(`height=${features.height}`)\n    if (Number.isFinite(features.screenX)) flags.push(`screenX=${features.screenX}`)\n    if (Number.isFinite(features.screenY)) flags.push(`screenY=${features.screenY}`)\n    return window.open(url, target, flags.join(' '))\n}\n","import type { TypedMessage } from '@masknet/typed-message'\nimport { type Result, Ok, Err, Some, type Option, None } from 'ts-results-es'\nimport type { ReactNode } from 'react'\nimport z_schema from 'z-schema'\nimport { produce, enableMapSet, type Draft } from 'immer'\n\nconst metadataSchemaStore = new Map<string, object>()\nexport function getKnownMetadataKeys() {\n    return [...metadataSchemaStore.keys()]\n}\n\nexport function getMetadataSchema(key: string): Option<object> {\n    return metadataSchemaStore.has(key) ? Some(metadataSchemaStore.get(key)!) : None\n}\n\n/**\n * Register your metadata with a JSON Schema so we can validate the schema for you.\n * @param key Metadata key\n * @param jsonSchema JSON Schema to validate the metadata\n */\nexport function registerMetadataSchema(key: string, jsonSchema: object) {\n    metadataSchemaStore.set(key, jsonSchema)\n}\n\n/**\n * Create a TypedMessage metadata reader for your plugin\n * @param key Metadata key\n * @param jsonSchema JSON Schema to validate the metadata\n * @example\n * export const getFilePluginMetadata = createTypedMessageMetadataReader('plugin.meta.key', schema)\n * getFilePluginMetadata(meta)\n */\nexport function createTypedMessageMetadataReader<T>(key: string, jsonSchema?: object) {\n    if (jsonSchema) registerMetadataSchema(key, jsonSchema)\n    return (meta: TypedMessage['meta']) => readTypedMessageMetadataUntyped<T>(meta, key)\n}\n\n/**\n * The raw parser of metadata reader\n * @param meta Metadata object\n * @param key Metadata key\n * @param jsonSchema JSON Schema to validate the metadata\n */\nexport function readTypedMessageMetadataUntyped<T>(\n    meta: TypedMessage['meta'],\n    key: string,\n    jsonSchema?: object,\n): Result<T, void> {\n    if (!meta) return Err.EMPTY\n    if (!meta.has(key)) return Err.EMPTY\n    if (metadataSchemaStore.has(key) && !jsonSchema) jsonSchema = metadataSchemaStore.get(key)!\n    const data = meta.get(key)! as T\n    if (!jsonSchema) console.warn('You should add a JSON Schema to verify the metadata in the TypedMessage')\n    else {\n        const match = isDataMatchJSONSchema(data, jsonSchema)\n        if (match.isErr()) {\n            console.warn('The problematic metadata is dropped', data, 'errors:', match.error)\n            return Err.EMPTY\n        }\n    }\n    return Ok(data)\n}\n\nexport function isDataMatchJSONSchema(data: any, jsonSchema: object) {\n    const validator = new z_schema({})\n    if (!validator.validate(data, jsonSchema)) return Err(validator.getLastErrors())\n    return Ok.EMPTY\n}\n\n/**\n * Create a render of Metadata.\n * @param metadataReader A metadata reader (can be return value of createTypedMessageMetadataReader)\n */\nexport function createRenderWithMetadata<T>(metadataReader: (meta: TypedMessage['meta']) => Result<T, void>) {\n    return (metadata: TypedMessage['meta'], render: (data: T) => ReactNode | null): ReactNode | null => {\n        const message = metadataReader(metadata)\n        if (message.isOk()) return render(message.value)\n        return null\n    }\n}\n\nlet immer_setup = false\nexport function editTypedMessageMeta<T extends TypedMessage>(\n    typedMessage: T,\n    edit: (meta: NonNullable<Draft<TypedMessage['meta']>>) => void,\n): T {\n    if (!immer_setup) {\n        enableMapSet()\n        immer_setup = true\n    }\n    return produce(typedMessage, (e) => {\n        if (!e.meta) e.meta = new Map()\n        edit(e.meta)\n        if (e.meta.size === 0) e.meta = undefined\n    })\n}\n\n/**\n * Render with metadata\n * @param metadata Metadata\n * @param key Metadata key\n * @param render The render\n * @param jsonSchema JSON Schema to validate the metadata\n */\nexport function renderWithMetadataUntyped(\n    metadata: TypedMessage['meta'],\n    key: string,\n    render: (data: unknown) => ReactNode,\n    jsonSchema?: object,\n): ReactNode | null {\n    const message = readTypedMessageMetadataUntyped(metadata, key, jsonSchema)\n    if (message.isOk()) return render(message.value)\n    return null\n}\n"],"names":["compareDesc","migrateFileInfoV1","Database","setupDatabase","_","migrationDone","migrationV1","x","iterate_mutate","file","value","add","createdAt","Date","getTime","delete","getAllFiles","files","iterate","push","sort","a","b","setFileInfo","info","renameFile","id","newName","get","Error","remove","name","deleteFile","None","Result","Some","base","worker","init","signal","context","startService","then","upload","rest","startGeneratorService","getDatabaseStorage","backup","onBackup","result","length","onRestore","wrap","map","urlcat","isNil","isAfter","encodeArrayBuffer","encodeText","createLookupTableResolver","openWindow","createTypedMessageMetadataReader","META_KEY_1","META_KEY_2","META_KEY_3","RECOVERY_PAGE","Provider","schemaV1","schemaV2","schemaV3","reader_v1","reader_v2","reader_v3","getFileInfoMetadata","meta","v3","isOk","v2","type","provider","makeFileKeySigned","fileKey","encodedKey","key","crypto","subtle","generateKey","hash","exportedKey","exportKey","signed","sign","resolveGatewayAPI","Arweave","IPFS","makeFileKey","table","i","charAt","Math","floor","random","downloadFile","gateway","link","txId","landingTxID","url","encodeURIComponent","digestFile","buffer","arrayBuffer","hashBuffer","digest","hashHex","Array","from","Uint8Array","toString","padStart","digestMessage","message","TextEncoder","encode","join","extraData","fileDigest","dataDigest","JSON","stringify","target","features","flags","Object","entries","behaviors","opener","referrer","Number","isFinite","width","height","screenX","screenY","window","open","Ok","Err","z_schema","produce","enableMapSet","metadataSchemaStore","Map","getKnownMetadataKeys","keys","getMetadataSchema","has","registerMetadataSchema","jsonSchema","set","readTypedMessageMetadataUntyped","EMPTY","data","console","warn","match","isDataMatchJSONSchema","isErr","error","validator","validate","getLastErrors","createRenderWithMetadata","metadataReader","metadata","render","immer_setup","editTypedMessageMeta","typedMessage","edit","e","size","undefined","renderWithMetadataUntyped"],"sourceRoot":"","x_google_ignoreList":[]}