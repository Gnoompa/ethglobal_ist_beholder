{"version":3,"file":"bundled/chunk.9681.js","mappings":"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","sources":["webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/shared.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/utils/selector.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/utils/user.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/collecting/identity-provider.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/collecting/posts.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/collecting/theme.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/injection/post-inspector.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/collecting/identity.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/injection/NFT/NFTAvatarSettingDialog.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/injection/NFT/ProfileNFTAvatar.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/injection/NFT/NFTAvatarInInstagram.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/injection/NFT/NFTAvatarEditProfile.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/utils/avatar.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/injection/NFT/NFTAvatarInTimeline.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/injection/ProfileTab.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/injection/ProfileTabContent.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/injection/Avatar/index.tsx","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/customization/custom.ts","webpack://mask-network/./packages/mask/content-script/site-adaptors/instagram.com/ui-provider.ts","webpack://mask-network/./packages/plugins/Avatar/src/SiteAdaptor/NFTImage.tsx","webpack://mask-network/./packages/plugins/Avatar/src/SiteAdaptor/NFTAvatar.tsx","webpack://mask-network/./packages/plugins/Avatar/src/hooks/useNFTAvatar.ts","webpack://mask-network/./packages/web3-hooks/base/src/useAllowTestnet.ts","webpack://mask-network/./packages/shared/src/UI/components/ChainBoundary/index.tsx","webpack://mask-network/./packages/shared/src/UI/components/ElementAnchor/index.tsx","webpack://mask-network/./packages/shared/src/utils/isSameNFT.ts","webpack://mask-network/./packages/web3-hooks/base/src/useBlockedNonFungibleTokens.ts","webpack://mask-network/./packages/web3-hooks/base/src/useNetworkDescriptors.ts","webpack://mask-network/./packages/web3-hooks/base/src/useNonFungibleAssets.ts","webpack://mask-network/./node_modules/.pnpm/@react-hookz+web@23.1.0_react-dom@0.0.0-experimental-0a360642d-20230711_react@0.0.0-experimental-0a360642d-20230711/node_modules/@react-hookz/web/esm/useIntersectionObserver/index.js","webpack://mask-network/./node_modules/.pnpm/@tanstack+react-query@4.29.25_react-dom@0.0.0-experimental-0a360642d-20230711_react@0.0.0-exp_ph45ttbltampqv75cnp6zhp25e/node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.mjs"],"sourcesContent":["import type { SiteAdaptor } from '@masknet/types'\nimport { createSiteAdaptorSpecializedPostContext } from '../../site-adaptor-infra/utils/create-post-context.js'\nimport { hasPayloadLike } from '../../utils/index.js'\nimport { instagramBase } from './base.js'\n\nexport const instagramShared: SiteAdaptor.Shared & SiteAdaptor.Base = {\n    ...instagramBase,\n    utils: {\n        createPostContext: createSiteAdaptorSpecializedPostContext({\n            hasPayloadLike,\n        }),\n    },\n}\n","import { LiveSelector } from '@dimensiondev/holoflows-kit'\n\ntype E = HTMLElement\n\nfunction querySelector<T extends E, SingleMode extends boolean = true>(selector: string, singleMode = true) {\n    const ls = new LiveSelector<T, SingleMode>().querySelector<T>(selector)\n    return (singleMode ? ls.enableSingleMode() : ls) as LiveSelector<T, SingleMode>\n}\nfunction querySelectorAll<T extends E>(selector: string) {\n    return new LiveSelector().querySelectorAll<T>(selector)\n}\n\nexport function searchProfileTabListLastChildSelector() {\n    return querySelector<E>('section main  div[role=\"tablist\"] > :last-child')\n}\n\nexport function searchProfileTabPageSelector() {\n    return querySelector('section main[role=\"main\"] > div > :last-child')\n}\n\nexport function searchProfileTabSelector() {\n    return querySelector<E>('section main div[role=\"tablist\"]  a[aria-selected=\"false\"]')\n}\n\nexport function searchProfileActiveTabSelector() {\n    return querySelector<E>('section main  div[role=\"tablist\"] a[aria-selected=\"true\"]')\n}\n\nexport function bioDescriptionSelector() {\n    return querySelector<E>('section main header section > div:last-child h1')\n}\n\nexport function searchNickNameSelector() {\n    return querySelector<E>('section main header section > div:last-child > div > span')\n}\n\nexport function searchProfileTabArticlePageSelector() {\n    return querySelector<E>('section main div[role=\"tablist\"]')\n}\n\nexport function searchInstagramAvatarListSelector() {\n    return querySelector('[role=\"dialog\"] .piCib > div > form').closest(1).querySelector('button')\n}\n\nexport function searchInstagramAvatarSelector() {\n    return querySelector<E>('header img, img[data-testid=\"user-avatar\"]')\n}\n\nexport function searchInstagramProfileAvatarButtonSelector() {\n    return querySelector('section main header button > img').closest<HTMLDivElement>(3)\n}\n\nexport function searchInstagramAvatarSettingDialog() {\n    return querySelector('#ssrb_root_start').closest<E>(1)\n}\n\nexport function searchInstagramAvatarEditPageSettingDialog() {\n    return querySelector('#react-root')\n}\n\nexport function searchInstagramProfileEditButton() {\n    return querySelector('a[href=\"/accounts/edit/\"]')\n}\n\nexport function searchInstagramPostAvatarSelector() {\n    return new LiveSelector<HTMLImageElement, false>().querySelectorAll<HTMLImageElement>(\n        '[role=\"button\"] > a > img[crossorigin=\"anonymous\"]',\n    )\n}\n\nexport function inpageAvatarSelector() {\n    return querySelectorAll<HTMLDivElement>('[role=main] article[role=presentation] header [role=button]')\n}\n\nexport function searchInstagramHandleSelector() {\n    return querySelector<HTMLAnchorElement>('a[role=link]:has(img[alt$=\" profile picture\"])')\n}\nexport function searchInstagramSelfAvatarSelector() {\n    return querySelector(\n        'div[style=\"transform: translateX(0px);\"] > div > div > div:last-child > div > span[aria-describedby] > div > a img[crossorigin=\"anonymous\"]',\n    )\n}\n","import { compact } from 'lodash-es'\nimport { collectNodeText } from '../../../utils/index.js'\nimport {\n    bioDescriptionSelector,\n    searchInstagramHandleSelector,\n    searchNickNameSelector,\n    searchInstagramSelfAvatarSelector,\n} from './selector.js'\n\nexport function getBioDescription() {\n    const bio = bioDescriptionSelector().evaluate()\n    return bio ? collectNodeText(bio) : ''\n}\n\nexport function getPersonalHomepage() {\n    const node = searchInstagramHandleSelector().evaluate()\n\n    if (!node) return\n    return node.href\n}\n\nexport function getNickname() {\n    const node = searchNickNameSelector().evaluate()\n    return node ? collectNodeText(node) : ''\n}\n\nexport function getUserId() {\n    const node = searchInstagramHandleSelector().evaluate()\n    if (!node) return\n    return compact(node.getAttribute('href')?.split('/')).pop()\n}\n\nexport function getAvatar() {\n    const node = searchInstagramSelfAvatarSelector().evaluate()\n\n    if (!node) return ''\n    const imageURL = node.getAttribute('src') ?? ''\n    return imageURL.trim()\n}\n\nconst INSTAGRAM_AVATAR_ID_MATCH = /(\\w+).(?:png|jpg|gif|bmp)/\n\nexport function getAvatarId(avatarURL: string) {\n    if (!avatarURL) return ''\n    const _url = new URL(avatarURL)\n    const match = _url.pathname.match(INSTAGRAM_AVATAR_ID_MATCH)\n    if (!match) return ''\n    return match[1]\n}\n","import type { SiteAdaptorUI } from '@masknet/types'\nimport { creator } from '../../../site-adaptor-infra/index.js'\nimport { ProfileIdentifier } from '@masknet/shared-base'\nimport { instagramBase } from '../base.js'\nimport { type LiveSelector, MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { delay } from '@masknet/kit'\nimport { searchInstagramHandleSelector } from '../utils/selector.js'\nimport { getPersonalHomepage, getUserId, getAvatar } from '../utils/user.js'\n\nfunction resolveLastRecognizedIdentityInner(\n    ref: SiteAdaptorUI.CollectingCapabilities.IdentityResolveProvider['recognized'],\n    cancel: AbortSignal,\n) {\n    const handleSelector = searchInstagramHandleSelector()\n    const assign = async () => {\n        await delay(500)\n        const homepage = getPersonalHomepage()\n        const handle = getUserId()\n        const avatar = getAvatar()\n\n        ref.value = {\n            identifier: ProfileIdentifier.of(instagramBase.networkIdentifier, handle).unwrapOr(undefined),\n            nickname: handle,\n            avatar,\n            homepage,\n        }\n    }\n\n    assign()\n\n    const createWatcher = (selector: LiveSelector<HTMLElement, boolean>) => {\n        new MutationObserverWatcher(selector)\n            .addListener('onAdd', () => assign())\n            .addListener('onChange', () => assign())\n            .startWatch(\n                {\n                    childList: true,\n                    subtree: true,\n                    attributes: true,\n                    attributeFilter: ['href'],\n                },\n                cancel,\n            )\n\n        window.addEventListener('locationchange', assign, { signal: cancel })\n    }\n    createWatcher(handleSelector)\n}\n\nexport const IdentityProviderInstagram: SiteAdaptorUI.CollectingCapabilities.IdentityResolveProvider = {\n    async start(signal) {\n        resolveLastRecognizedIdentityInner(this.recognized, signal)\n    },\n    recognized: creator.EmptyIdentityResolveProviderState(),\n}\n","import { type DOMProxy, LiveSelector, MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { type TypedMessage, makeTypedMessageImage, makeTypedMessageTuple } from '@masknet/typed-message'\nimport { ProfileIdentifier } from '@masknet/shared-base'\nimport type { SiteAdaptorUI } from '@masknet/types'\nimport { startWatch } from '../../../utils/startWatch.js'\nimport { creator } from '../../../site-adaptor-infra/utils.js'\nimport { instagramBase } from '../base.js'\nimport { createRefsForCreatePostContext } from '../../../site-adaptor-infra/utils/create-post-context.js'\nimport { instagramShared } from '../shared.js'\n\nconst posts = new LiveSelector().querySelectorAll<HTMLDivElement>(\n    'main[role=\"main\"] article[role=\"presentation\"][tabindex=\"-1\"]',\n)\n\nexport const PostProviderInstagram: SiteAdaptorUI.CollectingCapabilities.PostsProvider = {\n    posts: creator.EmptyPostProviderState(),\n    start(signal) {\n        collectPostsInstagramInner(this.posts, signal)\n    },\n}\nfunction collectPostsInstagramInner(\n    store: SiteAdaptorUI.CollectingCapabilities.PostsProvider['posts'],\n    signal: AbortSignal,\n) {\n    startWatch(\n        new MutationObserverWatcher(posts).useForeach((node, key, metadata) => {\n            const { subscriptions, ...info } = createRefsForCreatePostContext()\n            const postInfo = instagramShared.utils.createPostContext({\n                comments: undefined,\n                rootElement: metadata,\n                suggestedInjectionPoint:\n                    metadata.realCurrent!.querySelector<HTMLDivElement>('header+div+div') || metadata.realCurrent!,\n                ...subscriptions,\n            })\n\n            store.set(metadata, postInfo)\n            function collectPostInfo() {\n                const nextTypedMessage: TypedMessage[] = []\n                info.postBy.value = getPostBy(metadata)\n                info.postID.value = getPostID(metadata)\n                const img = node.querySelectorAll('img')[1]\n                if (img) {\n                    nextTypedMessage.push(makeTypedMessageImage(img.src, img))\n                    info.postMetadataImages.add(img.src)\n                } else nextTypedMessage.push(makeTypedMessageImage(''))\n                info.postMessage.value = makeTypedMessageTuple(nextTypedMessage)\n            }\n            collectPostInfo()\n            return {\n                onNodeMutation: collectPostInfo,\n                onTargetChanged: collectPostInfo,\n                onRemove: () => store.delete(metadata),\n            }\n        }),\n        signal,\n    )\n}\n\nfunction getPostBy(node: DOMProxy): ProfileIdentifier | null {\n    if (node.destroyed) return null\n    // the first a\n    const author = node.current.querySelector('a')\n    if (!author) return null\n    const href = new URL(author.href).pathname\n    if (href.startsWith('/') && href.endsWith('/') && href.slice(1, -1).includes('/') === false) {\n        return ProfileIdentifier.of(instagramBase.networkIdentifier, href.slice(1, -1)).unwrapOr(null)\n    }\n    return null\n}\nfunction getPostID(node: DOMProxy): null | string {\n    if (node.destroyed) return null\n    return node.current?.querySelector<HTMLAnchorElement>('span a[href^=\"/\"]')?.text || null\n}\n","import type { SiteAdaptorUI } from '@masknet/types'\nimport { creator } from '../../../site-adaptor-infra/utils.js'\nimport { ThemeMode } from '@masknet/web3-shared-base'\n\nfunction resolveThemeSettingsInner(\n    ref: SiteAdaptorUI.CollectingCapabilities.ThemeSettingsProvider['recognized'],\n    cancel: AbortSignal,\n) {\n    function updateThemeColor(isDarkMode: boolean) {\n        ref.value = {\n            ...ref.value,\n            mode: isDarkMode ? ThemeMode.Dark : ThemeMode.Light,\n        }\n    }\n\n    updateThemeColor(\n        getComputedStyle(document.documentElement).getPropertyValue('--ig-primary-background') === '0, 0, 0',\n    )\n\n    const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            updateThemeColor(\n                getComputedStyle(document.documentElement).getPropertyValue('--ig-primary-background') === '0, 0, 0',\n            )\n        })\n    })\n\n    observer.observe(document.querySelector('html') as Node, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: ['class'],\n    })\n\n    cancel.addEventListener('abort', () => observer.disconnect())\n}\n\nexport const ThemeSettingsProviderInstagram: SiteAdaptorUI.CollectingCapabilities.ThemeSettingsProvider = {\n    recognized: creator.EmptyThemeSettingsProviderState(),\n    async start(cancel) {\n        resolveThemeSettingsInner(this.recognized, cancel)\n    },\n}\n","import { Flags } from '@masknet/flags'\nimport { injectPostInspectorDefault } from '../../../site-adaptor-infra/defaults/index.js'\nimport type { PostInfo } from '@masknet/plugin-infra/content-script'\n\nconst map = new WeakMap<HTMLElement, ShadowRoot>()\nfunction getShadowRoot(node: HTMLElement) {\n    if (map.has(node)) return map.get(node)!\n    const dom = node.attachShadow(Flags.shadowRootInit)\n    map.set(node, dom)\n    return dom\n}\nexport function injectPostInspectorInstagram(signal: AbortSignal, current: PostInfo) {\n    return injectPostInspectorDefault(\n        {\n            injectionPoint: (post) => getShadowRoot(post.suggestedInjectionPoint),\n        },\n        { slotPosition: 'after' },\n    )(current, signal)\n}\n","import { type LiveSelector, MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { delay } from '@masknet/kit'\nimport { ProfileIdentifier } from '@masknet/shared-base'\nimport type { SiteAdaptorUI } from '@masknet/types'\nimport { creator } from '../../../site-adaptor-infra/index.js'\nimport { instagramBase } from '../base.js'\nimport { searchInstagramAvatarSelector } from '../utils/selector.js'\nimport { getAvatar, getBioDescription, getNickname, getPersonalHomepage, getUserId } from '../utils/user.js'\n\nfunction resolveCurrentVisitingIdentityInner(\n    ref: SiteAdaptorUI.CollectingCapabilities.IdentityResolveProvider['recognized'],\n    cancel: AbortSignal,\n) {\n    const avatarSelector = searchInstagramAvatarSelector()\n    const assign = async () => {\n        await delay(500)\n        const bio = getBioDescription()\n        const homepage = getPersonalHomepage()\n        const nickname = getNickname()\n        const handle = getUserId()\n        const avatar = getAvatar()\n\n        ref.value = {\n            identifier: ProfileIdentifier.of(instagramBase.networkIdentifier, handle).unwrapOr(undefined),\n            nickname,\n            avatar,\n            bio,\n            homepage,\n        }\n    }\n    const createWatcher = (selector: LiveSelector<HTMLElement, boolean>) => {\n        new MutationObserverWatcher(selector)\n            .addListener('onAdd', () => assign())\n            .addListener('onChange', () => assign())\n            .startWatch(\n                {\n                    childList: true,\n                    subtree: true,\n                    attributes: true,\n                    attributeFilter: ['src', 'content'],\n                },\n                cancel,\n            )\n\n        window.addEventListener('locationchange', assign, { signal: cancel })\n    }\n\n    assign()\n\n    createWatcher(avatarSelector)\n}\n\nexport const CurrentVisitingIdentityProviderInstagram: SiteAdaptorUI.CollectingCapabilities.IdentityResolveProvider = {\n    hasDeprecatedPlaceholderName: false,\n    recognized: creator.EmptyIdentityResolveProviderState(),\n    start(cancel) {\n        resolveCurrentVisitingIdentityInner(this.recognized, cancel)\n    },\n}\n","import { useCallback, useState } from 'react'\nimport { useMount } from 'react-use'\nimport { useMaskSharedTrans } from '../../../../../shared-ui/index.js'\nimport { useCurrentVisitingIdentity } from '../../../../components/DataSource/useActivatedUI.js'\nimport {\n    toPNG,\n    NFTAvatar,\n    type NextIDAvatarMeta,\n    type SelectTokenInfo,\n    useSaveStringStorage,\n} from '@masknet/plugin-avatar'\nimport { getAvatarId } from '../../utils/user.js'\nimport { InjectedDialog, SelectProviderModal } from '@masknet/shared'\nimport { Button, DialogContent } from '@mui/material'\nimport { makeStyles } from '@masknet/theme'\nimport { Instagram } from '@masknet/web3-providers'\nimport { useChainContext } from '@masknet/web3-hooks-base'\n\nimport { MaskMessages, NetworkPluginID } from '@masknet/shared-base'\nimport { ChainId, SchemaType } from '@masknet/web3-shared-evm'\n\nconst useStyles = makeStyles()(() => ({\n    root: {},\n    wallet: {\n        height: 120,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n}))\n\nexport function NFTAvatarSettingDialog() {\n    const t = useMaskSharedTrans()\n    const [open, setOpen] = useState(false)\n    const { classes } = useStyles()\n    const { account } = useChainContext()\n    const identity = useCurrentVisitingIdentity()\n    const saveNFTAvatar = useSaveStringStorage(NetworkPluginID.PLUGIN_EVM)\n\n    const onChange = useCallback(\n        async (info: SelectTokenInfo) => {\n            try {\n                if (!info.token.metadata?.imageURL || !info.token.contract?.address) return\n                if (!identity.identifier) return\n                const image = await toPNG(info.token.metadata.imageURL)\n                if (!image || !account) return\n                const { profile_pic_url_hd } = await Instagram.uploadUserAvatar(image, identity.identifier.userId)\n                const avatarId = getAvatarId(profile_pic_url_hd)\n                const avatarInfo = await saveNFTAvatar(identity.identifier.userId, account, {\n                    address: info.token.contract.address,\n                    userId: identity.identifier.userId,\n                    tokenId: info.token.tokenId,\n                    avatarId,\n                    chainId: (info.token.chainId ?? ChainId.Mainnet) as ChainId,\n                    schema: (info.token.schema ?? SchemaType.ERC721) as SchemaType,\n                    pluginId: info.pluginID,\n                } as NextIDAvatarMeta)\n\n                if (!avatarInfo) {\n                    // eslint-disable-next-line no-alert\n                    alert('Sorry, failed to save NFT Avatar. Please set again.')\n                    setOpen(false)\n                    return\n                }\n\n                // If the avatar is set successfully, reload the page\n                window.location.reload()\n\n                setOpen(false)\n            } catch (error) {\n                if (error instanceof Error) {\n                    // eslint-disable-next-line no-alert\n                    alert(error.message)\n                    return\n                }\n            }\n        },\n        [identity, account, saveNFTAvatar],\n    )\n\n    const onClose = useCallback(() => setOpen(false), [])\n\n    useMount(() => {\n        return MaskMessages.events.nftAvatarSettingDialogUpdated.on((data) => setOpen(data.open))\n    })\n\n    const onClick = useCallback(() => {\n        SelectProviderModal.open()\n    }, [])\n    return (\n        <InjectedDialog keepMounted open={open} onClose={onClose} title={t.set_nft_profile_photo()}>\n            <DialogContent style={{ padding: 16 }}>\n                {account ? (\n                    <NFTAvatar\n                        onChange={onChange}\n                        classes={{\n                            root: classes.root,\n                        }}\n                    />\n                ) : (\n                    <div className={classes.wallet}>\n                        <Button onClick={onClick}>{t.connect_your_wallet()}</Button>\n                    </div>\n                )}\n            </DialogContent>\n        </InjectedDialog>\n    )\n}\n","import { useCallback, useLayoutEffect, useState } from 'react'\nimport { MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { makeStyles } from '@masknet/theme'\nimport { MaskMessages } from '@masknet/shared-base'\nimport { useLocationChange } from '@masknet/shared-base-ui'\nimport { startWatch } from '../../../../utils/startWatch.js'\nimport { searchInstagramAvatarEditPageSettingDialog, searchInstagramAvatarListSelector } from '../../utils/selector.js'\nimport { useMaskSharedTrans } from '../../../../../shared-ui/index.js'\nimport { attachReactTreeWithContainer } from '../../../../utils/shadow-root.js'\nimport { NFTAvatarSettingDialog } from './NFTAvatarSettingDialog.js'\n\nexport async function injectProfileNFTAvatarInInstagram(signal: AbortSignal) {\n    const watcher = new MutationObserverWatcher(searchInstagramAvatarListSelector())\n    startWatch(watcher, signal)\n    attachReactTreeWithContainer(watcher.firstDOMProxy.afterShadow, { signal }).render(<NFTAvatarButtonInDialog />)\n\n    const dialogWatcher = new MutationObserverWatcher(searchInstagramAvatarEditPageSettingDialog())\n    startWatch(dialogWatcher, signal)\n    attachReactTreeWithContainer(dialogWatcher.firstDOMProxy.afterShadow, { signal }).render(<NFTAvatarSettingDialog />)\n}\n\nconst useStyles = makeStyles<StyleProps>()((theme, props) => ({\n    root: {\n        width: '100%',\n        fontSize: props.fontSize,\n        lineHeight: 1.5,\n        minHeight: props.minHeight,\n        borderTop: props.borderTop,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        color: '#ED4956',\n        fontWeight: 600,\n        cursor: 'pointer',\n    },\n}))\n\ninterface StyleProps {\n    fontSize: number\n    minHeight: number\n    color?: string\n    borderTop?: string\n}\n\nfunction NFTAvatarButtonInDialog() {\n    const t = useMaskSharedTrans()\n    const [style, setStyle] = useState<StyleProps>({\n        fontSize: 12,\n        minHeight: 48,\n        // Instagram css var\n        borderTop: '1px solid rgba(var(--b6a,219,219,219),1)',\n    })\n    const { classes } = useStyles(style)\n\n    const setStyleWithSelector = useCallback(() => {\n        const dom = searchInstagramAvatarListSelector().evaluate()\n        if (!dom) return\n        const css = window.getComputedStyle(dom)\n        setStyle({\n            minHeight: Number(css.minHeight.replace('px', '')),\n            fontSize: Number(css.fontSize.replace('px', '')),\n            color: css.color,\n            borderTop: css.borderTop,\n        })\n    }, [])\n\n    const onClick = useCallback(() => {\n        MaskMessages.events.nftAvatarSettingDialogUpdated.sendToLocal({ open: true })\n    }, [])\n\n    useLayoutEffect(setStyleWithSelector, [])\n\n    useLocationChange(setStyleWithSelector)\n\n    return (\n        <div className={classes.root} onClick={onClick}>\n            &#x1F525; {t.use_nft()}\n        </div>\n    )\n}\n","import { max } from 'lodash-es'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useLocation, useWindowSize } from 'react-use'\nimport { type LiveSelector, MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { useChainContext } from '@masknet/web3-hooks-base'\nimport { makeStyles } from '@masknet/theme'\nimport type { AvatarMetaDB } from '@masknet/plugin-avatar'\nimport { useCurrentVisitingIdentity } from '../../../../components/DataSource/useActivatedUI.js'\nimport {\n    RSS3_KEY_SITE,\n    useNFT,\n    useNFTAvatar,\n    useWallet,\n    NFTBadge,\n    rainbowBorderKeyFrames,\n} from '@masknet/plugin-avatar'\nimport { startWatch } from '../../../../utils/startWatch.js'\nimport { attachReactTreeWithContainer } from '../../../../utils/shadow-root/renderInShadowRoot.js'\nimport { searchInstagramAvatarSelector } from '../../utils/selector.js'\nimport { getAvatarId } from '../../utils/user.js'\n\nexport function injectNFTAvatarInInstagram(signal: AbortSignal) {\n    const watcher = new MutationObserverWatcher(searchInstagramAvatarSelector())\n    startWatch(watcher, signal)\n    attachReactTreeWithContainer(watcher.firstDOMProxy.afterShadow, { signal }).render(<NFTAvatarInInstagram />)\n}\n\nconst useStyles = makeStyles()(() => ({\n    root: {\n        position: 'absolute',\n        textAlign: 'center',\n        color: 'white',\n        width: '100%',\n        height: '100%',\n        top: 0,\n        left: 0,\n    },\n    text: {\n        fontSize: '20px !important',\n        fontWeight: 700,\n    },\n    icon: {\n        width: '19px !important',\n        height: '19px !important',\n    },\n}))\n\nfunction NFTAvatarInInstagram() {\n    const { classes } = useStyles()\n    const [avatar, setAvatar] = useState<AvatarMetaDB>()\n\n    const identity = useCurrentVisitingIdentity()\n    const location = useLocation()\n    const { value: nftAvatar } = useNFTAvatar(identity.identifier?.userId, RSS3_KEY_SITE.INSTAGRAM)\n\n    const { account } = useChainContext()\n    const { loading: loadingWallet, value: storage } = useWallet(nftAvatar?.userId)\n    const { value: nftInfo, loading: loadingNFTInfo } = useNFT(\n        storage?.address ?? account,\n        nftAvatar?.address,\n        nftAvatar?.tokenId,\n        nftAvatar?.pluginId,\n        nftAvatar?.chainId,\n    )\n\n    const windowSize = useWindowSize()\n    const showAvatar = useMemo(() => {\n        if (location.pathname?.includes('/edit')) return false\n        return getAvatarId(identity.avatar ?? '') === avatar?.avatarId\n    }, [avatar?.avatarId, identity.avatar, location.pathname])\n\n    const size = useMemo(() => {\n        const ele = searchInstagramAvatarSelector().evaluate()\n\n        if (!ele) return 0\n\n        const style = window.getComputedStyle(ele)\n        return max([146, Number.parseInt(style.width.replace('px', '') ?? 0, 10)])\n    }, [windowSize])\n\n    useEffect(() => {\n        if (!showAvatar) return\n\n        let containerDom: LiveSelector<HTMLSpanElement | HTMLDivElement, true>\n\n        if (searchInstagramAvatarSelector().evaluate()?.parentElement?.tagName === 'SPAN') {\n            containerDom = searchInstagramAvatarSelector().closest<HTMLSpanElement>(1)\n        } else {\n            containerDom = searchInstagramAvatarSelector().closest<HTMLDivElement>(2)\n        }\n\n        const style = document.createElement('style')\n        style.innerText = `\n                ${rainbowBorderKeyFrames.styles}\n\n                .rainbowBorder {\n                    animation: ${rainbowBorderKeyFrames.name} 6s linear infinite;\n                    box-shadow: 0 5px 15px rgba(0, 248, 255, 0.4), 0 10px 30px rgba(37, 41, 46, 0.2);\n                    transition: .125s ease;\n                    border: 2px solid #00f8ff;\n                }\n            `\n\n        const parentDom = searchInstagramAvatarSelector().closest<HTMLDivElement>(2).evaluate()\n\n        parentDom?.appendChild(style)\n\n        containerDom.evaluate()?.classList.add('rainbowBorder')\n        return () => {\n            if (parentDom?.lastElementChild?.tagName === 'STYLE') {\n                parentDom.removeChild(parentDom.lastElementChild)\n            }\n            containerDom.evaluate()?.classList.remove('rainbowBorder')\n        }\n    }, [location.pathname, showAvatar])\n\n    useEffect(() => setAvatar(nftAvatar), [nftAvatar, location])\n\n    if (!avatar || !size || !showAvatar || loadingWallet || loadingNFTInfo) return null\n\n    return (\n        <NFTBadge\n            nftInfo={nftInfo}\n            hasRainbow={false}\n            size={size}\n            classes={{ root: classes.root, text: classes.text, icon: classes.icon }}\n        />\n    )\n}\n","import { useMemo } from 'react'\nimport { useLocation } from 'react-use'\nimport { makeStyles } from '@masknet/theme'\nimport { MaskMessages } from '@masknet/shared-base'\nimport { NFTAvatarButton } from '@masknet/plugin-avatar'\nimport { MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport {\n    searchInstagramAvatarSettingDialog,\n    searchInstagramProfileAvatarButtonSelector,\n    searchInstagramProfileEditButton,\n} from '../../utils/selector.js'\nimport { attachReactTreeWithContainer } from '../../../../utils/shadow-root/renderInShadowRoot.js'\nimport { startWatch } from '../../../../utils/startWatch.js'\nimport { NFTAvatarSettingDialog } from './NFTAvatarSettingDialog.js'\n\nexport function injectOpenNFTAvatarEditProfileButton(signal: AbortSignal) {\n    const watcher = new MutationObserverWatcher(searchInstagramProfileAvatarButtonSelector())\n    startWatch(watcher, signal)\n    attachReactTreeWithContainer(watcher.firstDOMProxy.afterShadow, { signal }).render(\n        <OpenNFTAvatarEditProfileButtonInInstagram />,\n    )\n\n    const dialogWatcher = new MutationObserverWatcher(searchInstagramAvatarSettingDialog())\n    startWatch(dialogWatcher, signal)\n    attachReactTreeWithContainer(dialogWatcher.firstDOMProxy.afterShadow, { signal }).render(<NFTAvatarSettingDialog />)\n}\n\nconst useStyles = makeStyles()(() => ({\n    root: {\n        marginTop: 5,\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        borderRadius: '4px !important',\n        height: 30,\n        width: 134,\n    },\n    text: {\n        fontSize: 12,\n        lineHeight: '12px',\n    },\n}))\n\nexport function openNFTAvatarSettingDialog() {\n    MaskMessages.events.nftAvatarSettingDialogUpdated.sendToLocal({ open: true })\n}\n\nfunction OpenNFTAvatarEditProfileButtonInInstagram() {\n    const location = useLocation()\n\n    const { classes } = useStyles()\n\n    const editButton = useMemo(() => searchInstagramProfileEditButton().evaluate(), [location.pathname])\n\n    if (location.pathname?.includes('/edit') || !editButton) return null\n\n    return (\n        <NFTAvatarButton\n            onClick={openNFTAvatarSettingDialog}\n            classes={{\n                root: classes.root,\n                text: classes.text,\n            }}\n        />\n    )\n}\n","import { getAvatarId } from './user.js'\n\nexport function getInjectNodeInfo(element: HTMLImageElement) {\n    const avatarId = getAvatarId(element.src)\n\n    if (!avatarId) return\n\n    // instagram bug, when page routing is switched, the avatar size on the timeline will initially be 150.\n    return {\n        element,\n        width: element.width === 150 ? 32 : element.width,\n        height: element.height === 150 ? 32 : element.height,\n        avatarId,\n    }\n}\n","import { memo } from 'react'\nimport { noop } from 'lodash-es'\nimport { makeStyles } from '@masknet/theme'\nimport { Flags } from '@masknet/flags'\nimport { DOMProxy, type LiveSelector, MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { startWatch } from '../../../../utils/startWatch.js'\nimport { attachReactTreeWithContainer } from '../../../../utils/shadow-root/renderInShadowRoot.js'\nimport { getInjectNodeInfo } from '../../utils/avatar.js'\nimport { NFTBadgeTimeline, RSS3_KEY_SITE } from '@masknet/plugin-avatar'\nimport { searchInstagramPostAvatarSelector } from '../../utils/selector.js'\n\nconst useStyles = makeStyles()(() => ({\n    root: {\n        transform: 'scale(1)!important',\n    },\n}))\n\nconst TimeLineRainbow = memo(\n    ({ userId, avatarId, width, height }: { userId: string; avatarId: string; width: number; height: number }) => {\n        const { classes } = useStyles()\n        return (\n            <div\n                style={{\n                    position: 'absolute',\n                    left: 0,\n                    top: 0,\n                    zIndex: 2,\n                }}>\n                <NFTBadgeTimeline\n                    userId={userId}\n                    avatarId={avatarId}\n                    width={width}\n                    height={height}\n                    classes={{\n                        root: classes.root,\n                    }}\n                    siteKey={RSS3_KEY_SITE.INSTAGRAM}\n                />\n            </div>\n        )\n    },\n)\n\nfunction _(selector: () => LiveSelector<HTMLImageElement>, signal: AbortSignal) {\n    startWatch(\n        new MutationObserverWatcher(selector()).useForeach((element) => {\n            let remove = noop\n\n            const run = async () => {\n                const href = (element.parentNode as HTMLAnchorElement)?.href\n\n                if (!href) return\n\n                const id = new URL(href).pathname.replaceAll('/', '')\n\n                if (!id) return\n\n                const info = getInjectNodeInfo(element)\n\n                if (!info) return\n\n                const proxy = DOMProxy({\n                    afterShadowRootInit: Flags.shadowRootInit,\n                })\n                proxy.realCurrent = info.element\n\n                const root = attachReactTreeWithContainer(proxy.afterShadow, { signal })\n\n                root.render(\n                    <TimeLineRainbow\n                        userId={id}\n                        avatarId={info.avatarId}\n                        width={info.width - 4}\n                        height={info.height - 4}\n                    />,\n                )\n\n                remove = root.destroy\n            }\n\n            run()\n\n            return {\n                onNodeMutation: run,\n                onTargetChanged: run,\n                onRemove: () => remove(),\n            }\n        }),\n        signal,\n    )\n}\n\nexport async function injectUserNFTAvatarAtInstagram(signal: AbortSignal) {\n    _(searchInstagramPostAvatarSelector, signal)\n}\n","import { useLayoutEffect, useMemo, useState } from 'react'\nimport { useLocation } from 'react-use'\nimport { MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { Icons } from '@masknet/icons'\nimport { makeStyles } from '@masknet/theme'\nimport { MaskMessages } from '@masknet/shared-base'\nimport { useMatchXS } from '@masknet/shared-base-ui'\nimport { ProfileTab } from '../../../components/InjectedComponents/ProfileTab.js'\nimport { attachReactTreeWithContainer } from '../../../utils/shadow-root/renderInShadowRoot.js'\nimport {\n    searchProfileActiveTabSelector,\n    searchProfileTabListLastChildSelector,\n    searchProfileTabPageSelector,\n    searchProfileTabSelector,\n} from '../utils/selector.js'\nimport { startWatch } from '../../../utils/startWatch.js'\n\nexport function injectProfileTabAtInstagram(signal: AbortSignal) {\n    let tabInjected = false\n    const contentWatcher = new MutationObserverWatcher(searchProfileTabPageSelector()).useForeach(() => {\n        const elePage = searchProfileTabPageSelector().evaluate()\n        if (elePage && !tabInjected) {\n            const watcher = new MutationObserverWatcher(searchProfileTabListLastChildSelector())\n            startWatch(watcher, signal)\n            attachReactTreeWithContainer(watcher.firstDOMProxy.afterShadow, { signal }).render(\n                <ProfileTabAtInstagram />,\n            )\n            tabInjected = true\n        }\n    })\n\n    startWatch(contentWatcher, signal)\n}\n\nfunction getStyleProps(activeColor: { activeColor: string; color: string }) {\n    const EMPTY_STYLE = {} as CSSStyleDeclaration\n    const eleTab = searchProfileTabSelector().evaluate()\n    const style = eleTab ? window.getComputedStyle(eleTab) : EMPTY_STYLE\n    return {\n        color: activeColor.color,\n        fontSize: style.fontSize,\n        padding: style.paddingBottom,\n        height: style.height,\n        hover: activeColor.activeColor,\n        line: activeColor.activeColor,\n    }\n}\n\nconst useStyles = makeStyles<StyleProps>()((theme, props) => {\n    return {\n        root: {\n            '&:hover': {\n                cursor: 'pointer',\n            },\n            display: '-webkit-box',\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginRight: 60,\n        },\n        button: {\n            fontSize: props.fontSize,\n            height: props.height,\n            justifyContent: 'center',\n            alignItems: 'center',\n            display: 'flex',\n            borderTop: '1px solid transparent',\n            fontWeight: 'var(--font-weight-system-semibold)',\n            color: 'rgb(var(--ig-secondary-text))',\n        },\n        selected: {\n            borderTop: `1px solid ${props.hover}`,\n            color: props.hover,\n            [`@media (max-width: ${theme.breakpoints.values.sm}px)`]: {\n                borderTop: 'unset',\n            },\n        },\n        icon: {\n            [`@media (min-width: ${theme.breakpoints.values.sm}px)`]: {\n                height: props.fontSize,\n                width: props.fontSize,\n                paddingRight: 4,\n            },\n        },\n    }\n})\n\ninterface StyleProps {\n    color: string\n    hover: string\n    fontSize: string\n    height: string\n    padding: string\n}\n\nfunction getActiveColor() {\n    const activeTab = searchProfileActiveTabSelector().evaluate()?.firstElementChild\n    if (!activeTab) return ''\n    const activeStyle = window.getComputedStyle(activeTab)\n    return activeStyle.color\n}\n\nfunction getColor() {\n    const tab = searchProfileTabSelector().evaluate()\n    if (!tab) return ''\n    const style = window.getComputedStyle(tab)\n    return style.color\n}\n\nfunction handler() {\n    MaskMessages.events.profileTabActive.sendToLocal({ active: false })\n    MaskMessages.events.profileTabHidden.sendToLocal({ hidden: true })\n    const activeTab = searchProfileActiveTabSelector().evaluate()\n    if (activeTab?.style) {\n        activeTab.style.borderTop = ''\n        activeTab.style.color = ''\n    }\n    const ele = searchProfileTabPageSelector().evaluate()\n    if (ele?.style) {\n        ele.style.display = ''\n    }\n}\n\nfunction ProfileTabAtInstagram() {\n    const isMobile = useMatchXS()\n    const location = useLocation()\n    const [styles, setStyles] = useState<StyleProps>({\n        color: '',\n        hover: '',\n        fontSize: '',\n        height: '',\n        padding: '',\n    })\n\n    const { activeColor, color } = useMemo(() => {\n        const activeColor = getActiveColor()\n        const color = getColor()\n\n        return { activeColor, color }\n    }, [location.pathname])\n\n    useLayoutEffect(() => {\n        const tabStyles = getStyleProps({ activeColor, color })\n        setStyles(tabStyles)\n    }, [])\n\n    const { classes } = useStyles(styles)\n    function reset() {\n        const activeTab = searchProfileActiveTabSelector().evaluate()\n        if (activeTab?.style) {\n            activeTab.style.borderTop = ''\n            activeTab.style.color = ''\n        }\n        activeTab?.removeEventListener('click', handler)\n\n        if (isMobile) {\n            const activeTab = searchProfileActiveTabSelector().evaluate()?.firstElementChild\n\n            if (activeTab?.tagName.toUpperCase() === 'SVG') {\n                const ele = activeTab as HTMLOrSVGImageElement\n                if (ele.style) {\n                    ele.style.color = ''\n                    ele.style.fill = ''\n                }\n            }\n        }\n        const ele = searchProfileTabPageSelector().evaluate()\n        if (ele?.style) {\n            ele.style.display = ''\n        }\n    }\n    function clear() {\n        const style = getStyleProps({ activeColor, color })\n        const activeTab = searchProfileActiveTabSelector().evaluate()\n        if (activeTab?.style) {\n            activeTab.style.setProperty('border-top', 'none', 'important')\n            activeTab.style.color = style.color\n        }\n\n        activeTab?.addEventListener('click', handler)\n\n        if (isMobile) {\n            const activeTab = searchProfileActiveTabSelector().evaluate()?.firstElementChild\n            if (activeTab?.tagName.toUpperCase() === 'SVG') {\n                const ele = activeTab as HTMLOrSVGImageElement\n                if (ele.style) {\n                    ele.style.color = style.color\n                    ele.style.fill = style.color\n                }\n            }\n        }\n        const ele = searchProfileTabPageSelector().evaluate()\n        if (ele?.style) {\n            ele.style.display = 'none'\n        }\n    }\n    return (\n        <ProfileTab\n            title=\"Web3\"\n            icon={<Icons.Collectible className={classes.icon} />}\n            classes={{\n                root: classes.root,\n                button: classes.button,\n                selected: classes.selected,\n            }}\n            reset={reset}\n            clear={clear}\n        />\n    )\n}\n","import { MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { getMaskColor, makeStyles } from '@masknet/theme'\nimport { ProfileTabContent } from '../../../components/InjectedComponents/ProfileTabContent.js'\nimport { startWatch } from '../../../utils/startWatch.js'\nimport { attachReactTreeWithContainer } from '../../../utils/shadow-root/renderInShadowRoot.js'\nimport { searchProfileActiveTabSelector, searchProfileTabArticlePageSelector } from '../utils/selector.js'\n\nexport function injectProfileTabContentAtInstagram(signal: AbortSignal) {\n    injectProfileTabContentHaveArticle(signal)\n}\n\nfunction injectProfileTabContentHaveArticle(signal: AbortSignal) {\n    const watcher = new MutationObserverWatcher(searchProfileTabArticlePageSelector())\n    startWatch(watcher, signal)\n    attachReactTreeWithContainer(watcher.firstDOMProxy.afterShadow, { signal }).render(<ProfileTabContentAtInstagram />)\n}\n\nfunction getStyleProps() {\n    const activeTab = searchProfileActiveTabSelector().evaluate() as HTMLDivElement\n    return {\n        backgroundColor: activeTab ? window.getComputedStyle(activeTab).backgroundColor : undefined,\n        fontFamily: activeTab ? window.getComputedStyle(activeTab as HTMLElement).fontFamily : undefined,\n    }\n}\n\nconst useStyles = makeStyles()((theme) => {\n    const props = getStyleProps()\n\n    return {\n        root: {\n            position: 'relative',\n        },\n        text: {\n            paddingTop: 29,\n            paddingBottom: 29,\n            '& > p': {\n                fontSize: 28,\n                fontFamily: props.fontFamily,\n                fontWeight: 700,\n                color: getMaskColor(theme).textPrimary,\n            },\n        },\n        button: {\n            backgroundColor: props.backgroundColor,\n            color: 'white',\n            marginTop: 18,\n            '&:hover': {\n                backgroundColor: props.backgroundColor,\n            },\n        },\n    }\n})\n\nfunction ProfileTabContentAtInstagram() {\n    const { classes } = useStyles()\n    return (\n        <ProfileTabContent\n            classes={{\n                root: classes.root,\n                button: classes.button,\n                text: classes.text,\n            }}\n        />\n    )\n}\n","import { noop } from 'lodash-es'\nimport { Flags } from '@masknet/flags'\nimport { DOMProxy, MutationObserverWatcher } from '@dimensiondev/holoflows-kit'\nimport { Plugin } from '@masknet/plugin-infra'\nimport { Avatar } from '../../../../components/InjectedComponents/Avatar.js'\nimport { attachReactTreeWithContainer } from '../../../../utils/shadow-root/renderInShadowRoot.js'\nimport { startWatch } from '../../../../utils/startWatch.js'\nimport { inpageAvatarSelector } from '../../utils/selector.js'\n\nexport async function injectAvatar(signal: AbortSignal) {\n    startWatch(\n        new MutationObserverWatcher(inpageAvatarSelector()).useForeach((ele) => {\n            let remover = noop\n            const remove = () => remover()\n\n            const run = async () => {\n                const proxy = DOMProxy({\n                    afterShadowRootInit: Flags.shadowRootInit,\n                })\n                proxy.realCurrent = ele.firstChild as HTMLElement\n                // create stacking context\n                ele.style.position = 'relative'\n                // TODO fetch userId\n                const userId = ''\n\n                const root = attachReactTreeWithContainer(proxy.afterShadow, { signal })\n                root.render(\n                    <div\n                        style={{\n                            position: 'absolute',\n                            left: 0,\n                            top: 0,\n                            width: '100%',\n                            height: '100%',\n                            zIndex: 2,\n                        }}>\n                        {userId ? (\n                            <Avatar userId={userId} sourceType={Plugin.SiteAdaptor.AvatarRealmSourceType.Post} />\n                        ) : null}\n                    </div>,\n                )\n                remover = root.destroy\n            }\n\n            run()\n            return {\n                onNodeMutation: run,\n                onTargetChanged: run,\n                onRemove: remove,\n            }\n        }),\n        signal,\n    )\n}\n","import { useMemo } from 'react'\nimport { produce, setAutoFreeze } from 'immer'\nimport { type Theme, unstable_createMuiStrictModeTheme } from '@mui/material'\nimport { useThemeSettings } from '../../../components/DataSource/useActivatedUI.js'\n\nexport function useThemeInstagramVariant(baseTheme: Theme) {\n    const themeSettings = useThemeSettings()\n\n    return useMemo(() => {\n        setAutoFreeze(false)\n\n        const InstagramTheme = produce(baseTheme, (theme) => {\n            theme.components = theme.components || {}\n            theme.components.MuiTypography = {\n                styleOverrides: {\n                    root: {\n                        fontFamily:\n                            \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif\",\n                    },\n                },\n            }\n        })\n        setAutoFreeze(true)\n        return unstable_createMuiStrictModeTheme(InstagramTheme)\n    }, [baseTheme, themeSettings])\n}\n","import type { SiteAdaptorUI } from '@masknet/types'\nimport { stateCreator } from '../../site-adaptor-infra/index.js'\nimport { instagramShared } from './shared.js'\nimport { instagramBase } from './base.js'\nimport { IdentityProviderInstagram } from './collecting/identity-provider.js'\nimport { PostProviderInstagram } from './collecting/posts.js'\nimport { ThemeSettingsProviderInstagram } from './collecting/theme.js'\nimport {\n    createTaskStartSetupGuideDefault,\n    InitAutonomousStateProfiles,\n    injectPageInspectorDefault,\n} from '../../site-adaptor-infra/defaults/index.js'\nimport { pasteInstagram } from '@masknet/injected-script'\nimport { injectPostInspectorInstagram } from './injection/post-inspector.js'\nimport { CurrentVisitingIdentityProviderInstagram } from './collecting/identity.js'\nimport { injectProfileNFTAvatarInInstagram } from './injection/NFT/ProfileNFTAvatar.js'\nimport { injectNFTAvatarInInstagram } from './injection/NFT/NFTAvatarInInstagram.js'\nimport {\n    injectOpenNFTAvatarEditProfileButton,\n    openNFTAvatarSettingDialog,\n} from './injection/NFT/NFTAvatarEditProfile.js'\nimport { injectUserNFTAvatarAtInstagram } from './injection/NFT/NFTAvatarInTimeline.js'\nimport { injectProfileTabAtInstagram } from './injection/ProfileTab.js'\nimport { injectProfileTabContentAtInstagram } from './injection/ProfileTabContent.js'\nimport { injectAvatar } from './injection/Avatar/index.js'\nimport { useThemeInstagramVariant } from './customization/custom.js'\n\nconst define: SiteAdaptorUI.Definition = {\n    ...instagramShared,\n    ...instagramBase,\n    automation: {\n        nativeCompositionDialog: {\n            async attachImage(url, options) {\n                pasteInstagram(new Uint8Array(await url.arrayBuffer()))\n            },\n        },\n    },\n    collecting: {\n        identityProvider: IdentityProviderInstagram,\n        currentVisitingIdentityProvider: CurrentVisitingIdentityProviderInstagram,\n        postsProvider: PostProviderInstagram,\n        themeSettingsProvider: ThemeSettingsProviderInstagram,\n    },\n    configuration: {},\n    customization: {\n        useTheme: useThemeInstagramVariant,\n    },\n    init(signal) {\n        const profiles = stateCreator.profiles()\n        InitAutonomousStateProfiles(signal, profiles, instagramBase.networkIdentifier)\n        // No need to init cause this network is not going to support those features now.\n        return { profiles }\n    },\n    injection: {\n        setupWizard: createTaskStartSetupGuideDefault(),\n        postInspector: injectPostInspectorInstagram,\n        profileAvatar: injectNFTAvatarInInstagram,\n        enhancedProfileNFTAvatar: injectProfileNFTAvatarInInstagram,\n        openNFTAvatar: injectOpenNFTAvatarEditProfileButton,\n        userAvatar: injectUserNFTAvatarAtInstagram,\n        pageInspector: injectPageInspectorDefault(),\n        profileTab: injectProfileTabAtInstagram,\n        profileTabContent: injectProfileTabContentAtInstagram,\n        openNFTAvatarSettingDialog,\n        /* newPostComposition: {\n            start: newPostCompositionInstagram,\n            supportedInputTypes: { text: true, image: true },\n            supportedOutputTypes: { text: false, image: true },\n        },*/\n        avatar: injectAvatar,\n    },\n}\nexport default define\n","import { memo } from 'react'\nimport { Icons } from '@masknet/icons'\nimport { makeStyles } from '@masknet/theme'\nimport { Box, Tooltip } from '@mui/material'\nimport { Image } from '@masknet/shared'\nimport { useWeb3Others } from '@masknet/web3-hooks-base'\nimport type { AllChainsNonFungibleToken } from '../types.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    root: {\n        position: 'relative',\n        width: 100,\n        height: 100,\n        border: '1px solid transparent',\n        boxSizing: 'border-box',\n        borderRadius: 8,\n    },\n    icon: {\n        position: 'absolute',\n        top: 5,\n        right: 5,\n        color: theme.palette.maskColor.primary,\n    },\n    image: {\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover',\n        boxSizing: 'border-box',\n        borderRadius: 8,\n    },\n    selected: {\n        borderColor: theme.palette.maskColor.primary,\n    },\n    imageLoading: {\n        color: theme.palette.maskColor.main,\n        height: '20px !important',\n        width: '20px !important',\n    },\n    imageContainer: {\n        background:\n            theme.palette.mode === 'dark'\n                ? 'linear-gradient(180deg, #202020 0%, #181818 100%)'\n                : 'linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.9) 100%), linear-gradient(90deg, rgba(98, 152, 234, 0.2) 1.03%, rgba(98, 152, 234, 0.2) 1.04%, rgba(98, 126, 234, 0.2) 100%)',\n        borderRadius: 8,\n        overflow: 'hidden',\n        width: '100%',\n        height: '100%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        display: 'flex',\n    },\n    tooltip: {\n        whiteSpace: 'nowrap',\n        maxWidth: '100%',\n    },\n}))\n\ninterface NFTImageProps {\n    className?: string\n    token: AllChainsNonFungibleToken\n    selected?: boolean\n    onSelect: (token: AllChainsNonFungibleToken) => void\n}\n\nexport const NFTImage = memo((props: NFTImageProps) => {\n    const { className, token, onSelect, selected } = props\n    const { classes, cx } = useStyles()\n    const Others = useWeb3Others()\n    const name = token.collection?.name || token.contract?.name\n    const uiTokenId = token.tokenId ? Others.formatTokenId(token.tokenId, 4) ?? `#${token.tokenId}` : name\n    const title = name ? `${name} ${uiTokenId}` : token.metadata?.name ?? ''\n\n    return (\n        <Tooltip\n            title={title}\n            arrow\n            classes={{ tooltip: classes.tooltip }}\n            disableInteractive\n            placement=\"top\"\n            PopperProps={{ disablePortal: true, popperOptions: { strategy: 'absolute' } }}>\n            <Box\n                className={cx(classes.root, className, selected ? classes.selected : '')}\n                onClick={() => onSelect(token)}>\n                <Image\n                    fallback={<Icons.MaskAvatar size={30} />}\n                    classes={{\n                        imageLoading: classes.imageLoading,\n                        container: classes.imageContainer,\n                    }}\n                    src={token.metadata?.imageURL ?? ''}\n                    className={classes.image}\n                />\n                {selected ? <Icons.CheckCircle className={classes.icon} size={24} /> : null}\n            </Box>\n        </Tooltip>\n    )\n})\n","import { useCallback, useState } from 'react'\nimport { compact, range, uniqBy } from 'lodash-es'\nimport {\n    AddCollectiblesModal,\n    ChainBoundary,\n    ElementAnchor,\n    ReloadStatus,\n    ReversedAddress,\n    SelectProviderModal,\n    isSameNFT,\n} from '@masknet/shared'\nimport { EMPTY_LIST, NetworkPluginID } from '@masknet/shared-base'\nimport { LoadingBase, makeStyles } from '@masknet/theme'\nimport {\n    useChainContext,\n    useNetworkContext,\n    useNonFungibleAssets,\n    useWeb3Connection,\n    useWeb3Hub,\n} from '@masknet/web3-hooks-base'\nimport type { ChainId } from '@masknet/web3-shared-evm'\nimport { Box, Button, List, ListItem, Skeleton, Typography } from '@mui/material'\nimport { useAvatarTrans } from '../locales/i18n_generated.js'\nimport type { AllChainsNonFungibleToken, SelectTokenInfo } from '../types.js'\nimport { NFTImage } from './NFTImage.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    root: {},\n    title: {\n        padding: 0,\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n    },\n    account: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    galleryItem: {\n        border: `1px solid ${theme.palette.divider}`,\n        borderRadius: 4,\n        height: 200,\n        '::-webkit-scrollbar': {\n            display: 'none',\n        },\n        overflowY: 'auto',\n    },\n    skeleton: {\n        width: 100,\n        height: 100,\n        objectFit: 'cover',\n        boxSizing: 'border-box',\n    },\n    changeButton: {\n        fontSize: 14,\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'row',\n        marginTop: theme.spacing(1),\n        gap: 16,\n    },\n    list: {\n        gridGap: 13,\n        display: 'grid',\n        gridTemplateColumns: 'repeat(5, 1fr)',\n        padding: 8,\n        overflowY: 'auto',\n    },\n\n    nftItem: {\n        position: 'relative',\n        cursor: 'pointer',\n        display: 'flex',\n        overflow: 'hidden',\n        padding: 0,\n        flexDirection: 'column',\n        borderRadius: 12,\n        userSelect: 'none',\n        justifyContent: 'center',\n        lineHeight: 0,\n    },\n}))\n\nexport interface NFTAvatarProps extends withClasses<'root'> {\n    onChange: (token: SelectTokenInfo) => void\n    hideWallet?: boolean\n}\n\nexport function NFTAvatar(props: NFTAvatarProps) {\n    const { onChange, hideWallet } = props\n    const { classes } = useStyles(undefined, { props })\n    const { pluginID } = useNetworkContext()\n    const { account, chainId } = useChainContext()\n    const [selectedToken, setSelectedToken] = useState<AllChainsNonFungibleToken>()\n    const [customCollectibles, setCustomCollectibles] = useState<AllChainsNonFungibleToken[]>([])\n    const t = useAvatarTrans()\n    const {\n        value: collectibles = EMPTY_LIST,\n        done: loadFinish,\n        next: nextPage,\n        error: loadError,\n    } = useNonFungibleAssets(pluginID, undefined, { chainId, account })\n\n    const onClick = useCallback(async () => {\n        if (!selectedToken) return\n        onChange({\n            account,\n            token: selectedToken,\n            image: selectedToken.metadata?.imageURL ?? '',\n            pluginID,\n        })\n        setSelectedToken(undefined)\n    }, [onChange, selectedToken, pluginID])\n\n    const Web3 = useWeb3Connection(pluginID)\n    const Hub = useWeb3Hub(pluginID)\n    const handleAddCollectibles = useCallback(async () => {\n        const results = await AddCollectiblesModal.openAndWaitForClose({\n            pluginID,\n            chainId,\n        })\n        if (!results || !chainId) return\n        const [contract, tokenIds] = results\n        const address = contract.address\n        const allSettled = await Promise.allSettled(\n            tokenIds.map(async (tokenId) => {\n                const [asset, token, isOwner] = await Promise.all([\n                    Hub.getNonFungibleAsset(address, tokenId, {\n                        chainId,\n                        account,\n                    }),\n                    Web3.getNonFungibleToken(address, tokenId, undefined, {\n                        chainId,\n                    }),\n                    Web3.getNonFungibleTokenOwnership(address, tokenId, account, undefined, {\n                        chainId,\n                    }),\n                ])\n\n                if (!asset?.contract?.chainId || !token.chainId || token.contract?.chainId !== chainId) return\n                if (!isOwner) return\n                return { ...token, ...asset } as AllChainsNonFungibleToken\n            }),\n        )\n        const tokens = compact(allSettled.map((x) => (x.status === 'fulfilled' ? x.value : null)))\n        if (!tokens.length) return\n        setSelectedToken(tokens[0])\n        setCustomCollectibles((tokens) => uniqBy([...tokens, ...tokens], (x) => x.contract?.address && x.tokenId))\n    }, [pluginID, chainId, account])\n\n    const loadingSkeletons = (\n        <List className={classes.list}>\n            {range(8).map((i) => (\n                <ListItem key={i} className={classes.nftItem}>\n                    <Skeleton animation=\"wave\" variant=\"rectangular\" className={classes.skeleton} />\n                </ListItem>\n            ))}\n        </List>\n    )\n\n    return (\n        <Box className={classes.root}>\n            <Box className={classes.title}>\n                <Typography variant=\"body1\" color=\"textPrimary\">\n                    {t.nft_list_title()}\n                </Typography>\n                {account ? (\n                    <Typography variant=\"body1\" color=\"textPrimary\" className={classes.account}>\n                        {t.nft_wallet_label()}: <ReversedAddress address={account} size={4} />\n                        {!hideWallet ? (\n                            <Button\n                                variant=\"text\"\n                                onClick={() => SelectProviderModal.open()}\n                                size=\"small\"\n                                className={classes.changeButton}>\n                                {t.nft_wallet_change()}\n                            </Button>\n                        ) : null}\n                    </Typography>\n                ) : null}\n            </Box>\n            <ChainBoundary expectedPluginID={NetworkPluginID.PLUGIN_EVM} expectedChainId={chainId as ChainId}>\n                <Box className={classes.galleryItem}>\n                    {!loadFinish && !loadError && !collectibles.length ? (\n                        loadingSkeletons\n                    ) : loadError || (!collectibles.length && !customCollectibles.length) ? (\n                        <ReloadStatus\n                            message={t.dashboard_no_collectible_found()}\n                            actionLabel={t.retry()}\n                            onRetry={nextPage}\n                        />\n                    ) : (\n                        <List className={classes.list}>\n                            {uniqBy(\n                                [...customCollectibles, ...collectibles],\n                                (x) => x.contract?.address && x.tokenId,\n                            ).map((token: AllChainsNonFungibleToken, i) => (\n                                <ListItem className={classes.nftItem} key={i}>\n                                    <NFTImage\n                                        key={i}\n                                        token={token}\n                                        selected={isSameNFT(NetworkPluginID.PLUGIN_EVM, token, selectedToken)}\n                                        onSelect={setSelectedToken}\n                                    />\n                                </ListItem>\n                            ))}\n                            <ElementAnchor\n                                callback={() => {\n                                    nextPage?.()\n                                }}>\n                                {!loadFinish && <LoadingBase />}\n                            </ElementAnchor>\n                        </List>\n                    )}\n                </Box>\n\n                <Box className={classes.buttons}>\n                    <Button variant=\"outlined\" size=\"small\" onClick={handleAddCollectibles}>\n                        {t.add_collectible()}\n                    </Button>\n\n                    <Button variant=\"contained\" size=\"small\" onClick={onClick} disabled={!selectedToken}>\n                        {t.set_avatar_title()}\n                    </Button>\n                </Box>\n            </ChainBoundary>\n        </Box>\n    )\n}\n","import type { AsyncState } from 'react-use/lib/useAsyncFn.js'\nimport type { AvatarMetaDB } from '../types.js'\nimport type { RSS3_KEY_SITE } from '../constants.js'\nimport { useAsync } from 'react-use'\nimport { getEnhanceableSiteType } from '@masknet/shared-base'\nimport { useGetNFTAvatar } from './useGetNFTAvatar.js'\n\nexport function useNFTAvatar(userId: string | undefined, key: RSS3_KEY_SITE): AsyncState<AvatarMetaDB | undefined> {\n    const getNFTAvatar = useGetNFTAvatar()\n\n    return useAsync(async () => {\n        const siteType = getEnhanceableSiteType()\n        if (!siteType) return\n        return getNFTAvatar(userId, siteType, key)\n    }, [userId, key, getNFTAvatar])\n}\n","import { useSubscription } from 'use-subscription'\nimport { FALSE, TRUE, type NetworkPluginID } from '@masknet/shared-base'\nimport { useWeb3State } from './useWeb3State.js'\n\nexport function useAllowTestnet<T extends NetworkPluginID>(pluginID?: T) {\n    const { Settings } = useWeb3State(pluginID)\n    return useSubscription(Settings?.allowTestnet ?? (process.env.NODE_ENV === 'development' ? TRUE : FALSE))\n}\n","import React, { memo } from 'react'\nimport { useAsyncFn } from 'react-use'\nimport { delay } from '@masknet/kit'\nimport { Box } from '@mui/material'\nimport { Icons } from '@masknet/icons'\nimport { makeStyles, ShadowRootTooltip, ActionButton, useCustomSnackbar } from '@masknet/theme'\nimport {\n    useNetworkContext,\n    useChainContext,\n    useNetworkDescriptor,\n    useAllowTestnet,\n    useChainIdValid,\n    RevokeChainContextProvider,\n    useWeb3Others,\n    useWeb3Connection,\n} from '@masknet/web3-hooks-base'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { ProviderType } from '@masknet/web3-shared-evm'\nimport { WalletIcon } from '../WalletIcon/index.js'\nimport { type ActionButtonPromiseProps } from '../ActionButton/index.js'\nimport { useSharedTrans } from '../../../locales/index.js'\nimport { SelectProviderModal } from '../../../index.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    tooltip: {\n        background: theme.palette.common.black,\n        color: theme.palette.common.white,\n        borderRadius: 4,\n        padding: 10,\n        maxWidth: 260,\n    },\n    arrow: {\n        color: theme.palette.common.black,\n    },\n    connectWallet: {\n        '& > .MuiButton-startIcon': {\n            lineHeight: 1,\n        },\n    },\n}))\n\nexport interface ChainBoundaryProps<T extends NetworkPluginID> extends withClasses<'switchButton'> {\n    /** The expected network plugin ID */\n    expectedPluginID: T\n    /** The expected sub-network under the network plugin */\n    expectedChainId: Web3Helper.Definition[T]['ChainId']\n    /** Judge the network is available for children components */\n    predicate?: (actualPluginID: NetworkPluginID, actualChainId: Web3Helper.Definition[T]['ChainId']) => boolean\n    expectedAccount?: string\n    className?: string\n    hiddenConnectButton?: boolean\n    switchChainWithoutPopup?: boolean\n    forceShowingWrongNetworkButton?: boolean\n    children?: React.ReactNode\n    ActionButtonPromiseProps?: Partial<ActionButtonPromiseProps>\n    actualNetworkPluginID?: T\n    switchText?: string\n    disableConnectWallet?: boolean\n}\n\nexport function ChainBoundaryWithoutContext<T extends NetworkPluginID>(props: ChainBoundaryProps<T>) {\n    const {\n        expectedPluginID,\n        expectedChainId,\n        expectedAccount,\n        actualNetworkPluginID,\n        switchText,\n        forceShowingWrongNetworkButton = false,\n        disableConnectWallet = false,\n        predicate = (actualPluginID, actualChainId) =>\n            actualPluginID === expectedPluginID && actualChainId === expectedChainId,\n    } = props\n\n    const t = useSharedTrans()\n    const { classes } = useStyles(undefined, { props })\n\n    const { pluginID: actualPluginID } = useNetworkContext(actualNetworkPluginID)\n\n    const Web3 = useWeb3Connection(actualPluginID)\n\n    const { showSnackbar } = useCustomSnackbar()\n    const {\n        account,\n        chainId: actualChainId,\n        providerType: actualProviderType,\n    } = useChainContext({ account: expectedAccount })\n\n    const expectedOthers = useWeb3Others(expectedPluginID)\n    const expectedAllowTestnet = useAllowTestnet(expectedPluginID)\n\n    const chainIdValid = useChainIdValid(actualPluginID)\n\n    const expectedChainName = expectedOthers.chainResolver.chainName(expectedChainId)\n    const expectedNetworkDescriptor = useNetworkDescriptor(expectedPluginID, expectedChainId)\n    const expectedChainAllowed = expectedOthers.chainResolver.isValidChainId(expectedChainId, expectedAllowTestnet)\n\n    const isPluginIDMatched = actualPluginID === expectedPluginID\n    const isMatched = predicate(actualPluginID, actualChainId)\n\n    const [{ loading }, onSwitchChain] = useAsyncFn(async () => {\n        try {\n            if (actualProviderType !== ProviderType.WalletConnect || isMatched || !expectedChainAllowed) return\n            await Web3.switchChain?.(expectedChainId)\n            await delay(1500)\n\n            return 'complete'\n        } catch (error) {\n            if (error instanceof Error) {\n                if (error.message === 'Chain currently not supported' || error.message === 'Invalid Request') {\n                    showSnackbar(t.plugin_wallet_switch_network_title(), {\n                        processing: false,\n                        variant: 'error',\n                        message: t.plugin_wallet_unsupported_chain({ network: expectedChainName ?? '' }),\n                        autoHideDuration: 5000,\n                    })\n                } else {\n                    showSnackbar(t.plugin_wallet_switch_network_title(), {\n                        processing: false,\n                        variant: 'error',\n                        message: t.plugin_wallet_switch_chain_failed(),\n                        autoHideDuration: 5000,\n                    })\n                }\n            }\n            return 'failed'\n        }\n    }, [expectedChainAllowed, isMatched, expectedChainId, actualProviderType, Web3, expectedChainName])\n\n    const renderBox = (children?: React.ReactNode, tips?: string) => {\n        return (\n            <ShadowRootTooltip\n                title={tips ?? ''}\n                classes={{ tooltip: classes.tooltip, arrow: classes.arrow }}\n                arrow\n                placement=\"top\">\n                <Box className={props.className} display=\"flex\" flexDirection=\"column\" width=\"100%\">\n                    {children}\n                </Box>\n            </ShadowRootTooltip>\n        )\n    }\n\n    if (!chainIdValid && !expectedChainAllowed && forceShowingWrongNetworkButton)\n        return renderBox(\n            !props.hiddenConnectButton ? (\n                <ActionButton\n                    fullWidth\n                    startIcon={<Icons.Wallet size={18} />}\n                    onClick={() => SelectProviderModal.open()}\n                    {...props.ActionButtonPromiseProps}>\n                    {t.plugin_wallet_wrong_network()}\n                </ActionButton>\n            ) : null,\n        )\n\n    // No wallet connected\n    if (!account && !disableConnectWallet)\n        return renderBox(\n            !props.hiddenConnectButton ? (\n                <ActionButton\n                    className={classes.connectWallet}\n                    fullWidth\n                    startIcon={<Icons.Wallet size={18} />}\n                    onClick={() => SelectProviderModal.open()}\n                    {...props.ActionButtonPromiseProps}>\n                    {t.plugin_wallet_connect_a_wallet()}\n                </ActionButton>\n            ) : null,\n        )\n\n    // Network mismatch\n    if (!isPluginIDMatched) {\n        return renderBox(\n            <ActionButton\n                fullWidth\n                className={classes.switchButton}\n                disabled={actualProviderType === ProviderType.WalletConnect}\n                startIcon={<WalletIcon mainIcon={expectedNetworkDescriptor?.icon} size={18} />}\n                sx={props.ActionButtonPromiseProps?.sx}\n                onClick={() => SelectProviderModal.open()}\n                {...props.ActionButtonPromiseProps}>\n                {t.plugin_wallet_change_wallet()}\n            </ActionButton>,\n            actualProviderType === ProviderType.WalletConnect\n                ? t.plugin_wallet_connect_tips()\n                : t.plugin_wallet_not_support_network(),\n        )\n    }\n\n    // Provider is Wallet Connect\n    if (actualProviderType === ProviderType.WalletConnect && !isMatched) {\n        return renderBox(\n            <ActionButton\n                startIcon={<WalletIcon mainIcon={expectedNetworkDescriptor?.icon} size={18} />}\n                onClick={onSwitchChain}\n                loading={loading}\n                className={classes.switchButton}\n                sx={props.ActionButtonPromiseProps?.sx}\n                {...props.ActionButtonPromiseProps}>\n                {switchText ?? t.plugin_wallet_switch_network({ network: expectedChainName ?? '' })}\n            </ActionButton>,\n            t.plugin_wallet_connect_tips(),\n        )\n    }\n\n    return props.children\n}\n\nexport const ChainBoundary = memo(function <T extends NetworkPluginID>(props: ChainBoundaryProps<T>) {\n    return (\n        <RevokeChainContextProvider>\n            <ChainBoundaryWithoutContext {...props} />\n        </RevokeChainContextProvider>\n    )\n})\n\nChainBoundary.displayName = 'ChainBoundary'\n","import { memo, useEffect, useRef } from 'react'\nimport { useIntersectionObserver } from '@react-hookz/web'\nimport { Stack, type StackProps } from '@mui/material'\n\ninterface ElementAnchorProps extends StackProps {\n    callback: (intersection: IntersectionObserverEntry | undefined) => void\n}\n\nexport const ElementAnchor = memo<ElementAnchorProps>(({ callback, children, ...rest }) => {\n    const elementRef = useRef<HTMLDivElement>(null)\n    const intersection = useIntersectionObserver(elementRef, {\n        rootMargin: '200px',\n    })\n\n    const callbackRef = useRef(callback)\n    callbackRef.current = callback\n    useEffect(() => {\n        if (!intersection?.isIntersecting) return\n        callbackRef.current(intersection)\n    }, [intersection])\n\n    return (\n        <Stack pt={1} ref={elementRef} justifyContent=\"center\" alignItems=\"center\" direction=\"row\" {...rest}>\n            {children}\n        </Stack>\n    )\n})\n\nElementAnchor.displayName = 'ElementAnchor'\n","import { NetworkPluginID } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { isSameAddress } from '@masknet/web3-shared-base'\n\nexport function isSameNFT(\n    pluginID: NetworkPluginID,\n    a: Web3Helper.NonFungibleAssetAll,\n    b?: Web3Helper.NonFungibleAssetAll,\n) {\n    if (pluginID === NetworkPluginID.PLUGIN_SOLANA) return a.tokenId === b?.tokenId && a.id === b.id\n    if (!a.contract) return false\n    return (\n        isSameAddress(a.contract.address, b?.contract?.address) &&\n        a.contract?.chainId === b?.contract?.chainId &&\n        a.tokenId === b?.tokenId\n    )\n}\n","import { useMemo } from 'react'\nimport { useSubscription } from 'use-subscription'\nimport { EMPTY_ARRAY, type NetworkPluginID } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useWeb3State } from './useWeb3State.js'\n\nexport function useBlockedNonFungibleTokens<S extends 'all' | void = void, T extends NetworkPluginID = NetworkPluginID>(\n    pluginID?: T,\n    schemaType?: Web3Helper.SchemaTypeScope<S, T>,\n) {\n    const { Token } = useWeb3State(pluginID)\n    const nfts = useSubscription(Token?.blockedNonFungibleTokens ?? EMPTY_ARRAY)\n    return useMemo<Array<Web3Helper.NonFungibleTokenScope<S, T>>>(() => {\n        return nfts.length && schemaType ? nfts.filter((x) => x.schema === schemaType) : nfts\n    }, [schemaType, nfts])\n}\n","import { type NetworkPluginID } from '@masknet/shared-base'\nimport { getRegisteredWeb3Networks } from '@masknet/web3-providers'\nimport { useNetworkContext } from './useContext.js'\n\n/**\n * Get all built in declared network descriptor\n * @param expectedPluginID\n * @param expectedChainIdOrNetworkTypeOrID\n * @returns\n */\nexport function useNetworkDescriptors<S extends 'all' | void = void, T extends NetworkPluginID = NetworkPluginID>(\n    expectedPluginID?: T,\n) {\n    const { pluginID } = useNetworkContext(expectedPluginID)\n    return getRegisteredWeb3Networks(pluginID)\n}\n","import { EMPTY_LIST, type NetworkPluginID } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport type { HubOptions } from '@masknet/web3-providers/types'\nimport { useInfiniteQuery } from '@tanstack/react-query'\nimport { useCallback, useMemo } from 'react'\nimport { useBlockedNonFungibleTokens } from './useBlockedNonFungibleTokens.js'\nimport { useChainContext } from './useContext.js'\nimport { useNetworkDescriptors } from './useNetworkDescriptors.js'\nimport { useWeb3Hub } from './useWeb3Hub.js'\n\n/**\n * Blocked tokens would be filtered out\n */\nexport function useNonFungibleAssets<S extends 'all' | void = void, T extends NetworkPluginID = NetworkPluginID>(\n    pluginID?: T,\n    schemaType?: Web3Helper.SchemaTypeScope<S, T>,\n    options?: HubOptions<T>,\n) {\n    const { account, chainId } = useChainContext({ account: options?.account })\n    const Hub = useWeb3Hub(pluginID, { account, chainId, ...options })\n    const networks = useNetworkDescriptors(pluginID)\n    const availableChainIds = useMemo(() => {\n        return networks\n            .filter((x) => x.isMainnet && (options?.chainId ? x.chainId === options.chainId : true))\n            .map((x) => x.chainId)\n    }, [networks, options?.chainId])\n\n    const blockedTokens = useBlockedNonFungibleTokens()\n    const blockedTokenIds = useMemo(() => {\n        return blockedTokens.filter((x) => availableChainIds.includes(x.chainId)).map((x) => x.id)\n    }, [blockedTokens, availableChainIds])\n    const { data, isLoading, fetchNextPage, hasNextPage, refetch, error, dataUpdatedAt } = useInfiniteQuery({\n        queryKey: ['non-fungible-assets', account, availableChainIds, blockedTokenIds],\n        queryFn: async ({ pageParam }) => {\n            const chainId = pageParam?.chainId || availableChainIds[0]\n            const res = await Hub.getNonFungibleAssets!(account, {\n                indicator: pageParam?.indicator,\n                size: 20,\n                chainId,\n            })\n            const data = blockedTokenIds.length\n                ? res.data.filter((x) => {\n                      const id = `${x.chainId}.${x.address}.${x.tokenId}`.toLowerCase()\n                      return !blockedTokenIds.includes(id)\n                  })\n                : res.data\n            return {\n                ...res,\n                data,\n                chainId,\n            }\n        },\n        getNextPageParam: (lastPage) => {\n            const { nextIndicator, chainId } = lastPage\n            const nextChainId = nextIndicator ? chainId : availableChainIds[availableChainIds.indexOf(chainId) + 1]\n            if (!nextChainId) return\n            return {\n                indicator: nextIndicator,\n                chainId: nextChainId,\n            }\n        },\n    })\n\n    const list = useMemo(() => data?.pages.flatMap((x) => x.data) || EMPTY_LIST, [data?.pages])\n    const nextPage = useCallback(() => fetchNextPage(), [fetchNextPage])\n\n    // TODO rename these fields in style of react-query\n    return {\n        value: list,\n        next: nextPage,\n        loading: isLoading,\n        done: !hasNextPage,\n        retry: refetch,\n        error,\n        dataUpdatedAt,\n    }\n}\n","import { useEffect, useState } from 'react';\nconst DEFAULT_THRESHOLD = [0];\nconst DEFAULT_ROOT_MARGIN = '0px';\nconst observers = new Map();\nconst getObserverEntry = (options) => {\n    const root = options.root ?? document;\n    let rootObservers = observers.get(root);\n    if (!rootObservers) {\n        rootObservers = new Map();\n        observers.set(root, rootObservers);\n    }\n    const opt = JSON.stringify([options.rootMargin, options.threshold]);\n    let entry = rootObservers.get(opt);\n    if (!entry) {\n        const callbacks = new Map();\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach((e) => callbacks.get(e.target)?.forEach((cb) => setTimeout(() => {\n                cb(e);\n            }, 0)));\n        }, options);\n        entry = {\n            observer,\n            observe(target, callback) {\n                let cbs = callbacks.get(target);\n                if (!cbs) {\n                    // If target has no observers yet - register it\n                    cbs = new Set();\n                    callbacks.set(target, cbs);\n                    observer.observe(target);\n                }\n                // As Set is duplicate-safe - simply add callback on each call\n                cbs.add(callback);\n            },\n            unobserve(target, callback) {\n                const cbs = callbacks.get(target);\n                // Else branch should never occur in case of normal execution\n                // because callbacks map is hidden in closure - it is impossible to\n                // simulate situation with non-existent `cbs` Set\n                /* istanbul ignore else */\n                if (cbs) {\n                    // Remove current observer\n                    cbs.delete(callback);\n                    if (!cbs.size) {\n                        // If no observers left unregister target completely\n                        callbacks.delete(target);\n                        observer.unobserve(target);\n                        // If not tracked elements left - disconnect observer\n                        if (!callbacks.size) {\n                            observer.disconnect();\n                            rootObservers.delete(opt);\n                            if (!rootObservers.size) {\n                                observers.delete(root);\n                            }\n                        }\n                    }\n                }\n            },\n        };\n        rootObservers.set(opt, entry);\n    }\n    return entry;\n};\n/**\n * Tracks intersection of a target element with an ancestor element or with a\n * top-level document's viewport.\n *\n * @param target React reference or Element to track.\n * @param options Like `IntersectionObserver` options but `root` can also be\n * react reference\n */\nexport function useIntersectionObserver(target, { threshold = DEFAULT_THRESHOLD, root: r, rootMargin = DEFAULT_ROOT_MARGIN, } = {}) {\n    const [state, setState] = useState();\n    useEffect(() => {\n        const tgt = target && 'current' in target ? target.current : target;\n        if (!tgt)\n            return;\n        let subscribed = true;\n        const observerEntry = getObserverEntry({\n            root: r && 'current' in r ? r.current : r,\n            rootMargin,\n            threshold,\n        });\n        const handler = (entry) => {\n            // It is reinsurance for the highly asynchronous invocations, almost\n            // impossible to achieve in tests, thus excluding from LOC\n            /* istanbul ignore else */\n            if (subscribed) {\n                setState(entry);\n            }\n        };\n        observerEntry.observe(tgt, handler);\n        return () => {\n            subscribed = false;\n            observerEntry.unobserve(tgt, handler);\n        };\n    }, [target, r, rootMargin, ...threshold]);\n    return state;\n}\n","'use client';\nimport { parseQueryArgs, InfiniteQueryObserver } from '@tanstack/query-core';\nimport { useBaseQuery } from './useBaseQuery.mjs';\n\nfunction useInfiniteQuery(arg1, arg2, arg3) {\n  const options = parseQueryArgs(arg1, arg2, arg3);\n  return useBaseQuery(options, InfiniteQueryObserver);\n}\n\nexport { useInfiniteQuery };\n//# sourceMappingURL=useInfiniteQuery.mjs.map\n"],"names":["createSiteAdaptorSpecializedPostContext","hasPayloadLike","instagramBase","instagramShared","utils","createPostContext","LiveSelector","querySelector","selector","singleMode","ls","enableSingleMode","querySelectorAll","searchProfileTabListLastChildSelector","searchProfileTabPageSelector","searchProfileTabSelector","searchProfileActiveTabSelector","bioDescriptionSelector","searchNickNameSelector","searchProfileTabArticlePageSelector","searchInstagramAvatarListSelector","closest","searchInstagramAvatarSelector","searchInstagramProfileAvatarButtonSelector","searchInstagramAvatarSettingDialog","searchInstagramAvatarEditPageSettingDialog","searchInstagramProfileEditButton","searchInstagramPostAvatarSelector","inpageAvatarSelector","searchInstagramHandleSelector","searchInstagramSelfAvatarSelector","compact","collectNodeText","getBioDescription","bio","evaluate","getPersonalHomepage","node","href","getNickname","getUserId","getAttribute","split","pop","getAvatar","imageURL","trim","INSTAGRAM_AVATAR_ID_MATCH","getAvatarId","avatarURL","_url","URL","match","pathname","creator","ProfileIdentifier","MutationObserverWatcher","delay","resolveLastRecognizedIdentityInner","ref","cancel","handleSelector","assign","homepage","handle","avatar","value","identifier","of","networkIdentifier","unwrapOr","undefined","nickname","createWatcher","addListener","startWatch","childList","subtree","attributes","attributeFilter","window","addEventListener","signal","IdentityProviderInstagram","start","recognized","EmptyIdentityResolveProviderState","makeTypedMessageImage","makeTypedMessageTuple","createRefsForCreatePostContext","posts","PostProviderInstagram","EmptyPostProviderState","collectPostsInstagramInner","store","useForeach","key","metadata","subscriptions","info","postInfo","comments","rootElement","suggestedInjectionPoint","realCurrent","set","collectPostInfo","nextTypedMessage","postBy","getPostBy","postID","getPostID","img","push","src","postMetadataImages","add","postMessage","onNodeMutation","onTargetChanged","onRemove","delete","destroyed","author","current","startsWith","endsWith","slice","includes","text","ThemeMode","resolveThemeSettingsInner","updateThemeColor","isDarkMode","mode","Dark","Light","getComputedStyle","document","documentElement","getPropertyValue","observer","MutationObserver","mutations","forEach","mutation","observe","attributeOldValue","disconnect","ThemeSettingsProviderInstagram","EmptyThemeSettingsProviderState","Flags","injectPostInspectorDefault","map","WeakMap","getShadowRoot","has","get","dom","attachShadow","shadowRootInit","injectPostInspectorInstagram","injectionPoint","post","slotPosition","resolveCurrentVisitingIdentityInner","avatarSelector","CurrentVisitingIdentityProviderInstagram","hasDeprecatedPlaceholderName","useCallback","useState","useMount","useMaskSharedTrans","useCurrentVisitingIdentity","toPNG","NFTAvatar","useSaveStringStorage","InjectedDialog","SelectProviderModal","Button","DialogContent","makeStyles","Instagram","useChainContext","MaskMessages","NetworkPluginID","ChainId","SchemaType","useStyles","root","wallet","height","display","justifyContent","alignItems","NFTAvatarSettingDialog","t","open","setOpen","classes","account","identity","saveNFTAvatar","PLUGIN_EVM","onChange","token","contract","address","image","profile_pic_url_hd","uploadUserAvatar","userId","avatarId","avatarInfo","tokenId","chainId","Mainnet","schema","ERC721","pluginId","pluginID","alert","location","reload","error","Error","message","onClose","events","nftAvatarSettingDialogUpdated","on","data","onClick","keepMounted","title","set_nft_profile_photo","style","padding","div","className","connect_your_wallet","useLayoutEffect","useLocationChange","attachReactTreeWithContainer","injectProfileNFTAvatarInInstagram","watcher","firstDOMProxy","afterShadow","render","NFTAvatarButtonInDialog","dialogWatcher","theme","props","width","fontSize","lineHeight","minHeight","borderTop","color","fontWeight","cursor","setStyle","setStyleWithSelector","css","Number","replace","sendToLocal","use_nft","max","useEffect","useMemo","useLocation","useWindowSize","RSS3_KEY_SITE","useNFT","useNFTAvatar","useWallet","NFTBadge","rainbowBorderKeyFrames","injectNFTAvatarInInstagram","NFTAvatarInInstagram","position","textAlign","top","left","icon","setAvatar","nftAvatar","INSTAGRAM","loading","loadingWallet","storage","nftInfo","loadingNFTInfo","windowSize","showAvatar","size","ele","parseInt","containerDom","parentElement","tagName","createElement","innerText","styles","name","parentDom","appendChild","classList","lastElementChild","removeChild","remove","hasRainbow","NFTAvatarButton","injectOpenNFTAvatarEditProfileButton","OpenNFTAvatarEditProfileButtonInInstagram","marginTop","marginLeft","marginRight","borderRadius","openNFTAvatarSettingDialog","editButton","getInjectNodeInfo","element","memo","noop","DOMProxy","NFTBadgeTimeline","transform","TimeLineRainbow","zIndex","siteKey","_","run","parentNode","id","replaceAll","proxy","afterShadowRootInit","destroy","injectUserNFTAvatarAtInstagram","Icons","useMatchXS","ProfileTab","injectProfileTabAtInstagram","tabInjected","contentWatcher","elePage","ProfileTabAtInstagram","getStyleProps","activeColor","EMPTY_STYLE","eleTab","paddingBottom","hover","line","button","selected","breakpoints","values","sm","paddingRight","getActiveColor","activeTab","firstElementChild","activeStyle","getColor","tab","handler","profileTabActive","active","profileTabHidden","hidden","isMobile","setStyles","tabStyles","reset","removeEventListener","toUpperCase","fill","clear","setProperty","Collectible","getMaskColor","ProfileTabContent","injectProfileTabContentAtInstagram","injectProfileTabContentHaveArticle","ProfileTabContentAtInstagram","backgroundColor","fontFamily","paddingTop","textPrimary","Plugin","Avatar","injectAvatar","remover","firstChild","sourceType","SiteAdaptor","AvatarRealmSourceType","Post","produce","setAutoFreeze","unstable_createMuiStrictModeTheme","useThemeSettings","useThemeInstagramVariant","baseTheme","themeSettings","InstagramTheme","components","MuiTypography","styleOverrides","stateCreator","createTaskStartSetupGuideDefault","InitAutonomousStateProfiles","injectPageInspectorDefault","pasteInstagram","define","automation","nativeCompositionDialog","attachImage","url","options","Uint8Array","arrayBuffer","collecting","identityProvider","currentVisitingIdentityProvider","postsProvider","themeSettingsProvider","configuration","customization","useTheme","init","profiles","injection","setupWizard","postInspector","profileAvatar","enhancedProfileNFTAvatar","openNFTAvatar","userAvatar","pageInspector","profileTab","profileTabContent","Box","Tooltip","Image","useWeb3Others","border","boxSizing","right","palette","maskColor","primary","objectFit","borderColor","imageLoading","main","imageContainer","background","overflow","tooltip","whiteSpace","maxWidth","NFTImage","onSelect","cx","Others","collection","uiTokenId","formatTokenId","arrow","disableInteractive","placement","PopperProps","disablePortal","popperOptions","strategy","fallback","MaskAvatar","container","CheckCircle","range","uniqBy","AddCollectiblesModal","ChainBoundary","ElementAnchor","ReloadStatus","ReversedAddress","isSameNFT","EMPTY_LIST","LoadingBase","useNetworkContext","useNonFungibleAssets","useWeb3Connection","useWeb3Hub","List","ListItem","Skeleton","Typography","useAvatarTrans","galleryItem","divider","overflowY","skeleton","changeButton","buttons","flexDirection","spacing","gap","list","gridGap","gridTemplateColumns","nftItem","userSelect","hideWallet","selectedToken","setSelectedToken","customCollectibles","setCustomCollectibles","collectibles","done","loadFinish","next","nextPage","loadError","Web3","Hub","handleAddCollectibles","results","openAndWaitForClose","tokenIds","allSettled","Promise","asset","isOwner","all","getNonFungibleAsset","getNonFungibleToken","getNonFungibleTokenOwnership","tokens","x","status","length","loadingSkeletons","i","animation","variant","nft_list_title","nft_wallet_label","nft_wallet_change","expectedPluginID","expectedChainId","dashboard_no_collectible_found","actionLabel","retry","onRetry","callback","add_collectible","disabled","set_avatar_title","useAsync","getEnhanceableSiteType","useGetNFTAvatar","getNFTAvatar","siteType","useSubscription","FALSE","TRUE","useWeb3State","useAllowTestnet","Settings","allowTestnet","process","env","NODE_ENV","React","useAsyncFn","ShadowRootTooltip","ActionButton","useCustomSnackbar","useNetworkDescriptor","useChainIdValid","RevokeChainContextProvider","ProviderType","WalletIcon","useSharedTrans","common","black","white","connectWallet","ChainBoundaryWithoutContext","expectedAccount","actualNetworkPluginID","switchText","forceShowingWrongNetworkButton","disableConnectWallet","predicate","actualPluginID","actualChainId","showSnackbar","providerType","actualProviderType","expectedOthers","expectedAllowTestnet","chainIdValid","expectedChainName","chainResolver","chainName","expectedNetworkDescriptor","expectedChainAllowed","isValidChainId","isPluginIDMatched","isMatched","onSwitchChain","WalletConnect","switchChain","plugin_wallet_switch_network_title","processing","plugin_wallet_unsupported_chain","network","autoHideDuration","plugin_wallet_switch_chain_failed","renderBox","children","tips","hiddenConnectButton","fullWidth","startIcon","Wallet","ActionButtonPromiseProps","plugin_wallet_wrong_network","plugin_wallet_connect_a_wallet","switchButton","mainIcon","sx","plugin_wallet_change_wallet","plugin_wallet_connect_tips","plugin_wallet_not_support_network","plugin_wallet_switch_network","displayName","useRef","useIntersectionObserver","Stack","rest","elementRef","intersection","rootMargin","callbackRef","isIntersecting","pt","direction","isSameAddress","a","b","PLUGIN_SOLANA","EMPTY_ARRAY","useBlockedNonFungibleTokens","schemaType","Token","nfts","blockedNonFungibleTokens","filter","getRegisteredWeb3Networks","useNetworkDescriptors","useInfiniteQuery","networks","availableChainIds","isMainnet","blockedTokens","blockedTokenIds","isLoading","fetchNextPage","hasNextPage","refetch","dataUpdatedAt","queryKey","queryFn","pageParam","res","getNonFungibleAssets","indicator","toLowerCase","getNextPageParam","lastPage","nextIndicator","nextChainId","indexOf","pages","flatMap"],"sourceRoot":"","x_google_ignoreList":[29,30]}