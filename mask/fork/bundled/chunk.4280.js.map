{"version":3,"file":"bundled/chunk.4280.js","mappings":";;;;;;;;;;;;;;;;;;;AAA2C;AACD;AACN;AACpC,mCAAmC,gEAAI;AACvC,6BAA6B,gEAAI;AACjC,kCAAkC,gEAAI;AACtC,mCAAmC,gEAAI;AACvC,yCAAyC,gEAAI;AAC7C,0CAA0C,gEAAI;AAC9C,6BAA6B,gEAAI;AACjC,4BAA4B,gEAAI;AAChC,kCAAkC,gEAAI;AACtC,iCAAiC,gEAAI;AACrC,4FAA4F,oEAAyB;AACrH,qGAAqG,gFAAqC;AAC1I,wGAAwG,gFAAqC;AAC7I,0HAA0H,0EAA+B;AACzJ,6HAA6H,0EAA+B;AAC5J,sFAAsF,8DAAmB;AACzG,mFAAmF,6DAAkB;AACrG,qGAAqG,mEAAwB;AAC7H,kGAAkG,kEAAuB;AACzH;AACA;AACA,4CAA4C,8EAAmC;AAC/E;AACA;AACA,UAAU,8EAAmC;AAC7C,UAAU,gFAAqC;AAC/C;AACA;AACA;AACA;AACA,eAAe,gEAAI;AACnB;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP,WAAW,8DAAmB;AAC9B;AACO;AACP,WAAW,qEAA0B;AACrC;AACO;AACP;AACA;AACO;AACP,WAAW,6DAAkB;AAC7B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,IAAI,iEAAsB;AAC1B;AACA;AACA;AACA,QAAQ,gxWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACf2M;AACpM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,QAAQ,wEAAU,CAAC,yEAAe;AAClC;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;AC3HO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,iFAAiF,QAAQ;AACzF;AACA;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACyC;AACzC,iEAAe,4CAAI,EAAC;;;;;;;;;;;ACJpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA","sources":["webpack://mask-network/./node_modules/.pnpm/tiny-secp256k1@2.2.3/node_modules/tiny-secp256k1/lib/index.js","webpack://mask-network/./node_modules/.pnpm/tiny-secp256k1@2.2.3/node_modules/tiny-secp256k1/lib/rand.browser.js","webpack://mask-network/./node_modules/.pnpm/tiny-secp256k1@2.2.3/node_modules/tiny-secp256k1/lib/validate.js","webpack://mask-network/./node_modules/.pnpm/tiny-secp256k1@2.2.3/node_modules/tiny-secp256k1/lib/validate_error.js","webpack://mask-network/./node_modules/.pnpm/tiny-secp256k1@2.2.3/node_modules/tiny-secp256k1/lib/wasm_loader.browser.js","webpack://mask-network/./node_modules/.pnpm/uint8array-tools@0.0.7/node_modules/uint8array-tools/src/mjs/browser.js"],"sourcesContent":["import { compare } from \"uint8array-tools\";\nimport * as validate from \"./validate.js\";\nimport wasm from \"./wasm_loader.js\";\nconst WASM_BUFFER = new Uint8Array(wasm.memory.buffer);\nconst WASM_PRIVATE_KEY_PTR = wasm.PRIVATE_INPUT.value;\nconst WASM_PUBLIC_KEY_INPUT_PTR = wasm.PUBLIC_KEY_INPUT.value;\nconst WASM_PUBLIC_KEY_INPUT_PTR2 = wasm.PUBLIC_KEY_INPUT2.value;\nconst WASM_X_ONLY_PUBLIC_KEY_INPUT_PTR = wasm.X_ONLY_PUBLIC_KEY_INPUT.value;\nconst WASM_X_ONLY_PUBLIC_KEY_INPUT2_PTR = wasm.X_ONLY_PUBLIC_KEY_INPUT2.value;\nconst WASM_TWEAK_INPUT_PTR = wasm.TWEAK_INPUT.value;\nconst WASM_HASH_INPUT_PTR = wasm.HASH_INPUT.value;\nconst WASM_EXTRA_DATA_INPUT_PTR = wasm.EXTRA_DATA_INPUT.value;\nconst WASM_SIGNATURE_INPUT_PTR = wasm.SIGNATURE_INPUT.value;\nconst PRIVATE_KEY_INPUT = WASM_BUFFER.subarray(WASM_PRIVATE_KEY_PTR, WASM_PRIVATE_KEY_PTR + validate.PRIVATE_KEY_SIZE);\nconst PUBLIC_KEY_INPUT = WASM_BUFFER.subarray(WASM_PUBLIC_KEY_INPUT_PTR, WASM_PUBLIC_KEY_INPUT_PTR + validate.PUBLIC_KEY_UNCOMPRESSED_SIZE);\nconst PUBLIC_KEY_INPUT2 = WASM_BUFFER.subarray(WASM_PUBLIC_KEY_INPUT_PTR2, WASM_PUBLIC_KEY_INPUT_PTR2 + validate.PUBLIC_KEY_UNCOMPRESSED_SIZE);\nconst X_ONLY_PUBLIC_KEY_INPUT = WASM_BUFFER.subarray(WASM_X_ONLY_PUBLIC_KEY_INPUT_PTR, WASM_X_ONLY_PUBLIC_KEY_INPUT_PTR + validate.X_ONLY_PUBLIC_KEY_SIZE);\nconst X_ONLY_PUBLIC_KEY_INPUT2 = WASM_BUFFER.subarray(WASM_X_ONLY_PUBLIC_KEY_INPUT2_PTR, WASM_X_ONLY_PUBLIC_KEY_INPUT2_PTR + validate.X_ONLY_PUBLIC_KEY_SIZE);\nconst TWEAK_INPUT = WASM_BUFFER.subarray(WASM_TWEAK_INPUT_PTR, WASM_TWEAK_INPUT_PTR + validate.TWEAK_SIZE);\nconst HASH_INPUT = WASM_BUFFER.subarray(WASM_HASH_INPUT_PTR, WASM_HASH_INPUT_PTR + validate.HASH_SIZE);\nconst EXTRA_DATA_INPUT = WASM_BUFFER.subarray(WASM_EXTRA_DATA_INPUT_PTR, WASM_EXTRA_DATA_INPUT_PTR + validate.EXTRA_DATA_SIZE);\nconst SIGNATURE_INPUT = WASM_BUFFER.subarray(WASM_SIGNATURE_INPUT_PTR, WASM_SIGNATURE_INPUT_PTR + validate.SIGNATURE_SIZE);\nfunction assumeCompression(compressed, p) {\n    if (compressed === undefined) {\n        return p !== undefined ? p.length : validate.PUBLIC_KEY_COMPRESSED_SIZE;\n    }\n    return compressed\n        ? validate.PUBLIC_KEY_COMPRESSED_SIZE\n        : validate.PUBLIC_KEY_UNCOMPRESSED_SIZE;\n}\nfunction _isPoint(p) {\n    try {\n        PUBLIC_KEY_INPUT.set(p);\n        return wasm.isPoint(p.length) === 1;\n    }\n    finally {\n        PUBLIC_KEY_INPUT.fill(0);\n    }\n}\nexport function __initializeContext() {\n    wasm.initializeContext();\n}\nexport function isPoint(p) {\n    return validate.isDERPoint(p) && _isPoint(p);\n}\nexport function isPointCompressed(p) {\n    return validate.isPointCompressed(p) && _isPoint(p);\n}\nexport function isXOnlyPoint(p) {\n    return validate.isXOnlyPoint(p) && _isPoint(p);\n}\nexport function isPrivate(d) {\n    return validate.isPrivate(d);\n}\nexport function pointAdd(pA, pB, compressed) {\n    validate.validatePoint(pA);\n    validate.validatePoint(pB);\n    const outputlen = assumeCompression(compressed, pA);\n    try {\n        PUBLIC_KEY_INPUT.set(pA);\n        PUBLIC_KEY_INPUT2.set(pB);\n        return wasm.pointAdd(pA.length, pB.length, outputlen) === 1\n            ? PUBLIC_KEY_INPUT.slice(0, outputlen)\n            : null;\n    }\n    finally {\n        PUBLIC_KEY_INPUT.fill(0);\n        PUBLIC_KEY_INPUT2.fill(0);\n    }\n}\nexport function pointAddScalar(p, tweak, compressed) {\n    validate.validatePoint(p);\n    validate.validateTweak(tweak);\n    const outputlen = assumeCompression(compressed, p);\n    try {\n        PUBLIC_KEY_INPUT.set(p);\n        TWEAK_INPUT.set(tweak);\n        return wasm.pointAddScalar(p.length, outputlen) === 1\n            ? PUBLIC_KEY_INPUT.slice(0, outputlen)\n            : null;\n    }\n    finally {\n        PUBLIC_KEY_INPUT.fill(0);\n        TWEAK_INPUT.fill(0);\n    }\n}\nexport function pointCompress(p, compressed) {\n    validate.validatePoint(p);\n    const outputlen = assumeCompression(compressed, p);\n    try {\n        PUBLIC_KEY_INPUT.set(p);\n        wasm.pointCompress(p.length, outputlen);\n        return PUBLIC_KEY_INPUT.slice(0, outputlen);\n    }\n    finally {\n        PUBLIC_KEY_INPUT.fill(0);\n    }\n}\nexport function pointFromScalar(d, compressed) {\n    validate.validatePrivate(d);\n    const outputlen = assumeCompression(compressed);\n    try {\n        PRIVATE_KEY_INPUT.set(d);\n        return wasm.pointFromScalar(outputlen) === 1\n            ? PUBLIC_KEY_INPUT.slice(0, outputlen)\n            : null;\n    }\n    finally {\n        PRIVATE_KEY_INPUT.fill(0);\n        PUBLIC_KEY_INPUT.fill(0);\n    }\n}\nexport function xOnlyPointFromScalar(d) {\n    validate.validatePrivate(d);\n    try {\n        PRIVATE_KEY_INPUT.set(d);\n        wasm.xOnlyPointFromScalar();\n        return X_ONLY_PUBLIC_KEY_INPUT.slice(0, validate.X_ONLY_PUBLIC_KEY_SIZE);\n    }\n    finally {\n        PRIVATE_KEY_INPUT.fill(0);\n        X_ONLY_PUBLIC_KEY_INPUT.fill(0);\n    }\n}\nexport function xOnlyPointFromPoint(p) {\n    validate.validatePoint(p);\n    try {\n        PUBLIC_KEY_INPUT.set(p);\n        wasm.xOnlyPointFromPoint(p.length);\n        return X_ONLY_PUBLIC_KEY_INPUT.slice(0, validate.X_ONLY_PUBLIC_KEY_SIZE);\n    }\n    finally {\n        PUBLIC_KEY_INPUT.fill(0);\n        X_ONLY_PUBLIC_KEY_INPUT.fill(0);\n    }\n}\nexport function pointMultiply(p, tweak, compressed) {\n    validate.validatePoint(p);\n    validate.validateTweak(tweak);\n    const outputlen = assumeCompression(compressed, p);\n    try {\n        PUBLIC_KEY_INPUT.set(p);\n        TWEAK_INPUT.set(tweak);\n        return wasm.pointMultiply(p.length, outputlen) === 1\n            ? PUBLIC_KEY_INPUT.slice(0, outputlen)\n            : null;\n    }\n    finally {\n        PUBLIC_KEY_INPUT.fill(0);\n        TWEAK_INPUT.fill(0);\n    }\n}\nexport function privateAdd(d, tweak) {\n    validate.validatePrivate(d);\n    validate.validateTweak(tweak);\n    try {\n        PRIVATE_KEY_INPUT.set(d);\n        TWEAK_INPUT.set(tweak);\n        return wasm.privateAdd() === 1\n            ? PRIVATE_KEY_INPUT.slice(0, validate.PRIVATE_KEY_SIZE)\n            : null;\n    }\n    finally {\n        PRIVATE_KEY_INPUT.fill(0);\n        TWEAK_INPUT.fill(0);\n    }\n}\nexport function privateSub(d, tweak) {\n    validate.validatePrivate(d);\n    validate.validateTweak(tweak);\n    // We can not pass zero tweak to WASM, because WASM use `secp256k1_ec_seckey_negate` for tweak negate.\n    // (zero is not valid seckey)\n    if (validate.isZero(tweak)) {\n        return new Uint8Array(d);\n    }\n    try {\n        PRIVATE_KEY_INPUT.set(d);\n        TWEAK_INPUT.set(tweak);\n        return wasm.privateSub() === 1\n            ? PRIVATE_KEY_INPUT.slice(0, validate.PRIVATE_KEY_SIZE)\n            : null;\n    }\n    finally {\n        PRIVATE_KEY_INPUT.fill(0);\n        TWEAK_INPUT.fill(0);\n    }\n}\nexport function privateNegate(d) {\n    validate.validatePrivate(d);\n    try {\n        PRIVATE_KEY_INPUT.set(d);\n        wasm.privateNegate();\n        return PRIVATE_KEY_INPUT.slice(0, validate.PRIVATE_KEY_SIZE);\n    }\n    finally {\n        PRIVATE_KEY_INPUT.fill(0);\n    }\n}\nexport function xOnlyPointAddTweak(p, tweak) {\n    validate.validateXOnlyPoint(p);\n    validate.validateTweak(tweak);\n    try {\n        X_ONLY_PUBLIC_KEY_INPUT.set(p);\n        TWEAK_INPUT.set(tweak);\n        const parity = wasm.xOnlyPointAddTweak();\n        return parity !== -1\n            ? {\n                parity,\n                xOnlyPubkey: X_ONLY_PUBLIC_KEY_INPUT.slice(0, validate.X_ONLY_PUBLIC_KEY_SIZE),\n            }\n            : null;\n    }\n    finally {\n        X_ONLY_PUBLIC_KEY_INPUT.fill(0);\n        TWEAK_INPUT.fill(0);\n    }\n}\nexport function xOnlyPointAddTweakCheck(point, tweak, resultToCheck, tweakParity) {\n    validate.validateXOnlyPoint(point);\n    validate.validateXOnlyPoint(resultToCheck);\n    validate.validateTweak(tweak);\n    const hasParity = tweakParity !== undefined;\n    if (hasParity)\n        validate.validateParity(tweakParity);\n    try {\n        X_ONLY_PUBLIC_KEY_INPUT.set(point);\n        X_ONLY_PUBLIC_KEY_INPUT2.set(resultToCheck);\n        TWEAK_INPUT.set(tweak);\n        if (hasParity) {\n            return wasm.xOnlyPointAddTweakCheck(tweakParity) === 1;\n        }\n        else {\n            wasm.xOnlyPointAddTweak();\n            const newKey = X_ONLY_PUBLIC_KEY_INPUT.slice(0, validate.X_ONLY_PUBLIC_KEY_SIZE);\n            return compare(newKey, resultToCheck) === 0;\n        }\n    }\n    finally {\n        X_ONLY_PUBLIC_KEY_INPUT.fill(0);\n        X_ONLY_PUBLIC_KEY_INPUT2.fill(0);\n        TWEAK_INPUT.fill(0);\n    }\n}\nexport function sign(h, d, e) {\n    validate.validateHash(h);\n    validate.validatePrivate(d);\n    validate.validateExtraData(e);\n    try {\n        HASH_INPUT.set(h);\n        PRIVATE_KEY_INPUT.set(d);\n        if (e !== undefined)\n            EXTRA_DATA_INPUT.set(e);\n        wasm.sign(e === undefined ? 0 : 1);\n        return SIGNATURE_INPUT.slice(0, validate.SIGNATURE_SIZE);\n    }\n    finally {\n        HASH_INPUT.fill(0);\n        PRIVATE_KEY_INPUT.fill(0);\n        if (e !== undefined)\n            EXTRA_DATA_INPUT.fill(0);\n        SIGNATURE_INPUT.fill(0);\n    }\n}\nexport function signRecoverable(h, d, e) {\n    validate.validateHash(h);\n    validate.validatePrivate(d);\n    validate.validateExtraData(e);\n    try {\n        HASH_INPUT.set(h);\n        PRIVATE_KEY_INPUT.set(d);\n        if (e !== undefined)\n            EXTRA_DATA_INPUT.set(e);\n        const recoveryId = wasm.signRecoverable(e === undefined ? 0 : 1);\n        const signature = SIGNATURE_INPUT.slice(0, validate.SIGNATURE_SIZE);\n        return {\n            signature,\n            recoveryId,\n        };\n    }\n    finally {\n        HASH_INPUT.fill(0);\n        PRIVATE_KEY_INPUT.fill(0);\n        if (e !== undefined)\n            EXTRA_DATA_INPUT.fill(0);\n        SIGNATURE_INPUT.fill(0);\n    }\n}\nexport function signSchnorr(h, d, e) {\n    validate.validateHash(h);\n    validate.validatePrivate(d);\n    validate.validateExtraData(e);\n    try {\n        HASH_INPUT.set(h);\n        PRIVATE_KEY_INPUT.set(d);\n        if (e !== undefined)\n            EXTRA_DATA_INPUT.set(e);\n        wasm.signSchnorr(e === undefined ? 0 : 1);\n        return SIGNATURE_INPUT.slice(0, validate.SIGNATURE_SIZE);\n    }\n    finally {\n        HASH_INPUT.fill(0);\n        PRIVATE_KEY_INPUT.fill(0);\n        if (e !== undefined)\n            EXTRA_DATA_INPUT.fill(0);\n        SIGNATURE_INPUT.fill(0);\n    }\n}\nexport function verify(h, Q, signature, strict = false) {\n    validate.validateHash(h);\n    validate.validatePoint(Q);\n    validate.validateSignature(signature);\n    try {\n        HASH_INPUT.set(h);\n        PUBLIC_KEY_INPUT.set(Q);\n        SIGNATURE_INPUT.set(signature);\n        return wasm.verify(Q.length, strict === true ? 1 : 0) === 1 ? true : false;\n    }\n    finally {\n        HASH_INPUT.fill(0);\n        PUBLIC_KEY_INPUT.fill(0);\n        SIGNATURE_INPUT.fill(0);\n    }\n}\nexport function recover(h, signature, recoveryId, compressed = false) {\n    validate.validateHash(h);\n    validate.validateSignature(signature);\n    validate.validateSignatureNonzeroRS(signature);\n    if (recoveryId & 2) {\n        validate.validateSigrPMinusN(signature);\n    }\n    validate.validateSignatureCustom(() => isXOnlyPoint(signature.subarray(0, 32)));\n    const outputlen = assumeCompression(compressed);\n    try {\n        HASH_INPUT.set(h);\n        SIGNATURE_INPUT.set(signature);\n        return wasm.recover(outputlen, recoveryId) === 1\n            ? PUBLIC_KEY_INPUT.slice(0, outputlen)\n            : null;\n    }\n    finally {\n        HASH_INPUT.fill(0);\n        SIGNATURE_INPUT.fill(0);\n        PUBLIC_KEY_INPUT.fill(0);\n    }\n}\nexport function verifySchnorr(h, Q, signature) {\n    validate.validateHash(h);\n    validate.validateXOnlyPoint(Q);\n    validate.validateSignature(signature);\n    try {\n        HASH_INPUT.set(h);\n        X_ONLY_PUBLIC_KEY_INPUT.set(Q);\n        SIGNATURE_INPUT.set(signature);\n        return wasm.verifySchnorr() === 1 ? true : false;\n    }\n    finally {\n        HASH_INPUT.fill(0);\n        X_ONLY_PUBLIC_KEY_INPUT.fill(0);\n        SIGNATURE_INPUT.fill(0);\n    }\n}\n","function get4RandomBytes() {\n    const bytes = new Uint8Array(4);\n    if (typeof crypto === \"undefined\") {\n        throw new Error(\"The crypto object is unavailable. This may occur if your environment does not support the Web Cryptography API.\");\n    }\n    crypto.getRandomValues(bytes);\n    return bytes;\n}\n// Only to be used to initialize the context for rust-secp256k1\nexport function generateInt32() {\n    const array = get4RandomBytes();\n    return ((array[0] << (3 * 8)) +\n        (array[1] << (2 * 8)) +\n        (array[2] << (1 * 8)) +\n        array[3]);\n}\n","import { ERROR_BAD_PRIVATE, ERROR_BAD_POINT, ERROR_BAD_TWEAK, throwError, ERROR_BAD_HASH, ERROR_BAD_EXTRA_DATA, ERROR_BAD_SIGNATURE, ERROR_BAD_PARITY, ERROR_BAD_RECOVERY_ID, } from \"./validate_error.js\";\nexport const PRIVATE_KEY_SIZE = 32;\nexport const PUBLIC_KEY_COMPRESSED_SIZE = 33;\nexport const PUBLIC_KEY_UNCOMPRESSED_SIZE = 65;\nexport const X_ONLY_PUBLIC_KEY_SIZE = 32;\nexport const TWEAK_SIZE = 32;\nexport const HASH_SIZE = 32;\nexport const EXTRA_DATA_SIZE = 32;\nexport const SIGNATURE_SIZE = 64;\nconst BN32_ZERO = new Uint8Array(32);\nconst BN32_N = new Uint8Array([\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65,\n]);\n// Difference between field and order\nconst BN32_P_MINUS_N = new Uint8Array([\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 69, 81, 35, 25, 80, 183, 95,\n    196, 64, 45, 161, 114, 47, 201, 186, 238,\n]);\nfunction isUint8Array(value) {\n    return value instanceof Uint8Array;\n}\nfunction cmpBN32(data1, data2) {\n    for (let i = 0; i < 32; ++i) {\n        if (data1[i] !== data2[i]) {\n            return data1[i] < data2[i] ? -1 : 1;\n        }\n    }\n    return 0;\n}\nexport function isZero(x) {\n    return cmpBN32(x, BN32_ZERO) === 0;\n}\nexport function isPrivate(x) {\n    return (isUint8Array(x) &&\n        x.length === PRIVATE_KEY_SIZE &&\n        cmpBN32(x, BN32_ZERO) > 0 &&\n        cmpBN32(x, BN32_N) < 0);\n}\nexport function isPoint(p) {\n    return (isUint8Array(p) &&\n        (p.length === PUBLIC_KEY_COMPRESSED_SIZE ||\n            p.length === PUBLIC_KEY_UNCOMPRESSED_SIZE ||\n            p.length === X_ONLY_PUBLIC_KEY_SIZE));\n}\nexport function isXOnlyPoint(p) {\n    return isUint8Array(p) && p.length === X_ONLY_PUBLIC_KEY_SIZE;\n}\nexport function isDERPoint(p) {\n    return (isUint8Array(p) &&\n        (p.length === PUBLIC_KEY_COMPRESSED_SIZE ||\n            p.length === PUBLIC_KEY_UNCOMPRESSED_SIZE));\n}\nexport function isPointCompressed(p) {\n    return isUint8Array(p) && p.length === PUBLIC_KEY_COMPRESSED_SIZE;\n}\nfunction isTweak(tweak) {\n    return (isUint8Array(tweak) &&\n        tweak.length === TWEAK_SIZE &&\n        cmpBN32(tweak, BN32_N) < 0);\n}\nfunction isHash(h) {\n    return isUint8Array(h) && h.length === HASH_SIZE;\n}\nfunction isExtraData(e) {\n    return e === undefined || (isUint8Array(e) && e.length === EXTRA_DATA_SIZE);\n}\nfunction isSignature(signature) {\n    return (isUint8Array(signature) &&\n        signature.length === 64 &&\n        cmpBN32(signature.subarray(0, 32), BN32_N) < 0 &&\n        cmpBN32(signature.subarray(32, 64), BN32_N) < 0);\n}\nfunction isSigrLessThanPMinusN(signature) {\n    return (isUint8Array(signature) &&\n        signature.length === 64 &&\n        cmpBN32(signature.subarray(0, 32), BN32_P_MINUS_N) < 0);\n}\nexport function validateParity(p) {\n    if (p !== 0 && p !== 1)\n        throwError(ERROR_BAD_PARITY);\n}\nexport function validatePrivate(d) {\n    if (!isPrivate(d))\n        throwError(ERROR_BAD_PRIVATE);\n}\nexport function validatePoint(p) {\n    if (!isPoint(p))\n        throwError(ERROR_BAD_POINT);\n}\nexport function validateXOnlyPoint(p) {\n    if (!isXOnlyPoint(p))\n        throwError(ERROR_BAD_POINT);\n}\nexport function validateTweak(tweak) {\n    if (!isTweak(tweak))\n        throwError(ERROR_BAD_TWEAK);\n}\nexport function validateHash(h) {\n    if (!isHash(h))\n        throwError(ERROR_BAD_HASH);\n}\nexport function validateExtraData(e) {\n    if (!isExtraData(e))\n        throwError(ERROR_BAD_EXTRA_DATA);\n}\nexport function validateSignature(signature) {\n    if (!isSignature(signature))\n        throwError(ERROR_BAD_SIGNATURE);\n}\nexport function validateSignatureCustom(validatorFn) {\n    if (!validatorFn())\n        throwError(ERROR_BAD_SIGNATURE);\n}\nexport function validateSignatureNonzeroRS(signature) {\n    if (isZero(signature.subarray(0, 32)))\n        throwError(ERROR_BAD_SIGNATURE);\n    if (isZero(signature.subarray(32, 64)))\n        throwError(ERROR_BAD_SIGNATURE);\n}\nexport function validateSigrPMinusN(signature) {\n    if (!isSigrLessThanPMinusN(signature))\n        throwError(ERROR_BAD_RECOVERY_ID);\n}\n","export const ERROR_BAD_PRIVATE = 0;\nexport const ERROR_BAD_POINT = 1;\nexport const ERROR_BAD_TWEAK = 2;\nexport const ERROR_BAD_HASH = 3;\nexport const ERROR_BAD_SIGNATURE = 4;\nexport const ERROR_BAD_EXTRA_DATA = 5;\nexport const ERROR_BAD_PARITY = 6;\nexport const ERROR_BAD_RECOVERY_ID = 7;\nconst ERRORS_MESSAGES = {\n    [ERROR_BAD_PRIVATE.toString()]: \"Expected Private\",\n    [ERROR_BAD_POINT.toString()]: \"Expected Point\",\n    [ERROR_BAD_TWEAK.toString()]: \"Expected Tweak\",\n    [ERROR_BAD_HASH.toString()]: \"Expected Hash\",\n    [ERROR_BAD_SIGNATURE.toString()]: \"Expected Signature\",\n    [ERROR_BAD_EXTRA_DATA.toString()]: \"Expected Extra Data (32 bytes)\",\n    [ERROR_BAD_PARITY.toString()]: \"Expected Parity (1 | 0)\",\n    [ERROR_BAD_RECOVERY_ID.toString()]: \"Bad Recovery Id\",\n};\nexport function throwError(errcode) {\n    const message = ERRORS_MESSAGES[errcode.toString()] || `Unknow error code: ${errcode}`;\n    throw new TypeError(message);\n}\n","// Suppress TS2792: Cannot find module './secp256k1.wasm'.\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport * as wasm from \"./secp256k1.wasm\";\nexport default wasm;\n","const HEX_STRINGS = \"0123456789abcdefABCDEF\";\nconst HEX_CODES = HEX_STRINGS.split(\"\").map((c) => c.codePointAt(0));\nconst HEX_CODEPOINTS = Array(256)\n    .fill(true)\n    .map((_, i) => {\n    const s = String.fromCodePoint(i);\n    const index = HEX_STRINGS.indexOf(s);\n    // ABCDEF will use 10 - 15\n    return index < 0 ? undefined : index < 16 ? index : index - 6;\n});\nconst ENCODER = new TextEncoder();\nconst DECODER = new TextDecoder(\"ascii\");\n// There are two implementations.\n// One optimizes for length of the bytes, and uses TextDecoder.\n// One optimizes for iteration count, and appends strings.\n// This removes the overhead of TextDecoder.\nexport function toHex(bytes) {\n    const b = bytes || new Uint8Array();\n    return b.length > 512 ? _toHexLengthPerf(b) : _toHexIterPerf(b);\n}\nfunction _toHexIterPerf(bytes) {\n    let s = \"\";\n    for (let i = 0; i < bytes.length; ++i) {\n        s += HEX_STRINGS[HEX_CODEPOINTS[HEX_CODES[bytes[i] >> 4]]];\n        s += HEX_STRINGS[HEX_CODEPOINTS[HEX_CODES[bytes[i] & 15]]];\n    }\n    return s;\n}\nfunction _toHexLengthPerf(bytes) {\n    const hexBytes = new Uint8Array(bytes.length * 2);\n    for (let i = 0; i < bytes.length; ++i) {\n        hexBytes[i * 2] = HEX_CODES[bytes[i] >> 4];\n        hexBytes[i * 2 + 1] = HEX_CODES[bytes[i] & 15];\n    }\n    return DECODER.decode(hexBytes);\n}\n// Mimics Buffer.from(x, 'hex') logic\n// Stops on first non-hex string and returns\n// https://github.com/nodejs/node/blob/v14.18.1/src/string_bytes.cc#L246-L261\nexport function fromHex(hexString) {\n    const hexBytes = ENCODER.encode(hexString || \"\");\n    const resultBytes = new Uint8Array(Math.floor(hexBytes.length / 2));\n    let i;\n    for (i = 0; i < resultBytes.length; i++) {\n        const a = HEX_CODEPOINTS[hexBytes[i * 2]];\n        const b = HEX_CODEPOINTS[hexBytes[i * 2 + 1]];\n        if (a === undefined || b === undefined) {\n            break;\n        }\n        resultBytes[i] = (a << 4) | b;\n    }\n    return i === resultBytes.length ? resultBytes : resultBytes.slice(0, i);\n}\n// Same behavior as Buffer.compare()\nexport function compare(v1, v2) {\n    const minLength = Math.min(v1.length, v2.length);\n    for (let i = 0; i < minLength; ++i) {\n        if (v1[i] !== v2[i]) {\n            return v1[i] < v2[i] ? -1 : 1;\n        }\n    }\n    return v1.length === v2.length ? 0 : v1.length > v2.length ? 1 : -1;\n}\n"],"names":[],"sourceRoot":"","x_google_ignoreList":[0,1,2,3,4,5]}