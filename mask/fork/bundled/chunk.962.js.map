{"version":3,"file":"bundled/chunk.962.js","mappings":"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","sources":["webpack://mask-network/./packages/shared/src/UI/components/AssetPreviewer/index.tsx","webpack://mask-network/./packages/shared/src/UI/components/AssetsManagement/assetsReducer.ts","webpack://mask-network/./packages/shared/src/UI/components/AssetsManagement/AssetsProvider.tsx","webpack://mask-network/./packages/shared/src/UI/components/AssetsManagement/ChainRuntimeProvider.tsx","webpack://mask-network/./packages/theme/src/Components/CheckBoxIndicator/index.tsx","webpack://mask-network/./packages/shared/src/UI/components/AssetsManagement/CollectibleCard.tsx","webpack://mask-network/./packages/shared/src/UI/components/AssetsManagement/CollectibleItem.tsx","webpack://mask-network/./packages/shared/src/UI/components/AssetsManagement/useCompactDetection.ts","webpack://mask-network/./packages/shared/src/UI/components/AssetsManagement/Collection.tsx","webpack://mask-network/./packages/shared/src/UI/components/AssetsManagement/LoadingSkeleton.tsx","webpack://mask-network/./packages/shared/src/UI/components/AssetsManagement/CollectionHeader.tsx","webpack://mask-network/./packages/shared/src/UI/components/AssetsManagement/CollectionList.tsx","webpack://mask-network/./packages/shared/src/UI/components/AssetsManagement/CollectionsProvider.tsx","webpack://mask-network/./packages/shared/src/UI/components/AssetsManagement/UserAssetsContext.tsx","webpack://mask-network/./packages/shared/src/UI/components/ElementAnchor/index.tsx","webpack://mask-network/./packages/shared/src/UI/components/EmptyStatus/index.tsx","webpack://mask-network/./packages/shared/src/UI/components/Image/index.tsx","webpack://mask-network/./packages/shared/src/UI/components/LoadRetry/index.tsx","webpack://mask-network/./packages/shared/src/UI/components/TokenSecurity/Common.tsx","webpack://mask-network/./packages/shared/src/UI/components/TokenSecurity/index.tsx","webpack://mask-network/./packages/shared/src/UI/components/WalletIcon/index.tsx","webpack://mask-network/./packages/shared/src/hooks/useReportSpam.tsx","webpack://mask-network/./packages/shared/src/utils/isSameNFT.ts","webpack://mask-network/./packages/web3-hooks/base/src/useBlockedNonFungibleTokens.ts","webpack://mask-network/./packages/web3-hooks/base/src/useChainIdValid.ts","webpack://mask-network/./packages/web3-hooks/base/src/useNetworkDescriptor.ts","webpack://mask-network/./packages/web3-hooks/base/src/useNonFungibleCollections.ts"],"sourcesContent":["import { makeStyles } from '@masknet/theme'\nimport { Image } from '../Image/index.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    root: {\n        width: '100%',\n        height: '100%',\n        position: 'relative',\n    },\n    fallbackImage: {\n        height: 64,\n        width: 64,\n    },\n    icon: {\n        position: 'absolute',\n        top: theme.spacing(0.5),\n        left: theme.spacing(0.5),\n    },\n}))\n\nexport interface AssetPreviewerProps extends withClasses<'root' | 'fallbackImage' | 'container'> {\n    url?: string\n    fallbackImage?: JSX.Element | string\n    icon?: React.ReactNode\n}\n\nexport function AssetPreviewer(props: AssetPreviewerProps) {\n    const { fallbackImage, url, icon } = props\n\n    const { classes } = useStyles(undefined, { props })\n\n    return (\n        <div className={classes.root}>\n            <Image\n                classes={{\n                    fallbackImage: classes.fallbackImage,\n                    container: classes.container,\n                }}\n                width=\"100%\"\n                height=\"100%\"\n                style={{ objectFit: 'cover' }}\n                src={url}\n                fallback={fallbackImage}\n            />\n            {icon ? <div className={classes.icon}>{icon}</div> : null}\n        </div>\n    )\n}\n","import { produce } from 'immer'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { EMPTY_LIST } from '@masknet/shared-base'\nimport { uniqBy } from 'lodash-es'\n\nexport interface AssetsState {\n    loading: boolean\n    finished: boolean\n    assets: Web3Helper.NonFungibleAssetScope[]\n}\n\nexport interface AssetsReducerState {\n    assetsMap: Record<string, AssetsState>\n    verifiedMap: Record<string, string[]>\n}\n\ntype AssetsAction =\n    | {\n          type: 'SET_LOADING_STATUS'\n          id: string\n          account: string\n          loading?: boolean\n          finished?: boolean\n      }\n    | {\n          type: 'APPEND_ASSETS'\n          id: string\n          account: string\n          assets: Web3Helper.NonFungibleAssetScope[]\n      }\n    | {\n          type: 'SET_VERIFIED'\n          id: string\n          verifiedBy: string[]\n      }\n\nexport function createAssetsState() {\n    return {\n        assets: EMPTY_LIST,\n        loading: false,\n        finished: false,\n    }\n}\n\nexport const initialAssetsState: AssetsReducerState = { assetsMap: {}, verifiedMap: {} }\n\n/**\n * To distinguish assets among multiple accounts, we combine account and collection id as store-id.\n *\n */\nexport function assetsReducer(state: AssetsReducerState, action: AssetsAction): AssetsReducerState {\n    switch (action.type) {\n        case 'SET_LOADING_STATUS':\n            return produce(state, (draft) => {\n                const { loading, finished, id, account } = action\n                const storeId = `${account}.${id}`\n                if (!draft.assetsMap[storeId]) draft.assetsMap[storeId] = createAssetsState()\n                if (typeof loading !== 'undefined') {\n                    draft.assetsMap[storeId].loading = loading\n                }\n                if (typeof finished !== 'undefined') {\n                    draft.assetsMap[storeId].finished = finished\n                }\n            })\n        case 'APPEND_ASSETS':\n            return produce(state, (draft) => {\n                const { id, account, assets } = action\n                const storeId = `${account}.${id}`\n                if (!draft.assetsMap[storeId]) draft.assetsMap[storeId] = createAssetsState()\n                draft.assetsMap[storeId].assets = assets.length\n                    ? uniqBy([...draft.assetsMap[storeId].assets, ...assets], (x) => `${x.id}.${x.tokenId}`)\n                    : draft.assetsMap[storeId].assets ?? EMPTY_LIST\n            })\n        case 'SET_VERIFIED':\n            return produce(state, (draft) => {\n                const { id, verifiedBy } = action\n                draft.verifiedMap[id] = verifiedBy\n            })\n    }\n}\n","import { chunk, sum, take } from 'lodash-es'\nimport {\n    createContext,\n    memo,\n    useCallback,\n    useContext,\n    useEffect,\n    useMemo,\n    useReducer,\n    useRef,\n    type PropsWithChildren,\n    type MutableRefObject,\n} from 'react'\nimport { createIndicator, EMPTY_LIST, EMPTY_OBJECT, type PageIndicator } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useWeb3Hub } from '@masknet/web3-hooks-base'\nimport {\n    assetsReducer,\n    createAssetsState,\n    initialAssetsState,\n    type AssetsReducerState,\n    type AssetsState,\n} from './assetsReducer.js'\nimport { useChainRuntime } from './ChainRuntimeProvider.js'\nimport { CollectionsContext } from './CollectionsProvider.js'\n\ninterface AssetsContextOptions {\n    assetsMapRef: MutableRefObject<Record<string, AssetsState>>\n    getAssets(collection: Web3Helper.NonFungibleCollectionAll): AssetsState\n    getBLockedTokenIds(collection: Web3Helper.NonFungibleCollectionAll): string[]\n    /** Get verified-by marketplaces */\n    getVerifiedBy(id: string): string[]\n    loadAssets(collection: Web3Helper.NonFungibleCollectionAll): Promise<void>\n    loadVerifiedBy(id: string): Promise<void>\n    /** All collectibles get hidden */\n    isAllHidden: boolean\n    isEmpty: boolean\n}\n\nconst AssetsContext = createContext<AssetsContextOptions>({\n    assetsMapRef: { current: {} },\n    getAssets: () => ({ loading: false, finished: false, assets: [] }),\n    getBLockedTokenIds: () => EMPTY_LIST,\n    getVerifiedBy: () => EMPTY_LIST,\n    loadAssets: () => Promise.resolve(),\n    loadVerifiedBy: () => Promise.resolve(),\n    isAllHidden: false,\n    isEmpty: false,\n})\n\n/** Min merged collection chunk size */\nconst CHUNK_SIZE = 8\n\ntype LoaderIteratorMap = Map<string, AsyncGenerator<Web3Helper.NonFungibleAssetAll[] | undefined, void>>\nconst getAssetsTotal = (map: Record<string, AssetsState>) => sum(Object.values(map).map((x) => x.assets.length))\n\ninterface Props extends PropsWithChildren<{}> {\n    /** blocked ids in format of `${chainid}.${address}.${tokenId}` */\n    blockedIds?: string[]\n}\nexport const AssetsProvider = memo<Props>(function AssetsProvider({ children, blockedIds = EMPTY_LIST }) {\n    const [{ assetsMap, verifiedMap }, dispatch] = useReducer(assetsReducer, initialAssetsState)\n    const indicatorMapRef = useRef<Map<string, PageIndicator | undefined>>(new Map())\n    const { pluginID, account } = useChainRuntime()\n\n    const blockedTokenIdsMap = useMemo(() => {\n        if (!blockedIds.length) return EMPTY_OBJECT\n        return blockedIds.reduce((map: Record<string, string[]>, id) => {\n            const [chainId, address, tokenId] = id.split('.')\n            const collectionKey = [chainId, address].join('.')\n            const list = map[collectionKey] ?? []\n            list.push(tokenId)\n            map[collectionKey] = list\n            return map\n        }, {})\n    }, [blockedIds])\n    // A mapping that contains listing assets only\n    const listingAssetsMap = useMemo(() => {\n        if (!blockedIds.length) return assetsMap\n        const listingMap: Record<string, AssetsState> = { ...assetsMap }\n        let updated = false\n        for (const storeId in assetsMap) {\n            const originalAssets = assetsMap[storeId].assets\n            const newAssets = originalAssets.filter((x) => {\n                const assetId = `${x.chainId}.${x.address}.${x.tokenId}`.toLowerCase()\n                return !blockedIds.includes(assetId)\n            })\n            if (newAssets.length !== originalAssets.length) {\n                listingMap[storeId] = { ...listingMap[storeId], assets: newAssets }\n                updated = true\n            }\n        }\n        // Update accordingly\n        return updated ? listingMap : assetsMap\n    }, [assetsMap, blockedIds])\n\n    const assetsMapRef = useRef<AssetsReducerState['assetsMap']>({})\n    const listingAssetsMapRef = useRef<AssetsReducerState['assetsMap']>({})\n    const verifiedMapRef = useRef<AssetsReducerState['verifiedMap']>({})\n    const blockedTokenIdsMapRef = useRef<Record<string, string[]>>({})\n    useEffect(() => {\n        assetsMapRef.current = assetsMap\n        verifiedMapRef.current = verifiedMap\n        listingAssetsMapRef.current = listingAssetsMap\n        blockedTokenIdsMapRef.current = blockedTokenIdsMap\n    })\n\n    const { collections } = CollectionsContext.useContainer()\n    const isEmpty = useMemo(() => {\n        // Collections assets are lazy loading, can't judge if not all collections been load\n        if (Object.keys(assetsMap).length < collections.length || Object.values(assetsMap).some((x) => x.loading))\n            return false\n        // Spam score of some collections might be OK, but NFTs of them might be treated as spam #MF-5091\n        return getAssetsTotal(assetsMap) === 0\n    }, [assetsMap, collections.length])\n    const isAllHidden = useMemo(() => {\n        // Collections assets are lazy loading, can't judge if not all collections been load\n        if (Object.keys(assetsMap).length < collections.length) return false\n        if (!blockedIds.length || getAssetsTotal(assetsMap) === 0) return false\n        return getAssetsTotal(listingAssetsMap) === 0\n    }, [assetsMap, listingAssetsMap, !blockedIds.length, collections.length])\n\n    const Hub = useWeb3Hub(pluginID)\n\n    // We load merged collections with iterators\n    const assetsLoaderIterators = useRef<LoaderIteratorMap>(new Map())\n    const loadAssetsViaHub = useCallback(\n        async (collection: Web3Helper.NonFungibleCollectionAll, collectionId?: string) => {\n            if (!collection.id) return\n\n            const { id, chainId } = collection\n            const stateKey = `${id}.${chainId}`\n            const storeId = `${account}.${stateKey}`\n            const realId = collectionId ?? id\n            const assetsState = assetsMapRef.current[storeId]\n\n            // Fetch less in collection list, and more every time in expanded collection.\n            // Also expand size if for id chunk, since there might be more assets than chunk size\n            const size = assetsState?.assets.length || collectionId ? 20 : 4\n            const indicator = (!collectionId && indicatorMapRef.current.get(storeId)) || createIndicator()\n            dispatch({ type: 'SET_LOADING_STATUS', account, id: stateKey, loading: true })\n            const pageable = await Hub.getNonFungibleAssetsByCollectionAndOwner(realId, account, {\n                indicator,\n                size,\n                chainId,\n            })\n\n            if (process.env.NODE_ENV === 'development' && collectionId) {\n                console.assert(\n                    !pageable.nextIndicator,\n                    'Loading part of a merged collection, but see pageable result has nextIndicator',\n                )\n            }\n            if (pageable.nextIndicator) {\n                indicatorMapRef.current.set(storeId, pageable.nextIndicator as PageIndicator)\n            }\n            dispatch({ type: 'APPEND_ASSETS', id: stateKey, account, assets: pageable.data })\n            // If collectionId is set, that means we are loading part of a merged collection.\n            // And we will let the merged collection's iterator decide if it has ended\n            const finished = !collectionId && !pageable.nextIndicator\n            dispatch({ type: 'SET_LOADING_STATUS', id: stateKey, account, finished, loading: false })\n            return pageable.data\n        },\n        [Hub, account],\n    )\n\n    const loadAssets = useCallback(\n        async (collection: Web3Helper.NonFungibleCollectionAll) => {\n            if (!collection.id) return\n\n            const { id, chainId } = collection\n            const stateKey = `${id}.${chainId}`\n            const storeId = `${account}.${stateKey}`\n            const assetsState = assetsMapRef.current[storeId]\n            if (assetsState?.finished || assetsState?.loading) return\n            const allIds = id.split(',')\n\n            let assets: Web3Helper.NonFungibleAssetAll[] | undefined | void\n            if (allIds.length <= CHUNK_SIZE) {\n                assets = await loadAssetsViaHub(collection)\n            } else {\n                async function* generate(collection: Web3Helper.NonFungibleCollectionAll) {\n                    const chunks = [take(allIds, 4), ...chunk(allIds.slice(4), CHUNK_SIZE)].map((x) => x.join(','))\n                    for (const idChunk of chunks) {\n                        // TODO We assume that each individual collection in merged-collection has at most 2 assets\n                        yield await loadAssetsViaHub(collection, idChunk)\n                    }\n                }\n                const iterator = assetsLoaderIterators.current.get(stateKey) || generate(collection)\n                assetsLoaderIterators.current.set(stateKey, iterator)\n                const result = await iterator.next()\n                if (result.done) {\n                    dispatch({ type: 'SET_LOADING_STATUS', id: stateKey, account, finished: true, loading: false })\n                    return\n                }\n                assets = result.value\n            }\n\n            // If assets just fetched are all blocked, load another page.\n            const blockedMapKey = [collection.chainId, collection.address].join('.').toLowerCase()\n            const blockedList = blockedTokenIdsMapRef.current[blockedMapKey]\n            if (!blockedList?.length || !assets?.length) return\n            const listings = assets.filter((x) => !blockedList.includes(x.tokenId))\n            if (!listings.length) await loadAssetsViaHub(collection)\n        },\n        [loadAssetsViaHub, account],\n    )\n\n    const loadVerifiedBy = useCallback(\n        async (id: string) => {\n            const verifiedState = verifiedMapRef.current[id]\n            if (!Hub?.getNonFungibleCollectionVerifiedBy || verifiedState || !id) return\n            const verifiedBy = await Hub.getNonFungibleCollectionVerifiedBy(id.split(',')[0])\n            dispatch({ type: 'SET_VERIFIED', id, verifiedBy })\n        },\n        [Hub?.getNonFungibleCollectionVerifiedBy],\n    )\n\n    const getAssets = useCallback(\n        (collection: Web3Helper.NonFungibleCollectionAll) => {\n            const key = `${account}.${collection.id}.${collection.chainId}`\n            return listingAssetsMap[key] ?? createAssetsState()\n        },\n        [listingAssetsMap, account],\n    )\n    const getBLockedTokenIds = useCallback(\n        (collection: Web3Helper.NonFungibleCollectionAll) => {\n            if (!blockedIds.length) return EMPTY_LIST\n            const key = `${collection.chainId}.${collection.address}`.toLowerCase()\n            return blockedTokenIdsMap[key] ?? EMPTY_LIST\n        },\n        [blockedTokenIdsMap, blockedIds],\n    )\n    const getVerifiedBy = useCallback((id: string) => verifiedMap[id] ?? EMPTY_LIST, [verifiedMap])\n    const contextValue = useMemo((): AssetsContextOptions => {\n        return {\n            isAllHidden,\n            isEmpty,\n            getAssets,\n            getBLockedTokenIds,\n            getVerifiedBy,\n            loadAssets,\n            loadVerifiedBy,\n            assetsMapRef: listingAssetsMapRef,\n        }\n    }, [getAssets, getBLockedTokenIds, getVerifiedBy, loadAssets, loadVerifiedBy, isAllHidden, isEmpty])\n    return <AssetsContext.Provider value={contextValue}>{children}</AssetsContext.Provider>\n})\n\nexport function useUserAssets() {\n    return useContext(AssetsContext)\n}\n","import { EMPTY_LIST, NetworkPluginID } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { ChainId } from '@masknet/web3-shared-evm'\nimport { ChainId as FlowChainId } from '@masknet/web3-shared-flow'\nimport { noop, sortBy } from 'lodash-es'\nimport { ChainId as SolanaChainId } from '@masknet/web3-shared-solana'\nimport { useNetworks } from '@masknet/web3-hooks-base'\nimport {\n    createContext,\n    memo,\n    useMemo,\n    type PropsWithChildren,\n    useState,\n    type SetStateAction,\n    type Dispatch,\n    useContext,\n} from 'react'\nimport type { ReasonableNetwork } from '@masknet/web3-shared-base'\n\ninterface ChainRuntimeOptions {\n    pluginID: NetworkPluginID\n    defaultChainId?: Web3Helper.ChainIdAll\n    account: string\n    chainId?: Web3Helper.ChainIdAll\n    setChainId: Dispatch<SetStateAction<ChainId | FlowChainId | SolanaChainId | undefined>>\n    networks: Array<ReasonableNetwork<Web3Helper.ChainIdAll, Web3Helper.SchemaTypeAll, Web3Helper.NetworkTypeAll>>\n}\n\nconst ChainRuntimeContext = createContext<ChainRuntimeOptions>({\n    pluginID: NetworkPluginID.PLUGIN_EVM,\n    account: '',\n    setChainId: noop,\n    networks: EMPTY_LIST,\n})\n\n//  https://docs.simplehash.com/reference/chains\nconst SimpleHashSupportedChains: Record<NetworkPluginID, number[]> = {\n    [NetworkPluginID.PLUGIN_EVM]: [\n        ChainId.Mainnet,\n        ChainId.BSC,\n        ChainId.Base,\n        ChainId.Matic,\n        ChainId.Arbitrum,\n        ChainId.Optimism,\n        ChainId.Avalanche,\n        ChainId.xDai,\n        ChainId.Scroll,\n    ],\n    [NetworkPluginID.PLUGIN_SOLANA]: [SolanaChainId.Mainnet],\n    [NetworkPluginID.PLUGIN_FLOW]: [FlowChainId.Mainnet],\n}\n\nexport interface ChainRuntimeProviderProps\n    extends Pick<ChainRuntimeOptions, 'pluginID' | 'defaultChainId' | 'account'> {}\n\nexport const ChainRuntimeProvider = memo<PropsWithChildren<ChainRuntimeProviderProps>>(function ChainRuntimeProvider({\n    pluginID,\n    account,\n    defaultChainId,\n    children,\n}) {\n    const [chainId, setChainId] = useState<Web3Helper.ChainIdAll>()\n    const allNetworks = useNetworks(pluginID, true)\n\n    const networks = useMemo(() => {\n        const supported = SimpleHashSupportedChains[pluginID]\n        return sortBy(\n            allNetworks.filter((x) => (x.network === 'mainnet' || x.isCustomized) && supported.includes(x.chainId)),\n            (x) => supported.indexOf(x.chainId),\n        )\n    }, [allNetworks, pluginID])\n\n    const currentChainId = chainId ?? defaultChainId ?? (networks.length === 1 ? networks[0].chainId : chainId)\n\n    const value = useMemo(\n        () => ({ pluginID, account, defaultChainId, chainId: currentChainId, setChainId, networks }),\n        [pluginID, account, defaultChainId, currentChainId, networks],\n    )\n\n    return <ChainRuntimeContext.Provider value={value}>{children}</ChainRuntimeContext.Provider>\n})\n\nexport function useChainRuntime() {\n    return useContext(ChainRuntimeContext)\n}\n","import { memo } from 'react'\nimport { Icons, type GeneratedIconProps } from '@masknet/icons'\n\ninterface Props extends GeneratedIconProps {\n    checked?: boolean\n    unCheckedButtonColor?: string\n    checkedButtonColor?: string\n}\n\nexport const CheckBoxIndicator = memo<Props>(function CheckBoxIndicator({\n    checked,\n    unCheckedButtonColor,\n    checkedButtonColor,\n    ...rest\n}) {\n    return checked ? (\n        <Icons.Checkbox {...rest} color={checkedButtonColor} />\n    ) : (\n        <Icons.CheckboxBlank {...rest} color={unCheckedButtonColor} />\n    )\n})\n","import { memo, type HTMLProps } from 'react'\nimport { Card, useTheme } from '@mui/material'\nimport { CheckBoxIndicator, RadioIndicator, makeStyles } from '@masknet/theme'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { type NetworkPluginID } from '@masknet/shared-base'\nimport { AssetPreviewer, NetworkIcon } from '@masknet/shared'\nimport { resolveImageURL } from '@masknet/web3-shared-evm'\n\nconst useStyles = makeStyles()((theme) => ({\n    root: {\n        position: 'relative',\n        display: 'block',\n        cursor: 'pointer',\n    },\n    card: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 8,\n        position: 'absolute',\n        zIndex: 1,\n        backgroundColor: theme.palette.mode === 'light' ? '#F7F9FA' : '#2F3336',\n        width: '100%',\n        height: '100%',\n    },\n    fallbackImage: {\n        minHeight: '0 !important',\n        maxWidth: 'none',\n        width: 30,\n        height: 30,\n    },\n    fallbackLensImage: {\n        minHeight: '0 !important',\n        maxWidth: 'none',\n        width: '100%',\n        height: '100%',\n    },\n    blocker: {\n        position: 'absolute',\n        zIndex: 2,\n        width: '100%',\n        height: '100%',\n    },\n    indicator: {\n        padding: 0,\n        position: 'absolute',\n        top: 5,\n        right: 5,\n        zIndex: 1,\n    },\n}))\n\nexport interface CollectibleCardProps extends HTMLProps<HTMLDivElement> {\n    pluginID?: NetworkPluginID\n    asset: Web3Helper.NonFungibleAssetAll\n    disableNetworkIcon?: boolean\n    /** disable inspect NFT details */\n    disableInspect?: boolean\n    isSelected?: boolean\n    useRadio?: boolean\n    showUnCheckedIndicator?: boolean\n}\n\nexport const CollectibleCard = memo(\n    ({\n        className,\n        pluginID,\n        asset,\n        disableNetworkIcon,\n        disableInspect,\n        isSelected,\n        useRadio,\n        showUnCheckedIndicator,\n        ...rest\n    }: CollectibleCardProps) => {\n        const { classes, cx } = useStyles()\n        const theme = useTheme()\n\n        const icon =\n            pluginID && !disableNetworkIcon ? <NetworkIcon pluginID={pluginID} chainId={asset.chainId} /> : null\n        const { metadata } = asset\n        const url = metadata?.previewImageURL || metadata?.imageURL || metadata?.mediaURL\n        const fallbackImage = resolveImageURL(\n            undefined,\n            asset.metadata?.name,\n            asset.collection?.name,\n            asset.contract?.address,\n        )\n\n        const Indicator = useRadio ? RadioIndicator : CheckBoxIndicator\n\n        return (\n            <div className={cx(classes.root, className)} {...rest}>\n                <div className={classes.blocker} />\n                <Card className={classes.card}>\n                    <AssetPreviewer\n                        classes={{\n                            fallbackImage: fallbackImage ? classes.fallbackLensImage : classes.fallbackImage,\n                        }}\n                        url={url}\n                        icon={icon}\n                        fallbackImage={fallbackImage}\n                    />\n                </Card>\n                {isSelected || showUnCheckedIndicator ? (\n                    <Indicator\n                        size={20}\n                        checked={isSelected}\n                        className={classes.indicator}\n                        checkedButtonColor={theme.palette.maskColor.primary}\n                        unCheckedButtonColor={theme.palette.maskColor.secondaryLine}\n                    />\n                ) : null}\n            </div>\n        )\n    },\n)\n\nCollectibleCard.displayName = 'CollectibleCard'\n","import { ShadowRootTooltip, makeStyles, useBoundedPopperProps, useDetectOverflow } from '@masknet/theme'\nimport {\n    isENSContractAddress,\n    isENSNameWrapperContractAddress,\n    isLens,\n    isLensCollect,\n    isLensFollower,\n    isXnsContractAddress,\n} from '@masknet/web3-shared-evm'\nimport { Button, Skeleton, Typography } from '@mui/material'\nimport { forwardRef, memo, useCallback, useMemo, type HTMLProps } from 'react'\nimport { CollectibleCard, type CollectibleCardProps } from './CollectibleCard.js'\nimport { Icons } from '@masknet/icons'\nimport { useSharedTrans } from '../../../index.js'\nimport { EMPTY_LIST } from '@masknet/shared-base'\n\nconst useStyles = makeStyles<void, 'action' | 'collectibleCard' | 'info'>()((theme, _, refs) => ({\n    card: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        position: 'relative',\n        background: theme.palette.maskColor.bg,\n        borderRadius: 8,\n        overflow: 'visible',\n        zIndex: 0,\n        willChange: 'opacity',\n    },\n    withAction: {\n        '&:hover': {\n            transform: 'translateY(19px)',\n            transitionDuration: '150ms',\n            [`.${refs.action}`]: {\n                marginTop: 8,\n                opacity: 1,\n            },\n            [`.${refs.collectibleCard}`]: {\n                transform: 'translateY(-38px)',\n            },\n            [`.${refs.info}`]: {\n                transform: 'translateY(-38px)',\n            },\n        },\n    },\n    ease: {\n        transition: 'all 300ms ease',\n    },\n    fadeIn: {\n        '@keyframes fade-in': {\n            '0%': { opacity: 0 },\n        },\n        animation: 'fade-in 500ms ease-in-out',\n        '@media (prefers-reduced-motion: reduce)': {\n            animation: 'none',\n        },\n    },\n    collectibleCard: {\n        width: '100%',\n        aspectRatio: '1/1',\n    },\n    info: {\n        padding: 6,\n        overflow: 'auto',\n        boxSizing: 'border-box',\n        width: '100%',\n    },\n    nameRow: {\n        display: 'flex',\n        alignItems: 'center',\n        overflow: 'auto',\n    },\n    name: {\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        lineHeight: theme.spacing(2),\n        minHeight: theme.spacing(2),\n        color: theme.palette.maskColor.second,\n    },\n    identity: {\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        lineHeight: theme.spacing(2),\n        minHeight: theme.spacing(2),\n        fontWeight: 700,\n        color: theme.palette.maskColor.main,\n    },\n    action: {\n        width: '100%',\n        padding: theme.spacing(0, 1),\n        boxSizing: 'border-box',\n        textAlign: 'center',\n        opacity: 0,\n        overflow: 'hidden',\n        position: 'absolute',\n        bottom: 6,\n    },\n    actionButton: {\n        borderRadius: 28,\n        backgroundColor: theme.palette.maskColor.primary,\n        color: '#fff',\n        '&:hover': {\n            backgroundColor: theme.palette.maskColor.primary,\n        },\n    },\n}))\n\nexport interface CollectibleItemProps extends HTMLProps<HTMLDivElement>, CollectibleCardProps {\n    disableName?: boolean\n    /** @default true */\n    disableAction?: boolean\n    actionLabel?: string\n    verifiedBy?: string[]\n    onActionClick?(asset: CollectibleCardProps['asset']): void\n    onItemClick?(asset: CollectibleCardProps['asset']): void\n}\n\nexport const CollectibleItem = memo(\n    forwardRef<HTMLDivElement, CollectibleItemProps>((props, ref) => {\n        const {\n            className,\n            asset,\n            pluginID,\n            disableNetworkIcon,\n            disableName,\n            disableAction = true,\n            actionLabel,\n            verifiedBy = EMPTY_LIST,\n            onActionClick,\n            onItemClick,\n            isSelected,\n            showUnCheckedIndicator,\n            ...rest\n        } = props\n        const t = useSharedTrans()\n        const { classes, cx } = useStyles()\n        const name = asset.collection?.name ?? ''\n        const popperProps = useBoundedPopperProps()\n        const handleClick = useCallback(() => {\n            onItemClick?.(asset)\n        }, [onItemClick, asset])\n\n        const assetName = useMemo(() => {\n            if (!asset.collection) return\n            if (isLensCollect(asset.collection.name)) return asset.metadata?.name\n            if (isLensFollower(asset.collection.name)) return asset.collection.name\n            if (isLens(asset.metadata?.name)) return asset.metadata?.name\n            if (isXnsContractAddress(asset.address)) return asset.metadata?.name\n            if (isENSContractAddress(asset.address) || isENSNameWrapperContractAddress(asset.address))\n                return asset.metadata?.name\n            if (disableName && asset.tokenId) return `#${asset.tokenId}`\n            return asset.metadata?.name || (asset.tokenId ? `#${asset.tokenId}` : '') || asset.collection.name\n        }, [asset, disableName])\n\n        const [nameOverflow, nameRef] = useDetectOverflow()\n        const [identityOverflow, identityRef] = useDetectOverflow()\n        const tooltip =\n            nameOverflow || identityOverflow ? (\n                <Typography component=\"div\">\n                    {disableName ? null : <div>{name}</div>}\n                    {assetName}\n                </Typography>\n            ) : undefined\n\n        return (\n            <ShadowRootTooltip PopperProps={popperProps} title={tooltip} placement=\"top\" disableInteractive arrow>\n                <div\n                    className={cx(classes.card, classes.fadeIn, className, disableAction ? null : classes.withAction)}\n                    {...rest}\n                    ref={ref}>\n                    <CollectibleCard\n                        className={cx(classes.collectibleCard, classes.ease)}\n                        pluginID={pluginID}\n                        asset={asset}\n                        disableNetworkIcon={disableNetworkIcon}\n                        onClick={handleClick}\n                        isSelected={isSelected}\n                        showUnCheckedIndicator={showUnCheckedIndicator}\n                    />\n                    <div className={cx(classes.info, classes.ease)}>\n                        {disableName ? null : (\n                            <div className={classes.nameRow}>\n                                <Typography ref={nameRef} className={classes.name} variant=\"body2\">\n                                    {name || assetName}\n                                </Typography>\n\n                                {verifiedBy.length ? (\n                                    <ShadowRootTooltip title={t.verified_by({ marketplace: verifiedBy.join(', ') })}>\n                                        <Icons.Verification size={16} />\n                                    </ShadowRootTooltip>\n                                ) : null}\n                            </div>\n                        )}\n                        <Typography ref={identityRef} className={classes.identity} variant=\"body2\" component=\"div\">\n                            {assetName}\n                        </Typography>\n                    </div>\n                    {disableAction ? null : (\n                        <div className={cx(classes.action, classes.ease)}>\n                            <Button\n                                fullWidth\n                                variant=\"text\"\n                                className={classes.actionButton}\n                                size=\"small\"\n                                onClick={() => onActionClick?.(asset)}>\n                                {actionLabel}\n                            </Button>\n                        </div>\n                    )}\n                </div>\n            </ShadowRootTooltip>\n        )\n    }),\n)\n\nCollectibleItem.displayName = 'collectibleItem'\n\ninterface CollectibleItemSkeletonProps extends HTMLProps<HTMLDivElement> {\n    omitInfo?: boolean\n    omitName?: boolean\n}\n\nexport const CollectibleItemSkeleton = memo(\n    forwardRef<HTMLDivElement, CollectibleItemSkeletonProps>(function CollectibleItemSkeleton(\n        { className, omitInfo, omitName, ...rest },\n        ref,\n    ) {\n        const { classes, cx } = useStyles()\n        return (\n            <div className={cx(classes.card, className)} {...rest} ref={ref}>\n                <div className={classes.collectibleCard}>\n                    <Skeleton animation=\"wave\" variant=\"rectangular\" sx={{ borderRadius: '8px' }} height=\"100%\" />\n                </div>\n                {omitInfo ? null : (\n                    <div className={classes.info}>\n                        {omitName ? null : (\n                            <Typography className={classes.name} variant=\"body2\">\n                                <Skeleton animation=\"wave\" variant=\"text\" width=\"80%\" />\n                            </Typography>\n                        )}\n                        <Typography className={classes.identity} variant=\"body2\" component=\"div\">\n                            <Skeleton animation=\"wave\" variant=\"text\" width={'40%'} />\n                        </Typography>\n                    </div>\n                )}\n            </div>\n        )\n    }),\n)\n","import { useLayoutEffect, useRef, useState } from 'react'\n\n// TODO we can't use @container query inside shadow DOM, so we check if it's\n// compact manually.\nexport function useCompactDetection() {\n    const containerRef = useRef<HTMLDivElement>(null)\n    const [compact, setCompact] = useState(false)\n\n    useLayoutEffect(() => {\n        if (!containerRef.current) return\n        setCompact(containerRef.current?.offsetWidth < 100)\n    }, [])\n\n    return { compact, containerRef }\n}\n","import { Icons } from '@masknet/icons'\nimport { EMPTY_LIST, type NetworkPluginID } from '@masknet/shared-base'\nimport { useEverSeen } from '@masknet/shared-base-ui'\nimport { ShadowRootTooltip, makeStyles, useBoundedPopperProps, useDetectOverflow } from '@masknet/theme'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { Skeleton, Typography, useForkRef } from '@mui/material'\nimport { range } from 'lodash-es'\nimport { memo, useLayoutEffect, type HTMLProps, useMemo, forwardRef } from 'react'\nimport { useSharedTrans } from '../../../index.js'\nimport { isSameNFT } from '../../../utils/index.js'\nimport { CollectibleCard } from './CollectibleCard.js'\nimport { CollectibleItem, CollectibleItemSkeleton, type CollectibleItemProps } from './CollectibleItem.js'\nimport { useCompactDetection } from './useCompactDetection.js'\n\nconst useStyles = makeStyles<{ compact?: boolean }>()((theme, { compact }) => ({\n    folder: {\n        overflow: 'auto',\n        cursor: 'pointer',\n        container: 'folder',\n        backgroundColor: theme.palette.maskColor.bg,\n        borderRadius: 8,\n    },\n    grid: {\n        display: 'grid',\n        overflow: 'auto',\n        gridTemplate: 'repeat(2, 1fr) / repeat(2, 1fr)',\n        // TODO Unfortunately, we can't use @container query in shadow DOM yet.\n        gridGap: theme.spacing(compact ? 0.5 : 1),\n        padding: theme.spacing(compact ? 0.5 : 1),\n        aspectRatio: '1 / 1',\n        cursor: 'pointer',\n    },\n    info: {\n        alignSelf: 'stretch',\n        padding: 6,\n    },\n    nameRow: {\n        display: 'flex',\n        alignItems: 'center',\n        overflow: 'auto',\n    },\n    name: {\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        lineHeight: theme.spacing(2),\n        minHeight: theme.spacing(2),\n        color: theme.palette.maskColor.second,\n    },\n    tokenId: {\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        lineHeight: theme.spacing(2),\n        minHeight: theme.spacing(2),\n        fontWeight: 700,\n        color: theme.palette.maskColor.main,\n    },\n    collectibleCard: {\n        width: '100%',\n        aspectRatio: '1/1',\n        borderRadius: 8,\n        backgroundColor: 'transparent',\n        overflow: 'hidden',\n    },\n    extraCount: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: theme.palette.maskColor.main,\n        backgroundColor: theme.palette.maskColor.bottom,\n        borderRadius: 8,\n        fontSize: 14,\n    },\n}))\n\nexport interface CollectionProps\n    extends HTMLProps<HTMLDivElement>,\n        Pick<CollectibleItemProps, 'disableAction' | 'onActionClick' | 'onItemClick' | 'verifiedBy'> {\n    pluginID: NetworkPluginID\n    collection: Web3Helper.NonFungibleCollectionAll\n    assets: Web3Helper.NonFungibleAssetScope[]\n    blockedTokenIds?: string[]\n    loading: boolean\n    finished?: boolean\n    /** set collection expanded */\n    expanded?: boolean\n    onExpand?(id: string): void\n    /** Invoke when component first renders */\n    onInitialRender?(collection: Web3Helper.NonFungibleCollectionAll): void\n    selectedAsset?: Web3Helper.NonFungibleAssetScope\n}\n\n/**\n * Props inherited from div on take effect when rendering as a folder\n */\nexport const Collection = memo(\n    ({\n        className,\n        collection,\n        pluginID,\n        assets = EMPTY_LIST,\n        blockedTokenIds = EMPTY_LIST,\n        loading,\n        finished,\n        verifiedBy,\n        expanded,\n        onExpand,\n        onInitialRender,\n        disableAction,\n        onActionClick,\n        onItemClick,\n        selectedAsset,\n        ...rest\n    }: CollectionProps) => {\n        const t = useSharedTrans()\n        const { compact, containerRef } = useCompactDetection()\n        const popperProps = useBoundedPopperProps()\n        const { classes, cx } = useStyles({ compact })\n\n        useLayoutEffect(() => {\n            onInitialRender?.(collection)\n        }, [])\n\n        const [nameOverflow, nameRef] = useDetectOverflow()\n        // blockedTokenIds are offline data, we can only presume they all\n        // belongs to user until finish loading\n        const count = useMemo(() => {\n            if (!blockedTokenIds.length) return collection.balance!\n            return finished ? assets.length : collection.balance! - blockedTokenIds.length\n        }, [collection.balance, assets.length, blockedTokenIds.length, finished])\n\n        if (loading && !assets.length) {\n            return <CollectionSkeleton id={collection.id!} count={count} expanded={expanded} />\n        }\n\n        const hasExtra = count > 4 && !expanded\n        const assetsSlice = hasExtra ? assets.slice(0, 3) : assets\n\n        if (collection.balance! <= 2 || (!loading && assets.length < 2) || expanded) {\n            const renderAssets = assetsSlice.map((asset) => (\n                <CollectibleItem\n                    key={`${asset.chainId}.${asset.address}.${asset.tokenId}`}\n                    className={className}\n                    asset={asset}\n                    pluginID={pluginID}\n                    disableName={expanded}\n                    actionLabel={t.send()}\n                    disableAction={disableAction}\n                    onActionClick={onActionClick}\n                    onItemClick={onItemClick}\n                    verifiedBy={verifiedBy}\n                    isSelected={isSameNFT(pluginID, asset, selectedAsset)}\n                />\n            ))\n            return <>{renderAssets}</>\n        }\n\n        const renderAssets = assetsSlice.map((asset) => (\n            <CollectibleCard\n                className={classes.collectibleCard}\n                asset={asset}\n                pluginID={pluginID}\n                key={`${collection.id}.${asset.address}.${asset.tokenId}`}\n                disableNetworkIcon\n            />\n        ))\n        return (\n            <ShadowRootTooltip\n                PopperProps={popperProps}\n                title={nameOverflow ? collection.name : undefined}\n                placement=\"top\"\n                disableInteractive\n                arrow>\n                <div\n                    className={cx(className, classes.folder)}\n                    {...rest}\n                    onClick={() => {\n                        onExpand?.(collection.id!)\n                    }}\n                    ref={containerRef}>\n                    <div className={classes.grid}>\n                        {renderAssets}\n                        {hasExtra ? (\n                            <Typography component=\"div\" className={classes.extraCount}>\n                                {count > 1002 ? '>999' : `+${count - 3}`}\n                            </Typography>\n                        ) : null}\n                    </div>\n                    <div className={classes.info}>\n                        <div className={classes.nameRow}>\n                            <Typography ref={nameRef} className={classes.name} variant=\"body2\">\n                                {collection.name}\n                            </Typography>\n                            {verifiedBy?.length ? (\n                                <ShadowRootTooltip\n                                    disableInteractive\n                                    title={t.verified_by({ marketplace: verifiedBy.join(', ') })}>\n                                    <Icons.Verification size={16} />\n                                </ShadowRootTooltip>\n                            ) : null}\n                        </div>\n                        <Typography className={classes.tokenId} variant=\"body2\" component=\"div\">\n                            {collection?.symbol || ''}\n                        </Typography>\n                    </div>\n                </div>\n            </ShadowRootTooltip>\n        )\n    },\n)\n\nCollection.displayName = 'Collection'\n\ninterface CollectionSkeletonProps extends HTMLProps<HTMLDivElement> {\n    id: string\n    /** Render variants according to count */\n    count: number\n    expanded?: boolean\n}\nexport const CollectionSkeleton = memo(\n    forwardRef<HTMLDivElement, CollectionSkeletonProps>(function CollectionSkeleton(\n        { className, count, id, expanded, ...rest },\n        ref,\n    ) {\n        const { compact, containerRef } = useCompactDetection()\n        const { classes, cx } = useStyles({ compact })\n\n        // We render up to 4 skeletons unless it's expanded.\n        const renderCount = expanded ? count : Math.min(4, count)\n        const asFolder = renderCount > 2 && !expanded\n\n        const skeletons = range(renderCount).map((i) => (\n            <CollectibleItemSkeleton omitInfo={asFolder} key={`${id}.${i}`} ref={i === 0 ? ref : undefined} />\n        ))\n\n        const forkedContainerRef = useForkRef(containerRef, ref)\n\n        if (asFolder)\n            return (\n                <div className={cx(className, classes.folder)} ref={forkedContainerRef} {...rest}>\n                    <div className={classes.grid}>{skeletons}</div>\n                    <div className={classes.info}>\n                        {expanded ? null : (\n                            <Typography className={classes.name} color=\"textPrimary\" variant=\"body2\">\n                                <Skeleton animation=\"wave\" variant=\"text\" width=\"80%\" />\n                            </Typography>\n                        )}\n                        <Typography className={classes.tokenId} variant=\"body2\" component=\"div\">\n                            <Skeleton animation=\"wave\" variant=\"text\" width=\"40%\" />\n                        </Typography>\n                    </div>\n                </div>\n            )\n        return <>{skeletons}</>\n    }),\n)\n\nexport const LazyCollection = memo((props: CollectionProps) => {\n    const { className, collection } = props\n    const [seen, ref] = useEverSeen()\n\n    if (seen) return <Collection {...props} ref={undefined} />\n    return <CollectionSkeleton className={className} id={collection.id!} count={collection.balance!} ref={ref} />\n})\n\nLazyCollection.displayName = 'LazyCollection'\n","import type { HTMLProps } from 'react'\nimport { range } from 'lodash-es'\nimport { CollectibleItemSkeleton } from './CollectibleItem.js'\nimport { CollectionSkeleton } from './Collection.js'\n\ninterface LoadingSkeletonProps extends Pick<HTMLProps<HTMLDivElement>, 'className'> {}\n\nexport function LoadingSkeleton({ className }: LoadingSkeletonProps) {\n    return (\n        <div className={className}>\n            {range(4).map((i) => (\n                <CollectionSkeleton id={`ske-${i}`} count={4} key={`ske-${i}`} />\n            ))}\n            {range(12).map((i) => (\n                <CollectibleItemSkeleton key={i} />\n            ))}\n        </div>\n    )\n}\n","import { Icons } from '@masknet/icons'\nimport { Image, NFTSpamBadge, useReportSpam } from '@masknet/shared'\nimport { LoadingBase, ShadowRootTooltip, makeStyles } from '@masknet/theme'\nimport { Box, Button, Typography } from '@mui/material'\nimport { memo, type HTMLProps } from 'react'\nimport { useSharedTrans } from '../../../locales/index.js'\nimport { useUserAssets } from './AssetsProvider.js'\nimport { CollectionsContext } from './CollectionsProvider.js'\n\nconst useStyles = makeStyles()((theme) => {\n    return {\n        collectionHeader: {\n            display: 'flex',\n            color: theme.palette.maskColor.main,\n        },\n        info: {\n            display: 'flex',\n            alignItems: 'center',\n            marginRight: 'auto',\n        },\n        icon: {\n            width: 24,\n            height: 24,\n            borderRadius: '100%',\n            objectFit: 'cover',\n        },\n        backButton: {\n            padding: theme.spacing(1, 0),\n            width: 40,\n            minWidth: 40,\n            textAlign: 'center',\n            alignItems: 'center',\n            justifyContent: 'center',\n            borderRadius: 32,\n            color: theme.palette.maskColor.main,\n            backgroundColor: theme.palette.maskColor.thirdMain,\n            marginLeft: theme.spacing(1),\n        },\n    }\n})\n\ninterface Props extends HTMLProps<HTMLDivElement> {\n    onResetCollection?: (id: undefined) => void\n}\n\nexport const CollectionHeader = memo(function CollectionHeader({ className, onResetCollection, ...rest }: Props) {\n    const t = useSharedTrans()\n    const { classes, cx } = useStyles()\n    const { getVerifiedBy } = useUserAssets()\n    const { currentCollectionId, currentCollection } = CollectionsContext.useContainer()\n    const { isReporting, isSpam, promptReport } = useReportSpam({\n        address: currentCollection?.address,\n        chainId: currentCollection?.chainId,\n        collectionId: currentCollection?.id,\n    })\n\n    if (!currentCollection) return null\n    const currentVerifiedBy = currentCollectionId ? getVerifiedBy(currentCollectionId) : []\n\n    return (\n        <div className={cx(classes.collectionHeader, className)} {...rest}>\n            <Box className={classes.info}>\n                {currentCollection.iconURL ? (\n                    <Image className={classes.icon} size={24} src={currentCollection.iconURL} />\n                ) : null}\n                <Typography mx={1}>{currentCollection.name}</Typography>\n                {currentVerifiedBy.length ? (\n                    <ShadowRootTooltip title={t.verified_by({ marketplace: currentVerifiedBy.join(', ') })}>\n                        <Icons.Verification size={16} />\n                    </ShadowRootTooltip>\n                ) : null}\n                {isSpam ? <NFTSpamBadge /> : null}\n            </Box>\n            <Button variant=\"text\" className={classes.backButton} onClick={() => onResetCollection?.(undefined)}>\n                <Icons.Undo size={16} />\n            </Button>\n            {!isSpam ? (\n                <Button variant=\"text\" className={classes.backButton} onClick={promptReport}>\n                    {isReporting ? <LoadingBase size={16} /> : <Icons.Flag size={16} />}\n                </Button>\n            ) : null}\n        </div>\n    )\n})\n","import { compact, range } from 'lodash-es'\nimport { memo, useCallback, useRef, type RefObject, type ReactNode, useMemo } from 'react'\nimport { ElementAnchor, EmptyStatus, RetryHint, isSameNFT } from '@masknet/shared'\nimport { EMPTY_LIST, EMPTY_OBJECT, Sniffings } from '@masknet/shared-base'\nimport { LoadingBase, makeStyles } from '@masknet/theme'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { Box, useForkRef } from '@mui/material'\nimport type { BoxProps } from '@mui/system'\nimport { useSharedTrans } from '../../../locales/index.js'\nimport { CollectibleItem, CollectibleItemSkeleton } from './CollectibleItem.js'\nimport { Collection, CollectionSkeleton, LazyCollection, type CollectionProps } from './Collection.js'\nimport { LoadingSkeleton } from './LoadingSkeleton.js'\nimport { useUserAssets } from './AssetsProvider.js'\nimport type { CollectibleGridProps } from './types.js'\nimport { SelectNetworkSidebar } from '../SelectNetworkSidebar/index.js'\nimport { CollectionsContext } from './CollectionsProvider.js'\nimport { useChainRuntime } from './ChainRuntimeProvider.js'\nimport { CollectionHeader } from './CollectionHeader.js'\nimport { Telemetry } from '@masknet/web3-telemetry'\nimport { EventID, EventType } from '@masknet/web3-telemetry/types'\n\nconst useStyles = makeStyles<CollectibleGridProps>()((theme, { columns = 4, gap = 1.5 }) => {\n    const gapIsNumber = typeof gap === 'number'\n    return {\n        container: {\n            boxSizing: 'border-box',\n            overflow: 'auto',\n            flex: 1,\n        },\n        columns: {\n            height: '100%',\n            boxSizing: 'border-box',\n            overflow: 'auto',\n            flexDirection: 'row',\n            display: 'flex',\n            '&::-webkit-scrollbar': {\n                display: 'none',\n            },\n        },\n        sidebar: {\n            paddingTop: gapIsNumber ? theme.spacing(gap) : gap,\n            paddingLeft: theme.spacing(1.5),\n            paddingRight: theme.spacing(0.25),\n        },\n        main: {\n            display: 'flex',\n            flexDirection: 'column',\n            flexGrow: 1,\n            height: '100%',\n            boxSizing: 'border-box',\n            overflow: 'auto',\n            // For profile-card footer\n            paddingBottom: 48,\n            '&::-webkit-scrollbar': {\n                display: 'none',\n            },\n            paddingTop: gapIsNumber ? theme.spacing(gap) : gap,\n        },\n        emptyMain: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignSelf: 'center',\n        },\n        grid: {\n            width: '100%',\n            display: 'grid',\n            gridTemplateColumns: typeof columns === 'string' ? columns : `repeat(${columns}, 1fr)`,\n            gridGap: gapIsNumber ? theme.spacing(gap) : gap,\n            padding: gapIsNumber ? theme.spacing(0, gap, 0) : `0 ${gap} 0`,\n            paddingLeft: theme.spacing(1),\n            boxSizing: 'border-box',\n        },\n        collectionHeader: {\n            margin: theme.spacing(0, gap, 1.5),\n        },\n    }\n})\n\nfunction getTopOffset() {\n    if (Sniffings.is_twitter_page) {\n        // 53, height of the sticky bar of Twitter,\n        // 96, height of the header of web3 tab\n        return 53 + 96\n    }\n    // TODO Other sites\n    return 0\n}\nexport interface CollectionListProps\n    extends BoxProps,\n        Pick<CollectionProps, 'disableAction' | 'onActionClick' | 'onItemClick'>,\n        withClasses<'sidebar' | 'grid'> {\n    gridProps?: CollectibleGridProps\n    disableSidebar?: boolean\n    disableWindowScroll?: boolean\n    selectedAsset?: Web3Helper.NonFungibleAssetAll\n    /** User customized assets, will be rendered as flatten */\n    additionalAssets?: Web3Helper.NonFungibleAssetAll[]\n    /** Pending user customized assets, used to render loading skeletons */\n    pendingAdditionalAssetCount?: number\n    emptyText?: ReactNode\n    scrollElementRef?: RefObject<HTMLElement>\n    from?: 'web3Profile' | 'profileCard'\n    onChainChange?: (chainId?: Web3Helper.ChainIdAll) => void\n    onCollectionChange?: (collectionId: string | undefined) => void\n}\n\nexport const CollectionList = memo(function CollectionList({\n    className,\n    gridProps = EMPTY_OBJECT,\n    disableSidebar,\n    disableAction,\n    selectedAsset,\n    additionalAssets,\n    pendingAdditionalAssetCount = 0,\n    disableWindowScroll,\n    scrollElementRef,\n    emptyText,\n    onActionClick,\n    onItemClick,\n    onChainChange,\n    onCollectionChange,\n    from,\n    ...rest\n}: CollectionListProps) {\n    const t = useSharedTrans()\n    const { classes, cx } = useStyles(gridProps, { props: rest })\n\n    const { pluginID, account, chainId, setChainId, networks } = useChainRuntime()\n    const { collections, currentCollection, setCurrentCollectionId, loading, error, retry } =\n        CollectionsContext.useContainer()\n\n    const handleChainChange = useCallback(\n        (chainId: Web3Helper.ChainIdAll | undefined) => {\n            setChainId(chainId)\n            onChainChange?.(chainId)\n            setCurrentCollectionId(undefined)\n            onCollectionChange?.(undefined)\n            if (from === 'profileCard')\n                Telemetry.captureEvent(EventType.Access, EventID.EntryTimelineHoverUserNftSwitchChain)\n            if (from === 'web3Profile')\n                Telemetry.captureEvent(EventType.Access, EventID.EntryProfileUserNftsSwitchChain)\n        },\n        [onChainChange],\n    )\n    const containerRef = useRef<HTMLDivElement>(null)\n    const mainColumnRef = useRef<HTMLDivElement>(null)\n    const forkedMainColumnRef = useForkRef(mainColumnRef, scrollElementRef)\n    const scrollToTop = useCallback(() => {\n        if (disableWindowScroll) {\n            mainColumnRef.current?.scrollTo({ top: 0, behavior: 'smooth' })\n        } else {\n            const rect = containerRef.current?.getBoundingClientRect()\n            if (!rect) return\n            const offset = getTopOffset()\n            if (Math.abs(rect.top - offset) < 50) return\n            const top = rect.top + window.scrollY - offset\n            window.scroll({ top, behavior: 'smooth' })\n        }\n    }, [disableWindowScroll])\n\n    const handleCollectionChange = useCallback(\n        (id: string | undefined) => {\n            setCurrentCollectionId(id)\n            onCollectionChange?.(id)\n\n            if (!id) return\n            scrollToTop()\n        },\n        [onCollectionChange, scrollToTop],\n    )\n\n    const {\n        assetsMapRef,\n        getAssets,\n        getBLockedTokenIds,\n        getVerifiedBy,\n        loadAssets,\n        loadVerifiedBy,\n        isAllHidden,\n        isEmpty,\n    } = useUserAssets()\n    const additional = useMemo(() => {\n        if (!additionalAssets?.length) return EMPTY_LIST\n        const collectionAddresses = compact(collections.map((x) => x.address?.toLowerCase()))\n        // If it's in our collections, no need to treat it as additional one\n        return additionalAssets.filter((x) => !collectionAddresses.includes(x.address.toLowerCase()))\n    }, [additionalAssets, account, collections])\n\n    const handleInitialRender = useCallback(\n        (collection: Web3Helper.NonFungibleCollectionAll) => {\n            const id = collection.id!\n            const assetsState = assetsMapRef.current[`${account}.${id}`]\n            // To reduce requests, check if has been initialized\n            if (assetsState?.assets.length || assetsState?.loading) return\n            loadVerifiedBy(id)\n            loadAssets(collection)\n        },\n        [loadAssets, loadVerifiedBy, account],\n    )\n\n    const sidebar = disableSidebar ? null : (\n        <SelectNetworkSidebar\n            chainId={chainId}\n            className={classes.sidebar}\n            onChainChange={handleChainChange}\n            pluginID={pluginID}\n            networks={networks}\n        />\n    )\n\n    if (!collections.length && loading && !error && account)\n        return (\n            <Box className={cx(classes.container, className)} {...rest}>\n                <div className={classes.columns}>\n                    {sidebar}\n                    <div className={classes.main}>\n                        <LoadingSkeleton className={classes.grid} />\n                    </div>\n                </div>\n            </Box>\n        )\n\n    if (!collections.length && error && account)\n        return (\n            <Box className={cx(classes.container, className)} {...rest}>\n                <Box mt=\"200px\" color={(theme) => theme.palette.maskColor.main}>\n                    <RetryHint retry={retry} />\n                </Box>\n            </Box>\n        )\n\n    if ((!loading && !collections.length) || !account || isAllHidden || isEmpty) {\n        return (\n            <Box className={cx(classes.container, className)} {...rest}>\n                <div className={classes.columns}>\n                    {sidebar}\n                    <Box className={cx(classes.main, classes.emptyMain)} display=\"flex\">\n                        <EmptyStatus flexGrow={1}>{emptyText ?? t.no_NFTs_found()}</EmptyStatus>\n                    </Box>\n                </div>\n            </Box>\n        )\n    }\n\n    return (\n        <Box className={cx(classes.container, className)} ref={containerRef} {...rest}>\n            <div className={classes.columns}>\n                {sidebar}\n                <div className={classes.main} ref={forkedMainColumnRef}>\n                    <CollectionHeader className={classes.collectionHeader} onResetCollection={handleCollectionChange} />\n                    {currentCollection ? (\n                        <ExpandedCollection\n                            gridProps={gridProps}\n                            pluginID={pluginID}\n                            collection={currentCollection}\n                            key={currentCollection.id}\n                            assets={getAssets(currentCollection).assets}\n                            verifiedBy={getVerifiedBy(currentCollection.id!)}\n                            loading={getAssets(currentCollection).loading}\n                            finished={getAssets(currentCollection).finished}\n                            emptyText={emptyText}\n                            onInitialRender={handleInitialRender}\n                            disableAction={disableAction}\n                            onActionClick={onActionClick}\n                            selectedAsset={selectedAsset}\n                            onItemClick={onItemClick}\n                        />\n                    ) : (\n                        <Box className={classes.grid}>\n                            {pendingAdditionalAssetCount > 0 ? (\n                                <CollectionSkeleton\n                                    id=\"additional-assets\"\n                                    count={pendingAdditionalAssetCount}\n                                    expanded\n                                />\n                            ) : null}\n                            {additional.map((asset) => (\n                                <CollectibleItem\n                                    key={`additional.${asset.chainId}.${asset.address}.${asset.tokenId}`}\n                                    className={className}\n                                    asset={asset}\n                                    pluginID={pluginID}\n                                    disableName\n                                    actionLabel={t.send()}\n                                    disableAction={disableAction}\n                                    isSelected={isSameNFT(pluginID, asset, selectedAsset)}\n                                    onActionClick={onActionClick}\n                                    onItemClick={onItemClick}\n                                />\n                            ))}\n                            {collections.map((collection) => {\n                                const assetsState = getAssets(collection)\n                                return (\n                                    <LazyCollection\n                                        pluginID={pluginID}\n                                        collection={collection}\n                                        key={`${collection.chainId}.${collection.id}`}\n                                        assets={assetsState.assets}\n                                        verifiedBy={getVerifiedBy(collection.id!)}\n                                        loading={assetsState.loading}\n                                        finished={assetsState.finished}\n                                        blockedTokenIds={getBLockedTokenIds(collection)}\n                                        selectedAsset={selectedAsset}\n                                        onExpand={handleCollectionChange}\n                                        onInitialRender={handleInitialRender}\n                                        disableAction={disableAction}\n                                        onActionClick={onActionClick}\n                                        onItemClick={onItemClick}\n                                    />\n                                )\n                            })}\n                        </Box>\n                    )}\n                    {error ? <RetryHint hint={false} retry={retry} /> : null}\n                </div>\n            </div>\n        </Box>\n    )\n})\n\ninterface ExpandedCollectionProps extends CollectionProps {\n    gridProps?: CollectibleGridProps\n    emptyText?: ReactNode\n}\n\n/** An ExpandedCollection tiles collectable cards */\nconst ExpandedCollection = memo(function ExpandedCollection({\n    gridProps = EMPTY_OBJECT,\n    emptyText,\n    ...collectionProps\n}: ExpandedCollectionProps) {\n    const t = useSharedTrans()\n    const { loadAssets, getAssets } = useUserAssets()\n    const { classes, theme } = useStyles(gridProps)\n    const { collection, assets } = collectionProps\n    const { finished, loading } = getAssets(collection)\n\n    if (finished && !assets.length) return <EmptyStatus flexGrow={1}>{emptyText ?? t.no_NFTs_found()}</EmptyStatus>\n\n    return (\n        <>\n            <Box width=\"100%\">\n                <Box className={classes.grid}>\n                    <Collection {...collectionProps} expanded ref={undefined} />\n                    {loading ? range(20).map((i) => <CollectibleItemSkeleton omitName key={i} />) : null}\n                </Box>\n            </Box>\n            <ElementAnchor\n                key={assets.length}\n                callback={() => {\n                    loadAssets(collection)\n                }}>\n                {finished ? null : <LoadingBase color={theme.palette.maskColor.main} />}\n            </ElementAnchor>\n        </>\n    )\n})\n","import { EMPTY_LIST } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useNonFungibleCollections } from '@masknet/web3-hooks-base'\nimport { SourceType } from '@masknet/web3-shared-base'\nimport { isLensCollect, isLensFollower } from '@masknet/web3-shared-evm'\nimport { produce, type Draft } from 'immer'\nimport { sum } from 'lodash-es'\nimport { memo, useMemo, useState, type PropsWithChildren } from 'react'\nimport { createContainer } from 'unstated-next'\nimport { useChainRuntime } from './ChainRuntimeProvider.js'\n\nfunction useCollections(defaultCollectionId?: string) {\n    const { pluginID, chainId, account } = useChainRuntime()\n    const [currentCollectionId = defaultCollectionId, setCurrentCollectionId] = useState<string>()\n    const {\n        data: rawCollections = EMPTY_LIST,\n        isLoading: loading,\n        error,\n        refetch: retry,\n    } = useNonFungibleCollections(pluginID, {\n        account,\n        allChains: true,\n        sourceType: SourceType.SimpleHash,\n    })\n\n    const merged = useMemo(() => {\n        return produce(rawCollections, (draft) => {\n            const mergeBy = (name: string, filterFn: (c: Draft<Web3Helper.NonFungibleCollectionAll>) => boolean) => {\n                const matchedCollections = draft.filter(filterFn)\n                if (matchedCollections.length <= 2) return\n\n                const [theFirst, ...rest] = matchedCollections\n\n                // Merge ids, update name, total up the balance\n                theFirst.id = matchedCollections.map((x) => x.id).join(',')\n                theFirst.name = name\n                theFirst.balance = sum(matchedCollections.map((x) => x.balance || 0))\n\n                // Remove the rest\n                draft.splice(0, draft.length, ...draft.filter((x) => !rest.includes(x)))\n            }\n            mergeBy('Lens Followers', (x) => isLensFollower(x.name))\n            mergeBy('Lens Collects', (x) => isLensCollect(x.name))\n        })\n    }, [rawCollections])\n\n    const collections = useMemo(\n        () => (chainId ? merged.filter((x) => x.chainId === chainId) : merged),\n        [merged, chainId],\n    )\n\n    const currentCollection = currentCollectionId ? merged.find((x) => x.id === currentCollectionId) : undefined\n\n    return {\n        collections,\n        currentCollection,\n        currentCollectionId,\n        setCurrentCollectionId,\n        loading,\n        error,\n        retry,\n    }\n}\n\nexport const CollectionsContext = createContainer(useCollections)\n\nexport interface CollectionsProviderProps {\n    defaultCollectionId?: string\n}\nexport const CollectionsProvider = memo<PropsWithChildren<CollectionsProviderProps>>(function CollectionsProvider({\n    defaultCollectionId,\n    children,\n}) {\n    return <CollectionsContext.Provider initialState={defaultCollectionId}>{children}</CollectionsContext.Provider>\n})\n","import { EMPTY_LIST } from '@masknet/shared-base'\nimport { useAccount, useBlockedNonFungibleTokens } from '@masknet/web3-hooks-base'\nimport { isSameAddress } from '@masknet/web3-shared-base'\nimport { memo, useMemo, type PropsWithChildren } from 'react'\nimport { AssetsProvider } from './AssetsProvider.js'\nimport { ChainRuntimeProvider, type ChainRuntimeProviderProps } from './ChainRuntimeProvider.js'\nimport { CollectionsProvider, type CollectionsProviderProps } from './CollectionsProvider.js'\n\ninterface UserAssetsProviderProps extends ChainRuntimeProviderProps, CollectionsProviderProps {}\n\nexport const UserAssetsProvider = memo<PropsWithChildren<UserAssetsProviderProps>>(function UserAssetsProvider({\n    pluginID,\n    account,\n    defaultChainId,\n    defaultCollectionId,\n    children,\n}) {\n    const systemAccount = useAccount()\n\n    const blockedTokens = useBlockedNonFungibleTokens(pluginID)\n    const blockedIds = useMemo(() => {\n        if (!isSameAddress(systemAccount, account)) return EMPTY_LIST\n        return blockedTokens.map((x) => x.id)\n    }, [blockedTokens, systemAccount, account])\n\n    return (\n        <ChainRuntimeProvider pluginID={pluginID} defaultChainId={defaultChainId} account={account}>\n            <CollectionsProvider defaultCollectionId={defaultCollectionId}>\n                <AssetsProvider blockedIds={blockedIds}>{children}</AssetsProvider>\n            </CollectionsProvider>\n        </ChainRuntimeProvider>\n    )\n})\n","import { memo, useEffect, useRef } from 'react'\nimport { useIntersectionObserver } from '@react-hookz/web'\nimport { Stack, type StackProps } from '@mui/material'\n\ninterface ElementAnchorProps extends StackProps {\n    callback: (intersection: IntersectionObserverEntry | undefined) => void\n}\n\nexport const ElementAnchor = memo<ElementAnchorProps>(({ callback, children, ...rest }) => {\n    const elementRef = useRef<HTMLDivElement>(null)\n    const intersection = useIntersectionObserver(elementRef, {\n        rootMargin: '200px',\n    })\n\n    const callbackRef = useRef(callback)\n    callbackRef.current = callback\n    useEffect(() => {\n        if (!intersection?.isIntersecting) return\n        callbackRef.current(intersection)\n    }, [intersection])\n\n    return (\n        <Stack pt={1} ref={elementRef} justifyContent=\"center\" alignItems=\"center\" direction=\"row\" {...rest}>\n            {children}\n        </Stack>\n    )\n})\n\nElementAnchor.displayName = 'ElementAnchor'\n","import { Icons } from '@masknet/icons'\nimport { makeStyles } from '@masknet/theme'\nimport { Box, Typography, type BoxProps } from '@mui/material'\nimport { memo } from 'react'\n\nconst useStyles = makeStyles()((theme) => ({\n    statusBox: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n    },\n    text: {\n        color: theme.palette.maskColor.second,\n        fontSize: '14px',\n        fontWeight: 400,\n        marginTop: theme.spacing(1.5),\n    },\n}))\n\ninterface Props extends BoxProps {\n    iconSize?: number\n}\n\nexport const EmptyStatus = memo(function EmptyStatus({ className, children, iconSize = 32, ...rest }: Props) {\n    const { classes, cx } = useStyles()\n    return (\n        <Box className={cx(classes.statusBox, className)} p={2} {...rest}>\n            <Icons.EmptySimple size={iconSize} />\n            <Typography className={classes.text} component=\"div\">\n                {children}\n            </Typography>\n        </Box>\n    )\n})\n","import { type HTMLProps, type ImgHTMLAttributes, useState } from 'react'\nimport { makeStyles } from '@masknet/theme'\nimport { useTheme } from '@mui/material'\n\nconst useStyles = makeStyles<Pick<ImageProps, 'size' | 'rounded'>, 'center'>()((theme, { size, rounded }, refs) => ({\n    optimistic: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    container: {\n        width: size ?? '100%',\n        height: size ?? '100%',\n        position: 'relative',\n        borderRadius: rounded ? '50%' : undefined,\n        overflow: rounded ? 'hidden' : undefined,\n    },\n    image: {\n        display: 'block',\n    },\n    failImage: {\n        width: 30,\n        height: 30,\n    },\n    center: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    failed: {\n        [`&.${refs.center}`]: {\n            background:\n                theme.palette.mode === 'light'\n                    ? 'linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.9) 100%), linear-gradient(90deg, rgba(98, 152, 234, 0.2) 1.03%, rgba(98, 152, 234, 0.2) 1.04%, rgba(98, 126, 234, 0.2) 100%)'\n                    : 'linear-gradient(180deg, #202020 0%, #181818 100%)',\n        },\n    },\n}))\n\nconst MASK_DARK_FALLBACK = new URL('./mask-dark.png', import.meta.url).href\nconst MASK_LIGHT_FALLBACK = new URL('./mask-light.png', import.meta.url).href\n\nexport interface ImageProps\n    extends ImgHTMLAttributes<HTMLImageElement>,\n        withClasses<'container' | 'fallbackImage' | 'imageLoading' | 'failed'> {\n    size?: number | string\n    rounded?: boolean\n    fallback?: string | JSX.Element | null\n    disableSpinner?: boolean\n    containerProps?: HTMLProps<HTMLDivElement>\n}\n\nexport function Image({\n    fallback,\n    size,\n    rounded,\n    disableSpinner,\n    classes: extraClasses,\n    onClick,\n    containerProps,\n    ...rest\n}: ImageProps) {\n    const { classes, cx } = useStyles({ size, rounded }, { props: { classes: extraClasses } })\n    const theme = useTheme()\n    const [failed, setFailed] = useState(false)\n\n    if (rest.src && !failed) {\n        return (\n            <div {...containerProps} className={cx(classes.container, classes.optimistic, containerProps?.className)}>\n                <img\n                    className={classes.image}\n                    width={size}\n                    height={size}\n                    {...rest}\n                    src={rest.src}\n                    onError={() => setFailed(true)}\n                />\n            </div>\n        )\n    }\n\n    if (fallback && !(fallback instanceof URL) && typeof fallback !== 'string') {\n        return (\n            <div\n                {...containerProps}\n                className={cx(classes.container, classes.failed, classes.center, containerProps?.className)}>\n                {fallback}\n            </div>\n        )\n    }\n\n    return (\n        <div\n            {...containerProps}\n            className={cx(classes.container, classes.failed, classes.center, containerProps?.className)}>\n            <img\n                loading=\"lazy\"\n                decoding=\"async\"\n                width={size}\n                height={size}\n                {...rest}\n                src={fallback?.toString() ?? (theme.palette.mode === 'dark' ? MASK_DARK_FALLBACK : MASK_LIGHT_FALLBACK)}\n                className={cx(classes.image, classes.failImage, classes.fallbackImage)}\n            />\n        </div>\n    )\n}\n","import { memo } from 'react'\nimport { Button, type ButtonProps, Stack, Typography } from '@mui/material'\nimport { useSharedTrans } from '../../../locales/index.js'\n\ninterface RetryHintProps {\n    hint?: boolean\n    retry?(): void\n    ButtonProps?: ButtonProps\n}\n\nexport const RetryHint = memo<RetryHintProps>(({ retry, hint = true, ButtonProps }) => {\n    const t = useSharedTrans()\n    return (\n        <Stack justifyContent=\"center\" direction=\"row\" alignItems=\"center\" height={hint ? '100%' : '100px'}>\n            <Stack gap={2.75}>\n                {hint ? (\n                    <Typography textAlign=\"center\" fontSize={12} fontWeight={700}>\n                        {t.load_failed()}\n                    </Typography>\n                ) : null}\n                <Button {...ButtonProps} size=\"small\" style={{ borderRadius: 16 }} onClick={() => retry?.()}>\n                    {t.load_retry()}\n                </Button>\n            </Stack>\n        </Stack>\n    )\n})\n\nRetryHint.displayName = 'RetryHint'\n","import { Icons } from '@masknet/icons'\nimport type { ReactNode } from 'react'\n\nexport enum SecurityMessageLevel {\n    High = 'High',\n    Medium = 'Medium',\n    Safe = 'Safe',\n}\n\ntype DefineMapping = {\n    [key in SecurityMessageLevel]: {\n        bgColor: string\n        titleColor: string\n        icon(size?: number): ReactNode\n    }\n}\n\nexport const DefineMapping: DefineMapping = {\n    [SecurityMessageLevel.High]: {\n        titleColor: '#FF5F5F',\n        bgColor: 'rgba(255, 53, 69, 0.1)',\n        icon: (size: number) => <Icons.SecurityRisk size={size ?? 24} />,\n    },\n    [SecurityMessageLevel.Medium]: {\n        titleColor: '#FFB100',\n        bgColor: 'rgba(255, 177, 0, 0.1)',\n        // TODO: Merge duplicate icon in a another PR.\n        icon: (size: number) => <Icons.SecurityWarning size={size ?? 24} color=\"#FFB915\" />,\n    },\n    [SecurityMessageLevel.Safe]: {\n        titleColor: '#60DFAB',\n        bgColor: 'rgba(119, 224, 181, 0.1)',\n        icon: (size: number) => <Icons.Success size={size ?? 24} />,\n    },\n}\n","import { memo } from 'react'\nimport { Stack, Typography, type StackProps } from '@mui/material'\nimport { Icons } from '@masknet/icons'\nimport type { SecurityAPI } from '@masknet/web3-providers/types'\nimport { CrossIsolationMessages } from '@masknet/shared-base'\nimport { useSharedTrans } from '../../../locales/index.js'\nimport { DefineMapping, SecurityMessageLevel } from './Common.js'\n\ninterface TokenCardProps {\n    tokenSecurity: SecurityAPI.TokenSecurityType\n}\n\nexport const TokenSecurityBar = memo<TokenCardProps>(({ tokenSecurity }) => {\n    const t = useSharedTrans()\n\n    const { warn_item_quantity: attentionFactors = 0, risk_item_quantity: riskyFactors = 0 } = tokenSecurity\n\n    const handleOpenDialog = () => {\n        CrossIsolationMessages.events.checkSecurityDialogEvent.sendToLocal({\n            open: true,\n            searchHidden: true,\n            tokenAddress: tokenSecurity.contract,\n            chainId: tokenSecurity.chainId,\n        })\n    }\n\n    return (\n        <Stack direction=\"row\" alignItems=\"center\" spacing={1.5}>\n            {riskyFactors !== 0 && (\n                <Stack\n                    direction=\"row\"\n                    alignItems=\"center\"\n                    borderRadius=\"4px\"\n                    padding=\"4px 8px\"\n                    bgcolor={DefineMapping[SecurityMessageLevel.High].bgColor}\n                    spacing={0.5}>\n                    {DefineMapping[SecurityMessageLevel.High].icon(14)}\n                    <Typography\n                        component=\"span\"\n                        fontSize=\"12px\"\n                        color={DefineMapping[SecurityMessageLevel.High].titleColor}>\n                        {riskyFactors > 1\n                            ? t.risky_items({ quantity: riskyFactors.toString() })\n                            : t.risky_item({ quantity: riskyFactors.toString() })}\n                    </Typography>\n                </Stack>\n            )}\n            {attentionFactors !== 0 && (\n                <Stack\n                    direction=\"row\"\n                    alignItems=\"center\"\n                    borderRadius=\"4px\"\n                    padding=\"4px 8px\"\n                    bgcolor={DefineMapping[SecurityMessageLevel.Medium].bgColor}\n                    spacing={0.5}>\n                    {DefineMapping[SecurityMessageLevel.Medium].icon(14)}\n                    <Typography\n                        component=\"span\"\n                        fontSize=\"12px\"\n                        color={DefineMapping[SecurityMessageLevel.Medium].titleColor}>\n                        {attentionFactors > 1\n                            ? t.attention_items({ quantity: attentionFactors.toString() })\n                            : t.attention_item({ quantity: attentionFactors.toString() })}\n                    </Typography>\n                </Stack>\n            )}\n            {(attentionFactors !== 0 || riskyFactors !== 0) && (\n                <Stack\n                    direction=\"row\"\n                    alignItems=\"center\"\n                    borderRadius=\"4px\"\n                    padding=\"4px 8px\"\n                    bgcolor=\"rgba(28, 104, 243, 0.1)\"\n                    sx={{ cursor: 'pointer' }}\n                    onClick={handleOpenDialog}\n                    spacing={0.5}>\n                    <Typography component=\"span\" fontSize=\"12px\" color=\"#1C68F3\">\n                        {t.more()}\n                    </Typography>\n                    <Icons.RightArrow size={14} color=\"#1C68F3\" />\n                </Stack>\n            )}\n        </Stack>\n    )\n})\n\nexport const NFTSpamBadge = memo(function NFTSpamBadge(props: StackProps) {\n    const t = useSharedTrans()\n\n    return (\n        <Stack\n            direction=\"row\"\n            alignItems=\"center\"\n            borderRadius=\"4px\"\n            padding=\"4px 8px\"\n            bgcolor={DefineMapping[SecurityMessageLevel.High].bgColor}\n            spacing={0.5}\n            {...props}>\n            {DefineMapping[SecurityMessageLevel.High].icon(14)}\n            <Typography component=\"span\" fontSize=\"12px\" color={DefineMapping[SecurityMessageLevel.High].titleColor}>\n                {t.spam()}\n            </Typography>\n        </Stack>\n    )\n})\n","import { makeStyles } from '@masknet/theme'\nimport { ImageIcon } from '../ImageIcon/index.js'\n\ninterface StyleProps {\n    size: number\n    badgeIconBorderColor?: string\n}\n\nconst useStyles = makeStyles<StyleProps>()((theme, props) => ({\n    root: {\n        position: 'relative',\n        display: 'flex',\n        height: props.size,\n        width: props.size,\n    },\n    mainIcon: {\n        display: 'block',\n    },\n    badgeIcon: {\n        position: 'absolute',\n        right: -6,\n        bottom: -4,\n        border: `1px solid ${props.badgeIconBorderColor ?? theme.palette.common.white}`,\n        borderRadius: '50%',\n    },\n}))\n\ninterface WalletIconProps extends withClasses<'root' | 'mainIcon'> {\n    size?: number\n    badgeSize?: number\n    mainIcon?: string\n    badgeIcon?: string\n    badgeIconBorderColor?: string\n    iconFilterColor?: string\n}\n\nexport function WalletIcon(props: WalletIconProps) {\n    const { size = 24, badgeSize = 14, mainIcon, badgeIcon, badgeIconBorderColor, iconFilterColor } = props\n    const { classes } = useStyles(\n        {\n            size: badgeSize > size ? badgeSize : size,\n            badgeIconBorderColor,\n        },\n        { props: { classes: props.classes } },\n    )\n\n    return (\n        <div\n            className={classes.root}\n            style={{\n                height: size,\n                width: size,\n            }}>\n            {mainIcon ? (\n                <ImageIcon className={classes.mainIcon} size={size} icon={mainIcon} iconFilterColor={iconFilterColor} />\n            ) : null}\n            {badgeIcon ? <ImageIcon className={classes.badgeIcon} size={badgeSize} icon={badgeIcon} /> : null}\n        </div>\n    )\n}\n","import { useCustomSnackbar } from '@masknet/theme'\nimport { NFTSpam, SPAM_SCORE, SimpleHashEVM } from '@masknet/web3-providers'\nimport { useQuery } from '@tanstack/react-query'\nimport { useCallback } from 'react'\nimport { useAsyncFn } from 'react-use'\nimport { ConfirmDialog } from '../UI/modals/modals.js'\nimport { useSharedTrans } from '../locales/i18n_generated.js'\n\ninterface Options {\n    address?: string\n    chainId?: number\n    collectionId?: string\n}\n\n/**\n * collectionId is more accurate\n */\nexport function useReportSpam({ address, chainId, collectionId }: Options) {\n    const t = useSharedTrans()\n    const { data: collectionByAddress } = useQuery({\n        enabled: !collectionId,\n        queryKey: ['simple-hash', 'collection', chainId, address],\n        queryFn: async () => {\n            if (!address || !chainId) return null\n            return SimpleHashEVM.getCollectionByContractAddress(address, { chainId })\n        },\n    })\n    const { data: collectionById } = useQuery({\n        enabled: !!collectionId,\n        queryKey: ['simple-hash', 'collection', collectionId],\n        queryFn: async () => {\n            if (!collectionId) return null\n            return SimpleHashEVM.getSimpleHashCollection(collectionId)\n        },\n    })\n    const collection = collectionById || collectionByAddress\n    const colId = collectionId || collection?.collection_id\n    const [state, reportSpam] = useAsyncFn(async () => {\n        if (!colId) return\n        const res = await NFTSpam.report({\n            collection_id: colId,\n            source: 'mask-network',\n            status: 'reporting',\n        })\n        return res.code === 200\n    }, [colId])\n\n    const { showSnackbar } = useCustomSnackbar()\n    const promptReport = useCallback(async () => {\n        const confirmed = await ConfirmDialog.openAndWaitForClose({\n            title: t.report_nft(),\n            message: (\n                <div style={{ wordBreak: 'keep-all' }}>\n                    {t.confirm_to_report_nft({ name: collection?.name || 'this NFT' })}\n                </div>\n            ),\n            confirmVariant: 'warning',\n        })\n        if (!confirmed || !colId) return\n        const result = await reportSpam()\n        showSnackbar(t.report_spam(), {\n            variant: result ? 'success' : 'error',\n            message: result ? t.report_spam_success() : t.report_spam_fail(),\n        })\n    }, [colId, reportSpam, collection?.name])\n    const isSpam = !!collection && collection.spam_score !== null && collection?.spam_score > SPAM_SCORE\n\n    return {\n        isReporting: state.loading,\n        isSpam,\n        collection,\n        promptReport,\n    }\n}\n","import { NetworkPluginID } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { isSameAddress } from '@masknet/web3-shared-base'\n\nexport function isSameNFT(\n    pluginID: NetworkPluginID,\n    a: Web3Helper.NonFungibleAssetAll,\n    b?: Web3Helper.NonFungibleAssetAll,\n) {\n    if (pluginID === NetworkPluginID.PLUGIN_SOLANA) return a.tokenId === b?.tokenId && a.id === b.id\n    if (!a.contract) return false\n    return (\n        isSameAddress(a.contract.address, b?.contract?.address) &&\n        a.contract?.chainId === b?.contract?.chainId &&\n        a.tokenId === b?.tokenId\n    )\n}\n","import { useMemo } from 'react'\nimport { useSubscription } from 'use-subscription'\nimport { EMPTY_ARRAY, type NetworkPluginID } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useWeb3State } from './useWeb3State.js'\n\nexport function useBlockedNonFungibleTokens<S extends 'all' | void = void, T extends NetworkPluginID = NetworkPluginID>(\n    pluginID?: T,\n    schemaType?: Web3Helper.SchemaTypeScope<S, T>,\n) {\n    const { Token } = useWeb3State(pluginID)\n    const nfts = useSubscription(Token?.blockedNonFungibleTokens ?? EMPTY_ARRAY)\n    return useMemo<Array<Web3Helper.NonFungibleTokenScope<S, T>>>(() => {\n        return nfts.length && schemaType ? nfts.filter((x) => x.schema === schemaType) : nfts\n    }, [schemaType, nfts])\n}\n","import type { NetworkPluginID } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useChainContext } from './useContext.js'\nimport { useWeb3Others } from './useWeb3Others.js'\n\nexport function useChainIdValid<T extends NetworkPluginID>(\n    pluginID?: T,\n    expectedChainId?: Web3Helper.Definition[T]['ChainId'],\n) {\n    const { account, chainId } = useChainContext({ chainId: expectedChainId })\n    const Others = useWeb3Others(pluginID)\n\n    return (!account || Others.chainResolver.isValidChainId?.(chainId, process.env.NODE_ENV === 'development')) ?? false\n}\n","import type { NetworkPluginID } from '@masknet/shared-base'\nimport { getRegisteredWeb3Networks } from '@masknet/web3-providers'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useChainContext, useNetworkContext } from './useContext.js'\n\n/**\n * Get built in declared network descriptor\n * @param expectedPluginID\n * @param expectedChainIdOrNetworkTypeOrID\n * @returns\n */\nexport function useNetworkDescriptor<S extends 'all' | void = void, T extends NetworkPluginID = NetworkPluginID>(\n    expectedPluginID?: T,\n    expectedChainIdOrNetworkTypeOrID?: string | number,\n): Web3Helper.NetworkDescriptorScope<S, T> | undefined {\n    const { pluginID } = useNetworkContext(expectedPluginID)\n    const { networkType } = useChainContext()\n\n    return getRegisteredWeb3Networks(pluginID).find((x) =>\n        [x.chainId, x.type, x.ID].includes(expectedChainIdOrNetworkTypeOrID ?? networkType ?? ''),\n    )\n}\n","import { useQuery } from '@tanstack/react-query'\nimport {\n    asyncIteratorToArray,\n    pageableToIterator,\n    type PageIndicator,\n    type NetworkPluginID,\n    EMPTY_LIST,\n} from '@masknet/shared-base'\nimport type { HubOptions } from '@masknet/web3-providers/types'\nimport { type NonFungibleCollection } from '@masknet/web3-shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useChainContext } from './useContext.js'\nimport { useWeb3Hub } from './useWeb3Hub.js'\n\nexport function useNonFungibleCollections<S extends 'all' | void = void, T extends NetworkPluginID = NetworkPluginID>(\n    pluginID?: T,\n    options?: HubOptions<T>,\n) {\n    const { account } = useChainContext({ account: options?.account, chainId: options?.chainId })\n    const Hub = useWeb3Hub(pluginID, options)\n\n    return useQuery<Array<NonFungibleCollection<Web3Helper.ChainIdScope<S, T>, Web3Helper.SchemaTypeScope<S, T>>>>({\n        queryKey: ['non-fungible-collections', pluginID, account, options],\n        enabled: !!account,\n        queryFn: async () => {\n            if (!account) return EMPTY_LIST\n            return asyncIteratorToArray(\n                pageableToIterator(async (indicator?: PageIndicator) => {\n                    return Hub.getNonFungibleCollectionsByOwner(account, {\n                        indicator,\n                        size: 50,\n                        networkPluginId: pluginID,\n                        ...options,\n                    })\n                }),\n            )\n        },\n    })\n}\n"],"names":["makeStyles","Image","useStyles","theme","root","width","height","position","fallbackImage","icon","top","spacing","left","AssetPreviewer","props","url","classes","undefined","div","className","container","style","objectFit","src","fallback","produce","EMPTY_LIST","uniqBy","createAssetsState","assets","loading","finished","initialAssetsState","assetsMap","verifiedMap","assetsReducer","state","action","type","draft","id","account","storeId","length","x","tokenId","verifiedBy","chunk","sum","take","createContext","memo","useCallback","useContext","useEffect","useMemo","useReducer","useRef","createIndicator","EMPTY_OBJECT","useWeb3Hub","useChainRuntime","CollectionsContext","AssetsContext","assetsMapRef","current","getAssets","getBLockedTokenIds","getVerifiedBy","loadAssets","Promise","resolve","loadVerifiedBy","isAllHidden","isEmpty","CHUNK_SIZE","getAssetsTotal","map","Object","values","AssetsProvider","children","blockedIds","dispatch","indicatorMapRef","Map","pluginID","blockedTokenIdsMap","reduce","chainId","address","split","collectionKey","join","list","push","listingAssetsMap","listingMap","updated","originalAssets","newAssets","filter","assetId","toLowerCase","includes","listingAssetsMapRef","verifiedMapRef","blockedTokenIdsMapRef","collections","useContainer","keys","some","Hub","assetsLoaderIterators","loadAssetsViaHub","collection","collectionId","stateKey","realId","assetsState","size","indicator","get","pageable","getNonFungibleAssetsByCollectionAndOwner","process","env","NODE_ENV","console","assert","nextIndicator","set","data","allIds","generate","chunks","slice","idChunk","iterator","result","next","done","value","blockedMapKey","blockedList","listings","verifiedState","getNonFungibleCollectionVerifiedBy","key","contextValue","Provider","useUserAssets","NetworkPluginID","ChainId","FlowChainId","noop","sortBy","SolanaChainId","useNetworks","useState","ChainRuntimeContext","PLUGIN_EVM","setChainId","networks","SimpleHashSupportedChains","Mainnet","BSC","Base","Matic","Arbitrum","Optimism","Avalanche","xDai","Scroll","PLUGIN_SOLANA","PLUGIN_FLOW","ChainRuntimeProvider","defaultChainId","allNetworks","supported","network","isCustomized","indexOf","currentChainId","Icons","CheckBoxIndicator","checked","unCheckedButtonColor","checkedButtonColor","rest","Checkbox","color","CheckboxBlank","Card","useTheme","RadioIndicator","NetworkIcon","resolveImageURL","display","cursor","card","alignItems","justifyContent","borderRadius","zIndex","backgroundColor","palette","mode","minHeight","maxWidth","fallbackLensImage","blocker","padding","right","CollectibleCard","asset","disableNetworkIcon","disableInspect","isSelected","useRadio","showUnCheckedIndicator","cx","metadata","previewImageURL","imageURL","mediaURL","name","contract","Indicator","maskColor","primary","secondaryLine","displayName","ShadowRootTooltip","useBoundedPopperProps","useDetectOverflow","isENSContractAddress","isENSNameWrapperContractAddress","isLens","isLensCollect","isLensFollower","isXnsContractAddress","Button","Skeleton","Typography","forwardRef","useSharedTrans","_","refs","flexDirection","background","bg","overflow","willChange","withAction","transform","transitionDuration","marginTop","opacity","collectibleCard","info","ease","transition","fadeIn","animation","aspectRatio","boxSizing","nameRow","whiteSpace","textOverflow","lineHeight","second","identity","fontWeight","main","textAlign","bottom","actionButton","CollectibleItem","ref","disableName","disableAction","actionLabel","onActionClick","onItemClick","t","popperProps","handleClick","assetName","nameOverflow","nameRef","identityOverflow","identityRef","tooltip","component","PopperProps","title","placement","disableInteractive","arrow","onClick","variant","verified_by","marketplace","Verification","fullWidth","CollectibleItemSkeleton","omitInfo","omitName","sx","useLayoutEffect","useCompactDetection","containerRef","compact","setCompact","offsetWidth","useEverSeen","useForkRef","range","isSameNFT","folder","grid","gridTemplate","gridGap","alignSelf","extraCount","fontSize","Collection","blockedTokenIds","expanded","onExpand","onInitialRender","selectedAsset","count","balance","CollectionSkeleton","hasExtra","assetsSlice","renderAssets","send","symbol","renderCount","Math","min","asFolder","skeletons","i","forkedContainerRef","LazyCollection","seen","LoadingSkeleton","NFTSpamBadge","useReportSpam","LoadingBase","Box","collectionHeader","marginRight","backButton","minWidth","thirdMain","marginLeft","CollectionHeader","onResetCollection","currentCollectionId","currentCollection","isReporting","isSpam","promptReport","currentVerifiedBy","iconURL","mx","Undo","Flag","ElementAnchor","EmptyStatus","RetryHint","Sniffings","SelectNetworkSidebar","Telemetry","EventID","EventType","columns","gap","gapIsNumber","flex","sidebar","paddingTop","paddingLeft","paddingRight","flexGrow","paddingBottom","emptyMain","gridTemplateColumns","margin","getTopOffset","is_twitter_page","CollectionList","gridProps","disableSidebar","additionalAssets","pendingAdditionalAssetCount","disableWindowScroll","scrollElementRef","emptyText","onChainChange","onCollectionChange","from","setCurrentCollectionId","error","retry","handleChainChange","captureEvent","Access","EntryTimelineHoverUserNftSwitchChain","EntryProfileUserNftsSwitchChain","mainColumnRef","forkedMainColumnRef","scrollToTop","scrollTo","behavior","rect","getBoundingClientRect","offset","abs","window","scrollY","scroll","handleCollectionChange","additional","collectionAddresses","handleInitialRender","mt","no_NFTs_found","ExpandedCollection","hint","collectionProps","callback","useNonFungibleCollections","SourceType","createContainer","useCollections","defaultCollectionId","rawCollections","isLoading","refetch","allChains","sourceType","SimpleHash","merged","mergeBy","filterFn","matchedCollections","theFirst","splice","find","CollectionsProvider","initialState","useAccount","useBlockedNonFungibleTokens","isSameAddress","UserAssetsProvider","systemAccount","blockedTokens","useIntersectionObserver","Stack","elementRef","intersection","rootMargin","callbackRef","isIntersecting","pt","direction","statusBox","text","iconSize","p","EmptySimple","rounded","optimistic","image","failImage","center","failed","MASK_DARK_FALLBACK","URL","href","MASK_LIGHT_FALLBACK","disableSpinner","extraClasses","containerProps","setFailed","img","onError","decoding","toString","ButtonProps","load_failed","load_retry","SecurityMessageLevel","High","Medium","Safe","DefineMapping","titleColor","bgColor","SecurityRisk","SecurityWarning","Success","CrossIsolationMessages","TokenSecurityBar","tokenSecurity","warn_item_quantity","attentionFactors","risk_item_quantity","riskyFactors","handleOpenDialog","events","checkSecurityDialogEvent","sendToLocal","open","searchHidden","tokenAddress","bgcolor","risky_items","quantity","risky_item","attention_items","attention_item","more","RightArrow","spam","ImageIcon","mainIcon","badgeIcon","border","badgeIconBorderColor","common","white","WalletIcon","badgeSize","iconFilterColor","useCustomSnackbar","NFTSpam","SPAM_SCORE","SimpleHashEVM","useQuery","useAsyncFn","ConfirmDialog","collectionByAddress","enabled","queryKey","queryFn","getCollectionByContractAddress","collectionById","getSimpleHashCollection","colId","collection_id","reportSpam","res","report","source","status","code","showSnackbar","confirmed","openAndWaitForClose","report_nft","message","wordBreak","confirm_to_report_nft","confirmVariant","report_spam","report_spam_success","report_spam_fail","spam_score","a","b","useSubscription","EMPTY_ARRAY","useWeb3State","schemaType","Token","nfts","blockedNonFungibleTokens","schema","useChainContext","useWeb3Others","useChainIdValid","expectedChainId","Others","chainResolver","isValidChainId","getRegisteredWeb3Networks","useNetworkContext","useNetworkDescriptor","expectedPluginID","expectedChainIdOrNetworkTypeOrID","networkType","ID","asyncIteratorToArray","pageableToIterator","options","getNonFungibleCollectionsByOwner","networkPluginId"],"sourceRoot":"","x_google_ignoreList":[]}