{"version":3,"file":"bundled/chunk.5367.js","mappings":"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","sources":["webpack://mask-network/./packages/plugin-infra/src/dom/context.ts","webpack://mask-network/./packages/plugin-infra/src/dom/useTrans.tsx","webpack://mask-network/./packages/plugin-infra/src/manager/site-adaptor.ts","webpack://mask-network/./packages/plugin-infra/src/site-adaptor/context.ts","webpack://mask-network/./packages/plugin-infra/src/site-adaptor/useCurrentVisitingIdentity.ts","webpack://mask-network/./packages/plugin-infra/src/site-adaptor/useLastRecognizedIdentity.ts","webpack://mask-network/./packages/plugin-infra/src/site-adaptor/useSocialIdentity.ts","webpack://mask-network/./packages/plugin-infra/src/utils/getAvailablePlugins.ts","webpack://mask-network/./packages/plugin-infra/src/utils/message.ts","webpack://mask-network/./packages/plugins/Debugger/src/SiteAdaptor/components/TabContent.tsx","webpack://mask-network/./packages/web3-hooks/base/src/useBlockNumber.ts","webpack://mask-network/./packages/plugin-infra/src/site-adaptor/useCurrentVisitingSocialIdentity.ts","webpack://mask-network/./packages/plugins/Debugger/src/SiteAdaptor/components/ConsoleContent.tsx","webpack://mask-network/./packages/plugins/Debugger/src/messages.ts","webpack://mask-network/./packages/plugins/Debugger/src/SiteAdaptor/components/ConsoleDialog.tsx","webpack://mask-network/./packages/plugins/Debugger/src/SiteAdaptor/components/ConnectionContent.tsx","webpack://mask-network/./packages/plugins/Debugger/src/SiteAdaptor/components/ConnectionDialog.tsx","webpack://mask-network/./packages/plugins/Debugger/src/SiteAdaptor/components/HubContent.tsx","webpack://mask-network/./packages/plugins/Debugger/src/SiteAdaptor/components/HubDialog.tsx","webpack://mask-network/./packages/plugins/Debugger/src/SiteAdaptor/components/AvatarDecorator.tsx","webpack://mask-network/./packages/plugin-infra/src/site-adaptor/Widget.ts","webpack://mask-network/./packages/plugins/Debugger/src/SiteAdaptor/components/WidgetContent.tsx","webpack://mask-network/./packages/plugins/Debugger/src/SiteAdaptor/components/WidgetDialog.tsx","webpack://mask-network/./packages/plugins/Debugger/src/SiteAdaptor/components/SearchResultInspector.tsx","webpack://mask-network/./packages/plugins/Debugger/src/SiteAdaptor/index.tsx","webpack://mask-network/./packages/shared-base-ui/src/hooks/useRemoteControlledDialog.ts","webpack://mask-network/./packages/shared-base/src/types/Persona.ts","webpack://mask-network/./packages/theme/src/Components/WrappedComponents/ShadowRootMenu.ts","webpack://mask-network/./packages/web3-hooks/base/src/useBalance.ts","webpack://mask-network/./packages/web3-hooks/base/src/useBlockTimestamp.ts","webpack://mask-network/./packages/web3-hooks/base/src/useLookupAddress.ts","webpack://mask-network/./packages/web3-hooks/base/src/useNetworks.ts","webpack://mask-network/./packages/web3-hooks/base/src/useReverseAddress.ts","webpack://mask-network/./packages/web3-hooks/base/src/useSocialAddressesAll.ts","webpack://mask-network/./packages/web3-hooks/base/src/useSocialAccountsFrom.ts","webpack://mask-network/./packages/web3-hooks/base/src/useSocialAccountsAll.ts","webpack://mask-network/./packages/web3-hooks/base/src/useWeb3Connection.ts","webpack://mask-network/./node_modules/.pnpm/@mui+styled-engine@5.10.8_@emotion+react@11.11.1_@emotion+styled@11.11.0_react@0.0.0-experimental-0a360642d-20230711/node_modules/@mui/styled-engine/GlobalStyles/GlobalStyles.js","webpack://mask-network/./node_modules/.pnpm/react-is@18.2.0/node_modules/react-is/cjs/react-is.production.min.js","webpack://mask-network/./node_modules/.pnpm/react-is@18.2.0/node_modules/react-is/index.js","webpack://mask-network/./node_modules/.pnpm/@tanstack+react-query@4.29.25_react-dom@0.0.0-experimental-0a360642d-20230711_react@0.0.0-exp_ph45ttbltampqv75cnp6zhp25e/node_modules/@tanstack/react-query/build/lib/isRestoring.mjs"],"sourcesContent":["// This file will be virtualized in the future.\n// Currently all plugins access the same value, but we can virtualize them in the future.\n\nimport type {\n    DashboardRoutes,\n    ECKeyIdentifier,\n    NextIDPlatform,\n    PersonaIdentifier,\n    PersonaInformation,\n    PopupRoutes,\n    PopupRoutesParamsMap,\n    ProfileIdentifier,\n    SignType,\n    SocialIdentity,\n} from '@masknet/shared-base'\nimport type { Subscription } from 'use-subscription'\nimport type { IdentityResolved } from '../types.js'\nimport type { LinkedProfileDetails } from '@masknet/public-api'\n\nexport interface __UIContext__ {\n    allPersonas: Subscription<readonly PersonaInformation[]>\n    currentPersona: Subscription<PersonaIdentifier | undefined>\n    queryPersonaAvatar(\n        identifiers: readonly PersonaIdentifier[],\n    ): Promise<Map<ProfileIdentifier | PersonaIdentifier, string | undefined>>\n    queryPersonaAvatar(identifiers: undefined | PersonaIdentifier): Promise<string | undefined>\n    querySocialIdentity: (\n        platform: NextIDPlatform,\n        identity: IdentityResolved | undefined,\n    ) => Promise<SocialIdentity | undefined>\n    // DO NOT add <T> to this function, you do not test if it is T right?\n    // (e.g. receive a function to check it validate: (x: unknown) => x is T)\n    // fetchJSON<T>(validate: (x: unknown) => x is T, input: RequestInfo | URL, init?: RequestInit): Promise<T>\n    fetchJSON(input: RequestInfo | URL, init?: RequestInit): Promise<unknown>\n    queryPersonaByProfile: (id: ProfileIdentifier) => Promise<PersonaInformation | undefined>\n    /** Open Dashboard with a new window */\n    openDashboard(route?: DashboardRoutes, search?: string): Promise<void>\n    /** Open popup window */\n    openPopupWindow<T extends PopupRoutes>(\n        route: T,\n        params: T extends keyof PopupRoutesParamsMap ? PopupRoutesParamsMap[T] : undefined,\n        evenWhenWalletLocked?: boolean,\n    ): Promise<void>\n    /** Sign a message with persona (w or w/o popups) */\n    signWithPersona(type: SignType, message: unknown, identifier?: ECKeyIdentifier, silent?: boolean): Promise<string>\n    hasPaymentPassword(): Promise<boolean>\n    createPersona: () => void\n    setCurrentPersonaIdentifier: ((x?: PersonaIdentifier) => Promise<void>) | undefined\n    attachProfile:\n        | ((\n              source: ProfileIdentifier,\n              target: ProfileIdentifier | PersonaIdentifier,\n              data: LinkedProfileDetails,\n          ) => Promise<void>)\n        | undefined\n    setPluginMinimalModeEnabled: ((id: string, enabled: boolean) => Promise<void>) | undefined\n    hasHostPermission: ((origins: readonly string[]) => Promise<boolean>) | undefined\n    requestHostPermission: ((origins: readonly string[]) => Promise<boolean>) | undefined\n}\nexport let allPersonas: __UIContext__['allPersonas']\nexport let currentPersona: __UIContext__['currentPersona']\nexport let queryPersonaAvatar: __UIContext__['queryPersonaAvatar']\nexport let querySocialIdentity: __UIContext__['querySocialIdentity']\nexport let fetchJSON: __UIContext__['fetchJSON']\nexport let queryPersonaByProfile: __UIContext__['queryPersonaByProfile']\nexport let openDashboard: __UIContext__['openDashboard']\nexport let openPopupWindow: __UIContext__['openPopupWindow']\nexport let signWithPersona: __UIContext__['signWithPersona']\nexport let hasPaymentPassword: __UIContext__['hasPaymentPassword']\nexport let createPersona: __UIContext__['createPersona']\nexport let setCurrentPersonaIdentifier: __UIContext__['setCurrentPersonaIdentifier']\nexport let attachProfile: __UIContext__['attachProfile']\nexport let setPluginMinimalModeEnabled: __UIContext__['setPluginMinimalModeEnabled']\nexport let hasHostPermission: __UIContext__['hasHostPermission']\nexport let requestHostPermission: __UIContext__['requestHostPermission']\n\nexport function __setUIContext__(value: __UIContext__) {\n    ;({\n        allPersonas,\n        currentPersona,\n        queryPersonaAvatar,\n        querySocialIdentity,\n        fetchJSON,\n        queryPersonaByProfile,\n        openDashboard,\n        openPopupWindow,\n        signWithPersona,\n        hasPaymentPassword,\n        createPersona,\n        setCurrentPersonaIdentifier,\n        attachProfile,\n        setPluginMinimalModeEnabled,\n        hasHostPermission,\n        requestHostPermission,\n    } = value)\n}\n","import { useTranslation } from 'react-i18next'\nimport type { I18NFieldOrReactNode, I18NStringField } from '../types.js'\n\nexport interface PluginTransFieldRenderProps {\n    field: I18NFieldOrReactNode\n    pluginID: string\n}\nexport function PluginTransFieldRender({ pluginID, field }: PluginTransFieldRenderProps) {\n    const [t] = useTranslation()\n    if (!field) return null\n    if (typeof field === 'object' && 'fallback' in field) {\n        if (field.i18nKey) {\n            const translate = t(field.i18nKey, { ns: pluginID, nsSeparator: '%%%', defaultValue: field.fallback })\n            return <>{translate}</>\n        }\n        return <>{field.fallback}</>\n    }\n    return <>{field}</>\n}\nexport function usePluginTransField() {\n    const [t] = useTranslation()\n    return function (pluginID: string, field: I18NStringField) {\n        if (!field.i18nKey) return field.fallback\n        if (!field.i18nKey.startsWith('__')) {\n            /**\n             * This field is used in the definition of a plugin in form of\n             * { fallback: \"Text\", i18nKey: \"name\" }\n             *\n             * Which is highly not likely to be analyzed by the type system.\n             * Enforce those key to starts with __, we can exclude those keys\n             * from the unused key result to keep the functionality of the analyzer.\n             */\n            console.warn(\n                `[@masknet/plugin-infra] Plugin ${pluginID} uses i18n key ${field.i18nKey}. Please change it to __${field.i18nKey}.`,\n            )\n            return field.fallback\n        }\n        return t(field.i18nKey, { ns: pluginID, nsSeparator: '%%%', defaultValue: field.fallback })\n    }\n}\n","import { useMemo } from 'react'\nimport { isEqual } from 'lodash-es'\nimport { unreachable } from '@masknet/kit'\nimport { useValueRef } from '@masknet/shared-base-ui'\nimport { type EnhanceableSite, ValueRefWithReady } from '@masknet/shared-base'\nimport { createManager } from './manage.js'\nimport { getPluginDefine } from './store.js'\nimport type { Plugin } from '../types.js'\n\nconst { events, activated, startDaemon, minimalMode } = createManager(\n    (def) => def.SiteAdaptor,\n    createManager.NoManagedContext,\n)\nconst activatedSub = new ValueRefWithReady<Plugin.SiteAdaptor.Definition[]>([], isEqual)\nevents.on('activateChanged', () => (activatedSub.value = [...activated.plugins]))\n\nconst minimalModeSub = new ValueRefWithReady<string[]>([], isEqual)\nevents.on('minimalModeChanged', () => (minimalModeSub.value = [...minimalMode]))\n\nexport function useActivatedPluginsSiteAdaptor(minimalModeEqualsTo: 'any' | boolean) {\n    const minimalMode = useValueRef(minimalModeSub)\n    const result = useValueRef(activatedSub)\n    return useMemo(() => {\n        if (minimalModeEqualsTo === 'any') return result\n        else if (minimalModeEqualsTo === true) return result.filter((x) => minimalMode.includes(x.ID))\n        else if (minimalModeEqualsTo === false) return result.filter((x) => !minimalMode.includes(x.ID))\n        unreachable(minimalModeEqualsTo)\n    }, [result, minimalMode, minimalModeEqualsTo])\n}\nuseActivatedPluginsSiteAdaptor.visibility = {\n    useMinimalMode: useActivatedPluginsSiteAdaptor.bind(null, true),\n    useNotMinimalMode: useActivatedPluginsSiteAdaptor.bind(null, false),\n    useAnyMode: useActivatedPluginsSiteAdaptor.bind(null, 'any'),\n}\n\nexport function useIsMinimalMode(pluginID: string) {\n    return useValueRef(minimalModeSub).includes(pluginID)\n}\n\n/**\n *\n * @param pluginID Get the plugin ID\n * @param visibility Should invisible plugin included?\n * @returns\n */\nexport function useActivatedPluginSiteAdaptor(pluginID: string, minimalModeEqualsTo: 'any' | boolean) {\n    const plugins = useActivatedPluginsSiteAdaptor(minimalModeEqualsTo)\n    const minimalMode = useValueRef(minimalModeSub)\n\n    return useMemo(() => {\n        const result = plugins.find((x) => x.ID === pluginID)\n        if (!result) return result\n        if (minimalModeEqualsTo === 'any') return result\n        else if (minimalModeEqualsTo === true) {\n            if (minimalMode.includes(result.ID)) return result\n            return undefined\n        } else if (minimalModeEqualsTo === false) {\n            if (minimalMode.includes(result.ID)) return undefined\n            return result\n        }\n        unreachable(minimalModeEqualsTo)\n    }, [pluginID, plugins, minimalMode, minimalModeEqualsTo])\n}\n\nexport function startPluginSiteAdaptor(\n    currentNetwork: EnhanceableSite,\n    host: Plugin.__Host.Host<Plugin.SiteAdaptor.Definition, Plugin.SiteAdaptor.SiteAdaptorContext>,\n) {\n    startDaemon(host, (id) => {\n        const def = getPluginDefine(id)\n        if (!def) return false\n\n        const status = def.enableRequirement.supports.sites[currentNetwork]\n        if (def.enableRequirement.supports.type === 'opt-in' && status !== true) return false\n        if (def.enableRequirement.supports.type === 'opt-out' && status === true) return false\n        return true\n    })\n}\n","// This file will be virtualized in the future.\n// Currently all plugins access the same value, but we can virtualize them in the future.\n\nimport type { Subscription } from 'use-subscription'\nimport type { IdentityResolved } from '../types.js'\nimport type { NextIDPlatform, PersonaIdentifier, PostIdentifier } from '@masknet/shared-base'\n\nexport interface __SiteAdaptorContext__ {\n    lastRecognizedProfile: Subscription<IdentityResolved | undefined>\n    currentVisitingProfile: Subscription<IdentityResolved | undefined>\n    currentNextIDPlatform: NextIDPlatform | undefined\n    currentPersonaIdentifier: Subscription<PersonaIdentifier | undefined>\n    getPostURL: (identifier: PostIdentifier) => URL | null\n    share: undefined | ((text: string) => void)\n    getUserIdentity: ((useId: string) => Promise<IdentityResolved | undefined>) | undefined\n    getPostIdFromNewPostToast: (() => string) | undefined\n    postMessage: ((text: string, options?: any) => Promise<void>) | undefined\n    getSearchedKeyword: (() => string) | undefined\n    connectPersona: () => Promise<void>\n}\nexport let lastRecognizedProfile: __SiteAdaptorContext__['lastRecognizedProfile']\nexport let currentVisitingProfile: __SiteAdaptorContext__['currentVisitingProfile']\nexport let currentNextIDPlatform: NextIDPlatform | undefined\nexport let currentPersonaIdentifier: __SiteAdaptorContext__['currentPersonaIdentifier']\nexport let getPostURL: __SiteAdaptorContext__['getPostURL']\nexport let share: __SiteAdaptorContext__['share']\nexport let getUserIdentity: __SiteAdaptorContext__['getUserIdentity']\nexport let getPostIdFromNewPostToast: __SiteAdaptorContext__['getPostIdFromNewPostToast']\nexport let postMessage: __SiteAdaptorContext__['postMessage']\nexport let getSearchedKeyword: __SiteAdaptorContext__['getSearchedKeyword']\nexport let connectPersona: __SiteAdaptorContext__['connectPersona']\nexport function __setSiteAdaptorContext__(value: __SiteAdaptorContext__) {\n    ;({\n        lastRecognizedProfile,\n        currentVisitingProfile,\n        currentNextIDPlatform,\n        currentPersonaIdentifier,\n        getPostURL,\n        share,\n        getUserIdentity,\n        getPostIdFromNewPostToast,\n        postMessage,\n        getSearchedKeyword,\n        connectPersona,\n    } = value)\n}\n","import { useSubscription } from 'use-subscription'\nimport { currentVisitingProfile } from './context.js'\n\nexport function useCurrentVisitingIdentity() {\n    return useSubscription(currentVisitingProfile)\n}\n","import { useSubscription } from 'use-subscription'\nimport { UNDEFINED } from '@masknet/shared-base'\nimport { lastRecognizedProfile } from './context.js'\n\nexport function useLastRecognizedIdentity() {\n    return useSubscription(lastRecognizedProfile ?? UNDEFINED)\n}\n","import { useEffect } from 'react'\nimport { MaskMessages } from '@masknet/shared-base'\nimport type { IdentityResolved } from '../types.js'\nimport { useQuery } from '@tanstack/react-query'\nimport { currentNextIDPlatform } from './context.js'\nimport { querySocialIdentity } from '../dom/context.js'\n\n/**\n * Get the social identity of the given identity\n */\nexport function useSocialIdentity(identity: IdentityResolved | null | undefined) {\n    const result = useQuery({\n        queryKey: ['next-id', identity, currentNextIDPlatform],\n        enabled: Boolean(identity && currentNextIDPlatform),\n        queryFn: async () => {\n            if (!currentNextIDPlatform || !identity) return null\n            return querySocialIdentity(currentNextIDPlatform, identity)\n        },\n        refetchOnWindowFocus: false,\n    })\n\n    useEffect(() => MaskMessages.events.ownProofChanged.on(() => result.refetch()), [result.refetch])\n\n    return result\n}\n","import type { Plugin } from '../types.js'\n\nexport function getAvailablePlugins<T extends Pick<Plugin.Shared.Definition, 'enableRequirement'>, R = T>(\n    plugins: readonly T[],\n    producer?: (plugins: readonly T[]) => R[],\n) {\n    return (producer ? producer(plugins) : plugins) as R[]\n}\n","import { WebExtensionMessage } from '@dimensiondev/holoflows-kit'\nimport type { PluginMessageEmitterItem } from '@masknet/plugin-infra'\nimport { serializer } from '@masknet/shared-base'\n\n/** @internal */\nexport const DOMAIN_RPC = Symbol('create RPC instead of normal message')\n/**\n * Create a plugin message emitter\n * @param pluginID The plugin ID\n *\n * @example\n * export const MyPluginMessage = getPluginMessage(PLUGIN_ID)\n */\nexport let getPluginMessage = <T>(pluginID: string, type?: typeof DOMAIN_RPC): PluginMessageEmitter<T> => {\n    const domain = (type === DOMAIN_RPC ? '@plugin-rpc/' : '@plugin/') + pluginID\n    if (cache.has(domain)) return cache.get(domain) as any\n\n    const messageCenter = new WebExtensionMessage<T>({ domain })\n    const events = messageCenter.events\n    messageCenter.serialization = serializer\n    cache.set(domain, events)\n    return events\n}\n\nexport function __workaround__replaceImplementationOfCreatePluginMessage__(\n    newImpl: (pluginID: string) => PluginMessageEmitter<any>,\n) {\n    getPluginMessage = newImpl\n}\nexport type PluginMessageEmitter<T> = { readonly [key in keyof T]: PluginMessageEmitterItem<T[key]> }\nconst cache = new Map<string, PluginMessageEmitter<unknown>>()\n\n// TODO: this type should be defined here, not shared-base\nexport type { PluginMessageEmitterItem } from '@masknet/shared-base'\n","import { makeStyles } from '@masknet/theme'\nimport { type SocialAccount, type SocialIdentity } from '@masknet/shared-base'\nimport { useSocialAccountsAll } from '@masknet/web3-hooks-base'\nimport { List, ListItem, ListItemText, Table, TableBody, TableCell, TableRow, Typography } from '@mui/material'\nimport type { Web3Helper } from '@masknet/web3-helpers'\n\ninterface TabContentProps {\n    identity?: SocialIdentity | null\n    socialAccount?: SocialAccount<Web3Helper.ChainIdAll>\n}\n\nconst useStyles = makeStyles()({\n    container: {\n        overflow: 'auto',\n    },\n})\n\nexport function TabContent({ identity, socialAccount }: TabContentProps) {\n    const { classes } = useStyles()\n    const { data: socialAccounts, isLoading: loadingSocialAccounts } = useSocialAccountsAll(identity)\n\n    const renderIdentity = () => {\n        return (\n            <List dense>\n                <ListItem>\n                    <ListItemText\n                        primary={<Typography color=\"textPrimary\">Nickname</Typography>}\n                        secondary={identity?.nickname}\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemText\n                        primary={<Typography color=\"textPrimary\">Bio</Typography>}\n                        secondary={identity?.bio}\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemText\n                        primary={<Typography color=\"textPrimary\">Home Page</Typography>}\n                        secondary={identity?.homepage}\n                    />\n                </ListItem>\n                <ListItem sx={{ display: 'block' }}>\n                    <ListItemText\n                        primary={<Typography color=\"textPrimary\">Avatar</Typography>}\n                        secondary={<img src={identity?.avatar} style={{ maxWidth: 100 }} />}\n                    />\n                </ListItem>\n            </List>\n        )\n    }\n\n    const renderAddressName = () => {\n        return (\n            <List dense>\n                {socialAccount\n                    ? [socialAccount].map((x) => (\n                          <ListItem key={`${x.pluginID}_${x.address}`}>\n                              <ListItemText\n                                  primary={\n                                      <Typography color=\"textPrimary\">\n                                          {x.pluginID} - {x.label}\n                                      </Typography>\n                                  }\n                                  secondary={x.address}\n                              />\n                          </ListItem>\n                      ))\n                    : null}\n            </List>\n        )\n    }\n\n    const renderAllAddressNames = () => {\n        if (loadingSocialAccounts)\n            return (\n                <List dense>\n                    <ListItem>\n                        <ListItemText primary={<Typography color=\"textPrimary\">Loading...</Typography>} />\n                    </ListItem>\n                </List>\n            )\n        return (\n            <List dense>\n                {socialAccounts?.map((x) => (\n                    <ListItem key={`${x.pluginID}_${x.address}`}>\n                        <ListItemText\n                            primary={\n                                <Typography color=\"textPrimary\">\n                                    {x.pluginID} - {x.label}\n                                </Typography>\n                            }\n                            secondary={x.address}\n                        />\n                    </ListItem>\n                ))}\n            </List>\n        )\n    }\n\n    return (\n        <section className={classes.container}>\n            <Table size=\"small\">\n                <TableBody>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Profile Data\n                            </Typography>\n                        </TableCell>\n                        <TableCell>{renderIdentity()}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Address Name\n                            </Typography>\n                        </TableCell>\n                        <TableCell>{renderAddressName()}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                All Address Names\n                            </Typography>\n                        </TableCell>\n                        <TableCell>{renderAllAddressNames()}</TableCell>\n                    </TableRow>\n                </TableBody>\n            </Table>\n        </section>\n    )\n}\n","import { useEffect } from 'react'\nimport { useAsyncRetry } from 'react-use'\nimport { noop } from 'lodash-es'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport type { ConnectionOptions } from '@masknet/web3-providers/types'\nimport { useChainContext } from './useContext.js'\nimport { useWeb3Connection } from './useWeb3Connection.js'\nimport { useWeb3State } from './useWeb3State.js'\n\nexport function useBlockNumber<T extends NetworkPluginID = NetworkPluginID>(\n    pluginID?: T,\n    options?: ConnectionOptions<T>,\n) {\n    const { chainId } = useChainContext({ chainId: options?.chainId })\n    const Web3 = useWeb3Connection(pluginID, {\n        chainId,\n        ...options,\n    })\n    const { BlockNumberNotifier } = useWeb3State(pluginID)\n\n    const asyncRetry = useAsyncRetry(async () => {\n        return Web3.getBlockNumber()\n    }, [chainId, Web3])\n\n    useEffect(() => {\n        return (\n            BlockNumberNotifier?.emitter.on('update', (actualChainId) => {\n                if (actualChainId === chainId) asyncRetry.retry()\n            }) ?? noop\n        )\n    }, [chainId, asyncRetry.retry, BlockNumberNotifier])\n\n    return asyncRetry\n}\n","import { useSocialIdentity } from './useSocialIdentity.js'\nimport { useCurrentVisitingIdentity } from './useCurrentVisitingIdentity.js'\n\n/**\n * Get the social identity of the current visiting identity\n */\nexport function useCurrentVisitingSocialIdentity() {\n    const identity = useCurrentVisitingIdentity()\n    return useSocialIdentity(identity)\n}\n","import { Table, TableBody, TableCell, TableRow, Typography } from '@mui/material'\nimport { makeStyles } from '@masknet/theme'\nimport {\n    useBalance,\n    useBlockNumber,\n    useBlockTimestamp,\n    useNetworkContext,\n    useReverseAddress,\n    useLookupAddress,\n    useWeb3Others,\n    useChainContext,\n} from '@masknet/web3-hooks-base'\nimport {\n    useLastRecognizedIdentity,\n    useCurrentVisitingIdentity,\n    useCurrentVisitingSocialIdentity,\n} from '@masknet/plugin-infra/content-script'\nimport { CrossIsolationMessages } from '@masknet/shared-base'\nimport { useRemoteControlledDialog } from '@masknet/shared-base-ui'\nimport { joinsABTest } from '@masknet/web3-telemetry/helpers'\n\ninterface ConsoleContentProps {\n    onClose?: () => void\n}\n\nconst useStyles = makeStyles()({\n    container: {\n        overflow: 'auto',\n    },\n})\n\nexport function ConsoleContent(props: ConsoleContentProps) {\n    const { classes } = useStyles()\n    const { pluginID: currentPluginID } = useNetworkContext()\n    const Others = useWeb3Others()\n    const { account, chainId, networkType, providerType } = useChainContext()\n    const { data: balance = '0' } = useBalance()\n    const { value: blockNumber = 0 } = useBlockNumber()\n    const { value: blockTimestamp = 0 } = useBlockTimestamp()\n    const { data: reversedName } = useReverseAddress(currentPluginID, account)\n    const { value: lookedAddress } = useLookupAddress(currentPluginID, reversedName)\n    const currentVisitingIdentity = useCurrentVisitingIdentity()\n    const lastRecognizedIdentity = useLastRecognizedIdentity()\n    const currentVisitingSocialIdentity = useCurrentVisitingSocialIdentity()\n\n    useRemoteControlledDialog(CrossIsolationMessages.events.followLensDialogEvent)\n\n    const table: Array<{ name: string; content: JSX.Element }> = [\n        {\n            name: 'A/B Testing',\n            content: <Typography variant=\"body2\">{joinsABTest() ? 'A' : 'B'}</Typography>,\n        },\n        {\n            name: 'Account',\n            content: <Typography variant=\"body2\">{Others.formatAddress(account, 4) || 'Not Connected'}</Typography>,\n        },\n        {\n            name: 'ChainId',\n            content: <Typography variant=\"body2\">{chainId}</Typography>,\n        },\n        {\n            name: 'PluginID',\n            content: <Typography variant=\"body2\">{currentPluginID}</Typography>,\n        },\n        {\n            name: 'Network Type',\n            content: <Typography variant=\"body2\">{networkType}</Typography>,\n        },\n        {\n            name: 'Provider Type',\n            content: <Typography variant=\"body2\">{providerType}</Typography>,\n        },\n        {\n            name: 'Balance',\n            content: <Typography variant=\"body2\">{balance}</Typography>,\n        },\n        {\n            name: 'Block Number',\n            content: <Typography variant=\"body2\">{blockNumber}</Typography>,\n        },\n        {\n            name: 'Block Timestamp',\n            content: <Typography variant=\"body2\">{blockTimestamp}</Typography>,\n        },\n        {\n            name: 'Reversed Name',\n            content: <Typography variant=\"body2\">{reversedName}</Typography>,\n        },\n        {\n            name: 'Looked Address',\n            content: <Typography variant=\"body2\">{lookedAddress}</Typography>,\n        },\n        {\n            name: 'Visiting Identity',\n            content: (\n                <Typography variant=\"body2\">\n                    {currentVisitingIdentity?.identifier?.userId} {currentVisitingIdentity?.isOwner ? 'OWNER' : ''}\n                </Typography>\n            ),\n        },\n        {\n            name: 'Owner Identity',\n            content: (\n                <Typography variant=\"body2\">\n                    {lastRecognizedIdentity?.identifier?.userId} {lastRecognizedIdentity?.isOwner ? 'OWNER' : ''}\n                </Typography>\n            ),\n        },\n        {\n            name: 'Visiting Public Key',\n            content: (\n                <Typography variant=\"body2\" style={{ width: 280, wordBreak: 'break-all' }}>\n                    {currentVisitingSocialIdentity.data?.publicKey}\n                </Typography>\n            ),\n        },\n    ]\n\n    return (\n        <section className={classes.container}>\n            <Table size=\"small\">\n                <TableBody>\n                    {table.map(({ name, content }) => (\n                        <TableRow key={name}>\n                            <TableCell>{name}</TableCell>\n                            <TableCell>{content}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </section>\n    )\n}\n","import { getPluginMessage, type PluginMessageEmitter } from '@masknet/plugin-infra'\nimport { PLUGIN_ID } from './constants.js'\n\ntype DialogUpdated = {\n    open: boolean\n}\n\ninterface DebuggerMessages {\n    /**\n     * Open console dialog\n     */\n    consoleDialogUpdated: DialogUpdated\n\n    /**\n     * Open connection dialog\n     */\n    connectionDialogUpdated: DialogUpdated\n\n    /**\n     * Open hub dialog\n     */\n    hubDialogUpdated: DialogUpdated\n\n    /**\n     * Open widget dialog\n     */\n    widgetDialogUpdated: DialogUpdated\n}\n\nexport const PluginDebuggerMessages: PluginMessageEmitter<DebuggerMessages> = getPluginMessage(PLUGIN_ID)\n","import { DialogContent } from '@mui/material'\nimport { InjectedDialog } from '@masknet/shared'\nimport { useRemoteControlledDialog } from '@masknet/shared-base-ui'\nimport { DefaultWeb3ContextProvider } from '@masknet/web3-hooks-base'\nimport { ConsoleContent } from './ConsoleContent.js'\nimport { PluginDebuggerMessages } from '../../messages.js'\n\nexport function ConsoleDialog() {\n    const { open, closeDialog } = useRemoteControlledDialog(PluginDebuggerMessages.consoleDialogUpdated)\n    return (\n        <InjectedDialog title=\"Debugger\" fullWidth open={open} onClose={closeDialog}>\n            <DialogContent>\n                <DefaultWeb3ContextProvider>\n                    <ConsoleContent onClose={closeDialog} />\n                </DefaultWeb3ContextProvider>\n            </DialogContent>\n        </InjectedDialog>\n    )\n}\n","import { useCallback, useMemo } from 'react'\nimport { Button, Table, TableBody, TableCell, TableRow, Typography } from '@mui/material'\nimport { makeStyles } from '@masknet/theme'\nimport { Web3, Contract, ChainResolver } from '@masknet/web3-providers'\nimport { NetworkPluginID, ProofType } from '@masknet/shared-base'\nimport { ChainId, NetworkType, ProviderType } from '@masknet/web3-shared-evm'\nimport { useChainContext, useNetworkContext, useNetworks, useWeb3State } from '@masknet/web3-hooks-base'\nimport { Telemetry } from '@masknet/web3-telemetry'\nimport { EventType, EventID, ExceptionType, ExceptionID } from '@masknet/web3-telemetry/types'\n\ninterface ConnectionContentProps {\n    onClose?: () => void\n}\n\nconst useStyles = makeStyles()({\n    container: {\n        overflow: 'auto',\n    },\n})\n\nexport function ConnectionContent(props: ConnectionContentProps) {\n    const { classes } = useStyles()\n    const { pluginID } = useNetworkContext()\n    const { account, chainId } = useChainContext<NetworkPluginID.PLUGIN_EVM>()\n    const { Network } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n    const networks = useNetworks(NetworkPluginID.PLUGIN_EVM)\n\n    const customNetwork = useMemo(() => {\n        return networks.find((x) => x.type === NetworkType.CustomNetwork)\n    }, [networks])\n\n    const onAddNetwork = useCallback(async () => {\n        await Network?.addNetwork({\n            type: NetworkType.CustomNetwork,\n            chainId: ChainId.Mainnet,\n            coinMarketCapChainId: '',\n            coinGeckoChainId: '',\n            coinGeckoPlatformId: '',\n            name: 'Mainnet',\n            network: 'mainnet',\n            nativeCurrency: ChainResolver.nativeCurrency(ChainId.Mainnet),\n            rpcUrl: 'https://cloudflare-eth.com',\n            explorerUrl: {\n                url: 'https://etherscan.io/',\n            },\n            isCustomized: true,\n        })\n    }, [Network])\n\n    const onUseNetwork = useCallback(async () => {\n        if (!customNetwork) return\n        await Network?.switchNetwork(customNetwork.ID)\n    }, [customNetwork, Network])\n\n    const onRemoveNetwork = useCallback(async () => {\n        if (!customNetwork) return\n        await Network?.removeNetwork(customNetwork.ID)\n    }, [customNetwork, Network])\n\n    const onRenameNetwork = useCallback(async () => {\n        if (!customNetwork) return\n        await Network?.updateNetwork(customNetwork.ID, {\n            name: 'Ethereum Mainnet',\n        })\n    }, [customNetwork, Network])\n\n    const onCaptureEvent = useCallback(async () => {\n        Telemetry.captureEvent(EventType.Debug, EventID.Debug)\n    }, [])\n\n    const onCaptureException = useCallback(async () => {\n        Telemetry.captureException(ExceptionType.Error, ExceptionID.Debug, new Error(`An error message ${Date.now()}.`))\n    }, [])\n\n    const onEstimateCallback = useCallback(async () => {\n        const contract = Contract.getERC20Contract('0x2b9e7ccdf0f4e5b24757c1e1a80e311e34cb10c7', {\n            chainId: ChainId.Mainnet,\n        })\n        const estimatedGas = await Web3.estimateTransaction?.(\n            {\n                from: '0x66b57885E8E9D84742faBda0cE6E3496055b012d',\n                to: '0x2b9e7ccdf0f4e5b24757c1e1a80e311e34cb10c7',\n                value: '1',\n                data: contract?.methods.approve('0x31f42841c2db5173425b5223809cf3a38fede360', '1').encodeABI(),\n            },\n            0,\n            {\n                chainId: ChainId.Mainnet,\n                account: '0x66b57885E8E9D84742faBda0cE6E3496055b012d',\n\n                paymentToken: '0x66b57885E8E9D84742faBda0cE6E3496055b012d',\n                overrides: {\n                    gas: '88888',\n                    maxFeePerGas: '88888',\n                    maxPriorityFeePerGas: '88888',\n                },\n            },\n        )\n\n        // eslint-disable-next-line no-alert\n        alert(estimatedGas)\n    }, [])\n\n    const onTransferCallback = useCallback(() => {\n        return Web3.transferFungibleToken(\n            '0x0000000000000000000000000000000000000000',\n            '0x96ec3286a049b42133c3ddd26777051612bdf61f',\n            '100',\n            undefined,\n            {\n                chainId,\n                account,\n            },\n        )\n    }, [])\n\n    const onDeployCallback = useCallback(() => {\n        return Web3.deploy?.('0x790116d0685eB197B886DAcAD9C247f785987A4a', undefined, {\n            chainId: ChainId.Matic,\n            account: '0x790116d0685eB197B886DAcAD9C247f785987A4a',\n        })\n    }, [])\n\n    const onFundCallback = useCallback(() => {\n        return Web3.fund?.(\n            {\n                publicKey: '',\n                type: ProofType.Persona,\n                payload: JSON.stringify({\n                    ownerAddress: '0x96ec3286a049b42133c3ddd26777051612bdf61f',\n                    nonce: 0,\n                }),\n                signature: '',\n            },\n            {\n                chainId: ChainId.Matic,\n                account: '0x96ec3286a049b42133c3ddd26777051612bdf61f',\n            },\n        )\n    }, [])\n\n    const onChangeOwnerChange = useCallback(() => {\n        return Web3.changeOwner?.('0x66b57885E8E9D84742faBda0cE6E3496055b012d', {\n            chainId: ChainId.Matic,\n            account: '0x96ec3286a049b42133c3ddd26777051612bdf61f',\n        })\n    }, [])\n\n    const onApproveFungibleTokenCallback = useCallback(() => {\n        if (pluginID !== NetworkPluginID.PLUGIN_EVM) return\n        return Web3.approveFungibleToken(\n            '0x2b9e7ccdf0f4e5b24757c1e1a80e311e34cb10c7',\n            '0x31f42841c2db5173425b5223809cf3a38fede360',\n            '1',\n            {\n                chainId: ChainId.Matic,\n                account: '0x66b57885E8E9D84742faBda0cE6E3496055b012d',\n                paymentToken: '0x2b9e7ccdf0f4e5b24757c1e1a80e311e34cb10c7',\n            },\n        )\n    }, [pluginID])\n\n    const onSign = useCallback(\n        async (type: string) => {\n            const message = 'Hello World'\n            const typedData = JSON.stringify({\n                domain: {\n                    chainId: chainId.toString(),\n                    name: 'Ether Mail',\n                    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n                    version: '1',\n                },\n                message: {\n                    contents: 'Hello, Bob!',\n                    from: {\n                        name: 'Cow',\n                        wallets: [\n                            '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n                            '0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF',\n                        ],\n                    },\n                    to: [\n                        {\n                            name: 'Bob',\n                            wallets: [\n                                '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n                                '0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57',\n                                '0xB0B0b0b0b0b0B000000000000000000000000000',\n                            ],\n                        },\n                    ],\n                },\n                primaryType: 'Mail',\n                types: {\n                    Group: [\n                        { name: 'name', type: 'string' },\n                        { name: 'members', type: 'Person[]' },\n                    ],\n                    Mail: [\n                        { name: 'from', type: 'Person' },\n                        { name: 'to', type: 'Person[]' },\n                        { name: 'contents', type: 'string' },\n                    ],\n                    Person: [\n                        { name: 'name', type: 'string' },\n                        { name: 'wallets', type: 'address[]' },\n                    ],\n                },\n            })\n            const transaction = {\n                chainId: ChainId.Mainnet,\n                from: '0x66b57885E8E9D84742faBda0cE6E3496055b012d',\n                to: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n                value: '0x1000',\n                gas: '0x5208',\n                gasPrice: '0x174876e800',\n                nonce: 0,\n                data: '0x',\n            }\n\n            const sign = async () => {\n                switch (type) {\n                    case 'message':\n                        return Web3.signMessage('message', message)\n                    case 'typedData':\n                        return Web3.signMessage('typedData', typedData)\n                    case 'transaction':\n                        return Web3.signTransaction(transaction)\n                    default:\n                        return ''\n                }\n            }\n            const signed = await sign()\n\n            // eslint-disable-next-line no-alert\n            alert(`Signed: ${signed}`)\n        },\n        [chainId],\n    )\n\n    const onSwitchChain = useCallback(async (chainId: ChainId) => {\n        try {\n            await Web3.switchChain?.(chainId)\n        } catch (error: unknown) {\n            // eslint-disable-next-line no-alert\n            if (error instanceof Error) alert(error.message)\n        } finally {\n            if ((await Web3.getChainId()) === chainId) {\n                // eslint-disable-next-line no-alert\n                alert(`Switched to chain ${chainId}`)\n            } else {\n                // eslint-disable-next-line no-alert\n                alert(`Failed to switch to chain ${chainId}`)\n            }\n        }\n    }, [])\n\n    const onConnect = useCallback(async (chainId: ChainId, providerType: ProviderType) => {\n        try {\n            await Web3.connect({\n                chainId,\n                providerType,\n            })\n        } catch (error: unknown) {\n            // eslint-disable-next-line no-alert\n            if (error instanceof Error) alert(error.message)\n        }\n    }, [])\n\n    const onDisconnect = useCallback(async (providerType: ProviderType) => {\n        try {\n            await Web3.disconnect({\n                providerType,\n            })\n        } catch (error: unknown) {\n            // eslint-disable-next-line no-alert\n            if (error instanceof Error) alert(error.message)\n        }\n    }, [])\n\n    return (\n        <section className={classes.container}>\n            <Table size=\"small\">\n                <TableBody>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Add Custom Network\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button size=\"small\" onClick={() => onAddNetwork()}>\n                                Add Network\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    {customNetwork ? (\n                        <>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                        Use Custom Network\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Button size=\"small\" onClick={() => onUseNetwork()}>\n                                        Use Network\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                        Remove Custom Network\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Button size=\"small\" onClick={() => onRemoveNetwork()}>\n                                        Remove {customNetwork.name}\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                        Rename Custom Network\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Button size=\"small\" onClick={() => onRenameNetwork()}>\n                                        Rename {customNetwork.name}\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                        </>\n                    ) : null}\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Capture Event\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button size=\"small\" onClick={() => onCaptureEvent()}>\n                                Capture Event\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Capture Exception\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button size=\"small\" onClick={() => onCaptureException()}>\n                                Capture Exception\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Estimate\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button size=\"small\" onClick={() => onEstimateCallback()}>\n                                Estimate\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Transfer\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button size=\"small\" onClick={() => onTransferCallback()}>\n                                Transfer\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Deploy\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button size=\"small\" onClick={() => onDeployCallback()}>\n                                Deploy\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Fund\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button size=\"small\" onClick={() => onFundCallback()}>\n                                Fund\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Change Owner\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button size=\"small\" onClick={() => onChangeOwnerChange()}>\n                                Change Owner\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Approve Fungible Token\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button size=\"small\" onClick={onApproveFungibleTokenCallback}>\n                                Approve\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Approve Non-Fungible Token\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button size=\"small\" onClick={onApproveFungibleTokenCallback}>\n                                Approve\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Sign Message\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button\n                                size=\"small\"\n                                onClick={() => {\n                                    switch (pluginID) {\n                                        case NetworkPluginID.PLUGIN_EVM:\n                                            onSign('message')\n                                            break\n                                        default:\n                                            break\n                                    }\n                                }}>\n                                Sign\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Sign Typed Data\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button\n                                size=\"small\"\n                                onClick={() => {\n                                    switch (pluginID) {\n                                        case NetworkPluginID.PLUGIN_EVM:\n                                            onSign('typedData')\n                                            break\n                                        default:\n                                            break\n                                    }\n                                }}>\n                                Sign\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Sign Transaction\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button\n                                size=\"small\"\n                                onClick={() => {\n                                    switch (pluginID) {\n                                        case NetworkPluginID.PLUGIN_EVM:\n                                            onSign('transaction')\n                                            break\n                                        default:\n                                            break\n                                    }\n                                }}>\n                                Sign\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Switch Chain\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button\n                                size=\"small\"\n                                onClick={async () => {\n                                    switch (pluginID) {\n                                        case NetworkPluginID.PLUGIN_EVM:\n                                            await onSwitchChain(\n                                                chainId === ChainId.Mainnet ? ChainId.Matic : ChainId.Mainnet,\n                                            )\n                                            break\n                                        default:\n                                            break\n                                    }\n                                }}>\n                                Switch Chain\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Connect Wallet\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button\n                                size=\"small\"\n                                onClick={async () => {\n                                    switch (pluginID) {\n                                        case NetworkPluginID.PLUGIN_EVM:\n                                            await onConnect(ChainId.Mainnet, ProviderType.MetaMask)\n                                            break\n                                        default:\n                                            break\n                                    }\n                                }}>\n                                Connect\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Disconnect Wallet\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button\n                                size=\"small\"\n                                onClick={async () => {\n                                    switch (pluginID) {\n                                        case NetworkPluginID.PLUGIN_EVM:\n                                            await onDisconnect(ProviderType.MetaMask)\n                                            break\n                                        default:\n                                            break\n                                    }\n                                }}>\n                                Disconnect\n                            </Button>\n                        </TableCell>\n                    </TableRow>\n                </TableBody>\n            </Table>\n        </section>\n    )\n}\n","import { DialogContent } from '@mui/material'\nimport { DefaultWeb3ContextProvider } from '@masknet/web3-hooks-base'\nimport { InjectedDialog } from '@masknet/shared'\nimport { useRemoteControlledDialog } from '@masknet/shared-base-ui'\nimport { ConnectionContent } from './ConnectionContent.js'\nimport { PluginDebuggerMessages } from '../../messages.js'\n\nexport function ConnectionDialog() {\n    const { open, closeDialog } = useRemoteControlledDialog(PluginDebuggerMessages.connectionDialogUpdated)\n    return (\n        <InjectedDialog title=\"Connection\" fullWidth open={open} onClose={closeDialog}>\n            <DialogContent>\n                <DefaultWeb3ContextProvider>\n                    <ConnectionContent onClose={closeDialog} />\n                </DefaultWeb3ContextProvider>\n            </DialogContent>\n        </InjectedDialog>\n    )\n}\n","import { useState } from 'react'\nimport { Icons } from '@masknet/icons'\nimport { getEnumAsArray } from '@masknet/kit'\nimport { useChainContext, useNetworkContext } from '@masknet/web3-hooks-base'\nimport type { Hub } from '@masknet/web3-providers/types'\nimport { HubAll } from '@masknet/web3-providers'\nimport { makeStyles, ShadowRootMenu } from '@masknet/theme'\nimport { OrderSide, resolveSourceTypeName, SourceType } from '@masknet/web3-shared-base'\nimport { Button, MenuItem, Table, TableBody, TableCell, TableRow, TextField, Typography } from '@mui/material'\nimport type { NetworkPluginID } from '@masknet/shared-base'\n\ninterface HubContentProps {\n    onClose?: () => void\n}\n\nconst useStyles = makeStyles()({\n    container: {\n        overflow: 'auto',\n    },\n})\n\nexport function HubContent(props: HubContentProps) {\n    const { classes } = useStyles()\n    const { pluginID } = useNetworkContext()\n    const { account, chainId } = useChainContext()\n    const [keyword, setKeyword] = useState('PUNK')\n    const [address, setAddress] = useState('0x932261f9fc8da46c4a22e31b45c4de60623848bf')\n    const [tokenId, setTokenId] = useState('32342')\n    const [sourceType, setSourceType] = useState<SourceType>()\n    const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null)\n\n    type HubAll = Required<Hub<NetworkPluginID>>\n    type API<T extends keyof HubAll = keyof HubAll> = readonly [T, Parameters<HubAll[T]>]\n\n    const APIs: API[] = [\n        // gas options\n        ['getGasOptions', [chainId]],\n\n        // transactions\n        ['getTransactions', [chainId, account]],\n\n        // fungible tokens\n        ['getFungibleToken', [address]],\n        ['getFungibleAsset', [address]],\n        ['getFungibleAssets', [account]],\n        ['getFungibleTokenPrice', [chainId, address]],\n\n        ['getFungibleTokenIconURLs', [chainId, address]],\n\n        ['getFungibleTokensFromTokenList', [chainId]],\n        ['getFungibleTokenSpenders', [chainId, account]],\n\n        // non-fungible tokens\n        ['getNonFungibleTokensFromTokenList', [chainId]],\n        ['getNonFungibleTokenSpenders', [chainId, address]],\n        ['getNonFungibleTokenContract', [address]],\n        ['getNonFungibleCollectionsByOwner', [account]],\n        ['getNonFungibleTokenEvents', [address, tokenId]],\n        ['getNonFungibleTokenOffers', [address, tokenId]],\n        ['getNonFungibleTokenListings', [address, tokenId]],\n        ['getNonFungibleTokenOrders', [address, tokenId, OrderSide.Buy]],\n        ['getNonFungibleAsset', [address, tokenId]],\n        ['getNonFungibleAssets', [account]],\n        ['getNonFungibleRarity', [address, tokenId]],\n        ['getNonFungibleTokenFloorPrice', [address, tokenId]],\n        ['getNonFungibleAssetsByCollection', [address]],\n    ]\n\n    return (\n        <section className={classes.container}>\n            <Table size=\"small\">\n                <TableBody>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Keyword\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <TextField\n                                label=\"Keyword\"\n                                value={keyword}\n                                placeholder=\"Enter keyword to search\"\n                                size=\"small\"\n                                onChange={(e) => setKeyword(e.target.value)}\n                            />\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Contract Address\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <TextField\n                                label=\"Address\"\n                                value={address}\n                                placeholder=\"Enter contract address\"\n                                size=\"small\"\n                                onChange={(e) => setAddress(e.target.value)}\n                            />\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Token ID\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <TextField\n                                label=\"Token Id\"\n                                value={tokenId}\n                                placeholder=\"Enter token id\"\n                                size=\"small\"\n                                style={{ marginTop: 8 }}\n                                onChange={(e) => setTokenId(e.target.value)}\n                            />\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                Source Type\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <Button\n                                size=\"small\"\n                                onClick={(e) => setAnchorEl(e.currentTarget)}\n                                endIcon={<Icons.ArrowDownRound size={14} />}>\n                                {sourceType ? resolveSourceTypeName(sourceType) : 'NO PROVIDER'}\n                            </Button>\n                            <ShadowRootMenu\n                                anchorEl={anchorEl}\n                                open={!!anchorEl}\n                                defaultValue={SourceType.OpenSea}\n                                onClose={() => setAnchorEl(null)}>\n                                {getEnumAsArray(SourceType).map((x) => {\n                                    return (\n                                        <MenuItem key={x.key} value={x.value} onClick={() => setSourceType(x.value)}>\n                                            {x.key}\n                                        </MenuItem>\n                                    )\n                                })}\n                            </ShadowRootMenu>\n                        </TableCell>\n                    </TableRow>\n                    {APIs.map(([key, parameters]) => {\n                        return (\n                            <TableRow key={key}>\n                                <TableCell>\n                                    <Typography variant=\"body2\" whiteSpace=\"nowrap\">\n                                        {key}\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Button\n                                        size=\"small\"\n                                        onClick={async () => {\n                                            try {\n                                                console.log(`Query ${key}:`)\n                                                console.log(\n                                                    // @ts-expect-error the ...parameters call is unsafe\n                                                    await HubAll.use(pluginID)[key]?.(...parameters, {\n                                                        chainId,\n                                                        account,\n                                                        sourceType,\n                                                    }),\n                                                )\n                                            } catch (error) {\n                                                console.error(error)\n                                            }\n                                        }}>\n                                        Query\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                        )\n                    })}\n                </TableBody>\n            </Table>\n        </section>\n    )\n}\n","import { DialogContent } from '@mui/material'\nimport { InjectedDialog } from '@masknet/shared'\nimport { useRemoteControlledDialog } from '@masknet/shared-base-ui'\nimport { ChainId } from '@masknet/web3-shared-evm'\nimport { DefaultWeb3ContextProvider } from '@masknet/web3-hooks-base'\nimport { HubContent } from './HubContent.js'\nimport { PluginDebuggerMessages } from '../../messages.js'\n\nexport function HubDialog() {\n    const { open, closeDialog } = useRemoteControlledDialog(PluginDebuggerMessages.hubDialogUpdated)\n    return (\n        <InjectedDialog title=\"Hub\" fullWidth open={open} onClose={closeDialog}>\n            <DialogContent>\n                <DefaultWeb3ContextProvider value={{ chainId: ChainId.Mainnet }}>\n                    <HubContent onClose={closeDialog} />\n                </DefaultWeb3ContextProvider>\n            </DialogContent>\n        </InjectedDialog>\n    )\n}\n","import { makeStyles } from '@masknet/theme'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport type { SocialAccount, SocialIdentity } from '@masknet/shared-base'\n\ninterface AvatarDecoratorProps {\n    identity?: SocialIdentity | null\n    persona?: string\n    socialAccounts?: Array<SocialAccount<Web3Helper.ChainIdAll>>\n}\n\nconst useStyles = makeStyles()({\n    container: {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        backgroundColor: '#fff',\n        zIndex: 10,\n        '&:hover': {\n            display: 'block',\n        },\n    },\n})\nexport function AvatarDecorator({ identity, persona, socialAccounts }: AvatarDecoratorProps) {\n    const { classes } = useStyles()\n    return (\n        <div\n            className={classes.container}\n            data-nickname={identity?.nickname ?? 'N/A'}\n            data-persona={persona ?? 'N/A'}\n            data-address-list={JSON.stringify(socialAccounts)}\n        />\n    )\n}\n","import type React from 'react'\nimport { createElement, Fragment, useMemo } from 'react'\nimport type { PluginID } from '@masknet/shared-base'\nimport { useActivatedPluginsSiteAdaptor } from '../manager/site-adaptor.js'\nimport type { Plugin } from '../types.js'\n\nexport interface WidgetProps<Name extends keyof Plugin.SiteAdaptor.WidgetRegistry> {\n    name: Name\n    pluginID?: PluginID\n    fallback?: React.ReactNode | null\n}\n\nexport function Widget<Name extends keyof Plugin.SiteAdaptor.WidgetRegistry>(\n    props: WidgetProps<Name> & (Plugin.SiteAdaptor.WidgetRegistry[Name] extends infer U extends object ? U : never),\n) {\n    const { name, pluginID, fallback, ...rest } = props\n    const plugins = useActivatedPluginsSiteAdaptor(false)\n    const WidgetComponent: any = useMemo(() => {\n        if (pluginID) return plugins.find((x) => x.ID === pluginID)?.Widgets?.find((y) => y.name === name)?.UI?.Widget\n        return null\n    }, [plugins])\n\n    if (!WidgetComponent) return createElement(Fragment, { children: fallback })\n    return createElement(WidgetComponent, rest)\n}\n","import { Box, Paper, Typography } from '@mui/material'\nimport { getAvailablePlugins } from '@masknet/plugin-infra'\nimport { PluginTransFieldRender, useActivatedPluginsSiteAdaptor, Widget } from '@masknet/plugin-infra/content-script'\n\ninterface WidgetContentProps {\n    onClose?: () => void\n}\n\nexport function WidgetContent(props: WidgetContentProps) {\n    const activatedPlugins = useActivatedPluginsSiteAdaptor('any')\n    const displayPlugins = getAvailablePlugins(activatedPlugins, (plugins) => {\n        return plugins.filter((x) => x.Widgets)\n    })\n\n    return (\n        <Box>\n            {displayPlugins.map((x) => (\n                <Box key={x.ID}>\n                    <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                        <PluginTransFieldRender field={x.name} pluginID={x.ID} />\n                    </Typography>\n                    <Paper variant=\"outlined\" sx={{ padding: 1 }}>\n                        {x.Widgets?.map((y) => <Widget key={y.ID} pluginID={x.ID} name={y.name} />)}\n                    </Paper>\n                </Box>\n            ))}\n        </Box>\n    )\n}\n","import { DialogContent } from '@mui/material'\nimport { InjectedDialog } from '@masknet/shared'\nimport { useRemoteControlledDialog } from '@masknet/shared-base-ui'\nimport { ChainId } from '@masknet/web3-shared-evm'\nimport { DefaultWeb3ContextProvider } from '@masknet/web3-hooks-base'\nimport { WidgetContent } from './WidgetContent.js'\nimport { PluginDebuggerMessages } from '../../messages.js'\n\nexport function WidgetDialog() {\n    const { open, closeDialog } = useRemoteControlledDialog(PluginDebuggerMessages.widgetDialogUpdated)\n    return (\n        <InjectedDialog title=\"Widgets\" fullWidth open={open} onClose={closeDialog}>\n            <DialogContent>\n                <DefaultWeb3ContextProvider value={{ chainId: ChainId.Mainnet }}>\n                    <WidgetContent onClose={closeDialog} />\n                </DefaultWeb3ContextProvider>\n            </DialogContent>\n        </InjectedDialog>\n    )\n}\n","import type { Web3Helper } from '@masknet/web3-helpers'\nimport type { SearchResult } from '@masknet/web3-shared-base'\nimport { Typography } from '@mui/material'\n\ninterface SearchResultInspectorProps {\n    resultList: Array<SearchResult<Web3Helper.ChainIdAll, Web3Helper.SchemaTypeAll>>\n}\n\nexport function SearchResultInspector({ resultList }: SearchResultInspectorProps) {\n    return <Typography>{resultList[0].keyword}</Typography>\n}\n","import type { Plugin } from '@masknet/plugin-infra'\nimport { ApplicationEntry } from '@masknet/shared'\nimport { SocialAddressType } from '@masknet/shared-base'\nimport { useRemoteControlledDialog } from '@masknet/shared-base-ui'\nimport { Icons } from '@masknet/icons'\nimport { Typography } from '@mui/material'\nimport { base } from '../base.js'\nimport { PLUGIN_ID, PLUGIN_NAME } from '../constants.js'\nimport { TabContent } from './components/TabContent.js'\nimport { ConsoleDialog } from './components/ConsoleDialog.js'\nimport { PluginDebuggerMessages } from '../messages.js'\nimport { ConnectionDialog } from './components/ConnectionDialog.js'\nimport { HubDialog } from './components/HubDialog.js'\nimport { AvatarDecorator } from './components/AvatarDecorator.js'\nimport { WidgetDialog } from './components/WidgetDialog.js'\nimport { SearchResultInspector } from './components/SearchResultInspector.js'\n\nconst site: Plugin.SiteAdaptor.Definition = {\n    ...base,\n    ApplicationEntries: [\n        {\n            ApplicationEntryID: `${PLUGIN_ID}_Debugger`,\n            RenderEntryComponent() {\n                const { openDialog } = useRemoteControlledDialog(PluginDebuggerMessages.consoleDialogUpdated)\n                return (\n                    <ApplicationEntry\n                        title={PLUGIN_NAME}\n                        disabled={false}\n                        iconFilterColor=\"\"\n                        icon={<Icons.MaskBlue size={36} />}\n                        onClick={() => {\n                            openDialog()\n                        }}\n                    />\n                )\n            },\n            appBoardSortingDefaultPriority: Number.MAX_SAFE_INTEGER,\n            marketListSortingPriority: Number.MAX_SAFE_INTEGER,\n            icon: <Icons.MaskBlue size={36} />,\n            name: PLUGIN_NAME,\n        },\n        {\n            ApplicationEntryID: `${PLUGIN_ID}_Hub`,\n            RenderEntryComponent() {\n                const { openDialog } = useRemoteControlledDialog(PluginDebuggerMessages.hubDialogUpdated)\n                return (\n                    <ApplicationEntry\n                        title=\"Hub\"\n                        disabled={false}\n                        iconFilterColor=\"\"\n                        icon={<Icons.MaskBlue size={36} />}\n                        onClick={() => {\n                            openDialog()\n                        }}\n                    />\n                )\n            },\n            appBoardSortingDefaultPriority: Number.MAX_SAFE_INTEGER,\n            marketListSortingPriority: Number.MAX_SAFE_INTEGER,\n            icon: <Icons.MaskBlue size={36} />,\n            name: PLUGIN_NAME,\n        },\n        {\n            ApplicationEntryID: `${PLUGIN_ID}_Connection`,\n            RenderEntryComponent() {\n                const { openDialog } = useRemoteControlledDialog(PluginDebuggerMessages.connectionDialogUpdated)\n                return (\n                    <ApplicationEntry\n                        title=\"Connection\"\n                        disabled={false}\n                        iconFilterColor=\"\"\n                        icon={<Icons.MaskBlue size={36} />}\n                        onClick={() => {\n                            openDialog()\n                        }}\n                    />\n                )\n            },\n            appBoardSortingDefaultPriority: Number.MAX_SAFE_INTEGER,\n            marketListSortingPriority: Number.MAX_SAFE_INTEGER,\n            icon: <Icons.MaskBlue size={36} />,\n            name: PLUGIN_NAME,\n        },\n        {\n            ApplicationEntryID: `${PLUGIN_ID}_Widget`,\n            RenderEntryComponent() {\n                const { openDialog } = useRemoteControlledDialog(PluginDebuggerMessages.widgetDialogUpdated)\n                return (\n                    <ApplicationEntry\n                        title=\"Widgets\"\n                        disabled={false}\n                        iconFilterColor=\"\"\n                        icon={<Icons.MaskBlue size={36} />}\n                        onClick={() => {\n                            openDialog()\n                        }}\n                    />\n                )\n            },\n            appBoardSortingDefaultPriority: Number.MAX_SAFE_INTEGER,\n            marketListSortingPriority: Number.MAX_SAFE_INTEGER,\n            icon: <Icons.MaskBlue size={36} />,\n            name: PLUGIN_NAME,\n        },\n    ],\n    GlobalInjection() {\n        return (\n            <>\n                <ConsoleDialog />\n                <ConnectionDialog />\n                <HubDialog />\n                <WidgetDialog />\n            </>\n        )\n    },\n    SearchResultInspector: {\n        ID: `${PLUGIN_ID}_searchResultInspector`,\n        UI: {\n            Content: SearchResultInspector,\n        },\n        Utils: {\n            shouldDisplay: (result) => false,\n        },\n    },\n    SearchResultTabs: [\n        {\n            ID: `${PLUGIN_ID}_resultTab1`,\n            label: 'Tab 1',\n            priority: 99999,\n            Utils: {\n                shouldDisplay: (result) => false,\n            },\n            UI: {\n                TabContent({ result }) {\n                    return <Typography>Tab 1</Typography>\n                },\n            },\n        },\n        {\n            ID: `${PLUGIN_ID}_resultTab2`,\n            label: 'Tab 2',\n            priority: 99999,\n            Utils: {\n                shouldDisplay: (result) => false,\n            },\n            UI: {\n                TabContent({ result }) {\n                    return <Typography>Tab 2</Typography>\n                },\n            },\n        },\n    ],\n    ProfileTabs: [\n        {\n            ID: `${PLUGIN_ID}_profileTabContent`,\n            label: 'Debugger',\n            priority: 99999,\n            UI: {\n                TabContent,\n            },\n            Utils: {\n                sorter(a, z) {\n                    if (a.supportedAddressTypes?.includes(SocialAddressType.Address)) return 1\n                    if (z.supportedAddressTypes?.includes(SocialAddressType.Address)) return -1\n\n                    return 0\n                },\n            },\n        },\n    ],\n    AvatarRealm: {\n        ID: `${PLUGIN_ID}_avatar`,\n        label: 'Debugger',\n        priority: 99999,\n        UI: {\n            Decorator: AvatarDecorator,\n        },\n    },\n}\n\nexport default site\n","import type { PluginMessageEmitterItem } from '@masknet/shared-base'\nimport { useState, useEffect, useCallback, useRef } from 'react'\nimport { v4 as uuid } from 'uuid'\n\nexport interface RemoteControlledDialogEvent {\n    open: boolean\n    hookId?: string\n}\n\ninterface Result<T> {\n    open: boolean\n    closeDialog: () => void\n    openDialog: () => void\n    setDialog: (ev: T) => void\n}\n\n/**\n * Use a dialog state controlled by remote\n */\nexport function useRemoteControlledDialog<T extends { open: boolean }>(\n    event: PluginMessageEmitterItem<T>,\n    onUpdateByRemote?: (ev: T) => void,\n    tabType: 'self' | 'activated' = 'self',\n): Result<T> {\n    const [HOOK_ID] = useState(uuid) // create an uuid for every hook\n    const [open, setOpen] = useState(false)\n\n    useEffect(\n        () =>\n            event.on((_ev: T) => {\n                const event = _ev as unknown as RemoteControlledDialogEvent\n\n                // ignore the event from the same hook\n                if (event.hookId === HOOK_ID) return\n\n                setOpen(event.open)\n                onUpdateByRemote?.(_ev)\n            }),\n        [onUpdateByRemote, event, HOOK_ID],\n    )\n\n    const timer = useRef<ReturnType<typeof setTimeout> | null>(null)\n    const onUpdateByLocal = useCallback(\n        (ev: T) => {\n            setOpen(ev.open)\n\n            const timer_ = timer.current\n            if (timer_ !== null) clearTimeout(timer_)\n            timer.current = setTimeout(() => {\n                const payload: T & RemoteControlledDialogEvent = {\n                    hookId: HOOK_ID,\n                    ...ev,\n                }\n                tabType === 'self' ? event.sendToLocal(payload) : event.sendToVisiblePages(payload)\n            }, 100)\n        },\n        [event, tabType, HOOK_ID],\n    )\n    const openDialog = useCallback(() => {\n        onUpdateByLocal({ open: true } as T)\n    }, [])\n    const closeDialog = useCallback(() => {\n        onUpdateByLocal({ open: false } as T)\n    }, [])\n\n    return {\n        open,\n        openDialog,\n        closeDialog,\n        setDialog: onUpdateByLocal,\n    }\n}\n","import type { PersonaIdentifier, ProfileIdentifier } from '@masknet/base'\nimport type { NextIDPersonaBindings, NextIDPlatform } from '../NextID/types.js'\n/**\n * This interface contains the minimal information for UI display\n */\nexport interface PersonaInformation {\n    avatar?: string\n    proof?: NextIDPersonaBindings\n    /** The nickname of the persona. Should use profile.nickname if it presents. */\n    nickname?: string\n    /** The evm address of persona */\n    address?: string\n    identifier: PersonaIdentifier\n    linkedProfiles: ProfileInformation[]\n}\n\nexport interface ProfileInformation {\n    /** The nickname of the profile. Should be used in prior. */\n    nickname?: string\n    avatar?: string\n    identifier: ProfileIdentifier\n    linkedPersona?: PersonaIdentifier\n    createAt?: Date\n}\n\nexport interface ProfileAccount extends ProfileInformation {\n    is_valid?: boolean\n    identity?: string\n    platform?: NextIDPlatform\n    last_checked_at?: string\n}\n\nexport interface ProfileInformationFromNextID extends ProfileInformation {\n    fromNextID: boolean\n    linkedTwitterNames?: string[]\n    walletAddress?: string\n    createdAt?: Date\n    updatedAt?: Date\n}\n\nexport enum RelationFavor {\n    COLLECTED = -1,\n    UNCOLLECTED = 1,\n    DEPRECATED = 0,\n}\nexport interface RelationProfile {\n    favorite?: boolean\n    avatar?: string\n    name: string\n    fingerprint?: string\n    identifier: ProfileIdentifier\n}\n\nexport interface Relation {\n    profile: ProfileIdentifier | PersonaIdentifier\n    linked: PersonaIdentifier\n    favor: RelationFavor\n    network?: string\n}\n\nexport enum ProofType {\n    Persona = 'persona',\n    EOA = 'eoa',\n}\n\nexport interface ProofPayload {\n    ownerAddress: string\n    nonce?: number\n}\n\nexport interface Proof {\n    publicKey: string\n    type: ProofType\n    payload: string // JSON.stringify(payload)\n    signature: string\n}\n","import { Menu } from '@mui/material'\nimport { createShadowRootForwardedComponent } from '../../ShadowRoot/index.js'\n\nexport const ShadowRootMenu = createShadowRootForwardedComponent(Menu)\nShadowRootMenu.displayName = 'ShadowRootTooltip'\n","import { noop } from 'lodash-es'\nimport { useEffect } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport { isSameAddress } from '@masknet/web3-shared-base'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport type { ConnectionOptions } from '@masknet/web3-providers/types'\nimport { useChainContext } from './useContext.js'\nimport { useWeb3State } from './useWeb3State.js'\nimport { useWeb3Connection } from './useWeb3Connection.js'\n\nexport function useBalance<T extends NetworkPluginID = NetworkPluginID>(\n    pluginID?: T,\n    options?: ConnectionOptions<T>,\n    /** Allow to control the request */\n    enabled = true,\n) {\n    const { account, chainId } = useChainContext({ account: options?.account, chainId: options?.chainId })\n    const Web3 = useWeb3Connection(pluginID, {\n        account,\n        chainId,\n        ...options,\n    })\n    const { BalanceNotifier } = useWeb3State(pluginID)\n\n    const result = useQuery({\n        enabled: !!account && !!Web3 && enabled,\n        queryKey: ['balance', pluginID, chainId, account, options],\n        queryFn: async () => {\n            if (!account) return 0\n            return Web3.getBalance(account, { ...options, chainId })\n        },\n    })\n\n    useEffect(() => {\n        return (\n            BalanceNotifier?.emitter.on('update', (ev) => {\n                if (isSameAddress(account, ev.account)) result.refetch()\n            }) ?? noop\n        )\n    }, [account, result.refetch, BalanceNotifier])\n\n    return result\n}\n","import { useAsyncRetry } from 'react-use'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport type { ConnectionOptions } from '@masknet/web3-providers/types'\nimport { useChainContext } from './useContext.js'\nimport { useWeb3Connection } from './useWeb3Connection.js'\n\nexport function useBlockTimestamp<T extends NetworkPluginID = NetworkPluginID>(\n    pluginID?: T,\n    options?: ConnectionOptions<T>,\n) {\n    const { chainId } = useChainContext({ chainId: options?.chainId })\n    const Web3 = useWeb3Connection(pluginID, {\n        chainId,\n        ...options,\n    })\n\n    return useAsyncRetry(async () => {\n        return Web3.getBlockTimestamp()\n    }, [Web3])\n}\n","import { useAsyncRetry } from 'react-use'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport { useChainContext } from './useContext.js'\nimport { useWeb3State } from './useWeb3State.js'\nimport { useWeb3Others } from './useWeb3Others.js'\n\nexport function useLookupAddress<T extends NetworkPluginID>(\n    pluginID?: T,\n    domain?: string | null,\n    expectedChainId?: Web3Helper.Definition[T]['ChainId'],\n) {\n    const { chainId } = useChainContext({ chainId: expectedChainId })\n    const Others = useWeb3Others(pluginID)\n    const { NameService } = useWeb3State(pluginID)\n\n    return useAsyncRetry(async () => {\n        if (!domain || !Others.isValidDomain(domain) || !NameService) return\n        return NameService.lookup?.(domain)\n    }, [chainId, domain, NameService, Others])\n}\n","import { EMPTY_ARRAY, type NetworkPluginID } from '@masknet/shared-base'\nimport { uniqBy } from 'lodash-es'\nimport { useMemo } from 'react'\nimport { useSubscription } from 'use-subscription'\nimport { useWeb3State } from './useWeb3State.js'\n\n/**\n * Bulletin networks and custom networks.\n * There could be duplicate chian id among them, because that's allow to custom networks.\n */\nexport function useNetworks<T extends NetworkPluginID = NetworkPluginID>(pluginID?: T, uniqChainId?: boolean) {\n    const { Network } = useWeb3State(pluginID)\n    const networks = useSubscription(Network?.networks ?? EMPTY_ARRAY)\n    return useMemo(() => {\n        const list = networks.filter((x) => x.network === 'mainnet' || x.isCustomized)\n        return uniqChainId ? uniqBy(list, (x) => x.chainId) : list\n    }, [networks, uniqChainId])\n}\n","import { useQuery } from '@tanstack/react-query'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport { useWeb3State } from './useWeb3State.js'\n\nexport function useReverseAddress<T extends NetworkPluginID>(pluginID?: T, address?: string, domainOnly?: boolean) {\n    const { NameService } = useWeb3State(pluginID)\n\n    return useQuery({\n        queryKey: ['reverse', address, domainOnly],\n        enabled: !!NameService?.reverse,\n        queryFn: async () => {\n            if (!address) return null\n            return (await NameService?.reverse?.(address, domainOnly)) || null\n        },\n    })\n}\n","import { NetworkPluginID, type SocialAddress, type SocialAddressType, type SocialIdentity } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useQuery } from '@tanstack/react-query'\nimport { useWeb3State } from './useWeb3State.js'\n\ntype AddressList = Array<SocialAddress<Web3Helper.ChainIdAll>>\n\n/**\n * Get all social addresses across all networks.\n */\nexport function useSocialAddressesAll(\n    identity?: SocialIdentity | null,\n    includes?: SocialAddressType[],\n    sorter?: (a: SocialAddress<Web3Helper.ChainIdAll>, z: SocialAddress<Web3Helper.ChainIdAll>) => number,\n) {\n    // TODO: to add flow\n    const { IdentityService: EVM_IdentityService } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n    const { IdentityService: SolanaIdentityService } = useWeb3State(NetworkPluginID.PLUGIN_SOLANA)\n\n    const userId = identity?.identifier?.userId\n\n    return useQuery({\n        enabled: !!identity && userId !== '$unknown',\n        queryKey: ['all-social-addresses', userId, identity, includes],\n        queryFn: async () => {\n            const allSettled = await Promise.allSettled<AddressList>(\n                [EVM_IdentityService, SolanaIdentityService].map((x) => x?.lookup(identity!) ?? []),\n            )\n\n            const listOfAddress = allSettled.flatMap((x) => (x.status === 'fulfilled' ? x.value : []))\n            const sorted = sorter && listOfAddress.length ? listOfAddress.sort(sorter) : listOfAddress\n            return includes?.length ? sorted.filter((x) => includes.includes(x.type)) : sorted\n        },\n    })\n}\n","import { useMemo } from 'react'\nimport type { SocialAddress } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useWeb3State } from './useWeb3State.js'\n\n/**\n * Merge many social addresses into a social account.\n */\nexport function useSocialAccountsFrom(socialAddresses: Array<SocialAddress<Web3Helper.ChainIdAll>>) {\n    const { IdentityService } = useWeb3State()\n    return useMemo(() => {\n        return IdentityService?.__mergeSocialAddressesAll__(socialAddresses)\n    }, [socialAddresses, IdentityService])\n}\n","import { type SocialAccount, type SocialAddressType, type SocialIdentity, EMPTY_LIST } from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useSocialAddressesAll } from './useSocialAddressesAll.js'\nimport { useSocialAccountsFrom } from './useSocialAccountsFrom.js'\n\n/**\n * Get all social addresses across all networks.\n */\nexport function useSocialAccountsAll(\n    identity?: SocialIdentity | null,\n    includes?: SocialAddressType[],\n    sorter?: (a: SocialAccount<Web3Helper.ChainIdAll>, z: SocialAccount<Web3Helper.ChainIdAll>) => number,\n) {\n    const { data: socialAddressList = EMPTY_LIST, ...rest } = useSocialAddressesAll(identity, includes, sorter)\n    const socialAccounts = useSocialAccountsFrom(socialAddressList) ?? EMPTY_LIST\n\n    return {\n        ...rest,\n        data: socialAccounts,\n    }\n}\n","import { useMemo } from 'react'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport { Web3All } from '@masknet/web3-providers'\nimport type { Connection, ConnectionOptions } from '@masknet/web3-providers/types'\nimport { useNetworkContext } from './useContext.js'\n\nexport function useWeb3Connection<T extends NetworkPluginID = NetworkPluginID>(\n    expectedPluginID?: T,\n    options?: ConnectionOptions<T>,\n) {\n    const { pluginID } = useNetworkContext(expectedPluginID)\n    return useMemo(() => Web3All.use(pluginID, options) as Connection<T>, [pluginID, JSON.stringify(options)])\n}\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Global } from '@emotion/react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0;\n}\n\nexport default function GlobalStyles(props) {\n  const {\n    styles,\n    defaultTheme = {}\n  } = props;\n  const globalStyles = typeof styles === 'function' ? themeInput => styles(isEmpty(themeInput) ? defaultTheme : themeInput) : styles;\n  return /*#__PURE__*/_jsx(Global, {\n    styles: globalStyles\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? GlobalStyles.propTypes = {\n  defaultTheme: PropTypes.object,\n  styles: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func])\n} : void 0;","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","'use client';\nimport * as React from 'react';\n\nconst IsRestoringContext = /*#__PURE__*/React.createContext(false);\nconst useIsRestoring = () => React.useContext(IsRestoringContext);\nconst IsRestoringProvider = IsRestoringContext.Provider;\n\nexport { IsRestoringProvider, useIsRestoring };\n//# sourceMappingURL=isRestoring.mjs.map\n"],"names":["allPersonas","currentPersona","queryPersonaAvatar","querySocialIdentity","fetchJSON","queryPersonaByProfile","openDashboard","openPopupWindow","signWithPersona","hasPaymentPassword","createPersona","setCurrentPersonaIdentifier","attachProfile","setPluginMinimalModeEnabled","hasHostPermission","requestHostPermission","__setUIContext__","value","useTranslation","PluginTransFieldRender","pluginID","field","t","i18nKey","translate","ns","nsSeparator","defaultValue","fallback","usePluginTransField","startsWith","console","warn","useMemo","isEqual","unreachable","useValueRef","ValueRefWithReady","createManager","getPluginDefine","events","activated","startDaemon","minimalMode","def","SiteAdaptor","NoManagedContext","activatedSub","on","plugins","minimalModeSub","useActivatedPluginsSiteAdaptor","minimalModeEqualsTo","result","filter","x","includes","ID","visibility","useMinimalMode","bind","useNotMinimalMode","useAnyMode","useIsMinimalMode","useActivatedPluginSiteAdaptor","find","undefined","startPluginSiteAdaptor","currentNetwork","host","id","status","enableRequirement","supports","sites","type","lastRecognizedProfile","currentVisitingProfile","currentNextIDPlatform","currentPersonaIdentifier","getPostURL","share","getUserIdentity","getPostIdFromNewPostToast","postMessage","getSearchedKeyword","connectPersona","__setSiteAdaptorContext__","useSubscription","useCurrentVisitingIdentity","UNDEFINED","useLastRecognizedIdentity","useEffect","MaskMessages","useQuery","useSocialIdentity","identity","queryKey","enabled","Boolean","queryFn","refetchOnWindowFocus","ownProofChanged","refetch","getAvailablePlugins","producer","WebExtensionMessage","serializer","DOMAIN_RPC","Symbol","getPluginMessage","domain","cache","has","get","messageCenter","serialization","set","__workaround__replaceImplementationOfCreatePluginMessage__","newImpl","Map","makeStyles","useSocialAccountsAll","List","ListItem","ListItemText","Table","TableBody","TableCell","TableRow","Typography","useStyles","container","overflow","TabContent","socialAccount","classes","data","socialAccounts","isLoading","loadingSocialAccounts","renderIdentity","dense","primary","color","secondary","nickname","bio","homepage","sx","display","img","src","avatar","style","maxWidth","renderAddressName","map","label","address","renderAllAddressNames","section","className","size","variant","whiteSpace","useAsyncRetry","noop","useChainContext","useWeb3Connection","useWeb3State","useBlockNumber","options","chainId","Web3","BlockNumberNotifier","asyncRetry","getBlockNumber","emitter","actualChainId","retry","useCurrentVisitingSocialIdentity","useBalance","useBlockTimestamp","useNetworkContext","useReverseAddress","useLookupAddress","useWeb3Others","CrossIsolationMessages","useRemoteControlledDialog","joinsABTest","ConsoleContent","props","currentPluginID","Others","account","networkType","providerType","balance","blockNumber","blockTimestamp","reversedName","lookedAddress","currentVisitingIdentity","lastRecognizedIdentity","currentVisitingSocialIdentity","followLensDialogEvent","table","name","content","formatAddress","identifier","userId","isOwner","width","wordBreak","publicKey","PLUGIN_ID","PluginDebuggerMessages","DialogContent","InjectedDialog","DefaultWeb3ContextProvider","ConsoleDialog","open","closeDialog","consoleDialogUpdated","title","fullWidth","onClose","useCallback","Button","Contract","ChainResolver","NetworkPluginID","ProofType","ChainId","NetworkType","ProviderType","useNetworks","Telemetry","EventType","EventID","ExceptionType","ExceptionID","ConnectionContent","Network","PLUGIN_EVM","networks","customNetwork","CustomNetwork","onAddNetwork","addNetwork","Mainnet","coinMarketCapChainId","coinGeckoChainId","coinGeckoPlatformId","network","nativeCurrency","rpcUrl","explorerUrl","url","isCustomized","onUseNetwork","switchNetwork","onRemoveNetwork","removeNetwork","onRenameNetwork","updateNetwork","onCaptureEvent","captureEvent","Debug","onCaptureException","captureException","Error","Date","now","onEstimateCallback","contract","getERC20Contract","estimatedGas","estimateTransaction","from","to","methods","approve","encodeABI","paymentToken","overrides","gas","maxFeePerGas","maxPriorityFeePerGas","alert","onTransferCallback","transferFungibleToken","onDeployCallback","deploy","Matic","onFundCallback","fund","Persona","payload","JSON","stringify","ownerAddress","nonce","signature","onChangeOwnerChange","changeOwner","onApproveFungibleTokenCallback","approveFungibleToken","onSign","message","typedData","toString","verifyingContract","version","contents","wallets","primaryType","types","Group","Mail","Person","transaction","gasPrice","sign","signMessage","signTransaction","signed","onSwitchChain","switchChain","error","getChainId","onConnect","connect","onDisconnect","disconnect","onClick","MetaMask","ConnectionDialog","connectionDialogUpdated","useState","Icons","getEnumAsArray","HubAll","ShadowRootMenu","OrderSide","resolveSourceTypeName","SourceType","MenuItem","TextField","HubContent","keyword","setKeyword","setAddress","tokenId","setTokenId","sourceType","setSourceType","anchorEl","setAnchorEl","APIs","Buy","placeholder","onChange","e","target","marginTop","currentTarget","endIcon","ArrowDownRound","OpenSea","key","parameters","log","use","HubDialog","hubDialogUpdated","position","left","top","backgroundColor","zIndex","AvatarDecorator","persona","div","data-nickname","data-persona","data-address-list","createElement","Fragment","Widget","rest","WidgetComponent","Widgets","y","UI","children","Box","Paper","WidgetContent","activatedPlugins","displayPlugins","mb","padding","WidgetDialog","widgetDialogUpdated","SearchResultInspector","resultList","ApplicationEntry","SocialAddressType","base","PLUGIN_NAME","site","ApplicationEntries","ApplicationEntryID","RenderEntryComponent","openDialog","disabled","iconFilterColor","icon","MaskBlue","appBoardSortingDefaultPriority","Number","MAX_SAFE_INTEGER","marketListSortingPriority","GlobalInjection","Content","Utils","shouldDisplay","SearchResultTabs","priority","ProfileTabs","sorter","a","z","supportedAddressTypes","Address","AvatarRealm","Decorator","useRef","v4","uuid","event","onUpdateByRemote","tabType","HOOK_ID","setOpen","_ev","hookId","timer","onUpdateByLocal","ev","timer_","current","clearTimeout","setTimeout","sendToLocal","sendToVisiblePages","setDialog","RelationFavor","COLLECTED","UNCOLLECTED","DEPRECATED","EOA","Menu","createShadowRootForwardedComponent","displayName","isSameAddress","BalanceNotifier","getBalance","getBlockTimestamp","expectedChainId","NameService","isValidDomain","lookup","EMPTY_ARRAY","uniqBy","uniqChainId","list","domainOnly","reverse","useSocialAddressesAll","IdentityService","EVM_IdentityService","SolanaIdentityService","PLUGIN_SOLANA","allSettled","Promise","listOfAddress","flatMap","sorted","length","sort","useSocialAccountsFrom","socialAddresses","__mergeSocialAddressesAll__","EMPTY_LIST","socialAddressList","Web3All","expectedPluginID"],"sourceRoot":"","x_google_ignoreList":[37,38,39,40]}