{"version":3,"file":"bundled/chunk.2061.js","mappings":"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","sources":["webpack://mask-network/./packages/plugin-infra/src/site-adaptor/useAllPersonas.ts","webpack://mask-network/./packages/plugin-infra/src/site-adaptor/useLastRecognizedIdentity.ts","webpack://mask-network/./packages/plugins/Avatar/src/SiteAdaptor/RainbowBox.tsx","webpack://mask-network/./packages/plugins/Avatar/src/contexts/AvatarManagement/index.tsx","webpack://mask-network/./packages/plugins/Avatar/src/Application/NFTListDialog.tsx","webpack://mask-network/./packages/plugins/Avatar/src/Application/NFTAvatar.tsx","webpack://mask-network/./packages/plugins/Avatar/src/Application/NFTInfo.tsx","webpack://mask-network/./packages/plugins/Avatar/src/Application/PersonaItem.tsx","webpack://mask-network/./packages/plugins/Avatar/src/Application/PersonaPage.tsx","webpack://mask-network/./packages/shared/src/hooks/usePersonaConnectStatus.ts","webpack://mask-network/./packages/plugins/Avatar/src/hooks/save/useSaveToNextID.ts","webpack://mask-network/./packages/plugins/Avatar/src/hooks/save/useSaveAvatar.ts","webpack://mask-network/./packages/plugins/Avatar/src/hooks/save/useSaveKV.ts","webpack://mask-network/./packages/plugins/Avatar/src/hooks/save/useSave.ts","webpack://mask-network/./packages/plugins/Avatar/src/Application/UploadAvatarDialog.tsx","webpack://mask-network/./packages/plugins/Avatar/src/Application/Routes.tsx","webpack://mask-network/./packages/plugins/Avatar/src/Application/RouterDialog.tsx","webpack://mask-network/./packages/plugins/Avatar/src/Application/NFTAvatarDialog.tsx","webpack://mask-network/./packages/plugins/Avatar/src/SiteAdaptor/index.tsx","webpack://mask-network/./packages/plugins/Avatar/src/hooks/save/useSaveAddress.ts","webpack://mask-network/./packages/plugins/Avatar/src/hooks/storage/useSaveStringStorage.ts","webpack://mask-network/./packages/plugins/Avatar/src/hooks/useGetAddress.ts","webpack://mask-network/./packages/plugins/Avatar/src/hooks/storage/useGetNFTAvatarFromStorage.ts","webpack://mask-network/./packages/plugins/Avatar/src/hooks/rss3/index.ts","webpack://mask-network/./packages/plugins/Avatar/src/hooks/useGetNFTAvatar.ts","webpack://mask-network/./packages/plugins/Avatar/src/hooks/usePersonaNFTAvatar.ts","webpack://mask-network/./packages/plugins/Avatar/src/locales/i18n_generated.ts","webpack://mask-network/./packages/plugins/Avatar/src/types.ts","webpack://mask-network/./packages/web3-shared/base/src/helpers/fetch.ts","webpack://mask-network/./packages/plugins/Avatar/src/utils/index.ts","webpack://mask-network/./packages/shared-base-ui/src/hooks/useEverSeen.ts","webpack://mask-network/./packages/shared-base/src/SingletonModal/index.ts","webpack://mask-network/./packages/shared/src/UI/components/ChainIcon/index.tsx","webpack://mask-network/./packages/shared/src/UI/components/NetworkIcon/index.tsx","webpack://mask-network/./packages/shared/src/UI/components/SelectNetworkSidebar/index.tsx","webpack://mask-network/./packages/shared/src/hooks/usePersonasFromNextID.ts","webpack://mask-network/./packages/theme/src/Components/RadioIndicator/index.tsx","webpack://mask-network/./packages/theme/src/hooks/useDetectOverflow.ts","webpack://mask-network/./packages/web3-hooks/base/src/useNetwork.ts","webpack://mask-network/./node_modules/.pnpm/react-is@18.2.0/node_modules/react-is/cjs/react-is.production.min.js","webpack://mask-network/./node_modules/.pnpm/react-is@18.2.0/node_modules/react-is/index.js","webpack://mask-network/./node_modules/.pnpm/unstated-next@1.1.0/node_modules/unstated-next/dist/unstated-next.mjs"],"sourcesContent":["import { useSubscription } from 'use-subscription'\nimport { allPersonas } from '../dom/context.js'\n\nexport function useAllPersonas() {\n    return useSubscription(allPersonas)\n}\n","import { useSubscription } from 'use-subscription'\nimport { UNDEFINED } from '@masknet/shared-base'\nimport { lastRecognizedProfile } from './context.js'\n\nexport function useLastRecognizedIdentity() {\n    return useSubscription(lastRecognizedProfile ?? UNDEFINED)\n}\n","import { keyframes, makeStyles } from '@masknet/theme'\nimport type { Keyframes } from '@emotion/serialize'\n\nexport const rainbowBorderKeyFrames: Keyframes = keyframes`\n    0%, to {\n        border-color: #00f8ff;\n        box-shadow: 0 5px 15px rgba(0, 248, 255, 0.4), 0 10px 30px rgba(37, 41, 46, 0.2);\n    }\n    20% {\n        border-color: #a4ff00;\n        box-shadow: 0 5px 15px rgba(164, 255, 0, 0.4), 0 10px 30px rgba(37, 41, 46, 0.2);\n    }\n    40% {\n        border-color: #f7275e;\n        box-shadow: 0 5px 15px rgba(247, 39, 94, 0.4), 0 10px 30px rgba(37, 41, 46, 0.2);\n    }\n    60% {\n        border-color: #ffd300;\n        box-shadow: 0 5px 15px rgba(255, 211, 0, 0.4), 0 10px 30px rgba(37, 41, 46, 0.2);\n    }\n    80% {\n        border-color: #ff8a00;\n        box-shadow: 0 5px 15px rgba(255, 138, 0, 0.4), 0 10px 30px rgba(37, 41, 46, 0.2);\n    }\n`\n\ninterface StyleProps {\n    width?: number\n    height?: number\n    radius?: string\n    size?: number\n}\nconst useStyles = makeStyles<StyleProps>()((theme, { width, height, radius = '100%', size = 2 }) => ({\n    root: {\n        animation: `${rainbowBorderKeyFrames} 6s linear infinite`,\n        width,\n        height,\n        boxShadow: '0 5px 15px rgba(0, 248, 255, 0.4), 0 10px 30px rgba(37, 41, 46, 0.2)',\n        transition: 'none',\n        borderRadius: radius,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        lineHeight: 0,\n        border: `${size}px solid #00f8ff`,\n    },\n}))\n\ninterface RainbowBoxProps extends withClasses<'root'> {\n    borderSize?: number\n    width?: number\n    height?: number\n    radius?: string\n    children?: React.ReactNode\n}\nexport function RainbowBox(props: RainbowBoxProps) {\n    const { classes } = useStyles(\n        {\n            width: props.width,\n            height: props.height,\n            radius: props.radius,\n            size: props.borderSize,\n        },\n        { props },\n    )\n\n    return <div className={classes.root}>{props.children}</div>\n}\n","import { first, noop } from 'lodash-es'\nimport {\n    createContext,\n    type Dispatch,\n    memo,\n    type PropsWithChildren,\n    type SetStateAction,\n    useContext,\n    useMemo,\n    useState,\n    useEffect,\n} from 'react'\nimport {\n    type BindingProof,\n    EMPTY_LIST,\n    type SocialIdentity,\n    NextIDPlatform,\n    MaskMessages,\n    type NextIDPersonaBindings,\n} from '@masknet/shared-base'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { useChainContext } from '@masknet/web3-hooks-base'\nimport { PFP_TYPE, type SelectTokenInfo } from '../../types.js'\nimport { useLastRecognizedIdentity } from '@masknet/plugin-infra/content-script'\nimport { currentNextIDPlatform } from '@masknet/plugin-infra/content-script/context'\nimport { queryPersonaByProfile } from '@masknet/plugin-infra/dom/context'\nimport { useQuery } from '@tanstack/react-query'\nimport { NextIDProof } from '@masknet/web3-providers'\nimport { isValidAddress } from '@masknet/web3-shared-evm'\n\ninterface AvatarManagementContextOptions {\n    isLoading: boolean\n    binding?: NextIDPersonaBindings\n    targetAccount: string\n    setTargetAccount: (account: string) => void\n    // TODO: PFP_TYPE.background is unused\n    pfpType: PFP_TYPE\n    proof: BindingProof | undefined\n    setProof: Dispatch<SetStateAction<BindingProof | undefined>>\n    proofs: BindingProof[]\n    setProofs: Dispatch<SetStateAction<BindingProof[]>>\n    tokenInfo: Web3Helper.NonFungibleTokenAll | undefined\n    setTokenInfo: Dispatch<SetStateAction<Web3Helper.NonFungibleTokenAll | undefined>>\n    selectedTokenInfo: SelectTokenInfo | undefined\n    setSelectedTokenInfo: Dispatch<SetStateAction<SelectTokenInfo | undefined>>\n}\n\nconst AvatarManagementContext = createContext<AvatarManagementContextOptions>({\n    isLoading: false,\n    binding: undefined,\n    targetAccount: '',\n    setTargetAccount: noop,\n    pfpType: PFP_TYPE.PFP,\n    proof: undefined,\n    setProof: noop,\n    proofs: EMPTY_LIST,\n    setProofs: noop,\n    tokenInfo: undefined,\n    setTokenInfo: noop,\n    selectedTokenInfo: undefined,\n    setSelectedTokenInfo: noop,\n})\n\ninterface Props extends PropsWithChildren<{ socialIdentity?: SocialIdentity }> {}\n\nexport const AvatarManagementProvider = memo(({ children }: Props) => {\n    const identity = useLastRecognizedIdentity()\n\n    const [proof, setProof] = useState<BindingProof>()\n    const [proofs, setProofs] = useState<BindingProof[]>(EMPTY_LIST)\n    const [tokenInfo, setTokenInfo] = useState<Web3Helper.NonFungibleTokenAll>()\n    const { account } = useChainContext()\n    const [selectedAccount, setSelectedAccount] = useState('')\n    const [selectedTokenInfo, setSelectedTokenInfo] = useState<SelectTokenInfo>()\n\n    const { data, isLoading, refetch } = useQuery({\n        queryKey: ['nft-avatar-state', identity],\n        enabled: !!identity,\n        queryFn: async () => {\n            if (!identity?.identifier || !currentNextIDPlatform) return\n            const bindings = await NextIDProof.queryAllExistedBindingsByPlatform(\n                currentNextIDPlatform,\n                identity.identifier.userId.toLowerCase(),\n            )\n            const linkedPersona = await queryPersonaByProfile(identity.identifier)\n            const personaBindings = bindings.filter(\n                (x) => x.persona === linkedPersona?.identifier.publicKeyAsHex.toLowerCase(),\n            )\n            const binding = first(personaBindings)\n            return {\n                ...identity,\n                publicKey: linkedPersona?.identifier.publicKeyAsHex,\n                hasBinding: personaBindings.length > 0,\n                binding,\n                nextIdWallets: binding?.proofs.filter(\n                    (x) => x.platform === NextIDPlatform.Ethereum && isValidAddress(x.identity),\n                ),\n                nextIdPersonas: binding?.proofs.filter(\n                    (x) => x.identity.toLowerCase() === identity.identifier?.userId.toLowerCase(),\n                ),\n            }\n        },\n    })\n\n    useEffect(() => MaskMessages.events.ownProofChanged.on(() => refetch()), [refetch])\n\n    const contextValue: AvatarManagementContextOptions = useMemo(() => {\n        return {\n            binding: data?.binding,\n            isLoading,\n            pfpType: PFP_TYPE.PFP,\n            targetAccount: selectedAccount || account || first(data?.nextIdWallets)?.identity || '',\n            setTargetAccount: setSelectedAccount,\n            proof: proof ?? first(data?.nextIdPersonas),\n            setProof,\n            proofs: proofs.length ? proofs : data?.nextIdWallets ?? EMPTY_LIST,\n            setProofs,\n            tokenInfo,\n            setTokenInfo,\n            selectedTokenInfo,\n            setSelectedTokenInfo,\n        }\n    }, [selectedAccount, proof, proofs, tokenInfo, selectedTokenInfo, data, account, isLoading])\n\n    return <AvatarManagementContext.Provider value={contextValue}>{children}</AvatarManagementContext.Provider>\n})\n\nAvatarManagementProvider.displayName = 'AvatarManagementProvider'\n\nexport function useAvatarManagement() {\n    return useContext(AvatarManagementContext)\n}\n","import { compact, uniqBy } from 'lodash-es'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useUpdateEffect } from 'react-use'\nimport { useNavigate } from 'react-router-dom'\nimport { Icons } from '@masknet/icons'\nimport { openPopupWindow } from '@masknet/plugin-infra/dom/context'\nimport {\n    AddCollectiblesModal,\n    ChainBoundary,\n    CollectionList,\n    PluginVerifiedWalletStatusBar,\n    PopupHomeTabType,\n    UserAssetsProvider,\n    useSharedTrans,\n} from '@masknet/shared'\nimport { NetworkPluginID, PopupRoutes } from '@masknet/shared-base'\nimport { makeStyles, useCustomSnackbar } from '@masknet/theme'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport {\n    useAccount,\n    useChainContext,\n    useNetworkContext,\n    useWallets,\n    useWeb3Connection,\n    useWeb3Hub,\n} from '@masknet/web3-hooks-base'\nimport { isGreaterThan, isSameAddress } from '@masknet/web3-shared-base'\nimport { type ChainId } from '@masknet/web3-shared-evm'\nimport { Box, Button, DialogActions, DialogContent, Stack, Typography } from '@mui/material'\nimport { Telemetry } from '@masknet/web3-telemetry'\nimport { EventID, EventType } from '@masknet/web3-telemetry/types'\nimport { supportPluginIds } from '../constants.js'\nimport { useAvatarManagement } from '../contexts/index.js'\nimport { useAvatarTrans } from '../locales/index.js'\nimport { type AllChainsNonFungibleToken, PFP_TYPE } from '../types.js'\nimport { toPNG } from '../utils/index.js'\nimport { RoutePaths } from './Routes.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    actions: {\n        backgroundColor: theme.palette.maskColor.bottom,\n        position: 'absolute',\n        zIndex: 3,\n        left: 0,\n        bottom: 0,\n        width: '100%',\n        padding: 0,\n        display: 'block',\n        margin: 0,\n        '&>:not(:first-of-type)': {\n            margin: 0,\n        },\n    },\n    content: {\n        padding: 0,\n        backgroundColor: theme.palette.maskColor.bottom,\n        '::-webkit-scrollbar': {\n            display: 'none',\n        },\n        overflow: 'hidden',\n        display: 'flex',\n    },\n    addButton: {\n        cursor: 'pointer',\n        fontWeight: 700,\n        fontSize: 14,\n        lineHeight: '18px',\n        color: theme.palette.maskColor.primary,\n    },\n    noWallet: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n        flex: 1,\n    },\n}))\n\nconst gridProps = {\n    columns: 'repeat(auto-fill, minmax(20%, 1fr))',\n}\nexport function NFTListDialog() {\n    const t = useAvatarTrans()\n    const sharedI18N = useSharedTrans()\n    const { classes } = useStyles()\n    const { pfpType, proofs, tokenInfo, targetAccount, setTargetAccount, setSelectedTokenInfo, proof } =\n        useAvatarManagement()\n\n    const navigate = useNavigate()\n\n    const { pluginID } = useNetworkContext()\n    const originAccount = useAccount()\n    const { account, chainId, setChainId, setAccount } = useChainContext()\n    const [assetChainId, setAssetChainId] = useState<ChainId>()\n    const wallets = useWallets()\n    const [selectedPluginId, setSelectedPluginId] = useState(pluginID ?? NetworkPluginID.PLUGIN_EVM)\n    const [selectedToken, setSelectedToken] = useState<Web3Helper.NonFungibleTokenAll | undefined>(tokenInfo)\n    const [disabled, setDisabled] = useState(false)\n    const [pendingTokenCount, setPendingTokenCount] = useState(0)\n    const [tokens, setTokens] = useState<AllChainsNonFungibleToken[]>([])\n    const targetWallet = wallets.find((x) => isSameAddress(targetAccount, x.address))\n\n    useEffect(() => setSelectedToken(undefined), [chainId])\n\n    const { showSnackbar } = useCustomSnackbar()\n    const onChangeWallet = (address: string, pluginID: NetworkPluginID, chainId: Web3Helper.ChainIdAll) => {\n        setAccount(address)\n        setTargetAccount(address)\n        setSelectedPluginId(pluginID)\n        setChainId(chainId as ChainId)\n        setSelectedToken(undefined)\n    }\n\n    const onSave = useCallback(async () => {\n        if (!selectedToken?.metadata?.imageURL) return\n        setDisabled(true)\n        Telemetry.captureEvent(EventType.Access, EventID.EntryAppNFT_PFP_Setting)\n        try {\n            const image = await toPNG(selectedToken.metadata.imageURL)\n            if (!image) {\n                showSnackbar(t.download_image_error(), { variant: 'error' })\n                return\n            }\n            setSelectedTokenInfo({\n                image: URL.createObjectURL(image),\n                account: targetAccount,\n                token: selectedToken,\n                pluginID: selectedPluginId,\n            })\n            navigate(RoutePaths.Upload)\n        } catch (error) {\n            showSnackbar(String(error), { variant: 'error' })\n            return\n        } finally {\n            setDisabled(false)\n        }\n    }, [selectedToken, targetAccount, selectedPluginId, navigate, proof, proofs])\n\n    const Web3 = useWeb3Connection(pluginID)\n    const Hub = useWeb3Hub(pluginID)\n    const handleAddCollectibles = useCallback(async () => {\n        const results = await AddCollectiblesModal.openAndWaitForClose({\n            pluginID,\n            chainId: assetChainId,\n            account: targetAccount,\n        })\n        if (!results || !assetChainId) return\n        const [contract, tokenIds] = results\n        const address = contract.address\n        setPendingTokenCount((count) => count + tokenIds.length)\n        const allSettled = await Promise.allSettled(\n            tokenIds.map(async (tokenId) => {\n                const [asset, token, isOwner] = await Promise.all([\n                    Hub.getNonFungibleAsset(address, tokenId, {\n                        chainId: assetChainId,\n                        account: targetAccount,\n                    }),\n                    Web3.getNonFungibleToken(address, tokenId, undefined, {\n                        chainId: assetChainId,\n                    }),\n                    Web3.getNonFungibleTokenOwnership(address, tokenId, targetAccount, undefined, {\n                        chainId: assetChainId,\n                    }),\n                ])\n\n                if (!asset?.contract?.chainId || !token.chainId || token.contract?.chainId !== assetChainId) return\n                if (!isOwner) return\n                return { ...token, ...asset } as AllChainsNonFungibleToken\n            }),\n        )\n        setPendingTokenCount((count) => Math.max(count - tokenIds.length, 0))\n        const tokens = compact(allSettled.map((x) => (x.status === 'fulfilled' ? x.value : null)))\n        if (!tokens.length) return\n        setTokens((originalTokens) => {\n            return uniqBy([...originalTokens, ...tokens], (x) => `${x.contract?.address}.${x.tokenId}`)\n        })\n    }, [pluginID, assetChainId, targetAccount])\n\n    useEffect(() => {\n        setSelectedPluginId(pluginID)\n    }, [pluginID])\n\n    const walletItems = proofs.sort((a, z) => {\n        return isGreaterThan(a.last_checked_at, z.last_checked_at) ? -1 : 1\n    })\n\n    useUpdateEffect(() => {\n        if (account) setTargetAccount(account)\n    }, [account])\n\n    useUpdateEffect(() => {\n        if (originAccount) setAccount(originAccount)\n    }, [originAccount])\n\n    return (\n        <>\n            <DialogContent className={classes.content}>\n                {account || proofs.length ? (\n                    <UserAssetsProvider pluginID={selectedPluginId} account={targetAccount}>\n                        <CollectionList\n                            height={479}\n                            gridProps={gridProps}\n                            disableWindowScroll\n                            selectedAsset={selectedToken}\n                            additionalAssets={tokens}\n                            pendingAdditionalAssetCount={pendingTokenCount}\n                            onItemClick={setSelectedToken}\n                            onChainChange={setAssetChainId as (chainId?: Web3Helper.ChainIdAll) => void}\n                        />\n                    </UserAssetsProvider>\n                ) : (\n                    <Box className={classes.noWallet} height={479}>\n                        <Icons.EmptySimple variant=\"light\" size={36} />\n                        <Typography fontSize={14} color={(theme) => theme.palette.maskColor.second} mt=\"12px\">\n                            {t.no_wallet_message()}\n                        </Typography>\n                    </Box>\n                )}\n            </DialogContent>\n\n            <DialogActions className={classes.actions} disableSpacing>\n                <Stack\n                    sx={{\n                        display: 'flex',\n                        flex: 1,\n                        flexDirection: 'row',\n                        alignItems: 'center',\n                        padding: '8px 16px',\n                        justifyContent: 'space-between',\n                    }}>\n                    {selectedPluginId === NetworkPluginID.PLUGIN_EVM ? (\n                        <Button\n                            variant=\"text\"\n                            size=\"small\"\n                            className={classes.addButton}\n                            disableRipple\n                            onClick={handleAddCollectibles}>\n                            {t.add_collectible()}\n                        </Button>\n                    ) : (\n                        <div />\n                    )}\n\n                    <Stack sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                        <Typography\n                            style={{ paddingRight: 4 }}\n                            variant=\"body1\"\n                            fontSize={14}\n                            color={(theme) => theme.palette.maskColor.second}\n                            fontWeight=\"bold\">\n                            {t.powered_by()}\n                        </Typography>\n                        <Typography\n                            style={{ paddingRight: 4 }}\n                            variant=\"body1\"\n                            fontSize={14}\n                            fontWeight=\"bold\"\n                            color={(theme) => theme.palette.maskColor.main}>\n                            Simplehash\n                        </Typography>\n                        <Icons.SimpleHash />\n                    </Stack>\n                </Stack>\n\n                <PluginVerifiedWalletStatusBar\n                    openPopupWindow={() =>\n                        openPopupWindow(PopupRoutes.Personas, {\n                            tab: PopupHomeTabType.ConnectedWallets,\n                        })\n                    }\n                    verifiedWallets={walletItems}\n                    onChange={onChangeWallet}\n                    expectedAddress={targetAccount}>\n                    <ChainBoundary\n                        expectedChainId={chainId}\n                        predicate={supportPluginIds.includes(selectedPluginId) ? () => true : undefined}\n                        expectedAccount={targetAccount}\n                        expectedPluginID={\n                            !supportPluginIds.includes(selectedPluginId) ? NetworkPluginID.PLUGIN_EVM : selectedPluginId\n                        }>\n                        <Button\n                            onClick={onSave}\n                            disabled={disabled || !selectedToken || !!targetWallet?.owner}\n                            fullWidth>\n                            {targetWallet?.owner\n                                ? sharedI18N.coming_soon()\n                                : t.set_up_title({ context: pfpType === PFP_TYPE.PFP ? 'pfp' : 'background' })}\n                        </Button>\n                    </ChainBoundary>\n                </PluginVerifiedWalletStatusBar>\n            </DialogActions>\n        </>\n    )\n}\n","import { Icons } from '@masknet/icons'\nimport { EnhanceableSite } from '@masknet/shared-base'\nimport { makeStyles } from '@masknet/theme'\nimport { Avatar, Box, Stack } from '@mui/material'\nimport { RainbowBox } from '../SiteAdaptor/RainbowBox.js'\n\nconst SOCIAL_MEDIA_ICON_MAPPING: Record<string, React.ReactNode> = {\n    [EnhanceableSite.Twitter]: <Icons.TwitterXRound size={14} />,\n    [EnhanceableSite.Localhost]: null,\n}\n\nconst useStyles = makeStyles()({\n    indicator: {\n        position: 'absolute',\n        top: 2,\n        right: 6,\n        width: 7,\n        height: 7,\n        backgroundColor: '#3DC233',\n        boxSizing: 'border-box',\n        border: '1px solid #fff',\n        borderRadius: '50%',\n    },\n})\n\ninterface NFTAvatarProps {\n    hasBorder: boolean\n    platform?: string\n    avatar?: string\n    owner?: boolean\n}\n\nexport function NFTAvatar(props: NFTAvatarProps) {\n    const { avatar, hasBorder, owner = false } = props\n    const { classes } = useStyles()\n\n    return (\n        <Stack position=\"relative\">\n            {hasBorder ? (\n                <RainbowBox>\n                    <Avatar src={avatar} />\n                </RainbowBox>\n            ) : (\n                <Box style={{ border: '2px solid transparent' }}>\n                    <Avatar src={avatar} />\n                </Box>\n            )}\n\n            <Stack\n                sx={{\n                    position: 'absolute',\n                    right: -3,\n                    bottom: 0,\n                    overflow: 'hidden',\n                    borderRadius: '100%',\n                    backgroundColor: 'white',\n                    padding: '1px',\n                }}>\n                {SOCIAL_MEDIA_ICON_MAPPING[EnhanceableSite.Twitter]}\n            </Stack>\n            {owner ? <div className={classes.indicator} /> : null}\n        </Stack>\n    )\n}\n","import { Box, Typography } from '@mui/material'\nimport { LoadingBase, makeStyles, ShadowRootTooltip } from '@masknet/theme'\nimport { useAvatarTrans } from '../locales/i18n_generated.js'\n\nconst useStyles = makeStyles()(() => ({\n    root: {},\n    tip: {\n        maxWidth: 'none',\n    },\n}))\ninterface NFTInfoProps {\n    isNFT: boolean\n    loading?: boolean\n    tooltip?: string\n}\n\nexport function NFTInfo(props: NFTInfoProps) {\n    const { isNFT = false, loading = false, tooltip } = props\n    const { classes } = useStyles()\n    const t = useAvatarTrans()\n\n    if (loading) return <LoadingBase size={24} />\n    const node = (\n        <Box className={classes.root}>\n            {isNFT ? (\n                <Typography variant=\"body1\" fontWeight={700} fontSize={12}>\n                    {t.nft_set_success()}\n                </Typography>\n            ) : (\n                <Typography fontWeight={700} fontSize={12}>\n                    {t.set_nft()}\n                </Typography>\n            )}\n        </Box>\n    )\n    if (!tooltip) return node\n\n    return (\n        <ShadowRootTooltip\n            arrow\n            classes={{ tooltip: classes.tip }}\n            placement=\"top\"\n            title={\n                <Typography style={{ whiteSpace: 'nowrap' }} fontSize={12}>\n                    {tooltip}\n                </Typography>\n            }>\n            {node}\n        </ShadowRootTooltip>\n    )\n}\n","import { memo, useCallback } from 'react'\nimport { makeStyles } from '@masknet/theme'\nimport { Box, Typography, ListItemButton } from '@mui/material'\nimport type { BindingProof } from '@masknet/shared-base'\nimport { ChainId, SchemaType } from '@masknet/web3-shared-evm'\nimport { TokenType } from '@masknet/web3-shared-base'\nimport { Twitter } from '@masknet/web3-providers'\nimport { Icons } from '@masknet/icons'\nimport { NFTAvatar } from './NFTAvatar.js'\nimport { NFTInfo } from './NFTInfo.js'\nimport { RSS3_KEY_SITE } from '../constants.js'\nimport { usePersonaNFTAvatar } from '../hooks/usePersonaNFTAvatar.js'\nimport type { AllChainsNonFungibleToken } from '../types.js'\nimport { useAvatarTrans } from '../locales/index.js'\n\nconst useStyles = makeStyles()((theme) => ({\n    root: {\n        margin: theme.spacing(2, 0.5),\n        border: `1px solid ${theme.palette.divider}`,\n        borderRadius: 16,\n        padding: 16,\n        display: 'flex',\n        alignItems: 'center',\n        cursor: 'pointer',\n        '&.Mui-disabled': {\n            pointerEvents: 'auto',\n        },\n    },\n    userInfo: {\n        marginLeft: 16,\n        flex: 1,\n    },\n}))\n\ninterface PersonaItemProps {\n    owner?: boolean\n    avatar: string\n    userId: string\n    nickname?: string\n    proof?: BindingProof\n    persona?: string\n    onSelect?: (proof: BindingProof, tokenInfo?: AllChainsNonFungibleToken) => void\n}\n\nexport const PersonaItem = memo(function PersonaItem(props: PersonaItemProps) {\n    const { userId, onSelect, owner = false, proof, avatar, nickname = '', persona = '' } = props\n    const t = useAvatarTrans()\n    const { classes } = useStyles()\n\n    const { value: nftAvatar, loading } = usePersonaNFTAvatar(\n        userId,\n        Twitter.getAvatarId(avatar) ?? '',\n        persona,\n        RSS3_KEY_SITE.TWITTER,\n    )\n\n    const handleSelect = useCallback(() => {\n        if (!proof || !onSelect) return\n        if (!nftAvatar) return onSelect(proof)\n        const tokenDetailed: AllChainsNonFungibleToken = {\n            tokenId: nftAvatar.tokenId,\n            contract: {\n                chainId: nftAvatar.chainId ?? ChainId.Mainnet,\n                name: '',\n                symbol: '',\n                address: nftAvatar.address,\n                schema: SchemaType.ERC721,\n                owner: '',\n            },\n            metadata: {\n                chainId: nftAvatar.chainId ?? ChainId.Mainnet,\n                name: '',\n                symbol: '',\n            },\n            id: nftAvatar.address,\n            chainId: nftAvatar.chainId ?? ChainId.Mainnet,\n            type: TokenType.NonFungible,\n            schema: SchemaType.ERC721,\n            address: nftAvatar.address,\n        }\n        onSelect(proof, tokenDetailed)\n    }, [nftAvatar, proof, onSelect])\n\n    const inactive = !owner || !proof\n\n    return (\n        <ListItemButton className={classes.root} onClick={handleSelect} disabled={inactive}>\n            <NFTAvatar\n                owner={owner}\n                avatar={avatar || nftAvatar?.imageUrl}\n                hasBorder={!!nftAvatar}\n                platform={proof?.platform}\n            />\n            <Box className={classes.userInfo}>\n                <Typography variant=\"body1\" color=\"textPrimary\" fontSize={14} fontWeight={700}>\n                    {nickname || nftAvatar?.nickname}\n                </Typography>\n                <Typography variant=\"body1\" color=\"textSecondary\" fontSize={12}>\n                    @{userId}\n                </Typography>\n            </Box>\n\n            <NFTInfo loading={loading} tooltip={inactive ? t.inactive_persona_tooltip() : ''} isNFT={!!nftAvatar} />\n\n            <Icons.RightArrow sx={{ color: (theme) => theme.palette.maskColor.borderSecondary, marginLeft: '8px' }} />\n        </ListItemButton>\n    )\n})\n","import { uniqBy } from 'lodash-es'\nimport { useCallback, useMemo, useState } from 'react'\nimport { useAsyncRetry } from 'react-use'\nimport { useNavigate } from 'react-router-dom'\nimport { useSubscription } from 'use-subscription'\nimport { type BindingProof, EMPTY_LIST, NextIDPlatform } from '@masknet/shared-base'\nimport { LoadingBase } from '@masknet/theme'\nimport { DialogActions, DialogContent, Stack } from '@mui/material'\nimport { useAvatarTrans } from '../locales/index.js'\nimport { PersonaItem } from './PersonaItem.js'\nimport type { AllChainsNonFungibleToken } from '../types.js'\nimport { Alert, PersonaAction, usePersonasFromNextID } from '@masknet/shared'\nimport { isValidAddress } from '@masknet/web3-shared-evm'\nimport { useAllPersonas, useLastRecognizedIdentity } from '@masknet/plugin-infra/content-script'\nimport { currentPersona, queryPersonaAvatar } from '@masknet/plugin-infra/dom/context'\nimport { RoutePaths } from './Routes.js'\nimport { useAvatarManagement } from '../contexts/index.js'\n\nexport function PersonaPage() {\n    const t = useAvatarTrans()\n    const [visible, setVisible] = useState(true)\n    const dismissAlert = useCallback(() => setVisible(false), [])\n    const navigate = useNavigate()\n    const { setProofs, setTokenInfo, setProof, isLoading, binding } = useAvatarManagement()\n\n    const socialIdentity = useLastRecognizedIdentity()\n\n    const network = socialIdentity?.identifier?.network.replace('.com', '')\n    const userId = socialIdentity?.identifier?.userId\n\n    const myPersonas = useAllPersonas()\n    const currentPersonaIdentifier = useSubscription(currentPersona)\n    const currentPersonaInfo = myPersonas?.find(\n        (x) => x.identifier.rawPublicKey.toLowerCase() === currentPersonaIdentifier?.rawPublicKey.toLowerCase(),\n    )\n\n    const { data: bindingPersonas = EMPTY_LIST } = usePersonasFromNextID(\n        currentPersonaIdentifier?.publicKeyAsHex ?? '',\n        NextIDPlatform.NextID,\n        false,\n    )\n\n    const bindingProofs = useMemo(\n        () =>\n            uniqBy(\n                bindingPersonas.map((x) => x.proofs.filter((y) => y.is_valid && y.platform === network)).flat(),\n                'identity',\n            ),\n        [bindingPersonas, network],\n    )\n    const handleSelect = useCallback(\n        (proof: BindingProof, tokenInfo?: AllChainsNonFungibleToken) => {\n            const proofs = binding?.proofs.filter(\n                (x) => x.platform === NextIDPlatform.Ethereum && isValidAddress(x.identity),\n            )\n            setProofs(proofs ?? EMPTY_LIST)\n            setTokenInfo(tokenInfo)\n            setProof(proof)\n            navigate(RoutePaths.NFTPicker)\n        },\n        [navigate],\n    )\n    const { value: avatar } = useAsyncRetry(\n        async () => queryPersonaAvatar(currentPersonaIdentifier),\n        [currentPersonaIdentifier],\n    )\n\n    return (\n        <>\n            <DialogContent sx={{ flex: 1, height: 464, padding: 2 }}>\n                {isLoading ? (\n                    <Stack justifyContent=\"center\" alignItems=\"center\" height=\"100%\">\n                        <LoadingBase />\n                    </Stack>\n                ) : (\n                    <>\n                        <Alert open={visible} onClose={dismissAlert}>\n                            {t.persona_hint()}\n                        </Alert>\n                        {bindingProofs\n                            .filter((x) => x.identity.toLowerCase() === userId?.toLowerCase())\n                            .map((x, i) => (\n                                <PersonaItem\n                                    persona={binding?.persona}\n                                    key={`avatar${i}`}\n                                    avatar={socialIdentity!.avatar ?? ''}\n                                    owner\n                                    nickname={socialIdentity!.nickname}\n                                    proof={x}\n                                    userId={userId ?? x.identity}\n                                    onSelect={handleSelect}\n                                />\n                            ))}\n\n                        {myPersonas[0].linkedProfiles\n                            .filter((x) => x.identifier.network === network)\n                            .map((x, i) =>\n                                binding?.proofs.some(\n                                    (y) => y.identity.toLowerCase() === x.identifier.userId.toLowerCase(),\n                                ) ? null : (\n                                    <PersonaItem avatar=\"\" key={`persona${i}`} userId={x.identifier.userId} />\n                                ),\n                            )}\n                        {bindingProofs\n                            .filter((x) => x.identity.toLowerCase() !== userId?.toLowerCase())\n                            .map((x, i) => (\n                                <PersonaItem\n                                    key={i}\n                                    persona={binding?.persona}\n                                    avatar=\"\"\n                                    userId={x.identity}\n                                    proof={x}\n                                />\n                            ))}\n                    </>\n                )}\n            </DialogContent>\n            <DialogActions style={{ padding: 0, margin: 0 }}>\n                <PersonaAction\n                    avatar={avatar === null ? undefined : avatar}\n                    currentPersona={currentPersonaInfo}\n                    currentVisitingProfile={socialIdentity}\n                />\n            </DialogActions>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport type { PersonaInformation } from '@masknet/shared-base'\nimport { useAllPersonas, useLastRecognizedIdentity } from '@masknet/plugin-infra/content-script'\nimport { connectPersona } from '@masknet/plugin-infra/content-script/context'\nimport { createPersona } from '@masknet/plugin-infra/dom/context'\n\nexport function usePersonaConnectStatus(): {\n    action?: () => void\n    connected: boolean\n    hasPersona: boolean\n    currentPersona?: PersonaInformation\n} {\n    const personas = useAllPersonas()\n    const lastRecognized = useLastRecognizedIdentity()\n\n    return useMemo(() => {\n        const id = lastRecognized?.identifier\n        const currentPersona = personas.find((x) => id && x.linkedProfiles.some((x) => x.identifier === id))\n        return {\n            /** @deprecated */\n            action: !personas.length ? createPersona : !currentPersona ? connectPersona : undefined,\n            currentPersona,\n            connected: !!currentPersona,\n            hasPersona: !!personas.length,\n        }\n    }, [personas, lastRecognized?.identifier?.toText()])\n}\n","import { useCallback } from 'react'\nimport { type BindingProof, type ECKeyIdentifier, NetworkPluginID, getEnhanceableSiteType } from '@masknet/shared-base'\nimport { Web3Storage } from '@masknet/web3-providers'\nimport { useSaveAddress } from './useSaveAddress.js'\nimport type { NextIDAvatarMeta } from '../../types.js'\nimport { PLUGIN_ID } from '../../constants.js'\nimport { signWithPersona } from '@masknet/plugin-infra/dom/context'\n\nexport function useSaveToNextID() {\n    const saveAddress = useSaveAddress()\n    return useCallback(\n        async (info: NextIDAvatarMeta, account: string, persona?: ECKeyIdentifier, proof?: BindingProof) => {\n            if (!proof?.identity || !persona) return\n\n            const siteType = getEnhanceableSiteType()\n            if (!siteType) return\n\n            const storage = Web3Storage.createNextIDStorage(proof.identity, proof.platform, persona, signWithPersona)\n            await storage.set(PLUGIN_ID, info)\n\n            saveAddress(info.userId, info.pluginId ?? NetworkPluginID.PLUGIN_EVM, account, siteType)\n\n            return info\n        },\n        [saveAddress],\n    )\n}\n","import { useCallback } from 'react'\nimport { Web3Storage } from '@masknet/web3-providers'\nimport { NetworkPluginID, type EnhanceableSite } from '@masknet/shared-base'\nimport { useSaveAddress } from './useSaveAddress.js'\nimport type { NextIDAvatarMeta, AvatarMeta } from '../../types.js'\nimport { NFT_AVATAR_METADATA_STORAGE } from '../../constants.js'\n\nexport function useSaveAvatar(pluginID?: NetworkPluginID) {\n    const saveAddress = useSaveAddress(pluginID)\n\n    return useCallback(\n        async (account: string, network: EnhanceableSite, avatar: NextIDAvatarMeta, sign: string) => {\n            if (avatar.userId === '$unknown') return\n            await saveAddress(avatar.userId, avatar.pluginId ?? NetworkPluginID.PLUGIN_EVM, account, network)\n            const avatarStorage = Web3Storage.createKVStorage(`${NFT_AVATAR_METADATA_STORAGE}_${network}`)\n            avatarStorage?.set<AvatarMeta>(avatar.userId, {\n                ...avatar,\n                sign,\n            })\n\n            return avatar\n        },\n        [saveAddress],\n    )\n}\n","import { useCallback } from 'react'\nimport { useWeb3Connection } from '@masknet/web3-hooks-base'\nimport {\n    type BindingProof,\n    type ECKeyIdentifier,\n    type NetworkPluginID,\n    getEnhanceableSiteType,\n} from '@masknet/shared-base'\nimport type { NextIDAvatarMeta } from '../../types.js'\nimport { useSaveAvatar } from './useSaveAvatar.js'\n\nexport function useSaveKV(pluginID: NetworkPluginID) {\n    const Web3 = useWeb3Connection(pluginID)\n    const saveAvatar = useSaveAvatar(pluginID)\n\n    return useCallback(\n        async (info: NextIDAvatarMeta, account: string, persona: ECKeyIdentifier, proof: BindingProof) => {\n            const siteType = getEnhanceableSiteType()\n            if (!siteType) return\n\n            const sign = await Web3.signMessage('message', JSON.stringify(info), {\n                account,\n            })\n\n            return saveAvatar(account, siteType, info, sign)\n        },\n        [Web3, saveAvatar],\n    )\n}\n","import { useAsyncFn } from 'react-use'\nimport { NetworkPluginID, type BindingProof, type ECKeyIdentifier } from '@masknet/shared-base'\nimport type { TwitterBaseAPI } from '@masknet/web3-providers/types'\nimport { ChainId, SchemaType } from '@masknet/web3-shared-evm'\nimport type { AllChainsNonFungibleToken, NextIDAvatarMeta } from '../../types.js'\nimport { useSaveToNextID } from './useSaveToNextID.js'\nimport { useSaveKV, useSaveStringStorage } from '../index.js'\n\nexport type AvatarInfo = TwitterBaseAPI.AvatarInfo & {\n    avatarId: string\n}\n\nexport function useSave(pluginID: NetworkPluginID) {\n    const saveToNextID = useSaveToNextID()\n    const saveToStringStorage = useSaveStringStorage(pluginID)\n    const saveToKV = useSaveKV(pluginID)\n\n    return useAsyncFn(\n        async (\n            account: string,\n            isBindAccount: boolean,\n            token: AllChainsNonFungibleToken,\n            data: AvatarInfo,\n            persona: ECKeyIdentifier,\n            proof?: BindingProof,\n        ) => {\n            if (!token.contract?.address) return\n            const info: NextIDAvatarMeta = {\n                pluginId: pluginID,\n                nickname: data.nickname,\n                userId: data.userId,\n                imageUrl: data.imageUrl,\n                avatarId: data.avatarId,\n                address: token.contract?.address ?? '',\n                ownerAddress: account,\n                tokenId: token.tokenId || token.id,\n                chainId: (token.contract?.chainId ?? ChainId.Mainnet) as ChainId,\n                schema: (token.contract?.schema ?? SchemaType.ERC721) as SchemaType,\n            }\n\n            try {\n                switch (pluginID) {\n                    case NetworkPluginID.PLUGIN_EVM: {\n                        if (isBindAccount) {\n                            return await saveToNextID(info, account, persona, proof)\n                        }\n                        return await saveToStringStorage(data.userId, account, info)\n                    }\n                    default:\n                        if (!proof) return\n                        return await saveToKV(info, account, persona, proof)\n                }\n            } catch {\n                return\n            }\n        },\n        [saveToNextID, saveToStringStorage, pluginID, saveToKV],\n    )\n}\n","import { delay } from '@masknet/kit'\nimport { useCallback, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport AvatarEditor from 'react-avatar-editor'\nimport { useSubscription } from 'use-subscription'\nimport { Button, DialogActions, DialogContent, Slider } from '@mui/material'\nimport { makeStyles, useCustomSnackbar } from '@masknet/theme'\nimport { Twitter } from '@masknet/web3-providers'\nimport { usePersonaConnectStatus } from '@masknet/shared'\nimport { isSameAddress } from '@masknet/web3-shared-base'\nimport { useNetworkContext } from '@masknet/web3-hooks-base'\nimport { currentVisitingProfile } from '@masknet/plugin-infra/content-script/context'\nimport { useAvatarTrans } from '../locales/i18n_generated.js'\nimport { type AvatarInfo, useSave } from '../hooks/save/useSave.js'\nimport { useAvatarManagement } from '../contexts/index.js'\nimport { RoutePaths } from './Routes.js'\nimport { useLastRecognizedIdentity } from '@masknet/plugin-infra/content-script'\n\nconst useStyles = makeStyles()((theme) => ({\n    actions: {\n        padding: 16,\n        boxSizing: 'border-box',\n        boxShadow: '0px 0px 20px rgba(0, 0, 0, 0.05)',\n        position: 'absolute',\n        bottom: 0,\n        width: '100%',\n    },\n    cancel: {\n        '&:hover': {\n            border: 'none',\n            background: theme.palette.maskColor.bottom,\n        },\n    },\n    content: {\n        margin: 0,\n        padding: 16,\n        '::-webkit-scrollbar': {\n            display: 'none',\n        },\n        textAlign: 'center',\n    },\n}))\n\nasync function uploadAvatar(blob: Blob, userId: string): Promise<AvatarInfo | undefined> {\n    try {\n        const media = await Twitter.uploadMedia(blob)\n        const data = await Twitter.updateProfileImage(userId, media.media_id_string)\n        if (!data) {\n            return\n        }\n        const avatarId = Twitter.getAvatarId(data?.imageUrl ?? '')\n        return { ...data, avatarId }\n    } catch (err) {\n        return\n    }\n}\n\nexport function UploadAvatarDialog() {\n    const t = useAvatarTrans()\n    const { classes } = useStyles()\n    const { proof, proofs, selectedTokenInfo } = useAvatarManagement()\n    const { image, account, token, pluginID } = selectedTokenInfo ?? {}\n    const isBindAccount = proofs.some((x) => isSameAddress(x.identity, selectedTokenInfo?.account))\n    const { pluginID: currentPluginID } = useNetworkContext(pluginID)\n    const identifier = useSubscription(currentVisitingProfile)\n    const [editor, setEditor] = useState<AvatarEditor | null>(null)\n    const [scale, setScale] = useState(1)\n    const { showSnackbar } = useCustomSnackbar()\n    const [disabled, setDisabled] = useState(false)\n    const { currentPersona } = usePersonaConnectStatus()\n    const identity = useLastRecognizedIdentity()\n    const [, saveAvatar] = useSave(currentPluginID)\n    const navigate = useNavigate()\n\n    const onSave = useCallback(async () => {\n        if (!editor || !account || !token || !currentPersona?.identifier) return\n        editor.getImageScaledToCanvas().toBlob(async (blob) => {\n            if (!blob || !identity?.identifier?.userId) return\n            setDisabled(true)\n            const avatarData = await uploadAvatar(blob, identity.identifier.userId)\n            if (!avatarData) {\n                setDisabled(false)\n                return\n            }\n            const response = await saveAvatar(\n                account,\n                isBindAccount,\n                token,\n                avatarData,\n                currentPersona.identifier,\n                proof,\n            )\n            if (!response) {\n                showSnackbar(t.upload_avatar_failed_message(), { variant: 'error' })\n                setDisabled(false)\n                return\n            }\n\n            showSnackbar(t.upload_avatar_success_message(), { variant: 'success' })\n\n            navigate(RoutePaths.Exit)\n            setDisabled(false)\n            await delay(500)\n            location.reload()\n        }, 'image/png')\n    }, [account, editor, identifier, navigate, currentPersona, proof, isBindAccount, saveAvatar, identity])\n\n    if (!account || !image || !token) return null\n\n    return (\n        <>\n            <DialogContent className={classes.content}>\n                <AvatarEditor\n                    ref={(e) => setEditor(e)}\n                    image={image}\n                    style={{ width: 'auto', height: 400, borderRadius: 8 }}\n                    scale={scale}\n                    rotate={0}\n                    border={50}\n                    borderRadius={300}\n                />\n                <Slider\n                    disabled={disabled}\n                    max={2}\n                    min={0.5}\n                    step={0.1}\n                    defaultValue={1}\n                    onChange={(_, value) => setScale(value as number)}\n                    aria-label=\"Scale\"\n                    sx={{\n                        color: (theme) => theme.palette.maskColor.primary,\n                        '& .MuiSlider-thumb': {\n                            width: 12,\n                            height: 12,\n                            backgroundColor: (theme) => theme.palette.maskColor.primary,\n                        },\n                        '& .MuiSlider-rail': {\n                            opacity: 0.5,\n                            backgroundColor: (theme) => theme.palette.maskColor.thirdMain,\n                        },\n                    }}\n                />\n            </DialogContent>\n            <DialogActions className={classes.actions}>\n                <Button\n                    disabled={disabled}\n                    className={classes.cancel}\n                    fullWidth\n                    variant=\"outlined\"\n                    onClick={() => navigate(-1)}>\n                    {t.cancel()}\n                </Button>\n                <Button fullWidth onClick={onSave} disabled={disabled}>\n                    {t.save()}\n                </Button>\n            </DialogActions>\n        </>\n    )\n}\n","import { Navigate, Route, Routes } from 'react-router-dom'\nimport { NFTListDialog } from './NFTListDialog.js'\nimport { PersonaPage } from './PersonaPage.js'\nimport { UploadAvatarDialog } from './UploadAvatarDialog.js'\n\nexport enum RoutePaths {\n    Personas = '/personas',\n    NFTPicker = '/picker',\n    Upload = '/upload',\n    Exit = '/exit',\n}\n\nexport function AvatarRoutes() {\n    return (\n        <Routes>\n            <Route path={RoutePaths.Personas} element={<PersonaPage />} />\n            <Route path={RoutePaths.NFTPicker} element={<NFTListDialog />} />\n            <Route path={RoutePaths.Upload} element={<UploadAvatarDialog />} />\n            {/* If router is embedded inside a dialog, */}\n            {/* which should know it's time to close itself once we enter Exit */}\n            <Route path={RoutePaths.Exit} element={null} />\n            <Route path=\"*\" element={<Navigate replace to={RoutePaths.Personas} />} />\n        </Routes>\n    )\n}\n","import { InjectedDialog, type InjectedDialogProps } from '@masknet/shared'\nimport { useLayoutEffect } from 'react'\nimport { matchPath, useLocation, useNavigate } from 'react-router-dom'\nimport { useAvatarTrans } from '../locales/index.js'\nimport { RoutePaths } from './Routes.js'\n\nexport function RouterDialog(props: InjectedDialogProps) {\n    const t = useAvatarTrans()\n    const { pathname } = useLocation()\n    const navigate = useNavigate()\n\n    const title = matchPath(RoutePaths.Upload, pathname)\n        ? t.application_edit_profile_dialog_title()\n        : t.application_dialog_title()\n\n    const isOnBack = pathname !== RoutePaths.Personas\n\n    useLayoutEffect(() => {\n        if (pathname === RoutePaths.Exit) {\n            props.onClose?.()\n        }\n    }, [pathname === RoutePaths.Exit, props.onClose])\n\n    return (\n        <InjectedDialog\n            {...props}\n            title={title}\n            isOnBack={isOnBack}\n            onClose={() => {\n                if (!isOnBack) {\n                    props.onClose?.()\n                    return\n                }\n                navigate(-1)\n            }}\n        />\n    )\n}\n","import { useMemo } from 'react'\nimport { DialogContent } from '@mui/material'\nimport { makeStyles } from '@masknet/theme'\nimport { MemoryRouter } from 'react-router-dom'\nimport { AvatarRoutes, RoutePaths } from './Routes.js'\nimport { AvatarManagementProvider } from '../contexts/index.js'\nimport { RouterDialog } from './RouterDialog.js'\nimport type { InjectedDialogProps } from '@masknet/shared'\n\nconst useStyles = makeStyles()({\n    root: {\n        margin: 0,\n        minHeight: 564,\n        padding: '0px !important',\n        '::-webkit-scrollbar': {\n            display: 'none',\n        },\n    },\n})\n\ninterface NFTAvatarDialogProps extends InjectedDialogProps {\n    startPicking?: boolean\n}\n\nexport function NFTAvatarDialog({ startPicking, ...rest }: NFTAvatarDialogProps) {\n    const { classes } = useStyles()\n\n    const initialEntries = useMemo(() => {\n        return [RoutePaths.Exit, startPicking ? RoutePaths.NFTPicker : RoutePaths.Personas]\n    }, [!startPicking])\n    return (\n        <MemoryRouter initialEntries={initialEntries} initialIndex={1}>\n            <AvatarManagementProvider>\n                <RouterDialog {...rest}>\n                    <DialogContent className={classes.root}>\n                        <AvatarRoutes />\n                    </DialogContent>\n                </RouterDialog>\n            </AvatarManagementProvider>\n        </MemoryRouter>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { Trans } from 'react-i18next'\nimport { Icons } from '@masknet/icons'\nimport { type Plugin, PluginTransFieldRender } from '@masknet/plugin-infra/content-script'\nimport { ApplicationEntry } from '@masknet/shared'\nimport { CrossIsolationMessages } from '@masknet/shared-base'\nimport { useChainContext, useNetworkContext, Web3ContextProvider } from '@masknet/web3-hooks-base'\nimport { EventType, EventID } from '@masknet/web3-telemetry/types'\nimport { Telemetry } from '@masknet/web3-telemetry'\nimport { NFTAvatarDialog } from '../Application/NFTAvatarDialog.js'\nimport { base } from '../base.js'\n\nfunction clickHandler() {\n    CrossIsolationMessages.events.avatarSettingDialogEvent.sendToLocal({\n        open: true,\n    })\n}\nconst site: Plugin.SiteAdaptor.Definition = {\n    ...base,\n    GlobalInjection() {\n        const { pluginID } = useNetworkContext()\n        const { chainId } = useChainContext()\n        const [picking, setPicking] = useState<boolean>()\n        const [open, setOpen] = useState(false)\n        useEffect(() => {\n            return CrossIsolationMessages.events.avatarSettingDialogEvent.on(({ open, startPicking }) => {\n                setOpen(open)\n                setPicking(startPicking)\n            })\n        }, [])\n        if (!open) return null\n\n        return (\n            <Web3ContextProvider value={{ pluginID, chainId }}>\n                <NFTAvatarDialog startPicking={!!picking} open={open} onClose={() => setOpen(false)} />\n            </Web3ContextProvider>\n        )\n    },\n    ApplicationEntries: [\n        (() => {\n            const name = { fallback: 'NFT PFP' }\n            const icon = <Icons.NFTAvatar size={36} />\n            const recommendFeature = {\n                description: <Trans i18nKey=\"plugin_nft_avatar_recommend_feature_description\" />,\n                backgroundGradient: 'linear-gradient(360deg, #FFECD2 -0.43%, #FCB69F 99.57%)',\n            }\n            return {\n                RenderEntryComponent(EntryComponentProps) {\n                    return (\n                        <ApplicationEntry\n                            title={<PluginTransFieldRender field={name} pluginID={base.ID} />}\n                            icon={icon}\n                            recommendFeature={recommendFeature}\n                            {...EntryComponentProps}\n                            onClick={() => {\n                                EntryComponentProps.onClick\n                                    ? EntryComponentProps.onClick?.(clickHandler)\n                                    : clickHandler()\n                                Telemetry.captureEvent(EventType.Access, EventID.EntryAppNFT_PFP_Open)\n                            }}\n                            tooltipHint={\n                                EntryComponentProps.tooltipHint ??\n                                (EntryComponentProps.disabled ? undefined : <Trans i18nKey=\"application_hint\" />)\n                            }\n                        />\n                    )\n                },\n                appBoardSortingDefaultPriority: 3,\n                name,\n                icon,\n                ApplicationEntryID: base.ID,\n                nextIdRequired: true,\n                recommendFeature,\n            }\n        })(),\n    ],\n}\n\nexport default site\n","import { useCallback } from 'react'\nimport { Web3Storage } from '@masknet/web3-providers'\nimport { type NetworkPluginID, EnhanceableSite } from '@masknet/shared-base'\nimport { NFT_AVATAR_DB_NAME } from '../../constants.js'\nimport type { AddressStorageV2 } from '../../types.js'\n\nexport function useSaveAddress(pluginID?: NetworkPluginID) {\n    return useCallback(\n        async (userId: string, pluginID: NetworkPluginID, account: string, network?: EnhanceableSite) => {\n            const addressStorage = Web3Storage.createKVStorage(\n                `${NFT_AVATAR_DB_NAME}_${network ?? EnhanceableSite.Twitter}`,\n            )\n            if (!addressStorage) return\n\n            const prevData = (await addressStorage.get<AddressStorageV2>(userId).catch(() => ({}))) as\n                | AddressStorageV2\n                | undefined\n\n            await addressStorage.set<AddressStorageV2>(userId, {\n                ...prevData,\n                [pluginID]: account,\n                [userId]: { address: account, networkPluginID: pluginID },\n            } as AddressStorageV2)\n        },\n        [],\n    )\n}\n","import { useCallback } from 'react'\nimport { Web3Storage } from '@masknet/web3-providers'\nimport { type NetworkPluginID, getEnhanceableSiteType, EnhanceableSite, getSiteType } from '@masknet/shared-base'\nimport { useSaveAddress } from '../index.js'\nimport type { NextIDAvatarMeta } from '../../types.js'\nimport { PLUGIN_NAME } from '../../constants.js'\n\nexport function useSaveStringStorage(pluginID: NetworkPluginID) {\n    const saveAddress = useSaveAddress()\n\n    return useCallback(\n        async (userId: string, address: string, nft: NextIDAvatarMeta) => {\n            const stringStorage = Web3Storage.createFireflyStorage(\n                `${PLUGIN_NAME}-${(getSiteType() || EnhanceableSite.Twitter).replace('.com', '')}`,\n                address,\n            )\n            try {\n                await stringStorage.set?.(userId, nft)\n                await saveAddress(nft.userId, pluginID, address, getEnhanceableSiteType())\n                return nft\n            } catch {\n                return\n            }\n        },\n        [Storage, saveAddress],\n    )\n}\n","import { useCallback } from 'react'\nimport { Web3Storage } from '@masknet/web3-providers'\nimport { type EnhanceableSite, NetworkPluginID } from '@masknet/shared-base'\nimport { NFT_AVATAR_DB_NAME } from '../constants.js'\nimport type { AddressStorageV1, AddressStorageV2 } from '../types.js'\n\nexport function useGetAddress() {\n    return useCallback(async (site: EnhanceableSite, userId: string) => {\n        if (userId === '$unknown') return\n\n        let storageV1, storageV2\n        try {\n            const storage = await Web3Storage.createKVStorage(`${NFT_AVATAR_DB_NAME}_${site}`).get(userId)\n            storageV1 = (storage ?? {}) as AddressStorageV1\n            storageV2 = (storage ?? {}) as AddressStorageV2\n        } catch {\n            storageV1 = {} as AddressStorageV1\n            storageV2 = {} as AddressStorageV2\n        }\n\n        if (storageV2[userId]) return storageV2[userId]\n        if (storageV2[NetworkPluginID.PLUGIN_EVM])\n            return {\n                address: storageV2[NetworkPluginID.PLUGIN_EVM],\n                networkPluginID: NetworkPluginID.PLUGIN_EVM,\n            }\n\n        // V1 only supports EVM\n        if (storageV1.address) return storageV1\n\n        return\n    }, [])\n}\n","import { useCallback } from 'react'\nimport { Web3Storage } from '@masknet/web3-providers'\nimport { StorageKey } from '../../constants.js'\nimport type { NextIDAvatarMeta } from '../../types.js'\n\nexport function useGetNFTAvatarFromStorage() {\n    return useCallback(\n        async (userId: string, address: string) => {\n            const stringStorage = Web3Storage.createFireflyStorage(StorageKey, address)\n            return stringStorage.get?.<NextIDAvatarMeta>(userId)\n        },\n        [Storage],\n    )\n}\n","import { useCallback } from 'react'\nimport { Web3Storage } from '@masknet/web3-providers'\nimport type { RSS3_KEY_SITE } from '../../constants.js'\nimport type { NFTRSSNode } from '../../types.js'\n\nexport function useGetNFTAvatarFromRSS3() {\n    return useCallback(async (userId: string, address: string, key: RSS3_KEY_SITE) => {\n        const rss3Storage = Web3Storage.createRSS3Storage(address)\n        const result = await rss3Storage.get<Record<string, NFTRSSNode>>(key)\n        if (result) return result[userId].nft\n\n        return (await rss3Storage.get<NFTRSSNode>('_nft'))?.nft\n    }, [])\n}\n","import { useCallback } from 'react'\nimport { Web3Storage } from '@masknet/web3-providers'\nimport { NetworkPluginID, type EnhanceableSite } from '@masknet/shared-base'\nimport { useGetAddress } from './useGetAddress.js'\nimport { useGetNFTAvatarFromStorage } from './storage/useGetNFTAvatarFromStorage.js'\nimport { NFT_AVATAR_METADATA_STORAGE, type RSS3_KEY_SITE } from '../constants.js'\nimport type { NextIDAvatarMeta } from '../types.js'\nimport { useGetNFTAvatarFromRSS3 } from './rss3/index.js'\n\nexport function useGetNFTAvatar() {\n    const getNFTAvatarFromRSS = useGetNFTAvatarFromRSS3()\n    const getNFTAvatarFromStorage = useGetNFTAvatarFromStorage()\n    const getAddress = useGetAddress()\n    return useCallback(\n        async (userId?: string, network?: EnhanceableSite, key?: RSS3_KEY_SITE) => {\n            if (!userId || !network || !key) return\n            const addressStorage = await getAddress(network, userId)\n            if (!addressStorage?.address) return\n            if (addressStorage?.networkPluginID && addressStorage.networkPluginID !== NetworkPluginID.PLUGIN_EVM) {\n                return Web3Storage.createKVStorage(`${NFT_AVATAR_METADATA_STORAGE}_${network}`).get<NextIDAvatarMeta>(\n                    userId,\n                )\n            }\n            const user = await getNFTAvatarFromStorage(userId, addressStorage.address)\n            if (user) return user\n            return getNFTAvatarFromRSS(userId, addressStorage.address, key)\n        },\n        [getNFTAvatarFromStorage, getAddress, Storage, getNFTAvatarFromRSS],\n    )\n}\n","import { LRUCache } from 'lru-cache'\nimport { useAsyncRetry } from 'react-use'\nimport {\n    type EnhanceableSite,\n    NetworkPluginID,\n    Sniffings,\n    getEnhanceableSiteType,\n    getSiteType,\n} from '@masknet/shared-base'\nimport { ChainId } from '@masknet/web3-shared-evm'\nimport { Twitter } from '@masknet/web3-providers'\nimport type { RSS3_KEY_SITE } from '../constants.js'\nimport type { AvatarMetaDB, NextIDAvatarMeta } from '../types.js'\nimport { useGetNFTAvatar } from './useGetNFTAvatar.js'\nimport { getNFTAvatarByUserId } from '../utils/index.js'\n\nconst cache = new LRUCache<string, NextIDAvatarMeta>({\n    max: 500,\n    ttl: 60 * 1000,\n})\n\ntype GetNFTAvatar = (\n    userId?: string,\n    network?: EnhanceableSite,\n    key?: RSS3_KEY_SITE,\n) => Promise<AvatarMetaDB | undefined>\n\nexport function usePersonaNFTAvatar(userId: string, avatarId: string, persona: string, siteKey: RSS3_KEY_SITE) {\n    const getNFTAvatar = useGetNFTAvatar()\n\n    return useAsyncRetry(async () => {\n        if (!userId) return\n        const key = `${userId}-${getSiteType()}`\n        if (!cache.has(key)) {\n            const nftAvatar = await getNFTAvatarForCache(userId, siteKey, avatarId, persona, getNFTAvatar)\n            if (nftAvatar) cache.set(key, nftAvatar)\n        }\n        return cache.get(key)\n    }, [userId, persona, siteKey, getNFTAvatar, avatarId])\n}\n\nasync function getNFTAvatarForCache(\n    userId: string,\n    key: RSS3_KEY_SITE,\n    avatarId: string,\n    persona: string,\n    fn: GetNFTAvatar,\n) {\n    const avatarMetaFromPersona = await getNFTAvatarByUserId(userId, avatarId, persona)\n    if (avatarMetaFromPersona) return avatarMetaFromPersona\n    const siteType = getEnhanceableSiteType()\n    if (!siteType) return\n    const avatarMeta = await fn(userId, siteType, key)\n    if (!avatarMeta) return\n    if (avatarId && avatarId !== avatarMeta.avatarId) return\n    if (avatarMeta.pluginId === NetworkPluginID.PLUGIN_SOLANA) {\n        return { imageUrl: '', nickname: '', ...avatarMeta, address: avatarMeta.tokenId }\n    }\n    return { imageUrl: '', nickname: '', pluginId: NetworkPluginID.PLUGIN_EVM, chainId: ChainId.Mainnet, ...avatarMeta }\n}\n\nexport function useCheckPersonaNFTAvatar(userId: string, avatarId: string, persona: string, siteKey: RSS3_KEY_SITE) {\n    const getNFTAvatar = useGetNFTAvatar()\n\n    return useAsyncRetry(async () => {\n        if (!userId) return\n        const key = `${userId}-${getSiteType()}`\n        if (!cache.has(key)) {\n            const nftAvatar = await getNFTAvatarForCache(userId, siteKey, avatarId, persona, getNFTAvatar)\n            if (nftAvatar) cache.set(key, nftAvatar)\n        }\n        const metaData = cache.get(key)\n        if (!metaData && Sniffings.is_twitter_page) {\n            const nft = await Twitter.getUserNftContainer(userId)\n            if (nft)\n                // is twitter blue\n                return {\n                    address: nft.address,\n                    tokenId: nft.token_id,\n                    userId,\n                    avatarId,\n                    pluginId: NetworkPluginID.PLUGIN_EVM,\n                    chainId: ChainId.Mainnet,\n                }\n        }\n        return metaData\n    }, [userId, persona, siteKey, getNFTAvatar, avatarId])\n}\n","// @ts-nocheck\n/* eslint-disable */\nimport { createElement, useMemo, type ComponentType } from \"react\";\nimport { useTranslation, Trans, type TransProps } from \"react-i18next\";\ntype TypedTransProps<Value, Components> = Omit<TransProps<string>, \"values\" | \"ns\" | \"i18nKey\"> & ({} extends Value ? {} : {\n    values: Value;\n}) & {\n    components: Components;\n};\nfunction createProxy(initValue: (key: string) => any) {\n    function define(key: string) {\n        const value = initValue(key);\n        Object.defineProperty(container, key, { value, configurable: true });\n        return value;\n    }\n    const container = {\n        __proto__: new Proxy({ __proto__: null }, {\n            get(_, key) {\n                if (typeof key === \"symbol\")\n                    return undefined;\n                return define(key);\n            }\n        })\n    };\n    return new Proxy(container, {\n        getPrototypeOf: () => null,\n        setPrototypeOf: (_, v) => v === null,\n        getOwnPropertyDescriptor: (_, key) => {\n            if (typeof key === \"symbol\")\n                return undefined;\n            if (!(key in container))\n                define(key);\n            return Object.getOwnPropertyDescriptor(container, key);\n        }\n    });\n}\nexport function useAvatarTrans(): {\n    /**\n      * `NFT PFP`\n      */\n    application_dialog_title(): string;\n    /**\n      * `Edit Profile`\n      */\n    application_edit_profile_dialog_title(): string;\n    /**\n      * `Set NFT PFPs`\n      */\n    set_nft(): string;\n    /**\n      * `Set up NFT PFP successfully`\n      */\n    nft_set_success(): string;\n    /**\n      * `NFT PFP verification failed`\n      */\n    persona_verification_failed(): string;\n    /**\n      * `Cancel`\n      */\n    cancel(): string;\n    /**\n      * `Save`\n      */\n    save(): string;\n    /**\n      * `Change`\n      */\n    change(): string;\n    /**\n      * `Connect your wallet`\n      */\n    connect_your_wallet(): string;\n    /**\n      * `Sorry, failed to save NFT Avatar. Please set again.`\n      */\n    upload_avatar_failed_message(): string;\n    /**\n      * `Update NFT Avatar Success!`\n      */\n    upload_avatar_success_message(): string;\n    /**\n      * `No collectible found.`\n      */\n    collectible_not_found(): string;\n    /**\n      * `Add Collectibles`\n      */\n    add_collectible(): string;\n    /**\n      * `Set NFT Avatar`\n      */\n    set_avatar_title(): string;\n    /**\n      * `Set NFT PFP`\n      */\n    set_up_title$pfp(): string;\n    /**\n      * `Set NFT NFT Background`\n      */\n    set_up_title$background(): string;\n    /**\n      * `Wallet Settings`\n      */\n    wallet_settings(): string;\n    /**\n      * `Customize NFT experience by connecting social accounts. Enjoy Web2 with a whole new Web3 vibe.`\n      */\n    persona_hint(): string;\n    /**\n      * `Copy wallet address successfully!`\n      */\n    copy_success_of_wallet_address(): string;\n    /**\n      * `Copied`\n      */\n    copied(): string;\n    /**\n      * `No any collectible is available to preview. Please add your collectible here.`\n      */\n    collectible_no_eth(): string;\n    /**\n      * `No NFTs found in current wallet.`\n      */\n    collectible_no_collectible(): string;\n    /**\n      * `Load failed`\n      */\n    load_failed(): string;\n    /**\n      * `Reload`\n      */\n    reload(): string;\n    /**\n      * `Socialize and show off your NFTs. People can bid, buy and view your valuable NFTs without leaving Twitter.`\n      */\n    application_hint(): string;\n    /**\n      * `Provided by`\n      */\n    provider_by(): string;\n    /**\n      * `Downloading image...`\n      */\n    downloading_image(): string;\n    /**\n      * `Saving...`\n      */\n    saving(): string;\n    /**\n      * `Download image error`\n      */\n    download_image_error(): string;\n    /**\n      * `Please connect a wallet.`\n      */\n    connect_wallet(): string;\n    /**\n      * `NFT background`\n      */\n    background_title(): string;\n    /**\n      * `Powered by`\n      */\n    powered_by(): string;\n    /**\n      * `Loading...`\n      */\n    loading(): string;\n    /**\n      * `No valid wallet detected. Please connect wallet or verify wallet firstly.`\n      */\n    no_wallet_message(): string;\n    /**\n      * `Not current account. Please switch to this account to set up NFTs Profile.`\n      */\n    inactive_persona_tooltip(): string;\n    /**\n      * `Do not support the current network.`\n      */\n    unsupported_network(): string;\n    /**\n      * `NFT PFP`\n      */\n    nft_avatar(): string;\n    /**\n      * `Retry`\n      */\n    retry(): string;\n    /**\n      * `NFT Avatar Setting`\n      */\n    nft_list_title(): string;\n    /**\n      * `Wallet`\n      */\n    nft_wallet_label(): string;\n    /**\n      * `Change`\n      */\n    nft_wallet_change(): string;\n    /**\n      * `Please input contract address`\n      */\n    nft_input_address_label(): string;\n    /**\n      * `Please input token ID`\n      */\n    nft_input_tokenid_label(): string;\n    /**\n      * `web3 error`\n      */\n    plugin_avatar_web3_error(): string;\n    /**\n      * `Cannot found asset.`\n      */\n    plugin_avatar_asset(): string;\n    /**\n      * `Chain does not match.`\n      */\n    plugin_avatar_chain_error(): string;\n    /**\n      * `The contract address is incorrect or the collection does not belong to you`\n      */\n    nft_owner_hint(): string;\n    /**\n      * `Checking`\n      */\n    nft_add_button_label_checking(): string;\n    /**\n      * `Add`\n      */\n    nft_add_button_label(): string;\n    /**\n      * `Input Contract Address`\n      */\n    plugin_avatar_input_token_address(): string;\n    /**\n      * `Token ID`\n      */\n    plugin_avatar_input_token_id(): string;\n    /**\n      * `No collectible found.`\n      */\n    dashboard_no_collectible_found(): string;\n    /**\n      * - set_up_title$pfp: `Set NFT PFP`\n    \n      * - set_up_title$background: `Set NFT NFT Background`\n      */\n    set_up_title(options: {\n        readonly context: \"pfp\" | \"background\";\n    }): string;\n} { const { t } = useTranslation(\"com.maskbook.avatar\"); return useMemo(() => createProxy((key) => t.bind(null, key)), [t]); }\nfunction createComponent(i18nKey: string) {\n    return (props) => createElement(Trans, { i18nKey, ns: \"com.maskbook.avatar\", shouldUnescape: true, ...props });\n}\nexport const AvatarTrans: {\n    /**\n      * `Only NFTs on Ethereum are supported to preview. We are currently<br/>working on supporting Polygon NFTs as well. <br/>Please add your collectibles here.`\n      */\n    collectible_on_polygon: ComponentType<TypedTransProps<Readonly<{}>, {\n        br: JSX.Element;\n    }>>;\n    /**\n      * `The NFT PFP feature currently supports only EVM chains. Support for other<br>chains will be added in the future.`\n      */\n    wallet_non_evm_warning: ComponentType<TypedTransProps<Readonly<{}>, {\n        br: JSX.Element;\n    }>>;\n} = /*#__PURE__*/ createProxy(createComponent);\n","import type { Web3Helper } from '@masknet/web3-helpers'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport type { ChainId, SchemaType } from '@masknet/web3-shared-evm'\n\nexport interface AvatarMetaDB {\n    userId: string\n    tokenId: string\n    address: string\n    avatarId: string\n    chainId?: ChainId\n    schema?: SchemaType\n    pluginId?: NetworkPluginID\n    ownerAddress?: string\n}\n\nexport interface NFT {\n    amount: string\n    symbol: string\n    name: string\n    image: string\n    owner: string\n    slug: string\n}\n\nexport type AllChainsNonFungibleToken = Web3Helper.NonFungibleTokenAll\n\nexport interface SelectTokenInfo {\n    account: string\n    token: AllChainsNonFungibleToken\n    image: string\n    pluginID: NetworkPluginID\n}\n\nexport interface NextIDAvatarMeta extends AvatarMetaDB {\n    nickname: string\n    imageUrl: string\n}\n\nexport interface NFTRSSNode {\n    signature: string\n    nft: AvatarMetaDB\n}\n\nexport interface NFTInfo {\n    amount: string\n    name: string\n    symbol: string\n    image?: string\n    owner?: string\n    slug?: string\n    permalink?: string\n    tokenId: string\n}\n\nexport enum PFP_TYPE {\n    BACKGROUND = 'background',\n    PFP = 'pfp',\n}\n\nexport type AvatarMeta = NextIDAvatarMeta & { sign: string }\n\nexport type AddressStorageV1 = { address: string; networkPluginID: NetworkPluginID }\nexport type AddressStorageV2 = Record<string, AddressStorageV1> & Record<NetworkPluginID, string>\n\nexport enum AvatarType {\n    Square = 'shape-square',\n    Clip = 'shape-hex',\n    Circle = 'circle',\n    Default = 'default',\n}\n","function getImageBlobResized(img: HTMLImageElement, width: number, height: number) {\n    return new Promise<Blob | null>((resolve) => {\n        const canvas = document.createElement('canvas')\n        const context = canvas.getContext('2d')\n        const w = img.naturalWidth\n        const h = img.naturalHeight\n        const scale = Math.min(width / w, height / h)\n        canvas.height = height\n        canvas.width = width\n        context?.setTransform(scale, 0, 0, scale, canvas.width / 2, canvas.height / 2)\n        context?.drawImage(img, -w / 2, -h / 2, w, h)\n        canvas.toBlob((b) => resolve(b), 'image/png')\n    })\n}\n\n/**\n * Fetch image by creating an image element.\n * It's not supporting in mv3 on background page.\n * @param url\n * @returns\n */\nexport function fetchImageViaDOM(url: string) {\n    return new Promise<Blob | null>((resolve, reject) => {\n        const img = document.createElement('img')\n        const cleanup = () => {\n            img.removeEventListener('load', onload)\n            img.removeEventListener('error', reject)\n        }\n        const onload = async () => {\n            try {\n                resolve(await getImageBlobResized(img, 450, 450))\n            } catch {\n                // do nothing\n            } finally {\n                cleanup()\n            }\n        }\n        const onerror = () => {\n            reject()\n            cleanup()\n        }\n        img.decoding = 'async'\n        img.crossOrigin = 'Anonymous'\n        img.addEventListener('load', onload)\n        img.addEventListener('error', onerror)\n        img.src = url\n    })\n}\n\n/**\n * Fetch image by fetching with HTTP request.\n * This manner will constraint by browser safe policy (CORS).\n * @param url\n * @returns\n */\nexport async function fetchImageViaHTTP(url: string) {\n    const response = await fetch(url, {\n        cache: 'force-cache',\n        headers: {\n            accept: 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8',\n        },\n    })\n    if (response.ok) return response.blob()\n    return null\n}\n","import { first, isNull } from 'lodash-es'\nimport { BigNumber } from 'bignumber.js'\nimport {\n    attemptUntil,\n    fetchImageViaDOM,\n    fetchImageViaHTTP,\n    isLocaleResource,\n    resolveCrossOriginURL,\n    resolveResourceURL,\n} from '@masknet/web3-shared-base'\nimport { EnhanceableSite, type NextIDPersonaBindings, NextIDPlatform, getSiteType } from '@masknet/shared-base'\nimport { NextIDProof, NextIDStorageProvider } from '@masknet/web3-providers'\nimport type { NextIDAvatarMeta } from '../types.js'\nimport { PLUGIN_ID } from '../constants.js'\nimport { fetchBlob } from '@masknet/web3-providers/helpers'\n\nexport async function getImage(image: string): Promise<string> {\n    const blob = await fetchBlob(image)\n    return (await blobToBase64(blob)) as string\n}\n\nfunction blobToBase64(blob: Blob) {\n    return new Promise((resolve, _) => {\n        const reader = new FileReader()\n        reader.onloadend = () => resolve(reader.result)\n        reader.readAsDataURL(blob)\n    })\n}\n\nasync function fetchImage(url: string) {\n    const resolvedURL = resolveCrossOriginURL(url)\n    if (!resolvedURL) return fetchImageViaHTTP(url)\n    return attemptUntil(\n        [\n            async () => fetchImageViaHTTP(url),\n            async () => fetchImageViaDOM(resolvedURL),\n            async () => fetchImageViaHTTP(resolvedURL),\n        ],\n        null,\n    )\n}\n\nexport async function toPNG(image: string) {\n    const isBase64 = isLocaleResource(image)\n    const resolvedURL = resolveResourceURL(image)\n    const imageData = await fetchImage(resolvedURL || image)\n    return new Promise<Blob | null>((resolve, reject) => {\n        const img = new Image()\n        const canvas = document.createElement('canvas')\n        const ctx = canvas.getContext('2d')\n        if (isNull(ctx)) throw new Error('Canvas was not supported')\n        img.addEventListener('load', () => {\n            ;[canvas.width, canvas.height] = [img.width, img.height]\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            canvas.toBlob((blob) => {\n                resolve(blob)\n            }, 'image/png')\n        })\n        img.addEventListener('error', () => {\n            reject(new Error('Could not load image'))\n        })\n        img.setAttribute('CrossOrigin', 'Anonymous')\n        if (!isBase64 && imageData) img.src = URL.createObjectURL(imageData)\n        else img.src = image\n    })\n}\n\nexport function formatPrice(amount: string, symbol: string) {\n    const _amount = new BigNumber(amount ?? '0')\n    if (_amount.isZero() || _amount.isLessThan(0.01)) return ''\n    if (_amount.isLessThan(1)) return `${_amount.toFixed(2)} ${symbol}`\n    if (_amount.isLessThan(1000)) return `${_amount.toFixed(1)} ${symbol}`\n    if (_amount.isLessThan(1000000)) return `${_amount.div(1000000).toFixed(1)}K ${symbol}`\n    return `${_amount.div(1000000).toFixed(1)}M ${symbol}`\n}\n\nexport function formatText(name: string, tokenId: string) {\n    return name.length > 28 ? `${name.slice(0, 28)}...` : name\n}\n\nexport function formatTokenId(symbol: string, tokenId: string) {\n    const name = tokenId\n    return name.length > 18 ? name.slice(0, 12) + '...' : name\n}\n\nexport function formatAddress(address: string, size = 0) {\n    if (size === 0 || size >= 20) return address\n    return `${address.slice(0, Math.max(0, 2 + size))}...${address.slice(-size)}`\n}\n\nasync function getAvatarFromNextIDStorage(\n    persona: string,\n    platform: NextIDPlatform,\n    userId: string,\n    avatarId?: string,\n) {\n    const response = await NextIDStorageProvider.getByIdentity<NextIDAvatarMeta>(\n        persona,\n        platform,\n        userId.toLowerCase(),\n        PLUGIN_ID,\n    )\n\n    if (!avatarId && response.isOk()) return response.value\n    if (response.isOk() && response.value?.avatarId === avatarId) return response.value\n    return\n}\n\n/**\n * find latest used persona binding\n */\n\nexport const sortPersonaBindings = (a: NextIDPersonaBindings, b: NextIDPersonaBindings, userId?: string): number => {\n    if (!userId) return 0\n\n    const p_a = first(a.proofs.filter((x) => x.identity === userId.toLowerCase()))\n    const p_b = first(b.proofs.filter((x) => x.identity === userId.toLowerCase()))\n\n    if (!p_a || !p_b) return 0\n    if (p_a.last_checked_at > p_b.last_checked_at) return -1\n    return 1\n}\n\nexport async function getNFTAvatarByUserId(\n    userId: string,\n    avatarId: string,\n    persona: string,\n): Promise<NextIDAvatarMeta | undefined> {\n    const platform = getSiteType() === EnhanceableSite.Twitter ? NextIDPlatform.Twitter : undefined\n    if (!platform) return\n    const bindings = await NextIDProof.queryAllExistedBindingsByPlatform(platform, userId)\n\n    if (persona) {\n        const binding = bindings.filter((x) => x.persona.toLowerCase() === persona.toLowerCase())?.[0]\n        if (binding) {\n            return getAvatarFromNextIDStorage(binding.persona, platform, userId, avatarId)\n        }\n    }\n    for (const binding of bindings.sort((a, b) => sortPersonaBindings(a, b, userId))) {\n        const avatar = await getAvatarFromNextIDStorage(binding.persona, platform, userId, avatarId)\n        if (avatar) return avatar\n    }\n    return\n}\n","import { useState, type RefObject, useEffect, useRef } from 'react'\nimport { useIntersection } from 'react-use'\n\nexport function useEverSeen<E = HTMLDivElement>(): [boolean, RefObject<E>] {\n    const ref = useRef(null)\n    const [seen, setSeen] = useState(false)\n    const nullRef = useRef(null)\n    const entry = useIntersection(seen ? nullRef : ref, {})\n    useEffect(() => {\n        if (entry?.isIntersecting) setSeen(true)\n    }, [entry?.isIntersecting])\n\n    return [seen, ref]\n}\n","import { defer, delay, type DeferTuple } from '@masknet/kit'\nimport { Emitter } from '@servie/events'\n\nexport type SingletonModalRefCreator<OpenProps = void, CloseProps = void> = (\n    onOpen: (props: OpenProps) => void,\n    onClose: (props: CloseProps) => void,\n    onAbort: (error: Error) => void,\n) => {\n    peek: () => boolean\n    open: (props: OpenProps) => void\n    close: (props: CloseProps) => void\n    abort?: (error: Error) => void\n}\n\nexport interface SingletonModalProps {\n    children: React.ReactNode\n}\n\nexport class SingletonModal<\n    OpenProps = void,\n    CloseProps = void,\n    T extends SingletonModalRefCreator<OpenProps, CloseProps> = SingletonModalRefCreator<OpenProps, CloseProps>,\n> {\n    constructor() {\n        this.open = this.open.bind(this)\n        this.close = this.close.bind(this)\n        this.abort = this.abort.bind(this)\n        this.openAndWaitForClose = this.openAndWaitForClose.bind(this)\n    }\n    readonly emitter = new Emitter<{\n        open: [OpenProps]\n        close: [CloseProps]\n        abort: [Error]\n    }>()\n\n    protected onOpen: ReturnType<T>['open'] | undefined\n    protected onClose: ReturnType<T>['close'] | undefined\n    protected onAbort: ReturnType<T>['abort'] | undefined\n\n    private dispatchPeek: ReturnType<T>['peek'] | undefined\n    private dispatchOpen: ReturnType<T>['open'] | undefined\n    private dispatchClose: ReturnType<T>['close'] | undefined\n    private dispatchAbort: ReturnType<T>['abort'] | undefined\n\n    /**\n     * Register a React modal component that implemented a forwarded ref.\n     * The ref item should be fed with open and close methods.\n     */\n    register = (creator: T | null) => {\n        if (!creator) {\n            this.dispatchOpen = undefined\n            this.dispatchClose = undefined\n            this.dispatchAbort = undefined\n            return\n        }\n\n        const ref = creator(\n            (props) => {\n                this.onOpen?.(props)\n                this.emitter.emit('open', props)\n            },\n            (props) => {\n                this.onClose?.(props)\n                this.emitter.emit('close', props)\n            },\n            (error) => {\n                this.onAbort?.(error)\n                this.emitter.emit('abort', error)\n            },\n        )\n        this.dispatchPeek = ref.peek\n        this.dispatchOpen = ref.open\n        this.dispatchClose = ref.close\n        this.dispatchAbort = ref.abort\n    }\n\n    /**\n     * Peek the open state of the React modal component.\n     */\n    peek() {\n        return this.dispatchPeek?.() ?? false\n    }\n\n    /**\n     * Open the registered modal component with props\n     * @param props\n     */\n    open(props: OpenProps) {\n        if (typeof this.dispatchOpen === 'undefined') console.warn(\"[SingletonModal]: The modal hasn't registered yet.\")\n        this.dispatchOpen?.(props)\n    }\n\n    /**\n     * Close the registered modal component with props\n     * @param props\n     */\n    close(props: CloseProps) {\n        this.dispatchClose?.(props)\n    }\n\n    /**\n     * Abort the registered modal component with Error\n     */\n    abort(error: Error) {\n        this.dispatchAbort?.(error)\n    }\n\n    /**\n     * Open the registered modal component and wait for it closes\n     * @param props\n     */\n    openAndWaitForClose(props: OpenProps): Promise<CloseProps> {\n        return new Promise<CloseProps>((resolve, reject) => {\n            this.open(props)\n            this.onClose = (props) => resolve(props)\n            this.onAbort = (error) => reject(error)\n        })\n    }\n}\n\nexport class SingletonModalQueued<OpenProps = void, CloseProps = void> extends SingletonModal<OpenProps, CloseProps> {\n    private opened = false\n    private tasks: Array<{\n        props: OpenProps\n        defer?: DeferTuple<CloseProps, Error>\n    }> = []\n\n    constructor() {\n        super()\n\n        this.emitter.on('open', () => {\n            this.opened = true\n        })\n        this.emitter.on('close', () => {\n            this.opened = false\n            this.cleanup()\n        })\n        this.emitter.on('abort', () => {\n            this.opened = false\n            this.cleanup()\n        })\n    }\n\n    override open(props: OpenProps) {\n        if (!this.opened) {\n            super.open(props)\n            return\n        }\n\n        this.tasks.push({\n            props,\n        })\n    }\n\n    override close(props: CloseProps) {\n        if (!this.opened) return\n\n        super.close(props)\n    }\n\n    override openAndWaitForClose(props: OpenProps) {\n        if (!this.opened) return super.openAndWaitForClose(props)\n\n        const d = defer<CloseProps, Error>()\n        this.tasks.push({\n            props,\n            defer: d,\n        })\n        return d[0]\n    }\n\n    private async cleanup() {\n        if (this.opened || !this.tasks.length) return\n\n        await delay(300)\n\n        const { props, defer } = this.tasks.shift()!\n\n        this.open(props)\n        if (!defer) return\n        this.onClose = (props) => defer[1](props)\n        this.onAbort = (error) => defer[2](error)\n    }\n}\n","import { memo } from 'react'\nimport { Icon, type IconProps } from '../Icon/index.js'\n\nexport interface ChainIconProps extends IconProps {}\nexport const ChainIcon = memo<ChainIconProps>(function ChainIcon({ ...rest }) {\n    return <Icon {...rest} sx={{ fontSize: 12, fontWeight: 'bold', ...rest.sx }} size={rest.size ?? 12.5} />\n})\n","import type { Web3Helper } from '@masknet/web3-helpers'\nimport { useNetwork } from '@masknet/web3-hooks-base'\nimport type { NetworkPluginID } from '@masknet/shared-base'\nimport { ImageIcon, type ImageIconProps } from '../ImageIcon/index.js'\nimport { ChainIcon } from '../index.js'\nimport { memo } from 'react'\nimport type { ReasonableNetwork } from '@masknet/web3-shared-base'\n\nexport interface NetworkIconProps extends ImageIconProps {\n    pluginID: NetworkPluginID\n    chainId: Web3Helper.ChainIdAll\n    /**\n     * It's allow to add custom network with duplicate chainIds. Network could\n     * be specified with this prop.\n     */\n    network?: ReasonableNetwork<Web3Helper.ChainIdAll, Web3Helper.SchemaTypeAll, Web3Helper.NetworkTypeAll>\n}\n\nexport const NetworkIcon = memo(function NetworkIcon(props: NetworkIconProps) {\n    const { pluginID, chainId, icon, network: expectedNetwork, ...rest } = props\n    const fallbackNetwork = useNetwork(pluginID, chainId)\n    const network = expectedNetwork || fallbackNetwork\n    const iconUrl = network?.iconUrl || icon\n\n    if (iconUrl && !network?.isCustomized) return <ImageIcon size={20} {...rest} icon={iconUrl} />\n    return (\n        <ChainIcon\n            size={rest.size || 20}\n            name={network?.name}\n            color={rest.color || network?.color}\n            className={rest.className}\n        />\n    )\n})\n","import { Icons } from '@masknet/icons'\nimport { type NetworkPluginID } from '@masknet/shared-base'\nimport { makeStyles } from '@masknet/theme'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport type { ReasonableNetwork } from '@masknet/web3-shared-base'\nimport { Button, styled } from '@mui/material'\nimport { memo, type HTMLProps } from 'react'\nimport { NetworkIcon } from '../NetworkIcon/index.js'\n\nconst AllButton = styled(Button)(({ theme }) => ({\n    display: 'inline-block',\n    padding: 0,\n    borderRadius: '50%',\n    fontSize: 10,\n    backgroundColor: theme.palette.maskColor.highlight,\n    '&:hover': {\n        backgroundColor: theme.palette.maskColor.highlight,\n        boxShadow: 'none',\n    },\n}))\n\nconst useStyles = makeStyles()({\n    sidebar: {\n        flexShrink: 0,\n        boxSizing: 'border-box',\n        height: '100%',\n        overflow: 'auto',\n        '&::-webkit-scrollbar': {\n            display: 'none',\n        },\n    },\n    networkButton: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginBottom: '12px',\n        width: 24,\n        minWidth: 24,\n        height: 24,\n        maxWidth: 24,\n        padding: 0,\n    },\n    indicator: {\n        position: 'absolute',\n        right: -3,\n        bottom: -1,\n    },\n})\n\ninterface SelectNetworkSidebarProps extends HTMLProps<HTMLDivElement> {\n    networks: Array<ReasonableNetwork<Web3Helper.ChainIdAll, Web3Helper.SchemaTypeAll, Web3Helper.NetworkTypeAll>>\n    pluginID: NetworkPluginID\n    hideAllButton?: boolean\n    chainId?: Web3Helper.ChainIdAll\n    onChainChange?: (chainId: Web3Helper.ChainIdAll | undefined) => void\n}\n\nexport const SelectNetworkSidebar = memo(function SelectNetworkSidebar({\n    networks,\n    chainId,\n    pluginID,\n    onChainChange,\n    hideAllButton,\n    className,\n    ...rest\n}: SelectNetworkSidebarProps) {\n    const { classes, cx } = useStyles()\n\n    // Do not translate the \"All\" button\n    return (\n        <div className={cx(classes.sidebar, className)} {...rest}>\n            {networks.length > 1 && !hideAllButton ? (\n                <AllButton className={classes.networkButton} onClick={() => onChainChange?.(undefined)}>\n                    All\n                    {!chainId ? <Icons.BorderedSuccess className={classes.indicator} size={12} /> : null}\n                </AllButton>\n            ) : null}\n            {networks.map((x) => (\n                <Button\n                    variant=\"text\"\n                    key={x.chainId}\n                    className={classes.networkButton}\n                    disableRipple\n                    onClick={() => onChainChange?.(x.chainId)}>\n                    <NetworkIcon pluginID={pluginID} chainId={x.chainId} size={24} network={x} />\n                    {chainId === x.chainId ? <Icons.BorderedSuccess className={classes.indicator} size={12} /> : null}\n                </Button>\n            ))}\n        </div>\n    )\n})\n","import { useEffect } from 'react'\nimport { EMPTY_LIST, MaskMessages, type NextIDPersonaBindings, type NextIDPlatform } from '@masknet/shared-base'\nimport { NextIDProof } from '@masknet/web3-providers'\nimport { useQuery } from '@tanstack/react-query'\n\n/**\n * Get all personas bound with the given identity from NextID service\n */\nexport function usePersonasFromNextID(userId: string, platform: NextIDPlatform, exact?: boolean) {\n    const result = useQuery<NextIDPersonaBindings[], Error>({\n        queryKey: ['next-id', 'personas', userId],\n        enabled: Boolean(platform && userId),\n        queryFn: async () => {\n            if (!platform || !userId) return EMPTY_LIST\n            const res = await NextIDProof.queryAllExistedBindingsByPlatform(platform, userId, exact)\n            return res ? res : EMPTY_LIST\n        },\n    })\n\n    useEffect(() => MaskMessages.events.ownProofChanged.on(() => result.refetch), [result.refetch])\n    return result\n}\n","import { memo } from 'react'\nimport { Icons, type GeneratedIconProps } from '@masknet/icons'\n\ninterface Props extends GeneratedIconProps {\n    checked?: boolean\n    unCheckedButtonColor?: string\n    checkedButtonColor?: string\n}\n\nexport const RadioIndicator = memo<Props>(function RadioIndicator({\n    checked,\n    unCheckedButtonColor,\n    checkedButtonColor,\n    ...rest\n}) {\n    return checked ? (\n        <Icons.RadioButtonChecked {...rest} color={checkedButtonColor} />\n    ) : (\n        <Icons.RadioButtonUnChecked {...rest} color={unCheckedButtonColor} />\n    )\n})\n","import { useState, useCallback } from 'react'\n\nexport function useDetectOverflow<T extends HTMLDivElement>(): [overflow: boolean, ref: (node: T | null) => void] {\n    const [overflow, setOverflow] = useState(false)\n    const ref = useCallback((node: T | null) => {\n        if (node) setOverflow(node.offsetWidth !== node.scrollWidth)\n    }, [])\n\n    return [overflow, ref]\n}\n","import { useMemo } from 'react'\nimport { useSubscription } from 'use-subscription'\nimport type { Web3Helper } from '@masknet/web3-helpers'\nimport { EMPTY_STRING, type NetworkPluginID } from '@masknet/shared-base'\nimport { useWeb3State } from './useWeb3State.js'\nimport { useNetworks } from './useNetworks.js'\n\nexport function useNetwork<T extends NetworkPluginID = NetworkPluginID>(\n    pluginID?: T,\n    chainId?: Web3Helper.Definition[T]['ChainId'],\n) {\n    const { Network } = useWeb3State(pluginID)\n    const networks = useNetworks(pluginID)\n    const networkID = useSubscription(Network?.networkID ?? EMPTY_STRING)\n\n    return useMemo(() => {\n        if (chainId) return networks.find((x) => x.chainId === chainId)\n        return networks.find((x) => x.ID === networkID)\n    }, [chainId, networkID, networks])\n}\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","import React from 'react';\n\nfunction createContainer(useHook) {\n  var Context = React.createContext(null);\n\n  function Provider(props) {\n    var value = useHook(props.initialState);\n    return React.createElement(Context.Provider, {\n      value: value\n    }, props.children);\n  }\n\n  function useContainer() {\n    var value = React.useContext(Context);\n\n    if (value === null) {\n      throw new Error(\"Component must be wrapped with <Container.Provider>\");\n    }\n\n    return value;\n  }\n\n  return {\n    Provider: Provider,\n    useContainer: useContainer\n  };\n}\nfunction useContainer(container) {\n  return container.useContainer();\n}\n\nexport { createContainer, useContainer };\n//# sourceMappingURL=unstated-next.mjs.map\n"],"names":["useSubscription","allPersonas","useAllPersonas","UNDEFINED","lastRecognizedProfile","useLastRecognizedIdentity","keyframes","makeStyles","rainbowBorderKeyFrames","useStyles","theme","width","height","radius","size","root","animation","boxShadow","transition","borderRadius","display","justifyContent","alignItems","lineHeight","border","RainbowBox","props","classes","borderSize","div","className","children","first","noop","createContext","memo","useContext","useMemo","useState","useEffect","EMPTY_LIST","NextIDPlatform","MaskMessages","useChainContext","PFP_TYPE","currentNextIDPlatform","queryPersonaByProfile","useQuery","NextIDProof","isValidAddress","AvatarManagementContext","isLoading","binding","undefined","targetAccount","setTargetAccount","pfpType","PFP","proof","setProof","proofs","setProofs","tokenInfo","setTokenInfo","selectedTokenInfo","setSelectedTokenInfo","AvatarManagementProvider","identity","account","selectedAccount","setSelectedAccount","data","refetch","queryKey","enabled","queryFn","identifier","bindings","queryAllExistedBindingsByPlatform","userId","toLowerCase","linkedPersona","personaBindings","filter","x","persona","publicKeyAsHex","publicKey","hasBinding","length","nextIdWallets","platform","Ethereum","nextIdPersonas","events","ownProofChanged","on","contextValue","Provider","value","displayName","useAvatarManagement","compact","uniqBy","useCallback","useUpdateEffect","useNavigate","Icons","openPopupWindow","AddCollectiblesModal","ChainBoundary","CollectionList","PluginVerifiedWalletStatusBar","PopupHomeTabType","UserAssetsProvider","useSharedTrans","NetworkPluginID","PopupRoutes","useCustomSnackbar","useAccount","useNetworkContext","useWallets","useWeb3Connection","useWeb3Hub","isGreaterThan","isSameAddress","Box","Button","DialogActions","DialogContent","Stack","Typography","Telemetry","EventID","EventType","supportPluginIds","useAvatarTrans","toPNG","RoutePaths","actions","backgroundColor","palette","maskColor","bottom","position","zIndex","left","padding","margin","content","overflow","addButton","cursor","fontWeight","fontSize","color","primary","noWallet","flexDirection","flex","gridProps","columns","NFTListDialog","t","sharedI18N","navigate","pluginID","originAccount","chainId","setChainId","setAccount","assetChainId","setAssetChainId","wallets","selectedPluginId","setSelectedPluginId","PLUGIN_EVM","selectedToken","setSelectedToken","disabled","setDisabled","pendingTokenCount","setPendingTokenCount","tokens","setTokens","targetWallet","find","address","showSnackbar","onChangeWallet","onSave","metadata","imageURL","captureEvent","Access","EntryAppNFT_PFP_Setting","image","download_image_error","variant","URL","createObjectURL","token","Upload","error","String","Web3","Hub","handleAddCollectibles","results","openAndWaitForClose","contract","tokenIds","count","allSettled","Promise","map","tokenId","asset","isOwner","all","getNonFungibleAsset","getNonFungibleToken","getNonFungibleTokenOwnership","Math","max","status","originalTokens","walletItems","sort","a","z","last_checked_at","disableWindowScroll","selectedAsset","additionalAssets","pendingAdditionalAssetCount","onItemClick","onChainChange","EmptySimple","second","mt","no_wallet_message","disableSpacing","sx","disableRipple","onClick","add_collectible","style","paddingRight","powered_by","main","SimpleHash","Personas","tab","ConnectedWallets","verifiedWallets","onChange","expectedAddress","expectedChainId","predicate","includes","expectedAccount","expectedPluginID","owner","fullWidth","coming_soon","set_up_title","context","EnhanceableSite","Avatar","SOCIAL_MEDIA_ICON_MAPPING","Twitter","TwitterXRound","Localhost","indicator","top","right","boxSizing","NFTAvatar","avatar","hasBorder","src","LoadingBase","ShadowRootTooltip","tip","maxWidth","NFTInfo","isNFT","loading","tooltip","node","nft_set_success","set_nft","arrow","placement","title","whiteSpace","ListItemButton","ChainId","SchemaType","TokenType","RSS3_KEY_SITE","usePersonaNFTAvatar","spacing","divider","pointerEvents","userInfo","marginLeft","PersonaItem","onSelect","nickname","nftAvatar","getAvatarId","TWITTER","handleSelect","tokenDetailed","Mainnet","name","symbol","schema","ERC721","id","type","NonFungible","inactive","imageUrl","inactive_persona_tooltip","RightArrow","borderSecondary","useAsyncRetry","Alert","PersonaAction","usePersonasFromNextID","currentPersona","queryPersonaAvatar","PersonaPage","visible","setVisible","dismissAlert","socialIdentity","network","replace","myPersonas","currentPersonaIdentifier","currentPersonaInfo","rawPublicKey","bindingPersonas","NextID","bindingProofs","y","is_valid","flat","NFTPicker","open","onClose","persona_hint","i","linkedProfiles","some","currentVisitingProfile","connectPersona","createPersona","usePersonaConnectStatus","personas","lastRecognized","action","connected","hasPersona","toText","getEnhanceableSiteType","Web3Storage","useSaveAddress","PLUGIN_ID","signWithPersona","useSaveToNextID","saveAddress","info","siteType","storage","createNextIDStorage","set","pluginId","NFT_AVATAR_METADATA_STORAGE","useSaveAvatar","sign","avatarStorage","createKVStorage","useSaveKV","saveAvatar","signMessage","JSON","stringify","useAsyncFn","useSaveStringStorage","useSave","saveToNextID","saveToStringStorage","saveToKV","isBindAccount","avatarId","ownerAddress","delay","AvatarEditor","Slider","cancel","background","textAlign","uploadAvatar","blob","media","uploadMedia","updateProfileImage","media_id_string","err","UploadAvatarDialog","currentPluginID","editor","setEditor","scale","setScale","getImageScaledToCanvas","toBlob","avatarData","response","upload_avatar_failed_message","upload_avatar_success_message","Exit","location","reload","ref","e","rotate","min","step","defaultValue","_","aria-label","opacity","thirdMain","save","Navigate","Route","Routes","AvatarRoutes","path","element","to","InjectedDialog","useLayoutEffect","matchPath","useLocation","RouterDialog","pathname","application_edit_profile_dialog_title","application_dialog_title","isOnBack","MemoryRouter","minHeight","NFTAvatarDialog","startPicking","rest","initialEntries","initialIndex","Trans","PluginTransFieldRender","ApplicationEntry","CrossIsolationMessages","Web3ContextProvider","base","clickHandler","avatarSettingDialogEvent","sendToLocal","site","GlobalInjection","picking","setPicking","setOpen","ApplicationEntries","fallback","icon","recommendFeature","description","i18nKey","backgroundGradient","RenderEntryComponent","EntryComponentProps","field","ID","EntryAppNFT_PFP_Open","tooltipHint","appBoardSortingDefaultPriority","ApplicationEntryID","nextIdRequired","NFT_AVATAR_DB_NAME","addressStorage","prevData","get","catch","networkPluginID","getSiteType","PLUGIN_NAME","nft","stringStorage","createFireflyStorage","Storage","useGetAddress","storageV1","storageV2","StorageKey","useGetNFTAvatarFromStorage","useGetNFTAvatarFromRSS3","key","rss3Storage","createRSS3Storage","result","useGetNFTAvatar","getNFTAvatarFromRSS","getNFTAvatarFromStorage","getAddress","user","LRUCache","Sniffings","getNFTAvatarByUserId","cache","ttl","siteKey","getNFTAvatar","has","getNFTAvatarForCache","fn","avatarMetaFromPersona","avatarMeta","PLUGIN_SOLANA","useCheckPersonaNFTAvatar","metaData","is_twitter_page","getUserNftContainer","token_id","createElement","useTranslation","createProxy","initValue","define","Object","defineProperty","container","configurable","__proto__","Proxy","getPrototypeOf","setPrototypeOf","v","getOwnPropertyDescriptor","bind","createComponent","ns","shouldUnescape","AvatarTrans","BACKGROUND","AvatarType","Square","Clip","Circle","Default","getImageBlobResized","img","resolve","canvas","document","getContext","w","naturalWidth","h","naturalHeight","setTransform","drawImage","b","fetchImageViaDOM","url","reject","cleanup","removeEventListener","onload","onerror","decoding","crossOrigin","addEventListener","fetchImageViaHTTP","fetch","headers","accept","ok","isNull","BigNumber","attemptUntil","isLocaleResource","resolveCrossOriginURL","resolveResourceURL","NextIDStorageProvider","fetchBlob","getImage","blobToBase64","reader","FileReader","onloadend","readAsDataURL","fetchImage","resolvedURL","isBase64","imageData","Image","ctx","Error","setAttribute","formatPrice","amount","_amount","isZero","isLessThan","toFixed","formatText","slice","formatTokenId","formatAddress","getAvatarFromNextIDStorage","getByIdentity","isOk","sortPersonaBindings","p_a","p_b","useRef","useIntersection","useEverSeen","seen","setSeen","nullRef","entry","isIntersecting","defer","Emitter","SingletonModal","constructor","close","abort","emitter","onOpen","onAbort","dispatchPeek","dispatchOpen","dispatchClose","dispatchAbort","register","creator","emit","peek","console","warn","SingletonModalQueued","opened","tasks","push","d","shift","Icon","ChainIcon","useNetwork","ImageIcon","NetworkIcon","expectedNetwork","fallbackNetwork","iconUrl","isCustomized","styled","AllButton","highlight","sidebar","flexShrink","networkButton","marginBottom","minWidth","SelectNetworkSidebar","networks","hideAllButton","cx","BorderedSuccess","exact","Boolean","res","RadioIndicator","checked","unCheckedButtonColor","checkedButtonColor","RadioButtonChecked","RadioButtonUnChecked","useDetectOverflow","setOverflow","offsetWidth","scrollWidth","EMPTY_STRING","useWeb3State","useNetworks","Network","networkID"],"sourceRoot":"","x_google_ignoreList":[39,40,41]}