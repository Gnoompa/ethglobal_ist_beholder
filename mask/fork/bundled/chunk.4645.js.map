{"version":3,"file":"bundled/chunk.4645.js","mappings":";;;;;;;;;;;AAGO,eAAeA,cAAcC,EAAU;IAC1C,MAAM,EAAEC,QAAQ,EAAE,GAAG,MAAMC,yBAAyBF;IACpD,MAAM,EAAEG,KAAK,EAAE,GAAG,MAAMC,sBAAsBJ,IAAI,KAAK,GAAGC,SAASI,KAAK,CAACL,EAAE;IAC3E,MAAMM,MAAMC,KAAKD,GAAG;IACpB,MAAME,UAAUP,SAASQ,KAAK,GAAG,OAAOH;IACxC,MAAMI,QAAQT,SAASU,GAAG,GAAG,OAAOL;IACpC,OAAO;QACH,GAAGL,QAAQ;QACXW,cAAcT,MAAMU,MAAM;QAC1BC,SAASb,SAASc,MAAM;QACxBP;QACAE;QACAP;QACAa,SAASC,OAAOhB,SAASiB,OAAO;IACpC;AACJ;AAEA,eAAed,sBAAsBJ,EAAU,EAAEmB,KAAa,EAAEC,IAAY,EAAEf,KAAa;IACvF,MAAMgB,WAAW,MAAMC,MAAM,oCAAoC;QAC7DC,QAAQ;QACRC,SAAS;YACLC,QAAQ;YACR,gBAAgB;QACpB;QACAC,MAAMC,KAAKC,SAAS,CAAC;YACjBC,eAAe;YACfC,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;aAwBP,CAAC;YACFC,WAAW;gBACP/B;gBACAmB;gBACAC;gBACA,aAAa;gBACbY,SAAS;gBACTC,gBAAgB;gBAChB5B;YACJ;QACJ;IACJ;IAEA,MAAM,EAAE6B,IAAI,EAAE,GAAQ,MAAMb,SAASc,IAAI;IAczC,OAAOD;AACX;AAEA,eAAehC,yBAAyBF,EAAU;IAC9C,MAAMqB,WAAW,MAAMC,MAAM,oCAAoC;QAC7DC,QAAQ;QACRC,SAAS;YACLC,QAAQ;YACR,gBAAgB;QACpB;QACAC,MAAMC,KAAKC,SAAS,CAAC;YACjBC,eAAe;YACfC,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;aAmCP,CAAC;YACFC,WAAW;gBACP/B;YACJ;QACJ;IACJ;IAkCA,MAAM,EAAEkC,IAAI,EAAE,GAAQ,MAAMb,SAASc,IAAI;IACzC,OAAOD;AACX;AAEO,eAAeE,KAAKV,IAAY;IACnC,MAAML,WAAW,MAAMC,MAAM,oCAAoC;QAC7DC,QAAQ;QACRC,SAAS;YACLC,QAAQ;YACR,gBAAgB;QACpB;QACAC;IACJ;IAEA,MAAMW,SAAsB,MAAMhB,SAASc,IAAI;IAC/C,OAAOE;AACX","sources":["webpack://mask-network/./packages/plugins/Snapshot/src/Worker/apis.ts"],"sourcesContent":["import type { Proposal, VoteSuccess, Strategy } from '../types.js'\nimport type { ChainId } from '@masknet/web3-shared-evm'\n\nexport async function fetchProposal(id: string) {\n    const { proposal } = await fetchProposalFromGraphql(id)\n    const { votes } = await fetchVotesFromGraphql(id, 500, 0, proposal.space.id)\n    const now = Date.now()\n    const isStart = proposal.start * 1000 < now\n    const isEnd = proposal.end * 1000 < now\n    return {\n        ...proposal,\n        voterAmounts: votes.length,\n        address: proposal.author,\n        isStart,\n        isEnd,\n        votes,\n        chainId: Number(proposal.network) as ChainId,\n    } as unknown as Proposal\n}\n\nasync function fetchVotesFromGraphql(id: string, first: number, skip: number, space: string) {\n    const response = await fetch('https://hub.snapshot.org/graphql', {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            operationName: 'Votes',\n            query: `query Votes(\n                $id: String!,\n                $first: Int,\n                $skip: Int,\n                $orderBy: String,\n                $orderDirection: OrderDirection,\n                $voter: String,\n                $space: String\n            ) {\n                votes(\n                    first: $first\n                    skip: $skip\n                    where: {proposal: $id, vp_gt: 0, voter: $voter, space: $space}\n                    orderBy: $orderBy\n                    orderDirection: $orderDirection\n                ) {\n                    ipfs\n                    voter\n                    choice\n                    vp\n                    vp_by_strategy\n                    reason\n                    created\n                }\n            }`,\n            variables: {\n                id,\n                first,\n                skip,\n                // vote power\n                orderBy: 'vp',\n                orderDirection: 'desc',\n                space,\n            },\n        }),\n    })\n\n    const { data }: Res = await response.json()\n\n    interface Res {\n        data: {\n            votes: Array<{\n                ipfs: string\n                choice: number | { [choiceIndex: number]: number } | number[]\n                created: number\n                vp: number\n                vp_by_strategy: number[]\n            }>\n        }\n    }\n\n    return data\n}\n\nasync function fetchProposalFromGraphql(id: string) {\n    const response = await fetch('https://hub.snapshot.org/graphql', {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            operationName: 'Proposal',\n            query: `query Proposal($id: String!) {\n                proposal(id: $id) {\n                    id\n                    ipfs\n                    title\n                    body\n                    discussion\n                    choices\n                    start\n                    end\n                    snapshot\n                    state\n                    author\n                    created\n                    plugins\n                    symbol\n                    scores\n                    scores_total\n                    scores_by_strategy\n                    network\n                    type\n                    votes\n                    strategies {\n                      name\n                      params\n                      network\n                      __typename\n                    }\n                    space {\n                      id\n                      name\n                      symbol\n                      avatar\n                    }\n                }\n            }`,\n            variables: {\n                id,\n            },\n        }),\n    })\n    interface Res {\n        data: {\n            proposal: {\n                author: string\n                body: string\n                discussion: string\n                votes: number\n                choices: string[]\n                created: number\n                end: number\n                start: number\n                symbol: string\n                scores_total: number\n                scores: number[]\n                scores_by_strategy: number[][]\n                id: string\n                ipfs: string\n                snapshot: string\n                space: {\n                    id: string\n                    name: string\n                    symbol: string\n                    avatar: string\n                }\n                state: string\n                title: string\n                type: string\n                network: string\n                strategies: Strategy[]\n            }\n        }\n    }\n\n    const { data }: Res = await response.json()\n    return data\n}\n\nexport async function vote(body: string) {\n    const response = await fetch('https://hub.snapshot.org/api/msg', {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body,\n    })\n\n    const result: VoteSuccess = await response.json()\n    return result\n}\n"],"names":["fetchProposal","id","proposal","fetchProposalFromGraphql","votes","fetchVotesFromGraphql","space","now","Date","isStart","start","isEnd","end","voterAmounts","length","address","author","chainId","Number","network","first","skip","response","fetch","method","headers","Accept","body","JSON","stringify","operationName","query","variables","orderBy","orderDirection","data","json","vote","result"],"sourceRoot":"","x_google_ignoreList":[]}