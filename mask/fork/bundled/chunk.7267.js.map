{"version":3,"file":"bundled/chunk.7267.js","mappings":"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","sources":["webpack://mask-network/./packages/mask-sdk/shared/error.ts","webpack://mask-network/./packages/mask-sdk/shared/serializer.ts","webpack://mask-network/./packages/mask-sdk/shared/channel.ts","webpack://mask-network/./packages/mask-sdk/server/index.ts","webpack://mask-network/./packages/mask/entry-sdk/hmr-sdk.ts","webpack://mask-network/./packages/mask/entry-sdk/bridge/eth.ts","webpack://mask-network/./packages/mask/entry-sdk/bridge/index.ts","webpack://mask-network/./packages/mask/entry-sdk/hmr-bridge.ts","webpack://mask-network/./packages/mask/entry-sdk/index.ts","webpack://mask-network/./packages/mask/utils-pure/hmr.ts"],"sourcesContent":["import type { Ethereum } from '../public-api/mask-wallet.js'\n\nexport interface MaskEthereumProviderRpcErrorOptions extends ErrorOptions {\n    // data?: unknown\n}\nexport class MaskEthereumProviderRpcError extends Error implements Ethereum.ProviderRpcError {\n    constructor(code: ErrorCode, message: ErrorMessages | string, options: MaskEthereumProviderRpcErrorOptions = {}) {\n        const { cause = undefined } = options\n        super(message, { cause })\n        this.code = code\n        // this.data = data\n        delete this.stack\n    }\n    code: number\n    data?: unknown\n}\nexport enum ErrorCode {\n    ParseError = -32700,\n    InvalidRequest = -32600,\n    MethodNotFound = -32601,\n    InvalidParams = -32602,\n    InternalError = -32603,\n}\n\nexport enum ErrorMessages {\n    FirstArgumentIsNotObject = 'Expected a single, non-array, object argument.',\n    FirstArgumentMethodFieldInvalid = \"'args.method' must be a non-empty string.\",\n    UnknownMethod = 'The method \"$\" does not exist / is not available.',\n    // ParamsIsNotObjectOrArray = \"'args.params' must be an object or array if provided.\",\n    ParamsIsNotArray = \"'args.params' must be an array if provided.\",\n    InvalidMethodParams = 'Invalid method parameter(s).',\n    wallet_requestPermissions_Empty = 'Permissions request for origin \"$\" contains no permissions.',\n    wallet_requestPermissions_Unknown = 'Permissions request for origin \"$\" contains invalid requested permission(s).',\n}\n","import { JSONSerialization } from 'async-call-rpc/base.min'\nimport type { Serialization } from 'async-call-rpc/base.min'\nimport { MaskEthereumProviderRpcError } from './error.js'\nexport const serializer: Serialization = JSONSerialization([\n    (key, value) => {\n        if (value === undefined) return { $type: 'undefined' }\n        if (value instanceof ArrayBuffer) return ArrayBufferEncode(value)\n        if (value instanceof Uint8Array) return U8ArrayEncode(value)\n        if (value instanceof Map) return MapEncode(value)\n        if (value instanceof MaskEthereumProviderRpcError) return MaskEthereumProviderRpcErrorEncode(value)\n        return value\n    },\n    (key, value) => {\n        if (typeof value === 'object' && value !== null && '$type' in value) {\n            if (value.$type === 'undefined') return undefined\n            return (\n                ArrayBufferDecode(value) ||\n                U8ArrayDecode(value) ||\n                MapDecode(value) ||\n                MaskEthereumProviderRpcErrorDecode(value)\n            )\n        }\n        return value\n    },\n])\n\nconst [ArrayBufferEncode, ArrayBufferDecode] = createClassSerializer(\n    ArrayBuffer,\n    (e) => [...new Uint8Array(e)],\n    (e) => new Uint8Array(e).buffer,\n)\nconst [U8ArrayEncode, U8ArrayDecode] = createClassSerializer(\n    Uint8Array,\n    (e) => [...e],\n    (e) => new Uint8Array(e),\n)\nconst [MapEncode, MapDecode] = createClassSerializer(\n    Map,\n    (e) => [...e.entries()].map((value) => [serializer.serialization(value[0]), serializer.serialization(value[1])]),\n    (e) => new Map(e.map(([k, v]) => [serializer.deserialization(k), serializer.deserialization(v)])),\n)\nconst [MaskEthereumProviderRpcErrorEncode, MaskEthereumProviderRpcErrorDecode] = createClassSerializer(\n    MaskEthereumProviderRpcError,\n    (e) => [serializer.serialization(e.cause), Number(e.code), serializer.serialization(e.data), String(e.message)],\n    ([cause, code, data, message]) => {\n        return new MaskEthereumProviderRpcError(Number(code), String(message), {\n            cause: serializer.deserialization(cause),\n            // data: serializer.deserialization(data),\n        })\n    },\n)\nfunction createClassSerializer<T, Q>(\n    clz: { new (...args: any): T; name: string },\n    encode: (a: T) => Q,\n    decode: (a: Q) => T,\n) {\n    return [\n        (v: T) => {\n            return { $type: clz.name, value: encode(v) }\n        },\n        (v: { $type: string; value: Q }) => {\n            if (v.$type === clz.name) return decode(v.value)\n            return undefined\n        },\n    ] as const\n}\n","import type { EventBasedChannel } from 'async-call-rpc'\n\nconst EVENT_UserScript = '@masknet/sdk-raw/us'\nconst EVENT_ContentScript = '@masknet/sdk-raw/cs'\nexport function createMaskSDKChannel(side: 'user' | 'content'): EventBasedChannel {\n    const thisSide = side === 'content' ? EVENT_ContentScript : EVENT_UserScript\n    const otherSide = side === 'content' ? EVENT_UserScript : EVENT_ContentScript\n    return {\n        on(callback) {\n            const f = (e: Event) => {\n                if (e instanceof CustomEvent) callback(e.detail)\n            }\n            globalThis.addEventListener(thisSide, f)\n            return () => document.removeEventListener(thisSide, f)\n        },\n        send(data) {\n            globalThis.dispatchEvent(new CustomEvent(otherSide, { detail: data }))\n        },\n    }\n}\n","import type { MaskEthereumProviderRpcError } from '../shared/error.js'\nimport { type BridgeAPI, type UserScriptAPI, createMaskSDKChannel, serializer } from '../shared/index.js'\nimport { AsyncCall, type AsyncVersionOf } from 'async-call-rpc/full'\n\nexport type { BridgeAPI, UserScriptAPI, InitInformation } from '../shared/index.js'\nexport * from '../shared/types.js'\nexport {\n    MaskEthereumProviderRpcError,\n    ErrorCode,\n    ErrorMessages,\n    type MaskEthereumProviderRpcErrorOptions,\n} from '../shared/error.js'\nexport function createMaskSDKServer(api: BridgeAPI, signal?: AbortSignal): AsyncVersionOf<UserScriptAPI> {\n    // TODO: support AbortSignal\n    return AsyncCall<UserScriptAPI>(api, {\n        serializer,\n        channel: createMaskSDKChannel('content'),\n        log: false,\n        thenable: false,\n        mapError(error) {\n            return {\n                code: (error as MaskEthereumProviderRpcError).code,\n                message: (error as MaskEthereumProviderRpcError).message,\n                data: error,\n            }\n        },\n    })\n}\n","import { MaskMessages } from '@masknet/shared-base'\nimport { hmr } from '../utils-pure/index.js'\n\nconst { signal } = hmr(import.meta.webpackHot)\n\ntry {\n    if (process.env.NODE_ENV === 'development') {\n        globalThis.addEventListener(\n            'mask-sdk-reload',\n            () => MaskMessages.events.maskSDKHotModuleReload.sendToBackgroundPage(undefined),\n            { signal },\n        )\n    }\n} catch {}\n","import { readonlyMethodType, type EthereumMethodType } from '@masknet/web3-shared-evm'\nimport Services from '#services'\nimport {\n    type EIP2255PermissionRequest,\n    MaskEthereumProviderRpcError as E,\n    ErrorCode as C,\n    ErrorMessages as M,\n} from '@masknet/sdk'\n\nconst readonlyMethods: Record<EthereumMethodType, (params: unknown[] | undefined) => Promise<unknown>> = {} as any\nfor (const method of readonlyMethodType) {\n    readonlyMethods[method] = async (params: unknown[] | undefined) => {\n        return Services.Wallet.send({ jsonrpc: '2.0', method, params })\n    }\n}\n// Reference:\n// https://ethereum.github.io/execution-apis/api-documentation/\n// https://docs.metamask.io/wallet/reference/eth_subscribe/\nconst methods = {\n    ...readonlyMethods,\n\n    // https://eips.ethereum.org/EIPS/eip-2255\n    wallet_getPermissions() {\n        return Services.Wallet.EIP2255_wallet_getPermissions(location.origin)\n    },\n    async wallet_requestPermissions(request: EIP2255PermissionRequest) {\n        if (typeof request !== 'object' || request === null) throw new E(C.InvalidParams, M.InvalidMethodParams)\n        if (Object.keys(request).length === 0)\n            throw new E(C.InvalidParams, M.wallet_requestPermissions_Empty.replaceAll('$', location.origin))\n        for (const key in request) {\n            if (typeof key !== 'string' || typeof request[key] !== 'object' || request[key] === null)\n                throw new E(C.InvalidParams, M.wallet_requestPermissions_Unknown.replaceAll('$', location.origin))\n        }\n        return Services.Wallet.EIP2255_wallet_requestPermissions(location.origin, request)\n    },\n}\nObject.setPrototypeOf(methods, null)\n\nexport async function eth_request(request: unknown) {\n    if (typeof request !== 'object' || request === null) throw new E(C.InvalidRequest, M.FirstArgumentIsNotObject)\n\n    const { method } = request as any\n    if (typeof method !== 'string' || !method) throw new E(C.InvalidRequest, M.FirstArgumentMethodFieldInvalid)\n    if (!(method in methods)) throw new E(C.MethodNotFound, M.UnknownMethod.replaceAll('$', method))\n\n    const { params } = request as any\n    if (params !== undefined && !Array.isArray(params)) throw new E(C.InvalidRequest, M.ParamsIsNotArray)\n\n    const f = Reflect.get(methods, method)\n    return f(...params)\n}\n","import type { BridgeAPI } from '@masknet/sdk'\nimport Services from '#services'\nimport { eth_request } from './eth.js'\n\nexport const maskSDKServer: BridgeAPI = {\n    eth_request,\n    async reload() {\n        if (process.env.NODE_ENV === 'production') return\n        await Services.SiteAdaptor.attachMaskSDKToCurrentActivePage('once')\n    },\n}\n","import { maskSDKServer } from './bridge/index.js'\n\nexport const hmr_sdkServer = { ...maskSDKServer }\n\nif (import.meta.webpackHot) {\n    import.meta.webpackHot.accept('./bridge', () => {\n        for (const key of Object.keys(hmr_sdkServer)) {\n            if (!(key in maskSDKServer)) Reflect.deleteProperty(hmr_sdkServer, key)\n        }\n        for (const key of Object.keys(maskSDKServer)) {\n            Reflect.set(hmr_sdkServer, key, Reflect.get(maskSDKServer, key))\n        }\n    })\n}\n","import { createMaskSDKServer } from '@masknet/sdk'\nimport './hmr-sdk.js'\nimport { hmr_sdkServer } from './hmr-bridge.js'\n\nexport async function startMaskSDK() {\n    const maskSDK = createMaskSDKServer(hmr_sdkServer)\n    // TODO: listen to SNSContext connected status\n    return maskSDK.request_init({\n        debuggerMode: process.env.NODE_ENV === 'development',\n    })\n}\n","export function hmr(hot: __WebpackModuleApi.Hot | undefined) {\n    const ac = new AbortController()\n    hot?.dispose(() => ac.abort())\n    return {\n        signal: ac.signal,\n        run(callback: () => () => void) {\n            try {\n                ac.signal.addEventListener('abort', callback(), { once: true })\n            } catch (error) {\n                console.error(error)\n            }\n        },\n    }\n}\n"],"names":["MaskEthereumProviderRpcError","Error","constructor","code","message","options","cause","undefined","stack","data","ErrorCode","ParseError","InvalidRequest","MethodNotFound","InvalidParams","InternalError","ErrorMessages","FirstArgumentIsNotObject","FirstArgumentMethodFieldInvalid","UnknownMethod","ParamsIsNotArray","InvalidMethodParams","wallet_requestPermissions_Empty","wallet_requestPermissions_Unknown","JSONSerialization","serializer","key","value","$type","ArrayBuffer","ArrayBufferEncode","Uint8Array","U8ArrayEncode","Map","MapEncode","MaskEthereumProviderRpcErrorEncode","ArrayBufferDecode","U8ArrayDecode","MapDecode","MaskEthereumProviderRpcErrorDecode","createClassSerializer","e","buffer","entries","map","serialization","k","v","deserialization","Number","String","clz","encode","decode","name","EVENT_UserScript","EVENT_ContentScript","createMaskSDKChannel","side","thisSide","otherSide","on","callback","f","CustomEvent","detail","globalThis","addEventListener","document","removeEventListener","send","dispatchEvent","AsyncCall","createMaskSDKServer","api","signal","channel","log","thenable","mapError","error","MaskMessages","hmr","webpackHot","process","env","NODE_ENV","events","maskSDKHotModuleReload","sendToBackgroundPage","readonlyMethodType","Services","E","C","M","readonlyMethods","method","params","Wallet","jsonrpc","methods","wallet_getPermissions","EIP2255_wallet_getPermissions","location","origin","wallet_requestPermissions","request","Object","keys","length","replaceAll","EIP2255_wallet_requestPermissions","setPrototypeOf","eth_request","Array","isArray","Reflect","get","maskSDKServer","reload","SiteAdaptor","attachMaskSDKToCurrentActivePage","hmr_sdkServer","accept","deleteProperty","set","startMaskSDK","maskSDK","request_init","debuggerMode","hot","ac","AbortController","dispose","abort","run","once","console"],"sourceRoot":"","x_google_ignoreList":[]}