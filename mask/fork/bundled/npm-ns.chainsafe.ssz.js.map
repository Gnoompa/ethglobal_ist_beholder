{"version":3,"file":"bundled/npm-ns.chainsafe.ssz.js","mappings":";;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;ACtCX;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,cAAc,GAAG,uBAAuB,GAAG,mBAAmB,GAAG,qBAAqB,GAAG,qCAAqC,GAAG,gBAAgB,GAAG,kBAAkB,GAAG,gBAAgB,GAAG,uBAAuB,GAAG,qBAAqB,GAAG,mBAAmB,GAAG,iBAAiB,GAAG,YAAY,GAAG,qBAAqB,GAAG,oBAAoB,GAAG,iBAAiB,GAAG,2BAA2B,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,sBAAsB,GAAG,sBAAsB,GAAG,gBAAgB,GAAG,yBAAyB,GAAG,qBAAqB,GAAG,+BAA+B,GAAG,qBAAqB,GAAG,sBAAsB,GAAG,oBAAoB,GAAG,mBAAmB,GAAG,qBAAqB,GAAG,mBAAmB;AAC1tB;AACA,gBAAgB,mBAAO,CAAC,IAAgB;AACxC,+CAA8C,EAAE,qCAAqC,iCAAiC,EAAC;AACvH,kBAAkB,mBAAO,CAAC,IAAkB;AAC5C,iDAAgD,EAAE,qCAAqC,qCAAqC,EAAC;AAC7H,gBAAgB,mBAAO,CAAC,KAAgB;AACxC,+CAA8C,EAAE,qCAAqC,iCAAiC,EAAC;AACvH,iBAAiB,mBAAO,CAAC,KAAiB;AAC1C,gDAA+C,EAAE,qCAAqC,mCAAmC,EAAC;AAC1H,mBAAmB,mBAAO,CAAC,IAAmB;AAC9C,kDAAiD,EAAE,qCAAqC,uCAAuC,EAAC;AAChI,kBAAkB,mBAAO,CAAC,KAAkB;AAC5C,iDAAgD,EAAE,qCAAqC,qCAAqC,EAAC;AAC7H,4BAA4B,mBAAO,CAAC,KAA4B;AAChE,2DAA0D,EAAE,qCAAqC,yDAAyD,EAAC;AAC3J,kBAAkB,mBAAO,CAAC,KAAkB;AAC5C,iDAAgD,EAAE,qCAAqC,qCAAqC,EAAC;AAC7H,sBAAsB,mBAAO,CAAC,IAAsB;AACpD,qDAAoD,EAAE,qCAAqC,6CAA6C,EAAC;AACzI,aAAa,mBAAO,CAAC,KAAa;AAClC,4CAA2C,EAAE,qCAAqC,2BAA2B,EAAC;AAC9G,aAAa,mBAAO,CAAC,KAAa;AAClC,kDAAiD,EAAE,qCAAqC,iCAAiC,EAAC;AAC1H,kDAAiD,EAAE,qCAAqC,iCAAiC,EAAC;AAC1H,cAAc,mBAAO,CAAC,KAAc;AACpC,6CAA4C,EAAE,qCAAqC,6BAA6B,EAAC;AACjH,oBAAoB,mBAAO,CAAC,IAAoB;AAChD,mDAAkD,EAAE,qCAAqC,yCAAyC,EAAC;AACnI,wBAAwB,mBAAO,CAAC,KAAwB;AACxD,uDAAsD,EAAE,qCAAqC,iDAAiD,EAAC;AAC/I;AACA,cAAc,mBAAO,CAAC,KAAc;AACpC,6CAA4C,EAAE,qCAAqC,6BAA6B,EAAC;AACjH,iBAAiB,mBAAO,CAAC,KAAiB;AAC1C,gDAA+C,EAAE,qCAAqC,mCAAmC,EAAC;AAC1H,kBAAkB,mBAAO,CAAC,KAAkB;AAC5C,iDAAgD,EAAE,qCAAqC,qCAAqC,EAAC;AAC7H;AACA,iBAAiB,mBAAO,CAAC,IAAiB;AAC1C,wCAAuC,EAAE,qCAAqC,2BAA2B,EAAC;AAC1G,cAAc,mBAAO,CAAC,KAAc;AACpC,6CAA4C,EAAE,qCAAqC,6BAA6B,EAAC;AACjH,+CAA8C,EAAE,qCAAqC,+BAA+B,EAAC;AACrH,kBAAkB,mBAAO,CAAC,KAAkB;AAC5C,iDAAgD,EAAE,qCAAqC,qCAAqC,EAAC;AAC7H,mDAAkD,EAAE,qCAAqC,uCAAuC,EAAC;AACjI,iBAAiB,mBAAO,CAAC,KAAiB;AAC1C,4CAA2C,EAAE,qCAAqC,+BAA+B,EAAC;AAClH,iBAAiB,mBAAO,CAAC,KAAmB;AAC5C,8CAA6C,EAAE,qCAAqC,iCAAiC,EAAC;AACtH;AACA,iBAAiB,mBAAO,CAAC,KAAkB;AAC3C,4CAA2C,EAAE,qCAAqC,+BAA+B,EAAC;AAClH,iEAAgE,EAAE,qCAAqC,oDAAoD,EAAC;AAC5J;AACA,kBAAkB,mBAAO,CAAC,IAAkB;AAC5C,iDAAgD,EAAE,qCAAqC,qCAAqC,EAAC;AAC7H,+CAA8C,EAAE,qCAAqC,mCAAmC,EAAC;AACzH,mDAAkD,EAAE,qCAAqC,uCAAuC,EAAC;AACjI,kBAAkB,mBAAO,CAAC,KAAkB;AAC5C,0CAAyC,EAAE,qCAAqC,8BAA8B,EAAC;;;;;;;;AC/DlG;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sBAAsB;AAC5D,gDAAgD,sBAAsB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D,iDAAiD,sBAAsB;AACvE;AACA;AACA;AACA;AACA;AACA,sCAAsC,sBAAsB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,sBAAsB;AACvE;AACA;AACA,YAAY;;;;;;;;AC/CC;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,oBAAoB,mBAAO,CAAC,KAAa;AACzC,qBAAqB,mBAAO,CAAC,KAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,KAAK;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,oBAAoB;AACvG;AACA;AACA;AACA;AACA,qEAAqE,YAAY;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;AClGJ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B,GAAG,+BAA+B,GAAG,oBAAoB,GAAG,wBAAwB,GAAG,yBAAyB,GAAG,2BAA2B,GAAG,2CAA2C,GAAG,uCAAuC,GAAG,4CAA4C,GAAG,wCAAwC,GAAG,qBAAqB,GAAG,qBAAqB,GAAG,iCAAiC,GAAG,6BAA6B;AACld,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,QAAQ,aAAa,iBAAiB;AACzF;AACA;AACA;AACA;AACA,uDAAuD,QAAQ,WAAW,kBAAkB;AAC5F;AACA;AACA;AACA,8BAA8B;;;;;;;;AC9KjB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oCAAoC,GAAG,+CAA+C,GAAG,2CAA2C,GAAG,yCAAyC,GAAG,gDAAgD,GAAG,4CAA4C,GAAG,0CAA0C,GAAG,6BAA6B,GAAG,6BAA6B;AAC/X,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,qBAAqB,mBAAO,CAAC,KAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,mCAAmC;AACnC;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,mCAAmC;AACnC;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,MAAM,uCAAuC,iBAAiB;AAC9F;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA,oDAAoD,QAAQ,IAAI,KAAK;AACrE;AACA;AACA,0DAA0D,QAAQ,IAAI,uBAAuB;AAC7F;AACA;AACA;AACA;;;;;;;;AC1Oa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,iBAAiB;AACvC,mBAAmB,mBAAO,CAAC,IAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,MAAM,WAAW,gBAAgB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sBAAsB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mBAAmB;;;;;;;;ACjDN;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,oBAAoB,mBAAO,CAAC,IAAmB;AAC/C,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,oBAAoB,mBAAO,CAAC,KAAa;AACzC,mBAAmB,mBAAO,CAAC,KAAkB;AAC7C,mBAAmB,mBAAO,CAAC,KAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,gBAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,sBAAsB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;;;;;;;;ACxFP;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,gBAAgB,mBAAO,CAAC,KAAe;AACvC,qBAAqB,mBAAO,CAAC,KAAc;AAC3C,mBAAmB,mBAAO,CAAC,KAAmB;AAC9C,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,qDAAqD,UAAU;AAC/D;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA,6CAA6C,QAAQ,IAAI,eAAe;AACxE;AACA,iBAAiB;AACjB;AACA;AACA,mBAAmB;AACnB;AACA;AACA,uDAAuD,KAAK,iBAAiB,YAAY;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxIa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,gBAAgB,mBAAO,CAAC,KAAe;AACvC,mBAAmB,mBAAO,CAAC,KAAmB;AAC9C,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,WAAW;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,MAAM,KAAK,eAAe;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;;;;;;;ACtFR;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,gBAAgB,mBAAO,CAAC,KAAe;AACvC,gBAAgB,mBAAO,CAAC,KAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,uBAAuB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,MAAM;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;;;;;;;ACjFN;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,oBAAoB,mBAAO,CAAC,IAAmB;AAC/C,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,oBAAoB,mBAAO,CAAC,KAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sBAAsB;AAC5D,gDAAgD,sBAAsB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,gBAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;;;;;;;AC7GR;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,gBAAgB,mBAAO,CAAC,KAAe;AACvC,qBAAqB,mBAAO,CAAC,KAAc;AAC3C,oBAAoB,mBAAO,CAAC,KAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,WAAW;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,MAAM,QAAQ,gBAAgB;AAC/E;AACA;AACA;AACA,oBAAoB;;;;;;;;AC7EP;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,gBAAgB,mBAAO,CAAC,KAAe;AACvC,oBAAoB,mBAAO,CAAC,KAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,YAAY;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM,WAAW,iBAAiB;AACrF;AACA;AACA;AACA,sBAAsB;;;;;;;;ACpET;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,qBAAqB,GAAG,qBAAqB;AACvE,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,oBAAoB,mBAAO,CAAC,IAAmB;AAC/C,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,uCAAuC,mBAAO,CAAC,KAA4C;AAC3F,mBAAmB,mBAAO,CAAC,IAAY;AACvC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sDAAsD,4BAA4B;AAClF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sDAAsD,4BAA4B;AAClF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,6BAA6B,KAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,6BAA6B,KAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,uBAAuB;;;;;;;;ACnMV;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B,GAAG,yBAAyB,GAAG,qBAAqB;AACnF,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,+BAA+B,mBAAO,CAAC,KAAM;AAC7C,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,gBAAgB,mBAAO,CAAC,KAAe;AACvC,oBAAoB,mBAAO,CAAC,KAAa;AACzC,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,oBAAoB,mBAAO,CAAC,KAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA,gBAAgB,qEAAqE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,KAAK;AAC3D;AACA;AACA;AACA;AACA;AACA,sDAAsD,KAAK;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD,oBAAoB,gCAAgC;AACpD;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD,oBAAoB,gCAAgC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe,OAAO,MAAM,uBAAuB,cAAc;AAChG;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oCAAoC;AACxD;AACA;AACA;AACA,oDAAoD,QAAQ,IAAI,KAAK;AACrE;AACA;AACA;AACA,uEAAuE,QAAQ,KAAK,SAAS;AAC7F;AACA;AACA;AACA;AACA,8DAA8D,QAAQ,IAAI,eAAe;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8DAA8D;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,4DAA4D,UAAU,IAAI,2BAA2B;AACrG,cAAc,OAAO,EAAE,EAAE,gBAAgB;AACzC;AACA,+BAA+B;;;;;;;;AChblB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,oBAAoB,mBAAO,CAAC,KAAa;AACzC,oBAAoB,mBAAO,CAAC,KAAa;AACzC,gBAAgB,mBAAO,CAAC,KAAe;AACvC,8BAA8B,mBAAO,CAAC,KAA6B;AACnE,8BAA8B,mBAAO,CAAC,KAA+B;AACrE,2BAA2B,mBAAO,CAAC,KAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,kCAAkC;AACnF;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA,8DAA8D,UAAU,IAAI,oBAAoB;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sBAAsB;AAC5D,wDAAwD,sBAAsB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sBAAsB;AAC5D,iDAAiD,sBAAsB;AACvE;AACA;AACA,+BAA+B;;;;;;;;ACpGlB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,qBAAqB,mBAAO,CAAC,KAAc;AAC3C,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,gBAAgB,mBAAO,CAAC,KAAe;AACvC,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,oBAAoB,mBAAO,CAAC,KAAqB;AACjD,gBAAgB,mBAAO,CAAC,KAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,qBAAqB,IAAI,MAAM;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,sBAAsB;AAC9G;AACA;AACA;AACA,qBAAqB;;;;;;;;ACzGR;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,gBAAgB,mBAAO,CAAC,KAAe;AACvC,qBAAqB,mBAAO,CAAC,KAAc;AAC3C,yBAAyB,mBAAO,CAAC,KAAkB;AACnD,wBAAwB,mBAAO,CAAC,KAAuB;AACvD,wBAAwB,mBAAO,CAAC,KAAyB;AACzD,gBAAgB,mBAAO,CAAC,KAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,qBAAqB,IAAI,MAAM;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;;;;;;;ACzGZ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,gBAAgB,mBAAO,CAAC,KAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;;;;;;;ACzDH;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,sBAAsB,GAAG,0BAA0B,GAAG,0BAA0B;AACzG,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,gBAAgB,mBAAO,CAAC,KAAe;AACvC,gBAAgB,mBAAO,CAAC,KAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,eAAe;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,eAAe;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU;AAC3C;AACA;AACA,wCAAwC,MAAM,WAAW,gBAAgB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM,WAAW,gBAAgB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;;;;;;;ACrUT;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,gBAAgB,mBAAO,CAAC,KAAe;AACvC,oBAAoB,mBAAO,CAAC,KAAa;AACzC,qBAAqB,mBAAO,CAAC,KAAc;AAC3C,eAAe,mBAAO,CAAC,KAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA,mDAAmD,uCAAuC;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,KAAK;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;AChMJ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,gBAAgB,mBAAO,CAAC,KAAe;AACvC,qBAAqB,mBAAO,CAAC,KAAc;AAC3C,qBAAqB,mBAAO,CAAC,KAAoB;AACjD,qBAAqB,mBAAO,CAAC,KAAsB;AACnD,gBAAgB,mBAAO,CAAC,KAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,qBAAqB,IAAI,OAAO;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,sBAAsB;AAC7G;AACA;AACA;AACA,uBAAuB;;;;;;;;ACnGV;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,gBAAgB,mBAAO,CAAC,KAAe;AACvC,yBAAyB,mBAAO,CAAC,KAAkB;AACnD,yBAAyB,mBAAO,CAAC,KAAwB;AACzD,yBAAyB,mBAAO,CAAC,KAA0B;AAC3D,gBAAgB,mBAAO,CAAC,KAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,qBAAqB,IAAI,OAAO;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;AChGd;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,qBAAqB,GAAG,mBAAmB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;AACA;AACA;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;AACA,oBAAoB,aAAa;AACjC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA,uBAAuB;;;;;;;;;AC7CV;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB,GAAG,wBAAwB,GAAG,iBAAiB,GAAG,mBAAmB,GAAG,2BAA2B,GAAG,iBAAiB,GAAG,cAAc;AAC5J,oBAAoB,mBAAO,CAAC,KAAsB;AAClD,gBAAgB,mBAAO,CAAC,KAAS;AACjC;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,oBAAoB;;;;;;;;AC/EP;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB;AACA,sDAAsD,WAAW,qBAAqB;AACtF;AACA,kBAAkB;;;;;;;;ACNL;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oCAAoC;AACpC,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1Fa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,oBAAoB,mBAAO,CAAC,KAAsB;AAClD;AACA;AACA;AACA;AACA,wCAAwC,YAAY;AACpD;AACA;AACA;AACA;AACA;AACA,gBAAgB;;;;;;;;ACdH;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qCAAqC,GAAG,gBAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,UAAU,gBAAgB,YAAY;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,eAAe,YAAY,YAAY;AACtG;AACA;AACA;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,iBAAiB;AACrE;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,iBAAiB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3Oa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8BAA8B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;;;;;;;AC7DH;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,OAAO,IAAI,OAAO;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;AC9Eb;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B;AAC9B,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,OAAO,IAAI,OAAO;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA,8BAA8B;;;;;;;;ACtFjB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;ACzDX;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iCAAiC;AACjC,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,gBAAgB,mBAAO,CAAC,KAAe;AACvC,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,gBAAgB,UAAU;AAC3F;AACA;AACA;AACA,6DAA6D,uCAAuC;AACpG;AACA;AACA,iCAAiC;;;;;;;;ACvFpB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iCAAiC;AACjC,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,2BAA2B,mBAAO,CAAC,KAAqB;AACxD,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,gBAAgB,UAAU;AAC3F;AACA;AACA;AACA,6DAA6D,uCAAuC;AACpG;AACA;AACA,iCAAiC;;;;;;;;AC1FpB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,qBAAqB,mBAAO,CAAC,KAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;;;;;;;ACrCZ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B;AAC7B,yBAAyB,mBAAO,CAAC,KAAkB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;;;;;;;ACvBhB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,mBAAmB,mBAAO,CAAC,KAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;;;;;;ACtDL;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,OAAO,IAAI,aAAa;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;AChJf;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gCAAgC;AAChC,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,OAAO,IAAI,aAAa;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;;;;;;;;ACpLnB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;AC1Eb;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mCAAmC;AACnC,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,gBAAgB,mBAAO,CAAC,KAAe;AACvC,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gCAAgC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,gBAAgB,UAAU;AAC3F;AACA;AACA;AACA,+DAA+D,uCAAuC;AACtG;AACA;AACA,mCAAmC;;;;;;;;ACpKtB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mCAAmC;AACnC,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,gBAAgB,UAAU;AAC3F;AACA;AACA;AACA,+DAA+D,uCAAuC;AACtG;AACA;AACA,mCAAmC;;;;;;;;ACzFtB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,qBAAqB,mBAAO,CAAC,KAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;AC9Bd;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,iCAAiC,mBAAO,CAAC,KAAmC;AAC5E,yBAAyB,mBAAO,CAAC,KAAkB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B","sources":["webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/branchNodeStruct.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/index.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/abstract.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/array.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/arrayBasic.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/arrayComposite.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/basic.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/bitArray.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/bitList.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/bitVector.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/boolean.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/byteArray.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/byteList.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/byteVector.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/composite.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/container.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/containerNodeStruct.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/listBasic.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/listComposite.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/none.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/uint.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/union.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/vectorBasic.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/type/vectorComposite.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/util/byteArray.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/util/merkleize.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/util/named.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/util/proof/treePostProcessFromProofNode.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/util/zeros.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/value/bitArray.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/view/abstract.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/view/arrayBasic.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/view/arrayComposite.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/view/bitArray.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/view/container.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/view/containerNodeStruct.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/view/listBasic.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/view/listComposite.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/viewDU/abstract.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/viewDU/arrayBasic.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/viewDU/arrayComposite.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/viewDU/bitArray.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/viewDU/container.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/viewDU/containerNodeStruct.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/viewDU/listBasic.js","webpack://mask-network/./node_modules/.pnpm/@chainsafe+ssz@0.9.4/node_modules/@chainsafe/ssz/lib/viewDU/listComposite.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BranchNodeStruct = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\n/**\n * BranchNode whose children's data is represented as a struct, not a tree.\n *\n * This approach is usefull for memory efficiency of data that is not modified often, for example the validators\n * registry in Ethereum consensus `state.validators`. The tradeoff is that getting the hash, are proofs is more\n * expensive because the tree has to be recreated every time.\n */\nclass BranchNodeStruct extends persistent_merkle_tree_1.Node {\n    constructor(valueToNode, value) {\n        // First null value is to save an extra variable to check if a node has a root or not\n        super(null, 0, 0, 0, 0, 0, 0, 0);\n        this.valueToNode = valueToNode;\n        this.value = value;\n    }\n    get rootHashObject() {\n        if (this.h0 === null) {\n            const node = this.valueToNode(this.value);\n            super.applyHash(node.rootHashObject);\n        }\n        return this;\n    }\n    get root() {\n        return persistent_merkle_tree_1.hashObjectToUint8Array(this.rootHashObject);\n    }\n    isLeaf() {\n        return false;\n    }\n    get left() {\n        return this.valueToNode(this.value).left;\n    }\n    get right() {\n        return this.valueToNode(this.value).right;\n    }\n}\nexports.BranchNodeStruct = BranchNodeStruct;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hash64 = exports.byteArrayEquals = exports.toHexString = exports.fromHexString = exports.getUint8ByteToBitBooleanArray = exports.BitArray = exports.TreeViewDU = exports.TreeView = exports.isCompositeType = exports.CompositeType = exports.isBasicType = exports.BasicType = exports.Type = exports.ByteArrayType = exports.BitArrayType = exports.ArrayType = exports.VectorCompositeType = exports.VectorBasicType = exports.UnionType = exports.UintNumberType = exports.UintBigintType = exports.NoneType = exports.ListCompositeType = exports.ListBasicType = exports.ContainerNodeStructType = exports.ContainerType = exports.ByteVectorType = exports.ByteListType = exports.BooleanType = exports.BitVectorType = exports.BitListType = void 0;\n// Types\nvar bitList_1 = require(\"./type/bitList\");\nObject.defineProperty(exports, \"BitListType\", { enumerable: true, get: function () { return bitList_1.BitListType; } });\nvar bitVector_1 = require(\"./type/bitVector\");\nObject.defineProperty(exports, \"BitVectorType\", { enumerable: true, get: function () { return bitVector_1.BitVectorType; } });\nvar boolean_1 = require(\"./type/boolean\");\nObject.defineProperty(exports, \"BooleanType\", { enumerable: true, get: function () { return boolean_1.BooleanType; } });\nvar byteList_1 = require(\"./type/byteList\");\nObject.defineProperty(exports, \"ByteListType\", { enumerable: true, get: function () { return byteList_1.ByteListType; } });\nvar byteVector_1 = require(\"./type/byteVector\");\nObject.defineProperty(exports, \"ByteVectorType\", { enumerable: true, get: function () { return byteVector_1.ByteVectorType; } });\nvar container_1 = require(\"./type/container\");\nObject.defineProperty(exports, \"ContainerType\", { enumerable: true, get: function () { return container_1.ContainerType; } });\nvar containerNodeStruct_1 = require(\"./type/containerNodeStruct\");\nObject.defineProperty(exports, \"ContainerNodeStructType\", { enumerable: true, get: function () { return containerNodeStruct_1.ContainerNodeStructType; } });\nvar listBasic_1 = require(\"./type/listBasic\");\nObject.defineProperty(exports, \"ListBasicType\", { enumerable: true, get: function () { return listBasic_1.ListBasicType; } });\nvar listComposite_1 = require(\"./type/listComposite\");\nObject.defineProperty(exports, \"ListCompositeType\", { enumerable: true, get: function () { return listComposite_1.ListCompositeType; } });\nvar none_1 = require(\"./type/none\");\nObject.defineProperty(exports, \"NoneType\", { enumerable: true, get: function () { return none_1.NoneType; } });\nvar uint_1 = require(\"./type/uint\");\nObject.defineProperty(exports, \"UintBigintType\", { enumerable: true, get: function () { return uint_1.UintBigintType; } });\nObject.defineProperty(exports, \"UintNumberType\", { enumerable: true, get: function () { return uint_1.UintNumberType; } });\nvar union_1 = require(\"./type/union\");\nObject.defineProperty(exports, \"UnionType\", { enumerable: true, get: function () { return union_1.UnionType; } });\nvar vectorBasic_1 = require(\"./type/vectorBasic\");\nObject.defineProperty(exports, \"VectorBasicType\", { enumerable: true, get: function () { return vectorBasic_1.VectorBasicType; } });\nvar vectorComposite_1 = require(\"./type/vectorComposite\");\nObject.defineProperty(exports, \"VectorCompositeType\", { enumerable: true, get: function () { return vectorComposite_1.VectorCompositeType; } });\n// Base types\nvar array_1 = require(\"./type/array\");\nObject.defineProperty(exports, \"ArrayType\", { enumerable: true, get: function () { return array_1.ArrayType; } });\nvar bitArray_1 = require(\"./type/bitArray\");\nObject.defineProperty(exports, \"BitArrayType\", { enumerable: true, get: function () { return bitArray_1.BitArrayType; } });\nvar byteArray_1 = require(\"./type/byteArray\");\nObject.defineProperty(exports, \"ByteArrayType\", { enumerable: true, get: function () { return byteArray_1.ByteArrayType; } });\n// Base type clases\nvar abstract_1 = require(\"./type/abstract\");\nObject.defineProperty(exports, \"Type\", { enumerable: true, get: function () { return abstract_1.Type; } });\nvar basic_1 = require(\"./type/basic\");\nObject.defineProperty(exports, \"BasicType\", { enumerable: true, get: function () { return basic_1.BasicType; } });\nObject.defineProperty(exports, \"isBasicType\", { enumerable: true, get: function () { return basic_1.isBasicType; } });\nvar composite_1 = require(\"./type/composite\");\nObject.defineProperty(exports, \"CompositeType\", { enumerable: true, get: function () { return composite_1.CompositeType; } });\nObject.defineProperty(exports, \"isCompositeType\", { enumerable: true, get: function () { return composite_1.isCompositeType; } });\nvar abstract_2 = require(\"./view/abstract\");\nObject.defineProperty(exports, \"TreeView\", { enumerable: true, get: function () { return abstract_2.TreeView; } });\nvar abstract_3 = require(\"./viewDU/abstract\");\nObject.defineProperty(exports, \"TreeViewDU\", { enumerable: true, get: function () { return abstract_3.TreeViewDU; } });\n// Values\nvar bitArray_2 = require(\"./value/bitArray\");\nObject.defineProperty(exports, \"BitArray\", { enumerable: true, get: function () { return bitArray_2.BitArray; } });\nObject.defineProperty(exports, \"getUint8ByteToBitBooleanArray\", { enumerable: true, get: function () { return bitArray_2.getUint8ByteToBitBooleanArray; } });\n// Utils\nvar byteArray_2 = require(\"./util/byteArray\");\nObject.defineProperty(exports, \"fromHexString\", { enumerable: true, get: function () { return byteArray_2.fromHexString; } });\nObject.defineProperty(exports, \"toHexString\", { enumerable: true, get: function () { return byteArray_2.toHexString; } });\nObject.defineProperty(exports, \"byteArrayEquals\", { enumerable: true, get: function () { return byteArray_2.byteArrayEquals; } });\nvar merkleize_1 = require(\"./util/merkleize\");\nObject.defineProperty(exports, \"hash64\", { enumerable: true, get: function () { return merkleize_1.hash64; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Type = void 0;\n/**\n * An SSZ type provides the following operations:\n * - Serialization from/to bytes to either a value or a tree\n * - Merkelization to compute the hashTreeRoot of both a value and a tree\n * - Proof creation from trees\n * - Create a View and a ViewDU instance from a tree\n * - Manipulate views\n */\nclass Type {\n    /** INTERNAL METHOD: Merkleize value to tree */\n    value_toTree(value) {\n        // TODO: Un-performant path but useful for prototyping. Overwrite in Type if performance is important\n        const uint8Array = new Uint8Array(this.value_serializedSize(value));\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        this.value_serializeToBytes({ uint8Array, dataView }, 0, value);\n        return this.tree_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);\n    }\n    /** INTERNAL METHOD: Un-merkleize tree to value */\n    tree_toValue(node) {\n        // TODO: Un-performant path but useful for prototyping. Overwrite in Type if performance is important\n        const uint8Array = new Uint8Array(this.tree_serializedSize(node));\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        this.tree_serializeToBytes({ uint8Array, dataView }, 0, node);\n        return this.value_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);\n    }\n    /** Serialize a value to binary data */\n    serialize(value) {\n        const uint8Array = new Uint8Array(this.value_serializedSize(value));\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        this.value_serializeToBytes({ uint8Array, dataView }, 0, value);\n        return uint8Array;\n    }\n    /** Deserialize binary data to value */\n    deserialize(uint8Array) {\n        // Buffer.prototype.slice does not copy memory, force use Uint8Array.prototype.slice https://github.com/nodejs/node/issues/28087\n        // - Uint8Array.prototype.slice: Copy memory, safe to mutate\n        // - Buffer.prototype.slice: Does NOT copy memory, mutation affects both views\n        // We could ensure that all Buffer instances are converted to Uint8Array before calling value_deserializeFromBytes\n        // However doing that in a browser friendly way is not easy. Downstream code uses `Uint8Array.prototype.slice.call`\n        // to ensure Buffer.prototype.slice is never used. Unit tests also test non-mutability.\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        return this.value_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);\n    }\n}\nexports.Type = Type;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst composite_1 = require(\"./composite\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * Array: ordered homogeneous collection\n */\nclass ArrayType extends composite_1.CompositeType {\n    constructor(elementType) {\n        super();\n        this.elementType = elementType;\n    }\n    defaultValue() {\n        return arrayBasic_1.value_defaultValueArray(this.elementType, this.defaultLen);\n    }\n    // Proofs\n    getPropertyType() {\n        return this.elementType;\n    }\n    getPropertyGindex(prop) {\n        if (typeof prop !== \"number\") {\n            throw Error(`Invalid array index: ${prop}`);\n        }\n        const chunkIdx = Math.floor(prop / this.itemsPerChunk);\n        return persistent_merkle_tree_1.toGindex(this.depth, BigInt(chunkIdx));\n    }\n    getIndexProperty(index) {\n        return index;\n    }\n    tree_getLeafGindices(rootGindex, rootNode) {\n        let length;\n        if (this.isList) {\n            if (!rootNode) {\n                throw new Error(\"List type requires tree argument to get leaves\");\n            }\n            length = this.tree_getLength(rootNode);\n        }\n        else {\n            // Vectors don't need a rootNode to return length\n            length = this.tree_getLength(null);\n        }\n        const gindices = [];\n        if (composite_1.isCompositeType(this.elementType)) {\n            // Underlying elements exist one per chunk\n            // Iterate through chunk gindices, recursively fetching leaf gindices from each chunk\n            const startIndex = persistent_merkle_tree_1.toGindex(this.depth, BigInt(0));\n            const endGindex = startIndex + BigInt(length);\n            const extendedStartIndex = persistent_merkle_tree_1.concatGindices([rootGindex, startIndex]);\n            if (this.elementType.fixedSize === null) {\n                if (!rootNode) {\n                    /* istanbul ignore next - unreachable code */\n                    throw new Error(\"Array of variable size requires tree argument to get leaves\");\n                }\n                // variable-length elements must pass the underlying subtrees to determine the length\n                for (let gindex = startIndex, extendedGindex = extendedStartIndex; gindex < endGindex; gindex++, extendedGindex++) {\n                    gindices.push(...this.elementType.tree_getLeafGindices(extendedGindex, persistent_merkle_tree_1.getNode(rootNode, gindex)));\n                }\n            }\n            else {\n                for (let i = 0, extendedGindex = extendedStartIndex; i < length; i++, extendedGindex++) {\n                    gindices.push(...this.elementType.tree_getLeafGindices(extendedGindex));\n                }\n            }\n        }\n        // Basic\n        else {\n            const chunkCount = Math.ceil(length / this.itemsPerChunk);\n            const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);\n            const endGindex = startIndex + BigInt(chunkCount);\n            for (let gindex = startIndex; gindex < endGindex; gindex++) {\n                gindices.push(gindex);\n            }\n        }\n        // include the length chunk\n        if (this.isList) {\n            gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));\n        }\n        return gindices;\n    }\n    // JSON\n    fromJson(json) {\n        // TODO: Do a better typesafe approach, all final classes of ArrayType implement ArrayProps\n        // There are multiple tests that cover this path for all clases\n        return arrayBasic_1.value_fromJsonArray(this.elementType, json, this);\n    }\n    toJson(value) {\n        return arrayBasic_1.value_toJsonArray(this.elementType, value, this);\n    }\n    clone(value) {\n        return arrayBasic_1.value_cloneArray(this.elementType, value);\n    }\n    equals(a, b) {\n        return arrayBasic_1.value_equals(this.elementType, a, b);\n    }\n}\nexports.ArrayType = ArrayType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertValidArrayLength = exports.value_defaultValueArray = exports.value_equals = exports.value_cloneArray = exports.value_toJsonArray = exports.value_fromJsonArray = exports.tree_deserializeFromBytesArrayBasic = exports.tree_serializeToBytesArrayBasic = exports.value_deserializeFromBytesArrayBasic = exports.value_serializeToBytesArrayBasic = exports.setChunksNode = exports.addLengthNode = exports.getChunksNodeFromRootNode = exports.getLengthFromRootNode = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\n// There's a matrix of Array-ish types that require a combination of this functions.\n// Regular class extends syntax doesn't work because it can only extend a single class.\n//\n// Type of array: List, Vector. Changes length property\n// Type of element: Basic, Composite. Changes merkelization if packing or not.\n// If Composite: Fixed len, Variable len. Changes the serialization requiring offsets.\n/**\n * SSZ Lists (variable-length arrays) include the length of the list in the tree\n * This length is always in the same index in the tree\n * ```\n *   1\n *  / \\\n * 2   3 // <-here\n * ```\n */\nfunction getLengthFromRootNode(node) {\n    // Length is represented as a Uint32 at the start of the chunk:\n    // 4 = 4 bytes in Uint32\n    // 0 = 0 offset bytes in Node's data\n    return node.right.getUint(4, 0);\n}\nexports.getLengthFromRootNode = getLengthFromRootNode;\nfunction getChunksNodeFromRootNode(node) {\n    return node.left;\n}\nexports.getChunksNodeFromRootNode = getChunksNodeFromRootNode;\nfunction addLengthNode(chunksNode, length) {\n    return new persistent_merkle_tree_1.BranchNode(chunksNode, persistent_merkle_tree_1.LeafNode.fromUint32(length));\n}\nexports.addLengthNode = addLengthNode;\nfunction setChunksNode(rootNode, chunksNode, newLength) {\n    const lengthNode = newLength !== undefined\n        ? // If newLength is set, create a new node for length\n            persistent_merkle_tree_1.LeafNode.fromUint32(newLength)\n        : // else re-use existing node\n            rootNode.right;\n    return new persistent_merkle_tree_1.BranchNode(chunksNode, lengthNode);\n}\nexports.setChunksNode = setChunksNode;\n/**\n * @param length In List length = value.length, Vector length = fixed value\n */\nfunction value_serializeToBytesArrayBasic(elementType, length, output, offset, value) {\n    const elSize = elementType.byteLength;\n    for (let i = 0; i < length; i++) {\n        elementType.value_serializeToBytes(output, offset + i * elSize, value[i]);\n    }\n    return offset + length * elSize;\n}\nexports.value_serializeToBytesArrayBasic = value_serializeToBytesArrayBasic;\nfunction value_deserializeFromBytesArrayBasic(elementType, data, start, end, arrayProps) {\n    const elSize = elementType.byteLength;\n    // Vector + List length validation\n    const length = (end - start) / elSize;\n    assertValidArrayLength(length, arrayProps, true);\n    const values = new Array(length);\n    for (let i = 0; i < length; i++) {\n        // TODO: If faster, consider skipping size check for uint types\n        values[i] = elementType.value_deserializeFromBytes(data, start + i * elSize, start + (i + 1) * elSize);\n    }\n    return values;\n}\nexports.value_deserializeFromBytesArrayBasic = value_deserializeFromBytesArrayBasic;\n/**\n * @param length In List length = value.length, Vector length = fixed value\n */\nfunction tree_serializeToBytesArrayBasic(elementType, length, depth, output, offset, node) {\n    const size = elementType.byteLength * length;\n    const chunkCount = Math.ceil(size / 32);\n    const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, depth, 0, chunkCount);\n    persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, size, nodes);\n    return offset + size;\n}\nexports.tree_serializeToBytesArrayBasic = tree_serializeToBytesArrayBasic;\n// List of basic elements will pack them in merkelized form\nfunction tree_deserializeFromBytesArrayBasic(elementType, chunkDepth, data, start, end, arrayProps) {\n    // Vector + List length validation\n    const length = (end - start) / elementType.byteLength;\n    assertValidArrayLength(length, arrayProps, true);\n    // Abstract converting data to LeafNode to allow for custom data representation, such as the hashObject\n    const chunksNode = persistent_merkle_tree_1.packedRootsBytesToNode(chunkDepth, data.dataView, start, end);\n    if (arrayProps.isList) {\n        return addLengthNode(chunksNode, length);\n    }\n    else {\n        return chunksNode;\n    }\n}\nexports.tree_deserializeFromBytesArrayBasic = tree_deserializeFromBytesArrayBasic;\n/**\n * @param length In List length = undefined, Vector length = fixed value\n */\nfunction value_fromJsonArray(elementType, json, arrayProps) {\n    if (!Array.isArray(json)) {\n        throw Error(\"JSON is not an array\");\n    }\n    assertValidArrayLength(json.length, arrayProps);\n    const value = new Array(json.length);\n    for (let i = 0; i < json.length; i++) {\n        value[i] = elementType.fromJson(json[i]);\n    }\n    return value;\n}\nexports.value_fromJsonArray = value_fromJsonArray;\n/**\n * @param length In List length = undefined, Vector length = fixed value\n */\nfunction value_toJsonArray(elementType, value, arrayProps) {\n    const length = arrayProps.isList ? value.length : arrayProps.length;\n    const json = new Array(length);\n    for (let i = 0; i < length; i++) {\n        json[i] = elementType.toJson(value[i]);\n    }\n    return json;\n}\nexports.value_toJsonArray = value_toJsonArray;\n/**\n * Clone recursively an array of basic or composite types\n */\nfunction value_cloneArray(elementType, value) {\n    const newValue = new Array(value.length);\n    for (let i = 0; i < value.length; i++) {\n        newValue[i] = elementType.clone(value[i]);\n    }\n    return newValue;\n}\nexports.value_cloneArray = value_cloneArray;\n/**\n * Check recursively if a type is structuraly equal. Returns early\n */\nfunction value_equals(elementType, a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (!elementType.equals(a[i], b[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.value_equals = value_equals;\nfunction value_defaultValueArray(elementType, length) {\n    const values = new Array(length);\n    for (let i = 0; i < length; i++) {\n        values[i] = elementType.defaultValue();\n    }\n    return values;\n}\nexports.value_defaultValueArray = value_defaultValueArray;\n/**\n * @param checkNonDecimalLength Check that length is a multiple of element size.\n * Optional since it's not necessary in getOffsetsArrayComposite() fn.\n */\nfunction assertValidArrayLength(length, arrayProps, checkNonDecimalLength) {\n    if (checkNonDecimalLength && length % 1 !== 0) {\n        throw Error(\"size not multiple of element fixedSize\");\n    }\n    // Vector + List length validation\n    if (arrayProps.isList) {\n        if (length > arrayProps.limit) {\n            throw new Error(`Invalid list length ${length} over limit ${arrayProps.limit}`);\n        }\n    }\n    else {\n        if (length !== arrayProps.length) {\n            throw new Error(`Incorrect vector length ${length} expected ${arrayProps.length}`);\n        }\n    }\n}\nexports.assertValidArrayLength = assertValidArrayLength;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.value_getRootsArrayComposite = exports.tree_deserializeFromBytesArrayComposite = exports.tree_serializeToBytesArrayComposite = exports.tree_serializedSizeArrayComposite = exports.value_deserializeFromBytesArrayComposite = exports.value_serializeToBytesArrayComposite = exports.value_serializedSizeArrayComposite = exports.maxSizeArrayComposite = exports.minSizeArrayComposite = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nfunction minSizeArrayComposite(elementType, minCount) {\n    // Variable Length\n    if (elementType.fixedSize === null) {\n        return minCount * (4 + elementType.minSize);\n    }\n    // Fixed length\n    else {\n        return minCount * elementType.minSize;\n    }\n}\nexports.minSizeArrayComposite = minSizeArrayComposite;\nfunction maxSizeArrayComposite(elementType, maxCount) {\n    // Variable Length\n    if (elementType.fixedSize === null) {\n        return maxCount * (4 + elementType.maxSize);\n    }\n    // Fixed length\n    else {\n        return maxCount * elementType.maxSize;\n    }\n}\nexports.maxSizeArrayComposite = maxSizeArrayComposite;\nfunction value_serializedSizeArrayComposite(elementType, length, value) {\n    // Variable Length\n    if (elementType.fixedSize === null) {\n        let size = 0;\n        for (let i = 0; i < length; i++) {\n            size += 4 + elementType.value_serializedSize(value[i]);\n        }\n        return size;\n    }\n    // Fixed length\n    else {\n        return length * elementType.fixedSize;\n    }\n}\nexports.value_serializedSizeArrayComposite = value_serializedSizeArrayComposite;\n/**\n * @param length In List length = value.length, Vector length = fixed value\n */\nfunction value_serializeToBytesArrayComposite(elementType, length, output, offset, value) {\n    // Variable length\n    if (elementType.fixedSize === null) {\n        let variableIndex = offset + length * 4;\n        for (let i = 0; i < length; i++) {\n            // write offset\n            output.dataView.setUint32(offset + i * 4, variableIndex - offset, true);\n            // write serialized element to variable section\n            variableIndex = elementType.value_serializeToBytes(output, variableIndex, value[i]);\n        }\n        return variableIndex;\n    }\n    // Fixed length\n    else {\n        for (let i = 0; i < length; i++) {\n            elementType.value_serializeToBytes(output, offset + i * elementType.fixedSize, value[i]);\n        }\n        return offset + length * elementType.fixedSize;\n    }\n}\nexports.value_serializeToBytesArrayComposite = value_serializeToBytesArrayComposite;\nfunction value_deserializeFromBytesArrayComposite(elementType, data, start, end, arrayProps) {\n    const offsets = readOffsetsArrayComposite(elementType.fixedSize, data.dataView, start, end, arrayProps);\n    const length = offsets.length; // Capture length before pushing end offset\n    const values = new Array(length);\n    // offests include the last element end\n    for (let i = 0; i < length; i++) {\n        // The offsets are relative to the start\n        const startEl = start + offsets[i];\n        const endEl = i === length - 1 ? end : start + offsets[i + 1];\n        values[i] = elementType.value_deserializeFromBytes(data, startEl, endEl);\n    }\n    return values;\n}\nexports.value_deserializeFromBytesArrayComposite = value_deserializeFromBytesArrayComposite;\n/**\n * @param length In List length = value.length, Vector length = fixed value\n */\nfunction tree_serializedSizeArrayComposite(elementType, length, depth, node) {\n    // Variable Length\n    if (elementType.fixedSize === null) {\n        const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, depth, 0, length);\n        let size = 0;\n        for (let i = 0; i < nodes.length; i++) {\n            size += 4 + elementType.tree_serializedSize(nodes[i]);\n        }\n        return size;\n    }\n    // Fixed length\n    else {\n        return length * elementType.fixedSize;\n    }\n}\nexports.tree_serializedSizeArrayComposite = tree_serializedSizeArrayComposite;\n/**\n * @param length In List length = value.length, Vector length = fixed value\n */\nfunction tree_serializeToBytesArrayComposite(elementType, length, depth, node, output, offset) {\n    const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, depth, 0, length);\n    // Variable Length\n    // Indices contain offsets, which are indices deeper in the byte array\n    if (elementType.fixedSize === null) {\n        let variableIndex = offset + length * 4;\n        const { dataView } = output;\n        for (let i = 0; i < nodes.length; i++) {\n            // write offset\n            dataView.setUint32(offset + i * 4, variableIndex - offset, true);\n            // write serialized element to variable section\n            variableIndex = elementType.tree_serializeToBytes(output, variableIndex, nodes[i]);\n        }\n        return variableIndex;\n    }\n    // Fixed length\n    else {\n        for (let i = 0; i < nodes.length; i++) {\n            offset = elementType.tree_serializeToBytes(output, offset, nodes[i]);\n        }\n        return offset;\n    }\n}\nexports.tree_serializeToBytesArrayComposite = tree_serializeToBytesArrayComposite;\nfunction tree_deserializeFromBytesArrayComposite(elementType, chunkDepth, data, start, end, arrayProps) {\n    const offsets = readOffsetsArrayComposite(elementType.fixedSize, data.dataView, start, end, arrayProps);\n    const length = offsets.length; // Capture length before pushing end offset\n    const nodes = new Array(length);\n    // offests include the last element end\n    for (let i = 0; i < length; i++) {\n        // The offsets are relative to the start\n        const startEl = start + offsets[i];\n        const endEl = i === length - 1 ? end : start + offsets[i + 1];\n        nodes[i] = elementType.tree_deserializeFromBytes(data, startEl, endEl);\n    }\n    // Abstract converting data to LeafNode to allow for custom data representation, such as the hashObject\n    const chunksNode = persistent_merkle_tree_1.subtreeFillToContents(nodes, chunkDepth);\n    // TODO: Add LeafNode.fromUint()\n    if (arrayProps.isList) {\n        return arrayBasic_1.addLengthNode(chunksNode, length);\n    }\n    else {\n        return chunksNode;\n    }\n}\nexports.tree_deserializeFromBytesArrayComposite = tree_deserializeFromBytesArrayComposite;\n/**\n * @param length In List length = value.length, Vector length = fixed value\n */\nfunction value_getRootsArrayComposite(elementType, length, value) {\n    const roots = new Array(length);\n    for (let i = 0; i < length; i++) {\n        roots[i] = elementType.hashTreeRoot(value[i]);\n    }\n    return roots;\n}\nexports.value_getRootsArrayComposite = value_getRootsArrayComposite;\nfunction readOffsetsArrayComposite(elementFixedSize, data, start, end, arrayProps) {\n    const size = end - start;\n    let offsets;\n    // Variable Length\n    // Indices contain offsets, which are indices deeper in the byte array\n    if (elementFixedSize === null) {\n        offsets = readVariableOffsetsArrayComposite(data, start, size);\n    }\n    // Fixed length\n    else {\n        // There's no valid CompositeType with fixed size 0, it's un-rechable code. But prevents diving by zero\n        /* istanbul ignore if */\n        if (elementFixedSize === 0) {\n            throw Error(\"element fixed length is 0\");\n        }\n        if (size % elementFixedSize !== 0) {\n            throw Error(`size ${size} is not multiple of element fixedSize ${elementFixedSize}`);\n        }\n        const length = size / elementFixedSize;\n        offsets = new Uint32Array(length);\n        for (let i = 0; i < length; i++) {\n            offsets[i] = i * elementFixedSize;\n        }\n    }\n    // Vector + List length validation\n    arrayBasic_1.assertValidArrayLength(offsets.length, arrayProps);\n    return offsets;\n}\n/**\n * Reads the values of contiguous variable offsets. Provided buffer includes offsets that point to position\n * within `size`. This function also validates that all offsets are in range.\n */\nfunction readVariableOffsetsArrayComposite(dataView, start, size) {\n    if (size === 0) {\n        return new Uint32Array(0);\n    }\n    // all elements are variable-sized\n    // indices contain offsets, which are indices deeper in the byte array\n    // The serialized data will start with offsets of all the serialized objects (BYTES_PER_LENGTH_OFFSET bytes each)\n    const firstOffset = dataView.getUint32(start, true);\n    // Using the first offset, we can compute the length of the list (divide by BYTES_PER_LENGTH_OFFSET), as it gives\n    // us the total number of bytes in the offset data\n    const offsetDataLength = firstOffset;\n    if (firstOffset === 0) {\n        throw Error(\"First offset must be > 0\");\n    }\n    if (offsetDataLength % 4 !== 0) {\n        throw Error(\"Offset data length not multiple of 4\");\n    }\n    const offsetCount = offsetDataLength / 4;\n    const offsets = new Uint32Array(offsetCount);\n    offsets[0] = firstOffset;\n    // ArrayComposite has a contiguous section of offsets, then the data\n    //\n    //    [offset 1] [offset 2] [data 1 ..........] [data 2 ..]\n    // 0x 08000000   0e000000   010002000300        01000200\n    //\n    // Ensure that:\n    // - Offsets point to regions of > 0 bytes, i.e. are increasing\n    // - Offsets don't point to bytes outside of the array's size\n    //\n    // In the example above the first offset is 8, so 8 / 4 = 2 offsets.\n    // Then, read the rest of offsets to get offsets = [8, 14]\n    for (let offsetIdx = 1; offsetIdx < offsetCount; offsetIdx++) {\n        const offset = dataView.getUint32(start + offsetIdx * 4, true);\n        offsets[offsetIdx] = offset;\n        // Offsets must point to data within the Array bytes section\n        if (offset > size) {\n            throw new Error(`Offset out of bounds ${offset} > ${size}`);\n        }\n        if (offset < offsets[offsetIdx - 1]) {\n            throw new Error(`Offsets must be increasing ${offset} < ${offsets[offsetIdx - 1]}`);\n        }\n    }\n    return offsets;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBasicType = exports.BasicType = void 0;\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * Represents a basic type as defined in the spec:\n * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#basic-types\n */\nclass BasicType extends abstract_1.Type {\n    constructor() {\n        super(...arguments);\n        this.isBasic = true;\n        // Basic types merkleize to exactly one chunk, thus depth of 0\n        this.depth = 0;\n        // Basic types merkleize to exactly one chunk\n        this.maxChunkCount = 1;\n    }\n    value_serializedSize() {\n        return this.byteLength;\n    }\n    tree_serializedSize() {\n        return this.byteLength;\n    }\n    assertValidSize(size) {\n        if (size !== this.byteLength) {\n            throw Error(`BasicType invalid size ${size} expected ${this.byteLength}`);\n        }\n    }\n    hashTreeRoot(value) {\n        // TODO: Optimize\n        const uint8Array = new Uint8Array(32);\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        this.value_serializeToBytes({ uint8Array, dataView }, 0, value);\n        return uint8Array;\n    }\n    clone(value) {\n        // All basic types are represented by primitive Javascript types, don't require clone\n        return value;\n    }\n    equals(a, b) {\n        // All basic types are represented by primitive Javascript types, the operator === is sufficient\n        return a === b;\n    }\n}\nexports.BasicType = BasicType;\nfunction isBasicType(type) {\n    return type.isBasic;\n}\nexports.isBasicType = isBasicType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitArrayType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst byteArray_1 = require(\"../util/byteArray\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst composite_1 = require(\"./composite\");\nconst bitArray_1 = require(\"../view/bitArray\");\nconst bitArray_2 = require(\"../viewDU/bitArray\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * BitArray: ordered array collection of boolean values\n * - Value: `BitArray`, @see BitArray for a justification of its memory efficiency and performance\n * - View: `BitArrayTreeView`\n * - ViewDU: `BitArrayTreeViewDU`\n */\nclass BitArrayType extends composite_1.CompositeType {\n    constructor() {\n        super(...arguments);\n        this.isViewMutable = true;\n    }\n    getView(tree) {\n        return new bitArray_1.BitArrayTreeView(this, tree);\n    }\n    getViewDU(node) {\n        return new bitArray_2.BitArrayTreeViewDU(this, node);\n    }\n    commitView(view) {\n        return view.node;\n    }\n    commitViewDU(view) {\n        view.commit();\n        return view.node;\n    }\n    cacheOfViewDU(view) {\n        return view.cache;\n    }\n    // Merkleization\n    getRoots(value) {\n        return merkleize_1.splitIntoRootChunks(value.uint8Array);\n    }\n    // Proofs\n    getPropertyGindex() {\n        // Stop navigating below this type. Must only request complete data\n        return null;\n    }\n    getPropertyType() {\n        /* istanbul ignore next - unreachable code, getPropertyGindex null return prevents this call */\n        throw Error(\"Must only request BitArray complete data\");\n    }\n    getIndexProperty() {\n        /* istanbul ignore next - unreachable code, getPropertyGindex null return prevents this call */\n        throw Error(\"Must only request BitArray complete data\");\n    }\n    tree_fromProofNode(node) {\n        return { node, done: true };\n    }\n    tree_getLeafGindices(rootGindex, rootNode) {\n        const byteLen = this.tree_getByteLen(rootNode);\n        const chunkCount = Math.ceil(byteLen / 32);\n        const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);\n        const gindices = new Array(chunkCount);\n        for (let i = 0, gindex = startIndex; i < chunkCount; i++, gindex++) {\n            gindices[i] = gindex;\n        }\n        // include the length chunk\n        if (this.isList) {\n            gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));\n        }\n        return gindices;\n    }\n    // JSON\n    fromJson(json) {\n        const uint8Array = byteArray_1.fromHexString(json);\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        // value_deserializeFromBytes MUST validate length (limit, or length)\n        return this.value_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);\n    }\n    toJson(value) {\n        return byteArray_1.toHexString(this.serialize(value));\n    }\n    clone(value) {\n        return value.clone();\n    }\n    equals(a, b) {\n        return a.bitLen === b.bitLen && byteArray_1.byteArrayEquals(a.uint8Array, b.uint8Array);\n    }\n}\nexports.BitArrayType = BitArrayType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitListType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst bitArray_1 = require(\"../value/bitArray\");\nconst bitArray_2 = require(\"./bitArray\");\n/**\n * BitList: ordered variable-length collection of boolean values, limited to N bits\n * - Notation `Bitlist[N]`\n * - Value: `BitArray`, @see BitArray for a justification of its memory efficiency and performance\n * - View: `BitArrayTreeView`\n * - ViewDU: `BitArrayTreeViewDU`\n */\nclass BitListType extends bitArray_2.BitArrayType {\n    constructor(limitBits, opts) {\n        super();\n        this.limitBits = limitBits;\n        this.fixedSize = null;\n        this.minSize = 1; // +1 for the extra padding bit\n        this.isList = true;\n        if (limitBits === 0)\n            throw Error(\"List limit must be > 0\");\n        this.typeName = opts?.typeName ?? `BitList[${limitBits}]`;\n        // TODO Check that itemsPerChunk is an integer\n        this.maxChunkCount = Math.ceil(this.limitBits / 8 / 32);\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        // Depth includes the extra level for the length node\n        this.depth = 1 + this.chunkDepth;\n        this.maxSize = Math.ceil(limitBits / 8) + 1; // +1 for the extra padding bit\n    }\n    static named(limitBits, opts) {\n        return new (named_1.namedClass(BitListType, opts.typeName))(limitBits, opts);\n    }\n    defaultValue() {\n        return bitArray_1.BitArray.fromBitLen(0);\n    }\n    // Views: inherited from BitArrayType\n    // Serialization + deserialization\n    value_serializedSize(value) {\n        return bitLenToSerializedLength(value.bitLen);\n    }\n    value_serializeToBytes(output, offset, value) {\n        output.uint8Array.set(value.uint8Array, offset);\n        return applyPaddingBit(output.uint8Array, offset, value.bitLen);\n    }\n    value_deserializeFromBytes(data, start, end) {\n        const { uint8Array, bitLen } = this.deserializeUint8ArrayBitListFromBytes(data.uint8Array, start, end);\n        return new bitArray_1.BitArray(uint8Array, bitLen);\n    }\n    tree_serializedSize(node) {\n        return bitLenToSerializedLength(arrayBasic_1.getLengthFromRootNode(node));\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const chunksNode = arrayBasic_1.getChunksNodeFromRootNode(node);\n        const bitLen = arrayBasic_1.getLengthFromRootNode(node);\n        const byteLen = Math.ceil(bitLen / 8);\n        const chunkLen = Math.ceil(byteLen / 32);\n        const nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.chunkDepth, 0, chunkLen);\n        persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, byteLen, nodes);\n        return applyPaddingBit(output.uint8Array, offset, bitLen);\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        const { uint8Array, bitLen } = this.deserializeUint8ArrayBitListFromBytes(data.uint8Array, start, end);\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        const chunksNode = persistent_merkle_tree_1.packedRootsBytesToNode(this.chunkDepth, dataView, 0, uint8Array.length);\n        return arrayBasic_1.addLengthNode(chunksNode, bitLen);\n    }\n    tree_getByteLen(node) {\n        if (!node)\n            throw new Error(\"BitListType requires a node to get leaves\");\n        return Math.ceil(arrayBasic_1.getLengthFromRootNode(node) / 8);\n    }\n    // Merkleization: inherited from BitArrayType\n    hashTreeRoot(value) {\n        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.bitLen);\n    }\n    // Proofs: inherited from BitArrayType\n    // JSON: inherited from BitArrayType\n    // Deserializer helpers\n    deserializeUint8ArrayBitListFromBytes(data, start, end) {\n        const { uint8Array, bitLen } = deserializeUint8ArrayBitListFromBytes(data, start, end);\n        if (bitLen > this.limitBits) {\n            throw Error(`bitLen over limit ${bitLen} > ${this.limitBits}`);\n        }\n        return { uint8Array, bitLen };\n    }\n}\nexports.BitListType = BitListType;\nfunction deserializeUint8ArrayBitListFromBytes(data, start, end) {\n    if (end > data.length) {\n        throw Error(`BitList attempting to read byte ${end} of data length ${data.length}`);\n    }\n    const lastByte = data[end - 1];\n    const size = end - start;\n    if (lastByte === 0) {\n        throw new Error(\"Invalid deserialized bitlist, padding bit required\");\n    }\n    if (lastByte === 1) {\n        // Buffer.prototype.slice does not copy memory, Enforce Uint8Array usage https://github.com/nodejs/node/issues/28087\n        const uint8Array = Uint8Array.prototype.slice.call(data, start, end - 1);\n        const bitLen = (size - 1) * 8;\n        return { uint8Array, bitLen };\n    }\n    // the last byte is > 1, so a padding bit will exist in the last byte and need to be removed\n    // Buffer.prototype.slice does not copy memory, Enforce Uint8Array usage https://github.com/nodejs/node/issues/28087\n    const uint8Array = Uint8Array.prototype.slice.call(data, start, end);\n    // mask lastChunkByte\n    const lastByteBitLength = lastByte.toString(2).length - 1;\n    const bitLen = (size - 1) * 8 + lastByteBitLength;\n    const mask = 0xff >> (8 - lastByteBitLength);\n    uint8Array[size - 1] &= mask;\n    return { uint8Array, bitLen };\n}\nfunction bitLenToSerializedLength(bitLen) {\n    const bytes = Math.ceil(bitLen / 8);\n    // +1 for the extra padding bit\n    return bitLen % 8 === 0 ? bytes + 1 : bytes;\n}\n/**\n * Apply padding bit to a serialized BitList already written to `output` at `offset`\n * @returns New offset after (maybe) writting a padding bit.\n */\nfunction applyPaddingBit(output, offset, bitLen) {\n    const byteLen = Math.ceil(bitLen / 8);\n    const newOffset = offset + byteLen;\n    if (bitLen % 8 === 0) {\n        output[newOffset] = 1;\n        return newOffset + 1;\n    }\n    else {\n        output[newOffset - 1] |= 1 << bitLen % 8;\n        return newOffset;\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitVectorType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst bitArray_1 = require(\"../value/bitArray\");\nconst bitArray_2 = require(\"./bitArray\");\n/**\n * BitVector: ordered fixed-length collection of boolean values, with N bits\n * - Notation: `Bitvector[N]`\n * - Value: `BitArray`, @see BitArray for a justification of its memory efficiency and performance\n * - View: `BitArrayTreeView`\n * - ViewDU: `BitArrayTreeViewDU`\n */\nclass BitVectorType extends bitArray_2.BitArrayType {\n    constructor(lengthBits, opts) {\n        super();\n        this.lengthBits = lengthBits;\n        this.isList = false;\n        if (lengthBits === 0)\n            throw Error(\"Vector length must be > 0\");\n        this.typeName = opts?.typeName ?? `BitVector[${lengthBits}]`;\n        this.chunkCount = Math.ceil(this.lengthBits / 8 / 32);\n        this.maxChunkCount = this.chunkCount;\n        this.depth = merkleize_1.maxChunksToDepth(this.chunkCount);\n        this.fixedSize = Math.ceil(this.lengthBits / 8);\n        this.minSize = this.fixedSize;\n        this.maxSize = this.fixedSize;\n        // To cache mask for trailing zero bits validation\n        this.zeroBitsMask = lengthBits % 8 === 0 ? 0 : 0xff & (0xff << lengthBits % 8);\n    }\n    static named(limitBits, opts) {\n        return new (named_1.namedClass(BitVectorType, opts.typeName))(limitBits, opts);\n    }\n    defaultValue() {\n        return bitArray_1.BitArray.fromBitLen(this.lengthBits);\n    }\n    // Views: inherited from BitArrayType\n    // Serialization + deserialization\n    value_serializedSize() {\n        return this.fixedSize;\n    }\n    value_serializeToBytes(output, offset, value) {\n        output.uint8Array.set(value.uint8Array, offset);\n        return offset + this.fixedSize;\n    }\n    value_deserializeFromBytes(data, start, end) {\n        this.assertValidLength(data.uint8Array, start, end);\n        // Buffer.prototype.slice does not copy memory, Enforce Uint8Array usage https://github.com/nodejs/node/issues/28087\n        return new bitArray_1.BitArray(Uint8Array.prototype.slice.call(data.uint8Array, start, end), this.lengthBits);\n    }\n    tree_serializedSize() {\n        return this.fixedSize;\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, this.depth, 0, this.chunkCount);\n        persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, this.fixedSize, nodes);\n        return offset + this.fixedSize;\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        this.assertValidLength(data.uint8Array, start, end);\n        return persistent_merkle_tree_1.packedRootsBytesToNode(this.depth, data.dataView, start, end);\n    }\n    tree_getByteLen() {\n        return this.fixedSize;\n    }\n    // Merkleization: inherited from BitArrayType\n    // Proofs: inherited from BitArrayType\n    // JSON: inherited from BitArrayType\n    // Deserializer helpers\n    assertValidLength(data, start, end) {\n        const size = end - start;\n        if (end - start !== this.fixedSize) {\n            throw Error(`Invalid BitVector size ${size} != ${this.fixedSize}`);\n        }\n        // If lengthBits is not aligned to bytes, ensure trailing bits are zeroed\n        if (\n        // If zeroBitsMask == 0, then the BitVector uses full bytes only\n        this.zeroBitsMask > 0 &&\n            // if the last byte is partial, retrieve it and use the cached mask to check if trailing bits are zeroed\n            (data[end - 1] & this.zeroBitsMask) > 0) {\n            throw Error(\"BitVector: nonzero bits past length\");\n        }\n    }\n}\nexports.BitVectorType = BitVectorType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BooleanType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst named_1 = require(\"../util/named\");\nconst basic_1 = require(\"./basic\");\n/**\n * Boolean: True or False\n * - Notation: `boolean`\n */\nclass BooleanType extends basic_1.BasicType {\n    constructor(opts) {\n        super();\n        this.byteLength = 1;\n        this.itemsPerChunk = 32;\n        this.fixedSize = 1;\n        this.minSize = 1;\n        this.maxSize = 1;\n        this.typeName = opts?.typeName ?? \"boolean\";\n    }\n    static named(opts) {\n        return new (named_1.namedClass(BooleanType, opts.typeName))(opts);\n    }\n    defaultValue() {\n        return false;\n    }\n    // Serialization + deserialization\n    value_serializeToBytes(output, offset, value) {\n        output.uint8Array[offset] = value ? 1 : 0;\n        return offset + 1;\n    }\n    value_deserializeFromBytes(data, start, end) {\n        this.assertValidSize(end - start);\n        switch (data.uint8Array[start]) {\n            case 1:\n                return true;\n            case 0:\n                return false;\n            default:\n                throw new Error(`Boolean: invalid value: ${data.uint8Array[start]}`);\n        }\n    }\n    tree_serializeToBytes(output, offset, node) {\n        // TODO: Assumes LeafNode has 4 byte uints are primary unit\n        output.uint8Array[offset] = node.getUint(4, 0);\n        return offset + 1;\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        this.assertValidSize(end - start);\n        const value = data.uint8Array[start];\n        if (value > 1) {\n            throw Error(`Boolean: invalid value ${value}`);\n        }\n        return persistent_merkle_tree_1.LeafNode.fromUint32(value);\n    }\n    // Fast tree opts\n    tree_getFromNode(leafNode) {\n        return leafNode.getUint(4, 0) === 1;\n    }\n    tree_setToNode(leafNode, value) {\n        leafNode.setUint(4, 0, value ? 1 : 0);\n    }\n    tree_getFromPackedNode(leafNode, index) {\n        const offsetBytes = index % this.itemsPerChunk;\n        return leafNode.getUint(1, offsetBytes) !== 0;\n    }\n    tree_setToPackedNode(leafNode, index, value) {\n        const offsetBytes = index % this.itemsPerChunk;\n        leafNode.setUint(1, offsetBytes, value ? 1 : 0);\n    }\n    // JSON\n    fromJson(json) {\n        if (typeof json !== \"boolean\") {\n            throw Error(`JSON invalid type ${typeof json} expected boolean`);\n        }\n        return json;\n    }\n    toJson(value) {\n        return value;\n    }\n}\nexports.BooleanType = BooleanType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ByteArrayType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst byteArray_1 = require(\"../util/byteArray\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst composite_1 = require(\"./composite\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * ByteArray: ordered array collection of byte values\n * - Value: `Uint8Array`\n * - View: `Uint8Array`\n * - ViewDU: `Uint8Array`\n *\n * ByteArray is an immutable value which is represented by a Uint8Array for memory efficiency and performance.\n * Note: Consumers of this type MUST never mutate the `Uint8Array` representation of a ByteArray.\n */\nclass ByteArrayType extends composite_1.CompositeType {\n    constructor() {\n        super(...arguments);\n        this.isViewMutable = false;\n    }\n    defaultValue() {\n        // Since it's a byte array the minSize is bytes is the default size\n        return new Uint8Array(this.minSize);\n    }\n    getView(tree) {\n        return this.getViewDU(tree.rootNode);\n    }\n    getViewDU(node) {\n        return this.tree_toValue(node);\n    }\n    commitView(view) {\n        return this.commitViewDU(view);\n    }\n    commitViewDU(view) {\n        const uint8Array = new Uint8Array(this.value_serializedSize(view));\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        this.value_serializeToBytes({ uint8Array, dataView }, 0, view);\n        return this.tree_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);\n    }\n    cacheOfViewDU() {\n        return;\n    }\n    // Over-write to prevent serialize + deserialize\n    toView(value) {\n        return value;\n    }\n    toViewDU(value) {\n        return value;\n    }\n    // Serialization + deserialization (only value is generic)\n    value_serializeToBytes(output, offset, value) {\n        output.uint8Array.set(value, offset);\n        return offset + value.length;\n    }\n    value_deserializeFromBytes(data, start, end) {\n        this.assertValidSize(end - start);\n        return Uint8Array.prototype.slice.call(data.uint8Array, start, end);\n    }\n    // Merkleization\n    getRoots(value) {\n        return merkleize_1.splitIntoRootChunks(value);\n    }\n    // Proofs\n    getPropertyGindex() {\n        // Stop navigating below this type. Must only request complete data\n        return null;\n    }\n    getPropertyType() {\n        throw Error(\"Must only request ByteArray complete data\");\n    }\n    getIndexProperty() {\n        throw Error(\"Must only request ByteArray complete data\");\n    }\n    tree_fromProofNode(node) {\n        return { node, done: true };\n    }\n    tree_getLeafGindices(rootGindex, rootNode) {\n        const byteLen = this.tree_getByteLen(rootNode);\n        const chunkCount = Math.ceil(byteLen / 32);\n        const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);\n        const gindices = new Array(chunkCount);\n        for (let i = 0, gindex = startIndex; i < chunkCount; i++, gindex++) {\n            gindices[i] = gindex;\n        }\n        // include the length chunk\n        if (this.isList) {\n            gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));\n        }\n        return gindices;\n    }\n    // JSON\n    fromJson(json) {\n        const value = byteArray_1.fromHexString(json);\n        this.assertValidSize(value.length);\n        return value;\n    }\n    toJson(value) {\n        return byteArray_1.toHexString(value);\n    }\n    // ByteArray is immutable\n    clone(value) {\n        return value;\n    }\n    equals(a, b) {\n        return byteArray_1.byteArrayEquals(a, b);\n    }\n}\nexports.ByteArrayType = ByteArrayType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ByteListType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst byteArray_1 = require(\"./byteArray\");\n/**\n * ByteList: Immutable alias of List[byte, N]\n * - Notation: `ByteList[N]`\n * - Value: `Uint8Array`\n * - View: `Uint8Array`\n * - ViewDU: `Uint8Array`\n *\n * ByteList is an immutable value which is represented by a Uint8Array for memory efficiency and performance.\n * Note: Consumers of this type MUST never mutate the `Uint8Array` representation of a ByteList.\n *\n * For a `ByteListType` with mutability, use `ListBasicType(byteType)`\n */\nclass ByteListType extends byteArray_1.ByteArrayType {\n    constructor(limitBytes, opts) {\n        super();\n        this.limitBytes = limitBytes;\n        this.fixedSize = null;\n        this.isList = true;\n        if (limitBytes === 0)\n            throw Error(\"List limit must be > 0\");\n        this.typeName = opts?.typeName ?? `ByteList[${limitBytes}]`;\n        this.maxChunkCount = Math.ceil(this.limitBytes / 32);\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        this.depth = 1 + this.chunkDepth;\n        this.minSize = 0;\n        this.maxSize = this.limitBytes;\n    }\n    static named(limitBits, opts) {\n        return new (named_1.namedClass(ByteListType, opts.typeName))(limitBits, opts);\n    }\n    // Views: inherited from ByteArrayType\n    // Serialization + deserialization\n    value_serializedSize(value) {\n        return value.length;\n    }\n    // value_* inherited from ByteArrayType\n    tree_serializedSize(node) {\n        return arrayBasic_1.getLengthFromRootNode(node);\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const chunksNode = arrayBasic_1.getChunksNodeFromRootNode(node);\n        const byteLen = arrayBasic_1.getLengthFromRootNode(node);\n        const chunkLen = Math.ceil(byteLen / 32);\n        const nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.chunkDepth, 0, chunkLen);\n        persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, byteLen, nodes);\n        return offset + byteLen;\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        this.assertValidSize(end - start);\n        const chunksNode = persistent_merkle_tree_1.packedRootsBytesToNode(this.chunkDepth, data.dataView, start, end);\n        return arrayBasic_1.addLengthNode(chunksNode, end - start);\n    }\n    tree_getByteLen(node) {\n        if (!node)\n            throw new Error(\"ByteListType requires a node to get leaves\");\n        return arrayBasic_1.getLengthFromRootNode(node);\n    }\n    // Merkleization: inherited from ByteArrayType\n    hashTreeRoot(value) {\n        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n    }\n    // Proofs: inherited from BitArrayType\n    // JSON: inherited from ByteArrayType\n    assertValidSize(size) {\n        if (size > this.limitBytes) {\n            throw Error(`ByteList invalid size ${size} limit ${this.limitBytes}`);\n        }\n    }\n}\nexports.ByteListType = ByteListType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ByteVectorType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst byteArray_1 = require(\"./byteArray\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * ByteVector: Immutable alias of Vector[byte, N]\n * - Notation: `ByteVector[N]`\n * - Value: `Uint8Array`\n * - View: `Uint8Array`\n * - ViewDU: `Uint8Array`\n *\n * ByteVector is an immutable value which is represented by a Uint8Array for memory efficiency and performance.\n * Note: Consumers of this type MUST never mutate the `Uint8Array` representation of a ByteVector.\n *\n * For a `ByteVectorType` with mutability, use `VectorBasicType(byteType)`\n */\nclass ByteVectorType extends byteArray_1.ByteArrayType {\n    constructor(lengthBytes, opts) {\n        super();\n        this.lengthBytes = lengthBytes;\n        this.isList = false;\n        if (lengthBytes === 0)\n            throw Error(\"Vector length must be > 0\");\n        this.typeName = opts?.typeName ?? `ByteVector[${lengthBytes}]`;\n        this.maxChunkCount = Math.ceil(this.lengthBytes / 32);\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        this.depth = this.chunkDepth;\n        this.fixedSize = this.lengthBytes;\n        this.minSize = this.fixedSize;\n        this.maxSize = this.fixedSize;\n    }\n    static named(limitBits, opts) {\n        return new (named_1.namedClass(ByteVectorType, opts.typeName))(limitBits, opts);\n    }\n    // Views: inherited from ByteArrayType\n    // Serialization + deserialization\n    value_serializedSize() {\n        return this.fixedSize;\n    }\n    // value_* inherited from ByteArrayType\n    tree_serializedSize() {\n        return this.fixedSize;\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, this.chunkDepth, 0, this.maxChunkCount);\n        persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, this.fixedSize, nodes);\n        return offset + this.fixedSize;\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        this.assertValidSize(end - start);\n        return persistent_merkle_tree_1.packedRootsBytesToNode(this.chunkDepth, data.dataView, start, end);\n    }\n    tree_getByteLen() {\n        return this.lengthBytes;\n    }\n    // Merkleization: inherited from ByteArrayType\n    // Proofs: inherited from BitArrayType\n    // JSON: inherited from ByteArrayType\n    assertValidSize(size) {\n        if (size !== this.lengthBytes) {\n            throw Error(`ByteVector invalid size ${size} expected ${this.lengthBytes}`);\n        }\n    }\n}\nexports.ByteVectorType = ByteVectorType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isCompositeType = exports.CompositeType = exports.LENGTH_GINDEX = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst byteArray_1 = require(\"../util/byteArray\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst treePostProcessFromProofNode_1 = require(\"../util/proof/treePostProcessFromProofNode\");\nconst abstract_1 = require(\"./abstract\");\nexports.LENGTH_GINDEX = BigInt(3);\n/** Dedicated property to cache hashTreeRoot of immutable CompositeType values */\nconst symbolCachedPermanentRoot = Symbol(\"ssz_cached_permanent_root\");\n/* eslint-disable @typescript-eslint/member-ordering  */\n/**\n * Represents a composite type as defined in the spec:\n * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#composite-types\n */\nclass CompositeType extends abstract_1.Type {\n    constructor(\n    /**\n     * Caches `hashTreeRoot()` result for struct values.\n     *\n     * WARNING: Must only be used for immutable values. The cached root is never discarded\n     */\n    cachePermanentRootStruct) {\n        super();\n        this.cachePermanentRootStruct = cachePermanentRootStruct;\n        this.isBasic = false;\n    }\n    /** New instance of a recursive zero'ed value converted to Tree View */\n    defaultView() {\n        return this.toView(this.defaultValue());\n    }\n    /** New instance of a recursive zero'ed value converted to Deferred Update Tree View */\n    defaultViewDU() {\n        return this.toViewDU(this.defaultValue());\n    }\n    /**\n     * Deserialize binary data to a Tree View.\n     * @see {@link CompositeType.getView}\n     */\n    deserializeToView(data) {\n        const dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        const node = this.tree_deserializeFromBytes({ uint8Array: data, dataView }, 0, data.length);\n        return this.getView(new persistent_merkle_tree_1.Tree(node));\n    }\n    /**\n     * Deserialize binary data to a Deferred Update Tree View.\n     * @see {@link CompositeType.getViewDU}\n     */\n    deserializeToViewDU(data) {\n        const dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        const node = this.tree_deserializeFromBytes({ uint8Array: data, dataView }, 0, data.length);\n        return this.getViewDU(node);\n    }\n    /**\n     * Transform value to a View.\n     * @see {@link CompositeType.getView}\n     */\n    toView(value) {\n        const node = this.value_toTree(value);\n        return this.getView(new persistent_merkle_tree_1.Tree(node));\n    }\n    /**\n     * Transform value to a ViewDU.\n     * @see {@link CompositeType.getViewDU}\n     */\n    toViewDU(value) {\n        const node = this.value_toTree(value);\n        return this.getViewDU(node);\n    }\n    /**\n     * Transform value to a View.\n     * @see {@link CompositeType.getView}\n     */\n    toValueFromView(view) {\n        const node = this.commitView(view);\n        return this.tree_toValue(node);\n    }\n    /**\n     * Transform value to a ViewDU.\n     * @see {@link CompositeType.getViewDU}\n     */\n    toValueFromViewDU(view) {\n        const node = this.commitViewDU(view);\n        return this.tree_toValue(node);\n    }\n    /**\n     * Transform a ViewDU to a View.\n     * @see {@link CompositeType.getView} and {@link CompositeType.getViewDU}\n     */\n    toViewFromViewDU(view) {\n        const node = this.commitViewDU(view);\n        return this.getView(new persistent_merkle_tree_1.Tree(node));\n    }\n    /**\n     * Transform a View to a ViewDU.\n     * @see {@link CompositeType.getView} and {@link CompositeType.getViewDU}\n     */\n    toViewDUFromView(view) {\n        const node = this.commitView(view);\n        return this.getViewDU(node);\n    }\n    // Merkleize API\n    hashTreeRoot(value) {\n        // Return cached mutable root if any\n        if (this.cachePermanentRootStruct) {\n            const cachedRoot = value[symbolCachedPermanentRoot];\n            if (cachedRoot) {\n                return cachedRoot;\n            }\n        }\n        const root = merkleize_1.merkleize(this.getRoots(value), this.maxChunkCount);\n        if (this.cachePermanentRootStruct) {\n            value[symbolCachedPermanentRoot] = root;\n        }\n        return root;\n    }\n    // For debugging and testing this feature\n    getCachedPermanentRoot(value) {\n        return value[symbolCachedPermanentRoot];\n    }\n    // Proofs API\n    /**\n     * Create a Tree View from a Proof. Verifies that the Proof is correct against `root`.\n     * @see {@link CompositeType.getView}\n     */\n    createFromProof(proof, root) {\n        const rootNodeFromProof = persistent_merkle_tree_1.Tree.createFromProof(proof).rootNode;\n        const rootNode = treePostProcessFromProofNode_1.treePostProcessFromProofNode(rootNodeFromProof, this);\n        if (root !== undefined && !byteArray_1.byteArrayEquals(rootNode.root, root)) {\n            throw new Error(\"Proof does not match trusted root\");\n        }\n        return this.getView(new persistent_merkle_tree_1.Tree(rootNode));\n    }\n    /** INTERNAL METHOD: For view's API, create proof from a tree */\n    tree_createProof(node, jsonPaths) {\n        const gindexes = this.tree_createProofGindexes(node, jsonPaths);\n        return persistent_merkle_tree_1.createProof(node, {\n            type: persistent_merkle_tree_1.ProofType.treeOffset,\n            gindices: gindexes,\n        });\n    }\n    /** INTERNAL METHOD: For view's API, create proof from a tree */\n    tree_createProofGindexes(node, jsonPaths) {\n        const gindexes = [];\n        for (const jsonPath of jsonPaths) {\n            const { type, gindex } = this.getPathInfo(jsonPath);\n            if (!isCompositeType(type)) {\n                gindexes.push(gindex);\n            }\n            else {\n                // if the path subtype is composite, include the gindices of all the leaves\n                const leafGindexes = type.tree_getLeafGindices(gindex, type.fixedSize === null ? persistent_merkle_tree_1.getNode(node, gindex) : undefined);\n                for (const gindex of leafGindexes) {\n                    gindexes.push(gindex);\n                }\n            }\n        }\n        return gindexes;\n    }\n    /**\n     * Navigate to a subtype & gindex using a path\n     */\n    getPathInfo(path) {\n        const gindices = [];\n        let type = this;\n        for (const prop of path) {\n            if (type.isBasic) {\n                throw new Error(\"Invalid path: cannot navigate beyond a basic type\");\n            }\n            const gindex = type.getPropertyGindex(prop);\n            // else stop navigating\n            if (gindex !== null) {\n                gindices.push(gindex);\n                type = type.getPropertyType(prop);\n            }\n        }\n        return {\n            type,\n            gindex: persistent_merkle_tree_1.concatGindices(gindices),\n        };\n    }\n    /**\n     * INTERNAL METHOD: post process `Ǹode` instance created from a proof and return either the same node,\n     * and a new node representing the same data is a different `Node` instance. Currently used exclusively\n     * by ContainerNodeStruct to convert `BranchNode` into `BranchNodeStruct`.\n     */\n    tree_fromProofNode(node) {\n        return { node, done: false };\n    }\n}\nexports.CompositeType = CompositeType;\nfunction isCompositeType(type) {\n    return !type.isBasic;\n}\nexports.isCompositeType = isCompositeType;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.renderContainerTypeName = exports.precomputeJsonKey = exports.ContainerType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst case_1 = __importDefault(require(\"case\"));\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst composite_1 = require(\"./composite\");\nconst container_1 = require(\"../view/container\");\nconst container_2 = require(\"../viewDU/container\");\n/**\n * Container: ordered heterogeneous collection of values\n * - Notation: Custom name per instance\n */\nclass ContainerType extends composite_1.CompositeType {\n    constructor(fields, opts) {\n        super(opts?.cachePermanentRootStruct);\n        this.fields = fields;\n        this.opts = opts;\n        this.isList = false;\n        this.isViewMutable = true;\n        // Render detailed typeName. Consumers should overwrite since it can get long\n        this.typeName = opts?.typeName ?? renderContainerTypeName(fields);\n        this.maxChunkCount = Object.keys(fields).length;\n        this.depth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        // Precalculated data for faster serdes\n        this.fieldsEntries = [];\n        for (const fieldName of Object.keys(fields)) {\n            this.fieldsEntries.push({\n                fieldName,\n                fieldType: this.fields[fieldName],\n                jsonKey: precomputeJsonKey(fieldName, opts?.casingMap, opts?.jsonCase),\n                gindex: persistent_merkle_tree_1.toGindex(this.depth, BigInt(this.fieldsEntries.length)),\n            });\n        }\n        if (this.fieldsEntries.length === 0) {\n            throw Error(\"Container must have > 0 fields\");\n        }\n        // Precalculate for Proofs API\n        this.fieldsGindex = {};\n        for (let i = 0; i < this.fieldsEntries.length; i++) {\n            this.fieldsGindex[this.fieldsEntries[i].fieldName] = persistent_merkle_tree_1.toGindex(this.depth, BigInt(i));\n        }\n        // To resolve JSON paths in fieldName notation and jsonKey notation\n        this.jsonKeyToFieldName = {};\n        for (const { fieldName, jsonKey } of this.fieldsEntries) {\n            this.jsonKeyToFieldName[jsonKey] = fieldName;\n        }\n        const { minLen, maxLen, fixedSize } = precomputeSizes(fields);\n        this.minSize = minLen;\n        this.maxSize = maxLen;\n        this.fixedSize = fixedSize;\n        const { isFixedLen, fieldRangesFixedLen, variableOffsetsPosition, fixedEnd } = precomputeSerdesData(fields);\n        this.isFixedLen = isFixedLen;\n        this.fieldRangesFixedLen = fieldRangesFixedLen;\n        this.variableOffsetsPosition = variableOffsetsPosition;\n        this.fixedEnd = fixedEnd;\n        // TODO: This options are necessary for ContainerNodeStruct to override this.\n        // Refactor this constructor to allow customization without pollutin the options\n        this.TreeView = opts?.getContainerTreeViewClass?.(this) ?? container_1.getContainerTreeViewClass(this);\n        this.TreeViewDU = opts?.getContainerTreeViewDUClass?.(this) ?? container_2.getContainerTreeViewDUClass(this);\n    }\n    static named(fields, opts) {\n        return new (named_1.namedClass(ContainerType, opts.typeName))(fields, opts);\n    }\n    defaultValue() {\n        const value = {};\n        for (const { fieldName, fieldType } of this.fieldsEntries) {\n            value[fieldName] = fieldType.defaultValue();\n        }\n        return value;\n    }\n    getView(tree) {\n        return new this.TreeView(this, tree);\n    }\n    getViewDU(node, cache) {\n        return new this.TreeViewDU(this, node, cache);\n    }\n    cacheOfViewDU(view) {\n        return view.cache;\n    }\n    commitView(view) {\n        return view.node;\n    }\n    commitViewDU(view) {\n        view.commit();\n        return view.node;\n    }\n    // Serialization + deserialization\n    // -------------------------------\n    // Containers can mix fixed length and variable length data.\n    //\n    // Fixed part                         Variable part\n    // [field1 offset][field2 data       ][field1 data               ]\n    // [0x000000c]    [0xaabbaabbaabbaabb][0xffffffffffffffffffffffff]\n    value_serializedSize(value) {\n        let totalSize = 0;\n        for (let i = 0; i < this.fieldsEntries.length; i++) {\n            const { fieldName, fieldType } = this.fieldsEntries[i];\n            // Offset (4 bytes) + size\n            totalSize +=\n                fieldType.fixedSize === null ? 4 + fieldType.value_serializedSize(value[fieldName]) : fieldType.fixedSize;\n        }\n        return totalSize;\n    }\n    value_serializeToBytes(output, offset, value) {\n        let fixedIndex = offset;\n        let variableIndex = offset + this.fixedEnd;\n        for (let i = 0; i < this.fieldsEntries.length; i++) {\n            const { fieldName, fieldType } = this.fieldsEntries[i];\n            if (fieldType.fixedSize === null) {\n                // write offset\n                output.dataView.setUint32(fixedIndex, variableIndex - offset, true);\n                fixedIndex += 4;\n                // write serialized element to variable section\n                variableIndex = fieldType.value_serializeToBytes(output, variableIndex, value[fieldName]);\n            }\n            else {\n                fixedIndex = fieldType.value_serializeToBytes(output, fixedIndex, value[fieldName]);\n            }\n        }\n        return variableIndex;\n    }\n    value_deserializeFromBytes(data, start, end) {\n        const fieldRanges = this.getFieldRanges(data.dataView, start, end);\n        const value = {};\n        for (let i = 0; i < this.fieldsEntries.length; i++) {\n            const { fieldName, fieldType } = this.fieldsEntries[i];\n            const fieldRange = fieldRanges[i];\n            value[fieldName] = fieldType.value_deserializeFromBytes(data, start + fieldRange.start, start + fieldRange.end);\n        }\n        return value;\n    }\n    tree_serializedSize(node) {\n        let totalSize = 0;\n        const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, this.depth, 0, this.fieldsEntries.length);\n        for (let i = 0; i < this.fieldsEntries.length; i++) {\n            const { fieldType } = this.fieldsEntries[i];\n            const node = nodes[i];\n            // Offset (4 bytes) + size\n            totalSize += fieldType.fixedSize === null ? 4 + fieldType.tree_serializedSize(node) : fieldType.fixedSize;\n        }\n        return totalSize;\n    }\n    tree_serializeToBytes(output, offset, node) {\n        let fixedIndex = offset;\n        let variableIndex = offset + this.fixedEnd;\n        const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, this.depth, 0, this.fieldsEntries.length);\n        for (let i = 0; i < this.fieldsEntries.length; i++) {\n            const { fieldType } = this.fieldsEntries[i];\n            const node = nodes[i];\n            if (fieldType.fixedSize === null) {\n                // write offset\n                output.dataView.setUint32(fixedIndex, variableIndex - offset, true);\n                fixedIndex += 4;\n                // write serialized element to variable section\n                variableIndex = fieldType.tree_serializeToBytes(output, variableIndex, node);\n            }\n            else {\n                fixedIndex = fieldType.tree_serializeToBytes(output, fixedIndex, node);\n            }\n        }\n        return variableIndex;\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        const fieldRanges = this.getFieldRanges(data.dataView, start, end);\n        const nodes = new Array(this.fieldsEntries.length);\n        for (let i = 0; i < this.fieldsEntries.length; i++) {\n            const { fieldType } = this.fieldsEntries[i];\n            const fieldRange = fieldRanges[i];\n            nodes[i] = fieldType.tree_deserializeFromBytes(data, start + fieldRange.start, start + fieldRange.end);\n        }\n        return persistent_merkle_tree_1.subtreeFillToContents(nodes, this.depth);\n    }\n    // Merkleization\n    getRoots(struct) {\n        const roots = new Array(this.fieldsEntries.length);\n        for (let i = 0; i < this.fieldsEntries.length; i++) {\n            const { fieldName, fieldType } = this.fieldsEntries[i];\n            roots[i] = fieldType.hashTreeRoot(struct[fieldName]);\n        }\n        return roots;\n    }\n    // Proofs\n    // getPropertyGindex\n    // getPropertyType\n    // tree_getLeafGindices\n    getPropertyGindex(prop) {\n        const gindex = this.fieldsGindex[prop] ?? this.fieldsGindex[this.jsonKeyToFieldName[prop]];\n        if (gindex === undefined)\n            throw Error(`Unknown container property ${prop}`);\n        return gindex;\n    }\n    getPropertyType(prop) {\n        const type = this.fields[prop] ?? this.fields[this.jsonKeyToFieldName[prop]];\n        if (type === undefined)\n            throw Error(`Unknown container property ${prop}`);\n        return type;\n    }\n    getIndexProperty(index) {\n        if (index >= this.fieldsEntries.length) {\n            return null;\n        }\n        return this.fieldsEntries[index].fieldName;\n    }\n    tree_getLeafGindices(rootGindex, rootNode) {\n        const gindices = [];\n        for (let i = 0; i < this.fieldsEntries.length; i++) {\n            const { fieldName, fieldType } = this.fieldsEntries[i];\n            const fieldGindex = this.fieldsGindex[fieldName];\n            const fieldGindexFromRoot = persistent_merkle_tree_1.concatGindices([rootGindex, fieldGindex]);\n            if (fieldType.isBasic) {\n                gindices.push(fieldGindexFromRoot);\n            }\n            else {\n                const compositeType = fieldType;\n                if (fieldType.fixedSize === null) {\n                    if (!rootNode) {\n                        throw new Error(\"variable type requires tree argument to get leaves\");\n                    }\n                    gindices.push(...compositeType.tree_getLeafGindices(fieldGindexFromRoot, persistent_merkle_tree_1.getNode(rootNode, fieldGindex)));\n                }\n                else {\n                    gindices.push(...compositeType.tree_getLeafGindices(fieldGindexFromRoot));\n                }\n            }\n        }\n        return gindices;\n    }\n    // JSON\n    fromJson(json) {\n        if (typeof json !== \"object\") {\n            throw Error(\"JSON must be of type object\");\n        }\n        if (json === null) {\n            throw Error(\"JSON must not be null\");\n        }\n        const value = {};\n        for (let i = 0; i < this.fieldsEntries.length; i++) {\n            const { fieldName, fieldType, jsonKey } = this.fieldsEntries[i];\n            const jsonValue = json[jsonKey];\n            if (jsonValue === undefined) {\n                throw Error(`JSON expected key ${jsonKey} is undefined`);\n            }\n            value[fieldName] = fieldType.fromJson(jsonValue);\n        }\n        return value;\n    }\n    toJson(value) {\n        const json = {};\n        for (let i = 0; i < this.fieldsEntries.length; i++) {\n            const { fieldName, fieldType, jsonKey } = this.fieldsEntries[i];\n            json[jsonKey] = fieldType.toJson(value[fieldName]);\n        }\n        return json;\n    }\n    clone(value) {\n        const newValue = {};\n        for (let i = 0; i < this.fieldsEntries.length; i++) {\n            const { fieldName, fieldType } = this.fieldsEntries[i];\n            newValue[fieldName] = fieldType.clone(value[fieldName]);\n        }\n        return newValue;\n    }\n    equals(a, b) {\n        for (let i = 0; i < this.fieldsEntries.length; i++) {\n            const { fieldName, fieldType } = this.fieldsEntries[i];\n            if (!fieldType.equals(a[fieldName], b[fieldName])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Deserializer helper: Returns the bytes ranges of all fields, both variable and fixed size.\n     * Fields may not be contiguous in the serialized bytes, so the returned ranges are [start, end].\n     * - For fixed size fields re-uses the pre-computed values this.fieldRangesFixedLen\n     * - For variable size fields does a first pass over the fixed section to read offsets\n     */\n    getFieldRanges(data, start, end) {\n        if (this.variableOffsetsPosition.length === 0) {\n            // Validate fixed length container\n            const size = end - start;\n            if (size !== this.fixedEnd) {\n                throw Error(`${this.typeName} size ${size} not equal fixed size ${this.fixedEnd}`);\n            }\n            return this.fieldRangesFixedLen;\n        }\n        // Read offsets in one pass\n        const offsets = readVariableOffsets(data, start, end, this.fixedEnd, this.variableOffsetsPosition);\n        offsets.push(end - start); // The offsets are relative to the start\n        // Merge fieldRangesFixedLen + offsets in one array\n        let variableIdx = 0;\n        let fixedIdx = 0;\n        const fieldRanges = new Array(this.isFixedLen.length);\n        for (let i = 0; i < this.isFixedLen.length; i++) {\n            if (this.isFixedLen[i]) {\n                // push from fixLen ranges ++\n                fieldRanges[i] = this.fieldRangesFixedLen[fixedIdx++];\n            }\n            else {\n                // push from varLen ranges ++\n                fieldRanges[i] = { start: offsets[variableIdx], end: offsets[variableIdx + 1] };\n                variableIdx++;\n            }\n        }\n        return fieldRanges;\n    }\n}\nexports.ContainerType = ContainerType;\n/**\n * Returns the byte ranges of all variable size fields.\n */\nfunction readVariableOffsets(data, start, end, fixedEnd, variableOffsetsPosition) {\n    // Since variable-sized values can be interspersed with fixed-sized values, we precalculate\n    // the offset indices so we can more easily deserialize the fields in once pass first we get the fixed sizes\n    // Note: `fixedSizes[i] = null` if that field has variable length\n    const size = end - start;\n    // with the fixed sizes, we can read the offsets, and store for our single pass\n    const offsets = new Array(variableOffsetsPosition.length);\n    for (let i = 0; i < variableOffsetsPosition.length; i++) {\n        const offset = data.getUint32(start + variableOffsetsPosition[i], true);\n        // Validate offsets. If the list is empty the offset points to the end of the buffer, offset == size\n        if (offset > size) {\n            throw new Error(`Offset out of bounds ${offset} > ${size}`);\n        }\n        if (i === 0) {\n            if (offset !== fixedEnd) {\n                throw new Error(`First offset must equal to fixedEnd ${offset} != ${fixedEnd}`);\n            }\n        }\n        else {\n            if (offset < offsets[i - 1]) {\n                throw new Error(`Offsets must be increasing ${offset} < ${offsets[i - 1]}`);\n            }\n        }\n        offsets[i] = offset;\n    }\n    return offsets;\n}\n/**\n * Precompute fixed and variable offsets position for faster deserialization.\n * @returns Does a single pass over all fields and returns:\n * - isFixedLen: If field index [i] is fixed length\n * - fieldRangesFixedLen: For fields with fixed length, their range of bytes\n * - variableOffsetsPosition: Position of the 4 bytes offset for variable size fields\n * - fixedEnd: End of the fixed size range\n * -\n */\nfunction precomputeSerdesData(fields) {\n    const isFixedLen = [];\n    const fieldRangesFixedLen = [];\n    const variableOffsetsPosition = [];\n    let pointerFixed = 0;\n    for (const fieldType of Object.values(fields)) {\n        isFixedLen.push(fieldType.fixedSize !== null);\n        if (fieldType.fixedSize === null) {\n            // Variable length\n            variableOffsetsPosition.push(pointerFixed);\n            pointerFixed += 4;\n        }\n        else {\n            fieldRangesFixedLen.push({ start: pointerFixed, end: pointerFixed + fieldType.fixedSize });\n            pointerFixed += fieldType.fixedSize;\n        }\n    }\n    return {\n        isFixedLen,\n        fieldRangesFixedLen,\n        variableOffsetsPosition,\n        fixedEnd: pointerFixed,\n    };\n}\n/**\n * Precompute sizes of the Container doing one pass over fields\n */\nfunction precomputeSizes(fields) {\n    let minLen = 0;\n    let maxLen = 0;\n    let fixedSize = 0;\n    for (const fieldType of Object.values(fields)) {\n        minLen += fieldType.minSize;\n        maxLen += fieldType.maxSize;\n        if (fieldType.fixedSize === null) {\n            // +4 for the offset\n            minLen += 4;\n            maxLen += 4;\n            fixedSize = null;\n        }\n        else if (fixedSize !== null) {\n            fixedSize += fieldType.fixedSize;\n        }\n    }\n    return { minLen, maxLen, fixedSize };\n}\n/**\n * Compute the JSON key for each fieldName. There will exist a single JSON representation for each type.\n * To transform JSON payloads to a casing that is different from the type's defined use external tooling.\n */\nfunction precomputeJsonKey(fieldName, casingMap, jsonCase) {\n    if (casingMap) {\n        const keyFromCaseMap = casingMap[fieldName];\n        if (keyFromCaseMap === undefined) {\n            throw Error(`casingMap[${fieldName}] not defined`);\n        }\n        return keyFromCaseMap;\n    }\n    else if (jsonCase) {\n        if (jsonCase === \"eth2\") {\n            const snake = case_1.default.snake(fieldName);\n            return snake.replace(/(\\d)$/, \"_$1\");\n        }\n        else {\n            return case_1.default[jsonCase](fieldName);\n        }\n    }\n    else {\n        return fieldName;\n    }\n}\nexports.precomputeJsonKey = precomputeJsonKey;\n/**\n * Render field typeNames for a detailed typeName of this Container\n */\nfunction renderContainerTypeName(fields, prefix = \"Container\") {\n    const fieldNames = Object.keys(fields);\n    const fieldTypeNames = fieldNames.map((fieldName) => `${fieldName}: ${fields[fieldName].typeName}`).join(\", \");\n    return `${prefix}({${fieldTypeNames}})`;\n}\nexports.renderContainerTypeName = renderContainerTypeName;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerNodeStructType = void 0;\nconst composite_1 = require(\"./composite\");\nconst container_1 = require(\"./container\");\nconst named_1 = require(\"../util/named\");\nconst containerNodeStruct_1 = require(\"../view/containerNodeStruct\");\nconst containerNodeStruct_2 = require(\"../viewDU/containerNodeStruct\");\nconst branchNodeStruct_1 = require(\"../branchNodeStruct\");\n/**\n * ContainerNodeStruct: ordered heterogeneous collection of values.\n * - Notation: Custom name per instance\n *\n * A ContainerNodeStruct is identical to a Container type except that it represents tree data with a custom\n * BranchNodeStruct node. This special branch node represents the data of its entire sub tree as a value, instead\n * of a tree of nodes. This approach is a tradeoff:\n *\n * - More memory efficient\n * - Faster reads, since it doesn't require parsing merkleized data\n * - Slower hashing, since it has to merkleize the entire value everytime and has not intermediary hashing cache\n *\n * This tradeoff is good for data that is read often, written rarely, and consumes a lot of memory (i.e. Validator)\n */\nclass ContainerNodeStructType extends container_1.ContainerType {\n    constructor(fields, opts) {\n        super(fields, {\n            // Overwrite default \"Container\" typeName\n            // Render detailed typeName. Consumers should overwrite since it can get long\n            typeName: opts?.typeName ?? container_1.renderContainerTypeName(fields, \"ContainerNodeStruct\"),\n            ...opts,\n            getContainerTreeViewClass: containerNodeStruct_1.getContainerTreeViewClass,\n            getContainerTreeViewDUClass: containerNodeStruct_2.getContainerTreeViewDUClass,\n        });\n        this.fields = fields;\n        // ContainerNodeStructType TreeViews don't handle recursive mutable TreeViews like ContainerType does.\n        // Using ContainerNodeStructType for fields that have mutable views (like a ListBasic), will result in\n        // unnexpected behaviour if those child views are mutated.\n        //\n        // For example, this example below won't persist the pushed values to the list:\n        // ```ts\n        // const type = ContainerNodeStructType({a: new ListBasicType(byteType, 1)});\n        // const view = type.defaultViewDU();\n        // view.a.push(0)\n        // ```\n        // because the ListBasicViewDU in view.a will never propagate the changes upwards to its ContainerNodeStructType.\n        for (const { fieldName, fieldType } of this.fieldsEntries) {\n            if (composite_1.isCompositeType(fieldType) && fieldType.isViewMutable) {\n                throw Error(`ContainerNodeStructType field '${fieldName}' ${fieldType.typeName} view is mutable`);\n            }\n        }\n    }\n    static named(fields, opts) {\n        return new (named_1.namedClass(container_1.ContainerType, opts.typeName))(fields, opts);\n    }\n    tree_serializedSize(node) {\n        return this.value_serializedSize(node.value);\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const { value } = node;\n        return this.value_serializeToBytes(output, offset, value);\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        const value = this.value_deserializeFromBytes(data, start, end);\n        return new branchNodeStruct_1.BranchNodeStruct(this.valueToTree.bind(this), value);\n    }\n    // Proofs\n    // ContainerNodeStructType can only parse proofs that contain all the data.\n    // TODO: Support converting a partial tree to a partial value\n    getPropertyGindex() {\n        return null;\n    }\n    // Post process tree to convert regular BranchNode to BranchNodeStruct\n    // TODO: Optimize conversions\n    tree_fromProofNode(node) {\n        // TODO: Figure out from `node` alone if it contains complete data.\n        // Otherwise throw a nice error \"ContainerNodeStruct type requires proofs for all its data\"\n        const uint8Array = new Uint8Array(super.tree_serializedSize(node));\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        super.tree_serializeToBytes({ uint8Array, dataView }, 0, node);\n        const value = this.value_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);\n        return {\n            node: new branchNodeStruct_1.BranchNodeStruct(this.valueToTree.bind(this), value),\n            done: true,\n        };\n    }\n    // Overwrites for fast conversion node <-> value\n    tree_toValue(node) {\n        return node.value;\n    }\n    value_toTree(value) {\n        return new branchNodeStruct_1.BranchNodeStruct(this.valueToTree.bind(this), value);\n    }\n    // TODO: Optimize conversion\n    valueToTree(value) {\n        const uint8Array = new Uint8Array(this.value_serializedSize(value));\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        this.value_serializeToBytes({ uint8Array, dataView }, 0, value);\n        return super.tree_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);\n    }\n}\nexports.ContainerNodeStructType = ContainerNodeStructType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBasicType = void 0;\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst listBasic_1 = require(\"../view/listBasic\");\nconst listBasic_2 = require(\"../viewDU/listBasic\");\nconst array_1 = require(\"./array\");\n/**\n * List: ordered variable-length homogeneous collection, limited to N values\n *\n * Array of Basic type:\n * - Basic types are max 32 bytes long so multiple values may be packed in the same node.\n * - Basic types are never returned in a view wrapper, but their value representation\n */\nclass ListBasicType extends array_1.ArrayType {\n    constructor(elementType, limit, opts) {\n        super(elementType);\n        this.elementType = elementType;\n        this.limit = limit;\n        this.fixedSize = null;\n        this.isList = true;\n        this.isViewMutable = true;\n        this.defaultLen = 0;\n        if (!elementType.isBasic)\n            throw Error(\"elementType must be basic\");\n        if (limit === 0)\n            throw Error(\"List limit must be > 0\");\n        this.typeName = opts?.typeName ?? `List[${elementType.typeName}, ${limit}]`;\n        // TODO Check that itemsPerChunk is an integer\n        this.itemsPerChunk = 32 / elementType.byteLength;\n        this.maxChunkCount = Math.ceil((this.limit * elementType.byteLength) / 32);\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        // Depth includes the extra level for the length node\n        this.depth = this.chunkDepth + 1;\n        this.minSize = 0;\n        this.maxSize = this.limit * elementType.maxSize;\n    }\n    static named(elementType, limit, opts) {\n        return new (named_1.namedClass(ListBasicType, opts.typeName))(elementType, limit, opts);\n    }\n    getView(tree) {\n        return new listBasic_1.ListBasicTreeView(this, tree);\n    }\n    getViewDU(node, cache) {\n        // cache type should be validated (if applicate) in the view\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new listBasic_2.ListBasicTreeViewDU(this, node, cache);\n    }\n    commitView(view) {\n        return view.node;\n    }\n    commitViewDU(view) {\n        view.commit();\n        return view.node;\n    }\n    cacheOfViewDU(view) {\n        return view.cache;\n    }\n    // Serialization + deserialization\n    value_serializedSize(value) {\n        return value.length * this.elementType.byteLength;\n    }\n    value_serializeToBytes(output, offset, value) {\n        return arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, output, offset, value);\n    }\n    value_deserializeFromBytes(data, start, end) {\n        return arrayBasic_1.value_deserializeFromBytesArrayBasic(this.elementType, data, start, end, this);\n    }\n    tree_serializedSize(node) {\n        return this.tree_getLength(node) * this.elementType.byteLength;\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const chunksNode = this.tree_getChunksNode(node);\n        const length = this.tree_getLength(node);\n        return arrayBasic_1.tree_serializeToBytesArrayBasic(this.elementType, length, this.chunkDepth, output, offset, chunksNode);\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        return arrayBasic_1.tree_deserializeFromBytesArrayBasic(this.elementType, this.chunkDepth, data, start, end, this);\n    }\n    // Helpers for TreeView\n    tree_getLength(node) {\n        return node.right.getUint(4, 0);\n    }\n    tree_setLength(tree, length) {\n        tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);\n    }\n    tree_getChunksNode(node) {\n        return node.left;\n    }\n    tree_setChunksNode(rootNode, chunksNode, newLength) {\n        return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);\n    }\n    // Merkleization\n    hashTreeRoot(value) {\n        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n    }\n    getRoots(value) {\n        const uint8Array = new Uint8Array(this.value_serializedSize(value));\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, { uint8Array, dataView }, 0, value);\n        return merkleize_1.splitIntoRootChunks(uint8Array);\n    }\n}\nexports.ListBasicType = ListBasicType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCompositeType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nconst listComposite_1 = require(\"../view/listComposite\");\nconst listComposite_2 = require(\"../viewDU/listComposite\");\nconst array_1 = require(\"./array\");\n/**\n * List: ordered variable-length homogeneous collection, limited to N values\n *\n * Array of Composite type:\n * - Composite types always take at least one chunk\n * - Composite types are always returned as views\n */\nclass ListCompositeType extends array_1.ArrayType {\n    constructor(elementType, limit, opts) {\n        super(elementType);\n        this.elementType = elementType;\n        this.limit = limit;\n        this.itemsPerChunk = 1;\n        this.fixedSize = null;\n        this.isList = true;\n        this.isViewMutable = true;\n        this.defaultLen = 0;\n        if (elementType.isBasic)\n            throw Error(\"elementType must not be basic\");\n        if (limit === 0)\n            throw Error(\"List limit must be > 0\");\n        this.typeName = opts?.typeName ?? `List[${elementType.typeName}, ${limit}]`;\n        this.maxChunkCount = this.limit;\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        // Depth includes the extra level for the length node\n        this.depth = this.chunkDepth + 1;\n        this.minSize = 0;\n        this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, this.limit);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static named(elementType, limit, opts) {\n        return new (named_1.namedClass(ListCompositeType, opts.typeName))(elementType, limit, opts);\n    }\n    getView(tree) {\n        return new listComposite_1.ListCompositeTreeView(this, tree);\n    }\n    getViewDU(node, cache) {\n        // cache type should be validated (if applicate) in the view\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new listComposite_2.ListCompositeTreeViewDU(this, node, cache);\n    }\n    commitView(view) {\n        return view.node;\n    }\n    commitViewDU(view) {\n        view.commit();\n        return view.node;\n    }\n    cacheOfViewDU(view) {\n        return view.cache;\n    }\n    // Serialization + deserialization\n    value_serializedSize(value) {\n        return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, value.length, value);\n    }\n    value_serializeToBytes(output, offset, value) {\n        return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, value.length, output, offset, value);\n    }\n    value_deserializeFromBytes(data, start, end) {\n        return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);\n    }\n    tree_serializedSize(node) {\n        const chunksNode = this.tree_getChunksNode(node);\n        const length = this.tree_getLength(node);\n        return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, length, this.chunkDepth, chunksNode);\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const chunksNode = this.tree_getChunksNode(node);\n        const length = this.tree_getLength(node);\n        return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, length, this.chunkDepth, chunksNode, output, offset);\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.chunkDepth, data, start, end, this);\n    }\n    // Helpers for TreeView\n    tree_getLength(node) {\n        return arrayBasic_1.getLengthFromRootNode(node);\n    }\n    tree_setLength(tree, length) {\n        tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);\n    }\n    tree_getChunksNode(node) {\n        return node.left;\n    }\n    tree_setChunksNode(rootNode, chunksNode, newLength) {\n        return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);\n    }\n    // Merkleization\n    hashTreeRoot(value) {\n        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n    }\n    getRoots(value) {\n        return arrayComposite_1.value_getRootsArrayComposite(this.elementType, value.length, value);\n    }\n}\nexports.ListCompositeType = ListCompositeType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoneType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst basic_1 = require(\"./basic\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nclass NoneType extends basic_1.BasicType {\n    constructor() {\n        super(...arguments);\n        this.typeName = \"none\";\n        this.byteLength = 0;\n        this.itemsPerChunk = 32;\n        this.fixedSize = 0;\n        this.minSize = 0;\n        this.maxSize = 0;\n    }\n    defaultValue() {\n        return null;\n    }\n    // bytes serdes\n    value_serializeToBytes(output, offset, value) {\n        return offset;\n    }\n    value_deserializeFromBytes(data, start) {\n        return null;\n    }\n    tree_serializeToBytes(output, offset, node) {\n        return offset;\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        return persistent_merkle_tree_1.zeroNode(0);\n    }\n    // Fast tree opts\n    tree_getFromNode(leafNode) {\n        return null;\n    }\n    tree_setToNode(leafNode, value) {\n        return;\n    }\n    tree_getFromPackedNode(leafNode, index) {\n        return null;\n    }\n    tree_setToPackedNode(leafNode, index, value) {\n        return;\n    }\n    // JSON\n    fromJson(json) {\n        if (json !== null) {\n            throw Error(\"JSON invalid type none must be null\");\n        }\n        return null;\n    }\n    toJson(value) {\n        return null;\n    }\n}\nexports.NoneType = NoneType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UintBigintType = exports.UintNumberType = exports.uintBigintByteLens = exports.uintNumberByteLens = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst named_1 = require(\"../util/named\");\nconst basic_1 = require(\"./basic\");\n/* eslint-disable @typescript-eslint/member-ordering */\nconst MAX_SAFE_INTEGER_BN = BigInt(Number.MAX_SAFE_INTEGER);\nconst BIGINT_2_POW_64 = BigInt(2) ** BigInt(64);\nconst BIGINT_2_POW_128 = BigInt(2) ** BigInt(128);\nconst BIGINT_2_POW_192 = BigInt(2) ** BigInt(192);\n// const BIGINT_64_MAX = BigInt(\"0xffffffffffffffff\");\nconst NUMBER_2_POW_32 = 2 ** 32;\nconst NUMBER_32_MAX = 0xffffffff;\nexports.uintNumberByteLens = [1, 2, 4, 8];\nexports.uintBigintByteLens = [1, 2, 4, 8, 16, 32];\n/**\n * Uint: N-bit unsigned integer (where N in [8, 16, 32, 64, 128, 256])\n * - Notation: uintN\n *\n * UintNumber is represented as the Javascript primitive value 'Number'.\n *\n * The Number type is a double-precision 64-bit binary format IEEE 754 value (numbers between -(2^53 − 1) and\n * 2^53 − 1). It also has the symbolic value: +Infinity.\n *\n * As of 2021 performance of 'Number' is extremely faster than 'BigInt'. Some values are spec'ed as Uint64 but\n * practically they will never exceed 53 bits, such as any unit time or simple counters. This type is an optimization\n * for these cases, as UintNumber64 can represent any value between 0 and 2^53−1 as well as the max value 2^64-1.\n */\nclass UintNumberType extends basic_1.BasicType {\n    constructor(byteLength, opts) {\n        super();\n        this.byteLength = byteLength;\n        if (byteLength > 8) {\n            throw Error(\"UintNumber byteLength limit is 8\");\n        }\n        if (Math.log2(byteLength) % 1 !== 0) {\n            throw Error(\"byteLength must be a power of 2\");\n        }\n        this.typeName = opts?.typeName ?? `uint${byteLength * 8}`;\n        if (opts?.clipInfinity)\n            this.typeName += \"Inf\";\n        if (opts?.setBitwiseOR)\n            this.typeName += \"OR\";\n        this.itemsPerChunk = 32 / this.byteLength;\n        this.fixedSize = byteLength;\n        this.minSize = byteLength;\n        this.maxSize = byteLength;\n        this.maxDecimalStr = (BigInt(2) ** BigInt(this.byteLength * 8) - BigInt(1)).toString(10);\n        this.clipInfinity = opts?.clipInfinity === true;\n        this.setBitwiseOR = opts?.setBitwiseOR === true;\n    }\n    static named(byteLength, opts) {\n        return new (named_1.namedClass(UintNumberType, opts.typeName))(byteLength, opts);\n    }\n    defaultValue() {\n        return 0;\n    }\n    // Serialization + deserialization\n    value_serializeToBytes({ dataView }, offset, value) {\n        switch (this.byteLength) {\n            case 1:\n                dataView.setInt8(offset, value);\n                break;\n            case 2:\n                dataView.setUint16(offset, value, true);\n                break;\n            case 4:\n                dataView.setUint32(offset, value, true);\n                break;\n            case 8:\n                if (value === Infinity) {\n                    // TODO: Benchmark if it's faster to set BIGINT_64_MAX once\n                    dataView.setUint32(offset, 0xffffffff);\n                    dataView.setUint32(offset + 4, 0xffffffff);\n                }\n                else {\n                    dataView.setUint32(offset, value & 0xffffffff, true);\n                    dataView.setUint32(offset + 4, (value / NUMBER_2_POW_32) & 0xffffffff, true);\n                }\n                break;\n        }\n        return offset + this.byteLength;\n    }\n    value_deserializeFromBytes({ dataView }, start, end) {\n        this.assertValidSize(end - start);\n        switch (this.byteLength) {\n            case 1:\n                return dataView.getUint8(start);\n            case 2:\n                return dataView.getUint16(start, true);\n            case 4:\n                return dataView.getUint32(start, true);\n            case 8: {\n                const a = dataView.getUint32(start, true);\n                const b = dataView.getUint32(start + 4, true);\n                if (b === NUMBER_32_MAX && a === NUMBER_32_MAX && this.clipInfinity) {\n                    return Infinity;\n                }\n                else {\n                    return b * NUMBER_2_POW_32 + a;\n                }\n            }\n        }\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const value = node.getUint(this.byteLength, 0, this.clipInfinity);\n        this.value_serializeToBytes(output, offset, value);\n        return offset + this.byteLength;\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        this.assertValidSize(end - start);\n        const value = this.value_deserializeFromBytes(data, start, end);\n        const node = persistent_merkle_tree_1.LeafNode.fromZero();\n        node.setUint(this.byteLength, 0, value, this.clipInfinity);\n        return node;\n    }\n    // Fast Tree access\n    tree_getFromNode(leafNode) {\n        return leafNode.getUint(this.byteLength, 0, this.clipInfinity);\n    }\n    tree_setToNode(leafNode, value) {\n        this.tree_setToPackedNode(leafNode, 0, value);\n    }\n    tree_getFromPackedNode(leafNode, index) {\n        const offsetBytes = this.byteLength * (index % this.itemsPerChunk);\n        return leafNode.getUint(this.byteLength, offsetBytes, this.clipInfinity);\n    }\n    tree_setToPackedNode(leafNode, index, value) {\n        const offsetBytes = this.byteLength * (index % this.itemsPerChunk);\n        // TODO: Benchmark the cost of this if, and consider using a different class\n        if (this.setBitwiseOR) {\n            leafNode.bitwiseOrUint(this.byteLength, offsetBytes, value);\n        }\n        else {\n            leafNode.setUint(this.byteLength, offsetBytes, value, this.clipInfinity);\n        }\n    }\n    // JSON\n    fromJson(json) {\n        if (typeof json === \"number\") {\n            return json;\n        }\n        else if (typeof json === \"string\") {\n            if (this.clipInfinity && json === this.maxDecimalStr) {\n                // Allow to handle max possible number\n                return Infinity;\n            }\n            else {\n                const num = parseInt(json, 10);\n                if (isNaN(num)) {\n                    throw Error(\"JSON invalid number isNaN\");\n                }\n                else if (num > Number.MAX_SAFE_INTEGER) {\n                    // Throw to prevent decimal precision errors downstream\n                    throw Error(\"JSON invalid number > MAX_SAFE_INTEGER\");\n                }\n                else {\n                    return num;\n                }\n            }\n        }\n        else if (typeof json === \"bigint\") {\n            if (json > MAX_SAFE_INTEGER_BN) {\n                // Throw to prevent decimal precision errors downstream\n                throw Error(\"JSON invalid number > MAX_SAFE_INTEGER_BN\");\n            }\n            else {\n                return Number(json);\n            }\n        }\n        else {\n            throw Error(`JSON invalid type ${typeof json} expected number`);\n        }\n    }\n    toJson(value) {\n        if (value === Infinity) {\n            return this.maxDecimalStr;\n        }\n        else {\n            return value.toString(10);\n        }\n    }\n}\nexports.UintNumberType = UintNumberType;\n/**\n * Uint: N-bit unsigned integer (where N in [8, 16, 32, 64, 128, 256])\n * - Notation: uintN\n *\n * UintBigint is represented as the Javascript primitive value 'BigInt'.\n *\n * The BigInt type is a numeric primitive in JavaScript that can represent integers with arbitrary precision.\n * With BigInts, you can safely store and operate on large integers even beyond the safe integer limit for Numbers.\n *\n * As of 2021 performance of 'Number' is extremely faster than 'BigInt'. For Uint values under 53 bits use UintNumber.\n * For other values that may exceed 53 bits, use UintBigint.\n */\nclass UintBigintType extends basic_1.BasicType {\n    constructor(byteLength, opts) {\n        super();\n        this.byteLength = byteLength;\n        if (byteLength > 32) {\n            throw Error(\"UintBigint byteLength limit is 32\");\n        }\n        if (Math.log2(byteLength) % 1 !== 0) {\n            throw Error(\"byteLength must be a power of 2\");\n        }\n        this.typeName = opts?.typeName ?? `uintBigint${byteLength * 8}`;\n        this.byteLength = byteLength;\n        this.itemsPerChunk = 32 / this.byteLength;\n        this.fixedSize = byteLength;\n        this.minSize = byteLength;\n        this.maxSize = byteLength;\n    }\n    static named(byteLength, opts) {\n        return new (named_1.namedClass(UintBigintType, opts.typeName))(byteLength, opts);\n    }\n    defaultValue() {\n        return BigInt(0);\n    }\n    // Serialization + deserialization\n    value_serializeToBytes({ dataView }, offset, value) {\n        switch (this.byteLength) {\n            case 1:\n                dataView.setInt8(offset, Number(value));\n                break;\n            case 2:\n                dataView.setUint16(offset, Number(value), true);\n                break;\n            case 4:\n                dataView.setUint32(offset, Number(value), true);\n                break;\n            case 8:\n                dataView.setBigUint64(offset, value, true);\n                break;\n            default: {\n                for (let i = 0; i < this.byteLength; i += 8) {\n                    if (i > 0)\n                        value = value / BIGINT_2_POW_64;\n                    const lo = BigInt.asUintN(64, value);\n                    dataView.setBigUint64(offset + i, lo, true);\n                }\n            }\n        }\n        return offset + this.byteLength;\n    }\n    value_deserializeFromBytes({ dataView }, start, end) {\n        const size = end - start;\n        if (size !== this.byteLength) {\n            throw Error(`Invalid size ${size} expected ${this.byteLength}`);\n        }\n        // Note: pre-assigning the right function at the constructor to avoid this switch is not faster\n        switch (this.byteLength) {\n            case 1:\n                return BigInt(dataView.getUint8(start));\n            case 2:\n                return BigInt(dataView.getUint16(start, true));\n            case 4:\n                return BigInt(dataView.getUint32(start, true));\n            case 8:\n                return dataView.getBigUint64(start, true);\n            case 16: {\n                const a = dataView.getBigUint64(start, true);\n                const b = dataView.getBigUint64(start + 8, true);\n                return b * BIGINT_2_POW_64 + a;\n            }\n            case 32: {\n                const a = dataView.getBigUint64(start, true);\n                const b = dataView.getBigUint64(start + 8, true);\n                const c = dataView.getBigUint64(start + 16, true);\n                const d = dataView.getBigUint64(start + 24, true);\n                return d * BIGINT_2_POW_192 + c * BIGINT_2_POW_128 + b * BIGINT_2_POW_64 + a;\n            }\n        }\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const value = node.getUintBigint(this.byteLength, 0);\n        this.value_serializeToBytes(output, offset, value);\n        return offset + this.byteLength;\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        const size = end - start;\n        if (size !== this.byteLength) {\n            throw Error(`Invalid size ${size} expected ${this.byteLength}`);\n        }\n        const value = this.value_deserializeFromBytes(data, start, end);\n        const node = persistent_merkle_tree_1.LeafNode.fromZero();\n        node.setUintBigint(this.byteLength, 0, value);\n        return node;\n    }\n    // Fast Tree access\n    tree_getFromNode(leafNode) {\n        return leafNode.getUintBigint(this.byteLength, 0);\n    }\n    /** Mutates node to set value */\n    tree_setToNode(leafNode, value) {\n        this.tree_setToPackedNode(leafNode, 0, value);\n    }\n    /** EXAMPLE of `tree_getFromNode` */\n    tree_getFromPackedNode(leafNode, index) {\n        const offsetBytes = this.byteLength * (index % this.itemsPerChunk);\n        return leafNode.getUintBigint(this.byteLength, offsetBytes);\n    }\n    /** Mutates node to set value */\n    tree_setToPackedNode(leafNode, index, value) {\n        const offsetBytes = this.byteLength * (index % this.itemsPerChunk);\n        // TODO: Not-optimized, copy pasted from UintNumberType\n        leafNode.setUintBigint(this.byteLength, offsetBytes, value);\n    }\n    // JSON\n    fromJson(json) {\n        if (typeof json === \"bigint\") {\n            return json;\n        }\n        else if (typeof json === \"string\" || typeof json === \"number\") {\n            return BigInt(json);\n        }\n        else {\n            throw Error(`JSON invalid type ${typeof json} expected bigint`);\n        }\n    }\n    toJson(value) {\n        return value.toString(10);\n    }\n}\nexports.UintBigintType = UintBigintType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UnionType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst composite_1 = require(\"./composite\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst none_1 = require(\"./none\");\nconst VALUE_GINDEX = BigInt(2);\nconst SELECTOR_GINDEX = BigInt(3);\n/**\n * Union: union type containing one of the given subtypes\n * - Notation: Union[type_0, type_1, ...], e.g. union[None, uint64, uint32]\n */\nclass UnionType extends composite_1.CompositeType {\n    constructor(types, opts) {\n        super();\n        this.types = types;\n        this.depth = 1;\n        this.maxChunkCount = 1;\n        this.fixedSize = null;\n        this.isList = true;\n        this.isViewMutable = true;\n        if (types.length >= 128) {\n            throw Error(\"Must have less than 128 types\");\n        }\n        if (types.length === 0) {\n            throw Error(\"Must have at least 1 type option\");\n        }\n        if (types[0] instanceof none_1.NoneType && types.length < 2) {\n            throw Error(\"Must have at least 2 type options if the first is None\");\n        }\n        for (let i = 1; i < types.length; i++) {\n            if (types[i] instanceof none_1.NoneType) {\n                throw Error(\"None may only be the first option\");\n            }\n        }\n        this.typeName = opts?.typeName ?? `Union[${types.map((t) => t.typeName).join(\",\")}]`;\n        const minLens = [];\n        const maxLens = [];\n        for (const _type of types) {\n            minLens.push(_type.minSize);\n            maxLens.push(_type.maxSize);\n        }\n        this.minSize = 1 + Math.min(...minLens);\n        this.maxSize = 1 + Math.max(...maxLens);\n        this.maxSelector = this.types.length - 1;\n    }\n    static named(types, opts) {\n        return new (named_1.namedClass(UnionType, opts.typeName))(types, opts);\n    }\n    defaultValue() {\n        return {\n            selector: 0,\n            value: this.types[0].defaultValue(),\n        };\n    }\n    getView(tree) {\n        return this.tree_toValue(tree.rootNode);\n    }\n    getViewDU(node) {\n        return this.tree_toValue(node);\n    }\n    cacheOfViewDU() {\n        return;\n    }\n    commitView(view) {\n        return this.value_toTree(view);\n    }\n    commitViewDU(view) {\n        return this.value_toTree(view);\n    }\n    value_serializedSize(value) {\n        return 1 + this.types[value.selector].value_serializedSize(value.value);\n    }\n    value_serializeToBytes(output, offset, value) {\n        output.uint8Array[offset] = value.selector;\n        return this.types[value.selector].value_serializeToBytes(output, offset + 1, value.value);\n    }\n    value_deserializeFromBytes(data, start, end) {\n        const selector = data.uint8Array[start];\n        if (selector > this.maxSelector) {\n            throw Error(`Invalid selector ${selector}`);\n        }\n        return {\n            selector,\n            value: this.types[selector].value_deserializeFromBytes(data, start + 1, end),\n        };\n    }\n    tree_serializedSize(node) {\n        const selector = arrayBasic_1.getLengthFromRootNode(node);\n        const valueNode = node.left;\n        return 1 + this.types[selector].value_serializedSize(valueNode);\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const selector = arrayBasic_1.getLengthFromRootNode(node);\n        const valueNode = node.left;\n        output.uint8Array[offset] = selector;\n        return this.types[selector].tree_serializeToBytes(output, offset + 1, valueNode);\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        const selector = data.uint8Array[start];\n        if (selector > this.maxSelector) {\n            throw Error(`Invalid selector ${selector}`);\n        }\n        const valueNode = this.types[selector].tree_deserializeFromBytes(data, start + 1, end);\n        return arrayBasic_1.addLengthNode(valueNode, selector);\n    }\n    // Merkleization\n    hashTreeRoot(value) {\n        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.selector);\n    }\n    getRoots(value) {\n        const valueRoot = this.types[value.selector].hashTreeRoot(value.value);\n        return [valueRoot];\n    }\n    // Proofs\n    getPropertyGindex(prop) {\n        switch (prop) {\n            case \"value\":\n                return VALUE_GINDEX;\n            case \"selector\":\n                return SELECTOR_GINDEX;\n            default:\n                throw new Error(`Invalid Union type property ${prop}`);\n        }\n    }\n    getPropertyType() {\n        // a Union has multiple types\n        throw new Error(\"Not applicable for Union type\");\n    }\n    getIndexProperty(index) {\n        if (index === 0)\n            return \"value\";\n        if (index === 1)\n            return \"selector\";\n        throw Error(\"Union index of out bounds\");\n    }\n    tree_getLeafGindices(rootGindex, rootNode) {\n        if (!rootNode) {\n            throw Error(\"rootNode required\");\n        }\n        const gindices = [persistent_merkle_tree_1.concatGindices([rootGindex, SELECTOR_GINDEX])];\n        const selector = arrayBasic_1.getLengthFromRootNode(rootNode);\n        const type = this.types[selector];\n        const extendedFieldGindex = persistent_merkle_tree_1.concatGindices([rootGindex, VALUE_GINDEX]);\n        if (composite_1.isCompositeType(type)) {\n            gindices.push(...type.tree_getLeafGindices(extendedFieldGindex, persistent_merkle_tree_1.getNode(rootNode, VALUE_GINDEX)));\n        }\n        else {\n            gindices.push(extendedFieldGindex);\n        }\n        return gindices;\n    }\n    // JSON\n    fromJson(json) {\n        if (typeof json !== \"object\") {\n            throw new Error(\"JSON must be of type object\");\n        }\n        const union = json;\n        if (typeof union.selector !== \"number\") {\n            throw new Error(\"Invalid JSON Union selector must be number\");\n        }\n        const type = this.types[union.selector];\n        if (!type) {\n            throw new Error(\"Invalid JSON Union selector out of range\");\n        }\n        return {\n            selector: union.selector,\n            value: type.toJson(union.value),\n        };\n    }\n    toJson(value) {\n        return {\n            selector: value.selector,\n            value: this.types[value.selector].toJson(value.value),\n        };\n    }\n    clone(value) {\n        return {\n            selector: value.selector,\n            value: this.types[value.selector].clone(value.value),\n        };\n    }\n    equals(a, b) {\n        if (a.selector !== b.selector) {\n            return false;\n        }\n        return this.types[a.selector].equals(a.value, b.value);\n    }\n}\nexports.UnionType = UnionType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VectorBasicType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst arrayBasic_2 = require(\"../view/arrayBasic\");\nconst arrayBasic_3 = require(\"../viewDU/arrayBasic\");\nconst array_1 = require(\"./array\");\n/**\n * Vector: Ordered fixed-length homogeneous collection, with N values\n *\n * Array of Basic type:\n * - Basic types are max 32 bytes long so multiple values may be packed in the same node.\n * - Basic types are never returned in a view wrapper, but their value representation\n */\nclass VectorBasicType extends array_1.ArrayType {\n    constructor(elementType, length, opts) {\n        super(elementType);\n        this.elementType = elementType;\n        this.length = length;\n        this.isList = false;\n        this.isViewMutable = true;\n        if (!elementType.isBasic)\n            throw Error(\"elementType must be basic\");\n        if (length === 0)\n            throw Error(\"Vector length must be > 0\");\n        this.typeName = opts?.typeName ?? `Vector[${elementType.typeName}, ${length}]`;\n        // TODO Check that itemsPerChunk is an integer\n        this.itemsPerChunk = 32 / elementType.byteLength;\n        this.maxChunkCount = Math.ceil((length * elementType.byteLength) / 32);\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        this.depth = this.chunkDepth;\n        this.fixedSize = length * elementType.byteLength;\n        this.minSize = this.fixedSize;\n        this.maxSize = this.fixedSize;\n        this.defaultLen = length;\n    }\n    static named(elementType, limit, opts) {\n        return new (named_1.namedClass(VectorBasicType, opts.typeName))(elementType, limit, opts);\n    }\n    getView(tree) {\n        return new arrayBasic_2.ArrayBasicTreeView(this, tree);\n    }\n    getViewDU(node, cache) {\n        // cache type should be validated (if applicate) in the view\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new arrayBasic_3.ArrayBasicTreeViewDU(this, node, cache);\n    }\n    commitView(view) {\n        return view.node;\n    }\n    commitViewDU(view) {\n        view.commit();\n        return view.node;\n    }\n    cacheOfViewDU(view) {\n        return view.cache;\n    }\n    // Serialization + deserialization\n    value_serializedSize() {\n        return this.fixedSize;\n    }\n    value_serializeToBytes(output, offset, value) {\n        return arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, this.length, output, offset, value);\n    }\n    value_deserializeFromBytes(data, start, end) {\n        return arrayBasic_1.value_deserializeFromBytesArrayBasic(this.elementType, data, start, end, this);\n    }\n    tree_serializedSize() {\n        return this.fixedSize;\n    }\n    tree_serializeToBytes(output, offset, node) {\n        return arrayBasic_1.tree_serializeToBytesArrayBasic(this.elementType, this.length, this.depth, output, offset, node);\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        return arrayBasic_1.tree_deserializeFromBytesArrayBasic(this.elementType, this.depth, data, start, end, this);\n    }\n    // Helpers for TreeView\n    tree_getLength() {\n        return this.length;\n    }\n    tree_setLength() {\n        // Vector's length is immutable, ignore this call\n    }\n    tree_getChunksNode(node) {\n        return node;\n    }\n    tree_setChunksNode(rootNode, chunksNode) {\n        return chunksNode;\n    }\n    // Merkleization\n    getRoots(value) {\n        const uint8Array = new Uint8Array(this.fixedSize);\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, this.length, { uint8Array, dataView }, 0, value);\n        return merkleize_1.splitIntoRootChunks(uint8Array);\n    }\n}\nexports.VectorBasicType = VectorBasicType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VectorCompositeType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nconst arrayComposite_2 = require(\"../view/arrayComposite\");\nconst arrayComposite_3 = require(\"../viewDU/arrayComposite\");\nconst array_1 = require(\"./array\");\n/**\n * Vector: Ordered fixed-length homogeneous collection, with N values\n *\n * Array of Composite type:\n * - Composite types always take at least one chunk\n * - Composite types are always returned as views\n */\nclass VectorCompositeType extends array_1.ArrayType {\n    constructor(elementType, length, opts) {\n        super(elementType);\n        this.elementType = elementType;\n        this.length = length;\n        this.itemsPerChunk = 1;\n        this.isList = false;\n        this.isViewMutable = true;\n        if (elementType.isBasic)\n            throw Error(\"elementType must not be basic\");\n        if (length === 0)\n            throw Error(\"Vector length must be > 0\");\n        this.typeName = opts?.typeName ?? `Vector[${elementType.typeName}, ${length}]`;\n        this.maxChunkCount = length;\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        this.depth = this.chunkDepth;\n        this.fixedSize = elementType.fixedSize === null ? null : length * elementType.fixedSize;\n        this.minSize = arrayComposite_1.minSizeArrayComposite(elementType, length);\n        this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, length);\n        this.defaultLen = length;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static named(elementType, limit, opts) {\n        return new (named_1.namedClass(VectorCompositeType, opts.typeName))(elementType, limit, opts);\n    }\n    getView(tree) {\n        return new arrayComposite_2.ArrayCompositeTreeView(this, tree);\n    }\n    getViewDU(node, cache) {\n        // cache type should be validated (if applicate) in the view\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new arrayComposite_3.ArrayCompositeTreeViewDU(this, node, cache);\n    }\n    commitView(view) {\n        return view.node;\n    }\n    commitViewDU(view) {\n        view.commit();\n        return view.node;\n    }\n    cacheOfViewDU(view) {\n        return view.cache;\n    }\n    // Serialization + deserialization\n    value_serializedSize(value) {\n        return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, this.length, value);\n    }\n    value_serializeToBytes(output, offset, value) {\n        return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, this.length, output, offset, value);\n    }\n    value_deserializeFromBytes(data, start, end) {\n        return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);\n    }\n    tree_serializedSize(node) {\n        return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, this.length, this.depth, node);\n    }\n    tree_serializeToBytes(output, offset, node) {\n        return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, this.length, this.depth, node, output, offset);\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.depth, data, start, end, this);\n    }\n    // Helpers for TreeView\n    tree_getLength() {\n        return this.length;\n    }\n    tree_setLength() {\n        // Vector's length is immutable, ignore this call\n    }\n    tree_getChunksNode(node) {\n        return node;\n    }\n    tree_setChunksNode(rootNode, chunksNode) {\n        return chunksNode;\n    }\n    // Merkleization\n    getRoots(value) {\n        return arrayComposite_1.value_getRootsArrayComposite(this.elementType, this.length, value);\n    }\n}\nexports.VectorCompositeType = VectorCompositeType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.byteArrayEquals = exports.fromHexString = exports.toHexString = void 0;\n// Caching this info costs about ~1000 bytes and speeds up toHexString() by x6\nconst hexByByte = new Array(256);\nfunction toHexString(bytes) {\n    let hex = \"0x\";\n    for (const byte of bytes) {\n        if (!hexByByte[byte]) {\n            hexByByte[byte] = byte < 16 ? \"0\" + byte.toString(16) : byte.toString(16);\n        }\n        hex += hexByByte[byte];\n    }\n    return hex;\n}\nexports.toHexString = toHexString;\nfunction fromHexString(hex) {\n    if (typeof hex !== \"string\") {\n        throw new Error(`hex argument type ${typeof hex} must be of type string`);\n    }\n    if (hex.startsWith(\"0x\")) {\n        hex = hex.slice(2);\n    }\n    if (hex.length % 2 !== 0) {\n        throw new Error(`hex string length ${hex.length} must be multiple of 2`);\n    }\n    const byteLen = hex.length / 2;\n    const bytes = new Uint8Array(byteLen);\n    for (let i = 0; i < byteLen; i++) {\n        const byte = parseInt(hex.slice(i * 2, (i + 1) * 2), 16);\n        bytes[i] = byte;\n    }\n    return bytes;\n}\nexports.fromHexString = fromHexString;\nfunction byteArrayEquals(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\nexports.byteArrayEquals = byteArrayEquals;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.nextPowerOf2 = exports.maxChunksToDepth = exports.bitLength = exports.mixInLength = exports.splitIntoRootChunks = exports.merkleize = exports.hash64 = void 0;\nconst as_sha256_1 = require(\"@chainsafe/as-sha256\");\nconst zeros_1 = require(\"./zeros\");\nfunction hash64(bytes32A, bytes32B) {\n    return as_sha256_1.digest2Bytes32(bytes32A, bytes32B);\n}\nexports.hash64 = hash64;\nfunction merkleize(chunks, padFor) {\n    const layerCount = bitLength(nextPowerOf2(padFor) - 1);\n    if (chunks.length == 0) {\n        return zeros_1.zeroHash(layerCount);\n    }\n    let chunkCount = chunks.length;\n    // Instead of pushing on all padding zero chunks at the leaf level\n    // we push on zero hash chunks at the highest possible level to avoid over-hashing\n    for (let l = 0; l < layerCount; l++) {\n        const padCount = chunkCount % 2;\n        const paddedChunkCount = chunkCount + padCount;\n        // if the chunks.length is odd\n        // we need to push on the zero-hash of that level to merkleize that level\n        for (let i = 0; i < padCount; i++) {\n            chunks[chunkCount + i] = zeros_1.zeroHash(l);\n        }\n        for (let i = 0; i < paddedChunkCount; i += 2) {\n            chunks[i / 2] = hash64(chunks[i], chunks[i + 1]);\n        }\n        chunkCount = paddedChunkCount / 2;\n    }\n    return chunks[0];\n}\nexports.merkleize = merkleize;\n/**\n * Split a long Uint8Array into Uint8Array of exactly 32 bytes\n */\nfunction splitIntoRootChunks(longChunk) {\n    const chunkCount = Math.ceil(longChunk.length / 32);\n    const chunks = new Array(chunkCount);\n    for (let i = 0; i < chunkCount; i++) {\n        const chunk = new Uint8Array(32);\n        chunk.set(longChunk.slice(i * 32, (i + 1) * 32));\n        chunks[i] = chunk;\n    }\n    return chunks;\n}\nexports.splitIntoRootChunks = splitIntoRootChunks;\n/** @ignore */\nfunction mixInLength(root, length) {\n    const lengthBuf = Buffer.alloc(32);\n    lengthBuf.writeUIntLE(length, 0, 6);\n    return hash64(root, lengthBuf);\n}\nexports.mixInLength = mixInLength;\n// x2 faster than bitLengthStr() which uses Number.toString(2)\nfunction bitLength(i) {\n    if (i === 0) {\n        return 0;\n    }\n    return Math.floor(Math.log2(i)) + 1;\n}\nexports.bitLength = bitLength;\n/**\n * Given maxChunkCount return the chunkDepth\n * ```\n * n: [0,1,2,3,4,5,6,7,8,9]\n * d: [0,0,1,2,2,3,3,3,3,4]\n * ```\n */\nfunction maxChunksToDepth(n) {\n    if (n === 0)\n        return 0;\n    return Math.ceil(Math.log2(n));\n}\nexports.maxChunksToDepth = maxChunksToDepth;\n/** @ignore */\nfunction nextPowerOf2(n) {\n    return n <= 0 ? 1 : Math.pow(2, bitLength(n - 1));\n}\nexports.nextPowerOf2 = nextPowerOf2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.namedClass = void 0;\nfunction namedClass(superClass, className) {\n    return new Function(\"superClass\", `return class ${className} extends superClass {}`)(superClass);\n}\nexports.namedClass = namedClass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.treePostProcessFromProofNode = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\n/** Duplicated partial declaration to break circular dependency with CompositeType */\nfunction isCompositeType(type) {\n    return !type.isBasic;\n}\n/**\n * Navigates and mutates nodes to post process a tree created with `Tree.createFromProof`.\n * Tree returns regular a tree with only BranchNode and LeafNode instances. However, SSZ features\n * non-standard nodes that make proofs for those types to be un-usable. This include:\n * - BranchNodeStruct: Must contain complete data `tree_fromProofNode` transforms a BranchNode and\n *   all of its data into a single BranchNodeStruct instance.\n *\n * @param bitstring Bitstring without the leading \"1\", since it's only used to compute horizontal indexes.\n */\nfunction treePostProcessFromProofNode(node, type, bitstring = \"\", currentDepth = 0) {\n    // Must run tree_fromProofNode on the first received node (i.e. Validator object)\n    if (currentDepth === 0) {\n        const nodePost = type.tree_fromProofNode(node);\n        if (nodePost.done) {\n            return nodePost.node;\n        }\n        else {\n            node = nodePost.node;\n        }\n    }\n    const atTypeDepth = type.depth === currentDepth;\n    if (node.isLeaf()) {\n        if (atTypeDepth) {\n            const jsonPathProp = type.getIndexProperty(bitstringToIndex(bitstring));\n            if (jsonPathProp === null) {\n                // bitstring is out of bounds, witness node\n                return node;\n            }\n            const childType = type.getPropertyType(jsonPathProp);\n            // If this type merkleized fits in a single chunk then this LeafNode includes all data\n            if (childType.maxChunkCount === 1 && isCompositeType(childType)) {\n                return childType.tree_fromProofNode(node).node;\n            }\n            // Witness node\n            else {\n                return node;\n            }\n        }\n        // LeafNode not at type depth is a witness or a length / selector nodes\n        else {\n            return node;\n        }\n    }\n    else {\n        if (atTypeDepth) {\n            const jsonPathProp = type.getIndexProperty(bitstringToIndex(bitstring));\n            if (jsonPathProp === null) {\n                // bitstring is out of bounds, witness node\n                return node;\n            }\n            const childType = type.getPropertyType(jsonPathProp);\n            if (!isCompositeType(childType)) {\n                throw Error(\"BranchNode does not map to CompositeType\");\n            }\n            const nodePost = childType.tree_fromProofNode(node);\n            // If tree_fromProofNode is the identity function, keep going, otherwise stop navigating\n            if (nodePost.done) {\n                return nodePost.node;\n            }\n            else {\n                return treePostProcessFromProofNode(nodePost.node, childType);\n            }\n        }\n        // BranchNode at not type depth, keep navigating\n        else {\n            const leftNode = treePostProcessFromProofNode(node.left, type, bitstring + \"0\", currentDepth + 1);\n            const rightNode = treePostProcessFromProofNode(node.right, type, bitstring + \"1\", currentDepth + 1);\n            if (leftNode === node.left && rightNode === node.right) {\n                return node;\n            }\n            else {\n                return new persistent_merkle_tree_1.BranchNode(leftNode, rightNode);\n            }\n        }\n    }\n}\nexports.treePostProcessFromProofNode = treePostProcessFromProofNode;\n/** Return the node horizontal index given a bitstring without the leading \"1\" */\nfunction bitstringToIndex(bitstring) {\n    if (bitstring === \"\")\n        return 0;\n    return parseInt(bitstring, 2);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.zeroHash = void 0;\nconst as_sha256_1 = require(\"@chainsafe/as-sha256\");\n// create array of \"zero hashes\", successively hashed zero chunks\nconst zeroHashes = [new Uint8Array(32)];\nfunction zeroHash(depth) {\n    if (depth >= zeroHashes.length) {\n        for (let i = zeroHashes.length; i <= depth; i++) {\n            zeroHashes[i] = as_sha256_1.digest2Bytes32(zeroHashes[i - 1], zeroHashes[i - 1]);\n        }\n    }\n    return zeroHashes[depth];\n}\nexports.zeroHash = zeroHash;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUint8ByteToBitBooleanArray = exports.BitArray = void 0;\n/** Globally cache this information. @see getUint8ByteToBitBooleanArray */\nconst uint8ByteToBitBooleanArrays = new Array(256);\n/**\n * BitArray may be represented as an array of bits or compressed into an array of bytes.\n *\n * **Array of bits**:\n * Require 8.87 bytes per bit, so for 512 bits = 4500 bytes.\n * Are 'faster' to iterate with native tooling but are as fast as array of bytes with precomputed caches.\n *\n * **Array of bytes**:\n * Require an average cost of Uint8Array in JS = 220 bytes for 32 bytes, so for 512 bits = 220 bytes.\n * With precomputed boolean arrays per bytes value are as fast to iterate as an array of bits above.\n *\n * This BitArray implementation will represent data as a Uint8Array since it's very cheap to deserialize and can be as\n * fast to iterate as a native array of booleans, precomputing boolean arrays (total memory cost of 16000 bytes).\n */\nclass BitArray {\n    constructor(\n    /** Underlying BitArray Uint8Array data */\n    uint8Array, \n    /** Immutable bitLen of this BitArray */\n    bitLen) {\n        this.uint8Array = uint8Array;\n        this.bitLen = bitLen;\n        if (uint8Array.length !== Math.ceil(bitLen / 8)) {\n            throw Error(\"BitArray uint8Array length does not match bitLen\");\n        }\n    }\n    /** Returns a zero'ed BitArray of `bitLen` */\n    static fromBitLen(bitLen) {\n        return new BitArray(new Uint8Array(Math.ceil(bitLen / 8)), bitLen);\n    }\n    /** Returns a BitArray of `bitLen` with a single bit set to true at position `bitIndex` */\n    static fromSingleBit(bitLen, bitIndex) {\n        const bitArray = BitArray.fromBitLen(bitLen);\n        bitArray.set(bitIndex, true);\n        return bitArray;\n    }\n    /** Returns a BitArray from an array of booleans representation */\n    static fromBoolArray(bitBoolArr) {\n        const bitArray = BitArray.fromBitLen(bitBoolArr.length);\n        for (let i = 0; i < bitBoolArr.length; i++) {\n            if (bitBoolArr[i] === true) {\n                bitArray.set(i, true);\n            }\n        }\n        return bitArray;\n    }\n    clone() {\n        // TODO: Benchmark if Uint8Array.slice(0) is the fastest way to copy data here\n        // Buffer.prototype.slice does not copy memory, Enforce Uint8Array usage https://github.com/nodejs/node/issues/28087\n        return new BitArray(Uint8Array.prototype.slice.call(this.uint8Array, 0), this.bitLen);\n    }\n    /**\n     * Get bit value at index `bitIndex`\n     */\n    get(bitIndex) {\n        const byteIdx = Math.floor(bitIndex / 8);\n        const bitInBit = bitIndex % 8;\n        const mask = 1 << bitInBit;\n        return (this.uint8Array[byteIdx] & mask) === mask;\n    }\n    /**\n     * Set bit value at index `bitIndex`\n     */\n    set(bitIndex, bit) {\n        if (bitIndex >= this.bitLen) {\n            throw Error(`BitArray set bitIndex ${bitIndex} beyond bitLen ${this.bitLen}`);\n        }\n        const byteIdx = Math.floor(bitIndex / 8);\n        const bitInBit = bitIndex % 8;\n        const mask = 1 << bitInBit;\n        let byte = this.uint8Array[byteIdx];\n        if (bit) {\n            // For bit in byte, 1,0 OR 1 = 1\n            // byte 100110\n            // mask 010000\n            // res  110110\n            byte |= mask;\n            this.uint8Array[byteIdx] = byte;\n        }\n        else {\n            // For bit in byte, 1,0 OR 1 = 0\n            if ((byte & mask) === mask) {\n                // byte 110110\n                // mask 010000\n                // res  100110\n                byte ^= mask;\n                this.uint8Array[byteIdx] = byte;\n            }\n            else {\n                // Ok, bit is already 0\n            }\n        }\n    }\n    /** Merge two BitArray bitfields with OR. Must have the same bitLen */\n    mergeOrWith(bitArray2) {\n        if (bitArray2.bitLen !== this.bitLen) {\n            throw Error(\"Must merge BitArrays of same bitLen\");\n        }\n        // Merge bitFields\n        for (let i = 0; i < this.uint8Array.length; i++) {\n            this.uint8Array[i] = this.uint8Array[i] | bitArray2.uint8Array[i];\n        }\n    }\n    /**\n     * Returns an array with the indexes which have a bit set to true\n     */\n    intersectValues(values) {\n        const yes = [];\n        if (values.length !== this.bitLen) {\n            throw Error(`Must not intersect values of length ${values.length} != bitLen ${this.bitLen}`);\n        }\n        const fullByteLen = Math.floor(this.bitLen / 8);\n        const remainderBits = this.bitLen % 8;\n        // Iterate over each byte of bits\n        const bytes = this.uint8Array;\n        for (let iByte = 0; iByte < fullByteLen; iByte++) {\n            // Get the precomputed boolean array for this byte\n            const booleansInByte = getUint8ByteToBitBooleanArray(bytes[iByte]);\n            // For each bit in the byte check participation and add to indexesSelected array\n            for (let iBit = 0; iBit < 8; iBit++) {\n                if (booleansInByte[iBit]) {\n                    yes.push(values[iByte * 8 + iBit]);\n                }\n            }\n        }\n        if (remainderBits > 0) {\n            // Get the precomputed boolean array for this byte\n            const booleansInByte = getUint8ByteToBitBooleanArray(bytes[fullByteLen]);\n            // For each bit in the byte check participation and add to indexesSelected array\n            for (let iBit = 0; iBit < remainderBits; iBit++) {\n                if (booleansInByte[iBit]) {\n                    yes.push(values[fullByteLen * 8 + iBit]);\n                }\n            }\n        }\n        return yes;\n    }\n    /**\n     * Returns the positions of all bits that are set to true\n     */\n    getTrueBitIndexes() {\n        const indexes = [];\n        // Iterate over each byte of bits\n        const bytes = this.uint8Array;\n        for (let iByte = 0, byteLen = bytes.length; iByte < byteLen; iByte++) {\n            // Get the precomputed boolean array for this byte\n            const booleansInByte = getUint8ByteToBitBooleanArray(bytes[iByte]);\n            // For each bit in the byte check participation and add to indexesSelected array\n            for (let iBit = 0; iBit < 8; iBit++) {\n                if (booleansInByte[iBit]) {\n                    indexes.push(iByte * 8 + iBit);\n                }\n            }\n        }\n        return indexes;\n    }\n    /**\n     * Return the position of a single bit set. If no bit set or more than 1 bit set, throws.\n     * @returns\n     *  - number: if there's a single bit set, the number it the single bit set position\n     *  - null: if ERROR_MORE_THAN_ONE_BIT_SET or ERROR_NO_BIT_SET\n     * @throws\n     *  - ERROR_MORE_THAN_ONE_BIT_SET\n     *  - ERROR_NO_BIT_SET\n     */\n    getSingleTrueBit() {\n        let index = null;\n        const bytes = this.uint8Array;\n        // Iterate over each byte of bits\n        for (let iByte = 0, byteLen = bytes.length; iByte < byteLen; iByte++) {\n            // If it's exactly zero, there won't be any indexes, continue early\n            if (bytes[iByte] === 0) {\n                continue;\n            }\n            // Get the precomputed boolean array for this byte\n            const booleansInByte = getUint8ByteToBitBooleanArray(bytes[iByte]);\n            // For each bit in the byte check participation and add to indexesSelected array\n            for (let iBit = 0; iBit < 8; iBit++) {\n                if (booleansInByte[iBit] === true) {\n                    if (index !== null) {\n                        // ERROR_MORE_THAN_ONE_BIT_SET\n                        return null;\n                    }\n                    index = iByte * 8 + iBit;\n                }\n            }\n        }\n        if (index === null) {\n            // ERROR_NO_BIT_SET\n            return null;\n        }\n        else {\n            return index;\n        }\n    }\n    toBoolArray() {\n        const bitBoolArr = new Array(this.bitLen);\n        for (let i = 0; i < this.bitLen; i++) {\n            bitBoolArr[i] = this.get(i);\n        }\n        return bitBoolArr;\n    }\n}\nexports.BitArray = BitArray;\n/**\n * Given a byte (0 -> 255), return a Array of boolean with length = 8, big endian.\n * Ex: 1 => [true false false false false false false false]\n *     5 => [true false true false false fase false false]\n */\nfunction getUint8ByteToBitBooleanArray(byte) {\n    if (!uint8ByteToBitBooleanArrays[byte]) {\n        uint8ByteToBitBooleanArrays[byte] = computeUint8ByteToBitBooleanArray(byte);\n    }\n    return uint8ByteToBitBooleanArrays[byte];\n}\nexports.getUint8ByteToBitBooleanArray = getUint8ByteToBitBooleanArray;\n/** @see getUint8ByteToBitBooleanArray */\nfunction computeUint8ByteToBitBooleanArray(byte) {\n    // this returns little endian\n    const binaryStr = byte.toString(2);\n    const binaryLength = binaryStr.length;\n    const bits = new Array(8);\n    for (let i = 0; i < 8; i++) {\n        bits[i] =\n            i < binaryLength\n                ? //\n                    binaryStr[binaryLength - i - 1] === \"1\"\n                : false;\n    }\n    return bits;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\n/**\n * A Tree View is a wrapper around a type and an SSZ Tree that contains:\n * - data merkleized\n * - a hook to its parent Tree to propagate changes upwards\n *\n * **View**\n * - Best for simple usage where performance is NOT important\n * - Applies changes immediately\n * - Has reference to parent tree\n * - Does NOT have caches for fast get / set ops\n */\nclass TreeView {\n    /** Serialize view to binary data */\n    serialize() {\n        const output = new Uint8Array(this.type.tree_serializedSize(this.node));\n        const dataView = new DataView(output.buffer, output.byteOffset, output.byteLength);\n        this.type.tree_serializeToBytes({ uint8Array: output, dataView }, 0, this.node);\n        return output;\n    }\n    /**\n     * Merkleize view and compute its hashTreeRoot.\n     *\n     * See spec for definition of hashTreeRoot:\n     * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\n     */\n    hashTreeRoot() {\n        return this.node.root;\n    }\n    /**\n     * Create a Merkle multiproof on this view's data.\n     * A `path` is an array of 'JSON' paths into the data\n     * @example\n     * ```ts\n     * state.createProof([\n     *   [\"validators\", 1234, \"slashed\"],\n     *   [\"genesisTime\"]\n     * ])\n     * ```\n     *\n     * See spec for definition of merkle multiproofs:\n     * https://github.com/ethereum/consensus-specs/blob/dev/ssz/merkle-proofs.md#merkle-multiproofs\n     */\n    createProof(paths) {\n        return this.type.tree_createProof(this.node, paths);\n    }\n    /**\n     * Transform the view into a value, from the current node instance.\n     * For ViewDU returns the value of the committed data, so call .commit() before if there are pending changes.\n     */\n    toValue() {\n        return this.type.tree_toValue(this.node);\n    }\n    /** Return a new Tree View instance referencing the same internal `Node`. Drops its existing `Tree` hook if any */\n    clone() {\n        return this.type.getView(new persistent_merkle_tree_1.Tree(this.node));\n    }\n}\nexports.TreeView = TreeView;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayBasicTreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayBasicTreeView extends abstract_1.TreeView {\n    constructor(type, tree) {\n        super();\n        this.type = type;\n        this.tree = tree;\n    }\n    /**\n     * Number of elements in the array. Equal to the Uint32 value of the Tree's length node\n     */\n    get length() {\n        return this.type.tree_getLength(this.tree.rootNode);\n    }\n    get node() {\n        return this.tree.rootNode;\n    }\n    /**\n     * Get element at `index`. Returns the Basic element type value directly\n     */\n    get(index) {\n        // First walk through the tree to get the root node for that index\n        const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n        const leafNode = this.tree.getNodeAtDepth(this.type.depth, chunkIndex);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return this.type.elementType.tree_getFromPackedNode(leafNode, index);\n    }\n    /**\n     * Set Basic element type `value` at `index`\n     */\n    set(index, value) {\n        const length = this.length;\n        if (index >= length) {\n            throw Error(`Error setting index over length ${index} > ${length}`);\n        }\n        const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n        const leafNodePrev = this.tree.getNodeAtDepth(this.type.depth, chunkIndex);\n        // Create a new node to preserve immutability\n        const leafNode = leafNodePrev.clone();\n        this.type.elementType.tree_setToPackedNode(leafNode, index, value);\n        // Commit immediately\n        this.tree.setNodeAtDepth(this.type.depth, chunkIndex, leafNode);\n    }\n    /**\n     * Get all values of this array as Basic element type values, from index zero to `this.length - 1`\n     */\n    getAll() {\n        const length = this.length;\n        const chunksNode = this.type.tree_getChunksNode(this.node);\n        const chunkCount = Math.ceil(length / this.type.itemsPerChunk);\n        const leafNodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, chunkCount);\n        const values = new Array(length);\n        const itemsPerChunk = this.type.itemsPerChunk; // Prevent many access in for loop below\n        const lenFullNodes = Math.floor(length / itemsPerChunk);\n        const remainder = length % itemsPerChunk;\n        for (let n = 0; n < lenFullNodes; n++) {\n            const leafNode = leafNodes[n];\n            // TODO: Implement add a fast bulk packed element reader in the elementType\n            // ```\n            // abstract getValuesFromPackedNode(leafNode: LeafNode, output: V[], indexOffset: number): void;\n            // ```\n            // if performance here is a problem\n            for (let i = 0; i < itemsPerChunk; i++) {\n                values[n * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);\n            }\n        }\n        if (remainder > 0) {\n            const leafNode = leafNodes[lenFullNodes];\n            for (let i = 0; i < remainder; i++) {\n                values[lenFullNodes * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);\n            }\n        }\n        return values;\n    }\n}\nexports.ArrayBasicTreeView = ArrayBasicTreeView;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayCompositeTreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayCompositeTreeView extends abstract_1.TreeView {\n    constructor(type, tree) {\n        super();\n        this.type = type;\n        this.tree = tree;\n    }\n    /**\n     * Number of elements in the array. Equal to the Uint32 value of the Tree's length node\n     */\n    get length() {\n        return this.type.tree_getLength(this.tree.rootNode);\n    }\n    /**\n     * Returns the View's Tree rootNode\n     */\n    get node() {\n        return this.tree.rootNode;\n    }\n    /**\n     * Get element at `index`. Returns a view of the Composite element type\n     */\n    get(index) {\n        // TODO: Optimize without bitstring\n        const gindex = persistent_merkle_tree_1.toGindexBitstring(this.type.depth, index);\n        const subtree = this.tree.getSubtree(gindex);\n        return this.type.elementType.getView(subtree);\n    }\n    /**\n     * Get element at `index`. Returns a view of the Composite element type.\n     * DOES NOT PROPAGATE CHANGES: use only for reads and to skip parent references.\n     */\n    getReadonly(index) {\n        // TODO: Optimize without bitstring\n        const gindex = persistent_merkle_tree_1.toGindexBitstring(this.type.depth, index);\n        // tree.getSubtree but without the hook\n        const subtree = new persistent_merkle_tree_1.Tree(this.tree.getNode(gindex));\n        return this.type.elementType.getView(subtree);\n    }\n    /**\n     * Set Composite element type `view` at `index`\n     */\n    set(index, view) {\n        const length = this.length;\n        if (index >= length) {\n            throw Error(`Error setting index over length ${index} > ${length}`);\n        }\n        const node = this.type.elementType.commitView(view);\n        this.tree.setNodeAtDepth(this.type.depth, index, node);\n    }\n    /**\n     * Returns an array of views of all elements in the array, from index zero to `this.length - 1`.\n     * The returned views don't have a parent hook to this View's Tree, so changes in the returned views won't be\n     * propagated upwards. To get linked element Views use `this.get()`\n     */\n    getAllReadonly() {\n        const length = this.length;\n        const chunksNode = this.type.tree_getChunksNode(this.node);\n        const nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, length);\n        const views = new Array(length);\n        for (let i = 0; i < length; i++) {\n            // TODO: Optimize\n            views[i] = this.type.elementType.getView(new persistent_merkle_tree_1.Tree(nodes[i]));\n        }\n        return views;\n    }\n    /**\n     * Returns an array of values of all elements in the array, from index zero to `this.length - 1`.\n     * The returned values are not Views so any changes won't be propagated upwards.\n     * To get linked element Views use `this.get()`\n     */\n    getAllReadonlyValues() {\n        const length = this.length;\n        const chunksNode = this.type.tree_getChunksNode(this.node);\n        const nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, length);\n        const values = new Array(length);\n        for (let i = 0; i < length; i++) {\n            values[i] = this.type.elementType.tree_toValue(nodes[i]);\n        }\n        return values;\n    }\n}\nexports.ArrayCompositeTreeView = ArrayCompositeTreeView;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitArrayTreeView = void 0;\nconst abstract_1 = require(\"./abstract\");\n/**\n * Thin wrapper around BitArray to upstream changes to `tree` on every `this.set()`\n */\nclass BitArrayTreeView extends abstract_1.TreeView {\n    constructor(type, tree) {\n        super();\n        this.type = type;\n        this.tree = tree;\n        this.bitArray = type.tree_toValue(tree.rootNode);\n    }\n    get node() {\n        return this.tree.rootNode;\n    }\n    // Wrapped API from BitArray\n    /** @see BitArray.uint8Array */\n    get uint8Array() {\n        return this.bitArray.uint8Array;\n    }\n    /** @see BitArray.bitLen */\n    get bitLen() {\n        return this.bitArray.bitLen;\n    }\n    /** @see BitArray.get */\n    get(bitIndex) {\n        return this.bitArray.get(bitIndex);\n    }\n    /** @see BitArray.set */\n    set(bitIndex, bit) {\n        this.bitArray.set(bitIndex, bit);\n        // Upstream changes\n        this.tree.rootNode = this.type.value_toTree(this.bitArray);\n    }\n    /** @see BitArray.mergeOrWith */\n    mergeOrWith(bitArray2) {\n        this.bitArray.mergeOrWith(bitArray2);\n    }\n    /** @see BitArray.intersectValues */\n    intersectValues(values) {\n        return this.bitArray.intersectValues(values);\n    }\n    /** @see BitArray.getTrueBitIndexes */\n    getTrueBitIndexes() {\n        return this.bitArray.getTrueBitIndexes();\n    }\n    /** @see BitArray.getSingleTrueBit */\n    getSingleTrueBit() {\n        return this.bitArray.getSingleTrueBit();\n    }\n    /** @see BitArray.toBoolArray */\n    toBoolArray() {\n        return this.bitArray.toBoolArray();\n    }\n}\nexports.BitArrayTreeView = BitArrayTreeView;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContainerTreeViewClass = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst basic_1 = require(\"../type/basic\");\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\n/**\n * Intented usage:\n *\n * - Get initial BeaconState from disk.\n * - Before applying next block, switch to mutable\n * - Get some field, create a view in mutable mode\n * - Do modifications of the state in the state transition function\n * - When done, commit and apply new root node once to og BeaconState\n * - However, keep all the caches and transfer them to the new BeaconState\n *\n * Questions:\n * - Can the child views created in mutable mode switch to not mutable? If so, it seems that it needs to recursively\n *   iterate the entire data structure and views\n *\n */\nclass ContainerTreeView extends abstract_1.TreeView {\n    constructor(type, tree) {\n        super();\n        this.type = type;\n        this.tree = tree;\n    }\n    get node() {\n        return this.tree.rootNode;\n    }\n}\nfunction getContainerTreeViewClass(type) {\n    class CustomContainerTreeView extends ContainerTreeView {\n    }\n    // Dynamically define prototype methods\n    for (let index = 0; index < type.fieldsEntries.length; index++) {\n        const { fieldName, fieldType } = type.fieldsEntries[index];\n        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n        // and use the cached views array to store the new node.\n        if (basic_1.isBasicType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // TODO: Review the memory cost of this closures\n                get: function () {\n                    const leafNode = persistent_merkle_tree_1.getNodeAtDepth(this.node, this.type.depth, index);\n                    return fieldType.tree_getFromNode(leafNode);\n                },\n                set: function (value) {\n                    const leafNodePrev = persistent_merkle_tree_1.getNodeAtDepth(this.node, this.type.depth, index);\n                    const leafNode = leafNodePrev.clone();\n                    fieldType.tree_setToNode(leafNode, value);\n                    this.tree.setNodeAtDepth(this.type.depth, index, leafNode);\n                },\n            });\n        }\n        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n        // set it to the parent tree in the field gindex.\n        else if (composite_1.isCompositeType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // Returns TreeView of fieldName\n                get: function () {\n                    const gindex = persistent_merkle_tree_1.toGindexBitstring(this.type.depth, index);\n                    return fieldType.getView(this.tree.getSubtree(gindex));\n                },\n                // Expects TreeView of fieldName\n                set: function (value) {\n                    const node = fieldType.commitView(value);\n                    this.tree.setNodeAtDepth(this.type.depth, index, node);\n                },\n            });\n        }\n        // Should never happen\n        else {\n            /* istanbul ignore next - unreachable code */\n            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n        }\n    }\n    // Change class name\n    Object.defineProperty(CustomContainerTreeView, \"name\", { value: type.typeName, writable: false });\n    return CustomContainerTreeView;\n}\nexports.getContainerTreeViewClass = getContainerTreeViewClass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContainerTreeViewClass = void 0;\nconst composite_1 = require(\"../type/composite\");\nconst branchNodeStruct_1 = require(\"../branchNodeStruct\");\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * Intented usage:\n *\n * - Get initial BeaconState from disk.\n * - Before applying next block, switch to mutable\n * - Get some field, create a view in mutable mode\n * - Do modifications of the state in the state transition function\n * - When done, commit and apply new root node once to og BeaconState\n * - However, keep all the caches and transfer them to the new BeaconState\n *\n * Questions:\n * - Can the child views created in mutable mode switch to not mutable? If so, it seems that it needs to recursively\n *   iterate the entire data structure and views\n *\n */\nclass ContainerTreeView extends abstract_1.TreeView {\n    constructor(type, tree) {\n        super();\n        this.type = type;\n        this.tree = tree;\n    }\n    get node() {\n        return this.tree.rootNode;\n    }\n}\nfunction getContainerTreeViewClass(type) {\n    class CustomContainerTreeView extends ContainerTreeView {\n    }\n    // Dynamically define prototype methods\n    for (let index = 0; index < type.fieldsEntries.length; index++) {\n        const { fieldName, fieldType } = type.fieldsEntries[index];\n        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n        // and use the cached views array to store the new node.\n        if (fieldType.isBasic) {\n            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // TODO: Review the memory cost of this closures\n                get: function () {\n                    return this.tree.rootNode.value[fieldName];\n                },\n                set: function (value) {\n                    const node = this.tree.rootNode;\n                    const newNodeValue = this.type.clone(node.value);\n                    // TODO: Should this check for valid field name? Benchmark the cost\n                    newNodeValue[fieldName] = value;\n                    this.tree.rootNode = new branchNodeStruct_1.BranchNodeStruct(node[\"valueToNode\"], newNodeValue);\n                },\n            });\n        }\n        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n        // set it to the parent tree in the field gindex.\n        else if (composite_1.isCompositeType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // Returns TreeView of fieldName\n                get: function () {\n                    const { value } = this.tree.rootNode;\n                    return fieldType.toView(value[fieldName]);\n                },\n                // Expects TreeView of fieldName\n                set: function (view) {\n                    const node = this.tree.rootNode;\n                    const newNodeValue = this.type.clone(node.value);\n                    // TODO: Should this check for valid field name? Benchmark the cost\n                    newNodeValue[fieldName] = fieldType.toValueFromView(view);\n                    this.tree.rootNode = new branchNodeStruct_1.BranchNodeStruct(node[\"valueToNode\"], newNodeValue);\n                },\n            });\n        }\n        // Should never happen\n        else {\n            /* istanbul ignore next - unreachable code */\n            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n        }\n    }\n    // Change class name\n    Object.defineProperty(CustomContainerTreeView, \"name\", { value: type.typeName, writable: false });\n    return CustomContainerTreeView;\n}\nexports.getContainerTreeViewClass = getContainerTreeViewClass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBasicTreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nclass ListBasicTreeView extends arrayBasic_1.ArrayBasicTreeView {\n    constructor(type, tree) {\n        super(type, tree);\n        this.type = type;\n        this.tree = tree;\n    }\n    /**\n     * Adds one value element at the end of the array and adds 1 to the current Tree length.\n     */\n    push(value) {\n        const length = this.length;\n        if (length >= this.type.limit) {\n            throw Error(\"Error pushing over limit\");\n        }\n        this.type.tree_setLength(this.tree, length + 1);\n        // If in new node..\n        if (length % this.type.itemsPerChunk === 0) {\n            // TODO: Optimize: This `inNewNode` could be ommitted but it would cause a full navigation in .set()\n            // Benchmark the cost of that navigation vs the extra math here\n            // TODO: Optimize: prevent double initialization\n            const leafNode = persistent_merkle_tree_1.LeafNode.fromZero();\n            this.type.elementType.tree_setToPackedNode(leafNode, length, value);\n            // Commit immediately\n            const chunkIndex = Math.floor(length / this.type.itemsPerChunk);\n            this.tree.setNodeAtDepth(this.type.depth, chunkIndex, leafNode);\n        }\n        else {\n            // Re-use .set() since no new node is added\n            this.set(length, value);\n        }\n    }\n}\nexports.ListBasicTreeView = ListBasicTreeView;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCompositeTreeView = void 0;\nconst arrayComposite_1 = require(\"./arrayComposite\");\nclass ListCompositeTreeView extends arrayComposite_1.ArrayCompositeTreeView {\n    constructor(type, tree) {\n        super(type, tree);\n        this.type = type;\n        this.tree = tree;\n    }\n    /**\n     * Adds one view element at the end of the array and adds 1 to the current Tree length.\n     */\n    push(view) {\n        const length = this.length;\n        if (length >= this.type.limit) {\n            throw Error(\"Error pushing over limit\");\n        }\n        this.type.tree_setLength(this.tree, length + 1);\n        // No need for pre-initialization like in ListBasic.push since ArrayCompositeTreeView.set() doesn't do a get node\n        this.set(length, view);\n    }\n}\nexports.ListCompositeTreeView = ListCompositeTreeView;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TreeViewDU = void 0;\nconst abstract_1 = require(\"../view/abstract\");\n/* eslint-disable @typescript-eslint/member-ordering  */\n/**\n * A Deferred Update Tree View (`ViewDU`) is a wrapper around a type and\n * a SSZ Node that contains:\n * - data merkleized\n * - some arbitrary caches to speed up data manipulation required by the type\n *\n * **ViewDU**\n * - Best for complex usage where performance is important\n * - Defers changes to when commit is called\n * - Does NOT have a reference to the parent ViewDU\n * - Has caches for fast get / set ops\n */\nclass TreeViewDU extends abstract_1.TreeView {\n    /**\n     * Merkleize view and compute its hashTreeRoot.\n     * Commits any pending changes before computing the root.\n     *\n     * See spec for definition of hashTreeRoot:\n     * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\n     */\n    hashTreeRoot() {\n        this.commit();\n        return super.hashTreeRoot();\n    }\n    /**\n     * Serialize view to binary data.\n     * Commits any pending changes before computing the root.\n     */\n    serialize() {\n        this.commit();\n        return super.serialize();\n    }\n    /**\n     * Return a new ViewDU instance referencing the same internal `Node`.\n     *\n     * By default it will transfer the cache of this ViewDU to the new cloned instance. Set `dontTransferCache` to true\n     * to NOT transfer the cache to the cloned instance.\n     */\n    clone(dontTransferCache) {\n        if (dontTransferCache) {\n            return this.type.getViewDU(this.node);\n        }\n        else {\n            const cache = this.cache;\n            this.clearCache();\n            return this.type.getViewDU(this.node, cache);\n        }\n    }\n}\nexports.TreeViewDU = TreeViewDU;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayBasicTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayBasicTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super();\n        this.type = type;\n        this._rootNode = _rootNode;\n        this.nodesChanged = new Set();\n        this.dirtyLength = false;\n        if (cache) {\n            this.nodes = cache.nodes;\n            this._length = cache.length;\n            this.nodesPopulated = cache.nodesPopulated;\n        }\n        else {\n            this.nodes = [];\n            this._length = this.type.tree_getLength(_rootNode);\n            this.nodesPopulated = false;\n        }\n    }\n    /**\n     * Number of elements in the array. Equal to un-commited length of the array\n     */\n    get length() {\n        return this._length;\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return {\n            nodes: this.nodes,\n            length: this._length,\n            nodesPopulated: this.nodesPopulated,\n        };\n    }\n    /**\n     * Get element at `index`. Returns the Basic element type value directly\n     */\n    get(index) {\n        // First walk through the tree to get the root node for that index\n        const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n        let node = this.nodes[chunkIndex];\n        if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, chunkIndex);\n            this.nodes[chunkIndex] = node;\n        }\n        return this.type.elementType.tree_getFromPackedNode(node, index);\n    }\n    /**\n     * Set Basic element type `value` at `index`\n     */\n    set(index, value) {\n        if (index >= this._length) {\n            throw Error(`Error setting index over length ${index} > ${this._length}`);\n        }\n        const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n        // Create new node if current leafNode is not dirty\n        let nodeChanged;\n        if (this.nodesChanged.has(chunkIndex)) {\n            // TODO: This assumes that node has already been populated\n            nodeChanged = this.nodes[chunkIndex];\n        }\n        else {\n            const nodePrev = (this.nodes[chunkIndex] ??\n                persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, chunkIndex));\n            nodeChanged = nodePrev.clone();\n            // Store the changed node in the nodes cache\n            this.nodes[chunkIndex] = nodeChanged;\n            this.nodesChanged.add(chunkIndex);\n        }\n        this.type.elementType.tree_setToPackedNode(nodeChanged, index, value);\n    }\n    /**\n     * Get all values of this array as Basic element type values, from index zero to `this.length - 1`\n     */\n    getAll() {\n        if (!this.nodesPopulated) {\n            const nodesPrev = this.nodes;\n            const chunksNode = this.type.tree_getChunksNode(this.node);\n            const chunkCount = Math.ceil(this._length / this.type.itemsPerChunk);\n            this.nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, chunkCount);\n            // Re-apply changed nodes\n            for (const index of this.nodesChanged) {\n                this.nodes[index] = nodesPrev[index];\n            }\n            this.nodesPopulated = true;\n        }\n        const values = new Array(this._length);\n        const itemsPerChunk = this.type.itemsPerChunk; // Prevent many access in for loop below\n        const lenFullNodes = Math.floor(this._length / itemsPerChunk);\n        const remainder = this._length % itemsPerChunk;\n        // TODO Optimize: caching the variables used in the loop above it\n        for (let n = 0; n < lenFullNodes; n++) {\n            const leafNode = this.nodes[n];\n            // TODO: Implement add a fast bulk packed element reader in the elementType\n            // ```\n            // abstract getValuesFromPackedNode(leafNode: LeafNode, output: V[], indexOffset: number): void;\n            // ```\n            // if performance here is a problem\n            for (let i = 0; i < itemsPerChunk; i++) {\n                values[n * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);\n            }\n        }\n        if (remainder > 0) {\n            const leafNode = this.nodes[lenFullNodes];\n            for (let i = 0; i < remainder; i++) {\n                values[lenFullNodes * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);\n            }\n        }\n        return values;\n    }\n    commit() {\n        if (this.nodesChanged.size === 0) {\n            return;\n        }\n        // Numerical sort ascending\n        const indexes = Array.from(this.nodesChanged.keys()).sort((a, b) => a - b);\n        const nodes = new Array(indexes.length);\n        for (let i = 0; i < indexes.length; i++) {\n            nodes[i] = this.nodes[indexes[i]];\n        }\n        const chunksNode = this.type.tree_getChunksNode(this._rootNode);\n        // TODO: Ensure fast setNodesAtDepth() method is correct\n        const newChunksNode = persistent_merkle_tree_1.setNodesAtDepth(chunksNode, this.type.chunkDepth, indexes, nodes);\n        this._rootNode = this.type.tree_setChunksNode(this._rootNode, newChunksNode, this.dirtyLength ? this._length : undefined);\n        this.nodesChanged.clear();\n        this.dirtyLength = false;\n    }\n    clearCache() {\n        this.nodes = [];\n        this.nodesPopulated = false;\n        // Must clear nodesChanged, otherwise a subsequent commit call will break, because it assumes a node is there\n        this.nodesChanged.clear();\n        // Reset cached length only if it has been mutated\n        if (this.dirtyLength) {\n            this._length = this.type.tree_getLength(this._rootNode);\n            this.dirtyLength = false;\n        }\n    }\n}\nexports.ArrayBasicTreeViewDU = ArrayBasicTreeViewDU;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayCompositeTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayCompositeTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super();\n        this.type = type;\n        this._rootNode = _rootNode;\n        this.viewsChanged = new Map();\n        // TODO: Consider these properties are not accessible in the cache object persisted in the parent's cache.\n        // nodes, caches, _length, and nodesPopulated are mutated. Consider having them in a _cache object such that\n        // mutations affect the cache already found in the parent object\n        this.dirtyLength = false;\n        if (cache) {\n            this.nodes = cache.nodes;\n            this.caches = cache.caches;\n            this._length = cache.length;\n            this.nodesPopulated = cache.nodesPopulated;\n        }\n        else {\n            this.nodes = [];\n            this.caches = [];\n            this._length = this.type.tree_getLength(_rootNode);\n            // If there are exactly 0 nodes, nodesPopulated = true because 0 / 0 are in the nodes array\n            this.nodesPopulated = this._length === 0;\n        }\n    }\n    /**\n     * Number of elements in the array. Equal to un-commited length of the array\n     */\n    get length() {\n        return this._length;\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return {\n            nodes: this.nodes,\n            caches: this.caches,\n            length: this._length,\n            nodesPopulated: this.nodesPopulated,\n        };\n    }\n    /**\n     * Get element at `index`. Returns a view of the Composite element type.\n     *\n     * NOTE: Assumes that any view created here will change and will call .commit() on it.\n     * .get() should be used only for cases when something may mutate. To get all items without\n     * triggering a .commit() in all them use .getAllReadOnly().\n     */\n    get(index) {\n        const viewChanged = this.viewsChanged.get(index);\n        if (viewChanged) {\n            return viewChanged;\n        }\n        let node = this.nodes[index];\n        if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            this.nodes[index] = node;\n        }\n        // Keep a reference to the new view to call .commit on it latter, only if mutable\n        const view = this.type.elementType.getViewDU(node, this.caches[index]);\n        if (this.type.elementType.isViewMutable) {\n            this.viewsChanged.set(index, view);\n        }\n        // No need to persist the child's view cache since a second get returns this view instance.\n        // The cache is only persisted on commit where the viewsChanged map is dropped.\n        return view;\n    }\n    /**\n     * Get element at `index`. Returns a view of the Composite element type.\n     * DOES NOT PROPAGATE CHANGES: use only for reads and to skip parent references.\n     */\n    getReadonly(index) {\n        const viewChanged = this.viewsChanged.get(index);\n        if (viewChanged) {\n            return viewChanged;\n        }\n        let node = this.nodes[index];\n        if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            this.nodes[index] = node;\n        }\n        return this.type.elementType.getViewDU(node, this.caches[index]);\n    }\n    // Did not implemented\n    // `getReadonlyValue(index: number): ValueOf<ElementType>`\n    // because it can break in unexpected ways if there are pending changes in this.viewsChanged.\n    // This function could first check if `this.viewsChanged` has a view for `index` and commit it,\n    // but that would be pretty slow, and the same result can be achieved with\n    // `this.getReadonly(index).toValue()`\n    /**\n     * Set Composite element type `view` at `index`\n     */\n    set(index, view) {\n        if (index >= this._length) {\n            throw Error(`Error setting index over length ${index} > ${this._length}`);\n        }\n        // When setting a view:\n        // - Not necessary to commit node\n        // - Not necessary to persist cache\n        // Just keeping a reference to the view in this.viewsChanged ensures consistency\n        this.viewsChanged.set(index, view);\n    }\n    /**\n     * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand\n     */\n    getAllReadonly() {\n        this.populateAllNodes();\n        const views = new Array(this._length);\n        for (let i = 0; i < this._length; i++) {\n            views[i] = this.type.elementType.getViewDU(this.nodes[i], this.caches[i]);\n        }\n        return views;\n    }\n    /**\n     * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand\n     */\n    getAllReadonlyValues() {\n        this.populateAllNodes();\n        const values = new Array(this._length);\n        for (let i = 0; i < this._length; i++) {\n            values[i] = this.type.elementType.tree_toValue(this.nodes[i]);\n        }\n        return values;\n    }\n    commit() {\n        if (this.viewsChanged.size === 0) {\n            return;\n        }\n        const nodesChanged = [];\n        for (const [index, view] of this.viewsChanged) {\n            const node = this.type.elementType.commitViewDU(view);\n            // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal\n            this.nodes[index] = node;\n            nodesChanged.push({ index, node });\n            // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'\n            const cache = this.type.elementType.cacheOfViewDU(view);\n            if (cache)\n                this.caches[index] = cache;\n        }\n        // TODO: Optimize to loop only once, Numerical sort ascending\n        const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);\n        const indexes = nodesChangedSorted.map((entry) => entry.index);\n        const nodes = nodesChangedSorted.map((entry) => entry.node);\n        const chunksNode = this.type.tree_getChunksNode(this._rootNode);\n        // TODO: Ensure fast setNodesAtDepth() method is correct\n        const newChunksNode = persistent_merkle_tree_1.setNodesAtDepth(chunksNode, this.type.chunkDepth, indexes, nodes);\n        this._rootNode = this.type.tree_setChunksNode(this._rootNode, newChunksNode, this.dirtyLength ? this._length : undefined);\n        this.viewsChanged.clear();\n        this.dirtyLength = false;\n    }\n    clearCache() {\n        this.nodes = [];\n        this.caches = [];\n        this.nodesPopulated = false;\n        // It's not necessary to clear this.viewsChanged since they have no effect on the cache.\n        // However preserving _SOME_ caches results in a very unpredictable experience.\n        this.viewsChanged.clear();\n        // Reset cached length only if it has been mutated\n        if (this.dirtyLength) {\n            this._length = this.type.tree_getLength(this._rootNode);\n            this.dirtyLength = false;\n        }\n    }\n    populateAllNodes() {\n        // If there's uncommited changes it may break.\n        // this.length can be increased but this._rootNode doesn't have that item\n        if (this.viewsChanged.size > 0) {\n            throw Error(\"Must commit changes before reading all nodes\");\n        }\n        if (!this.nodesPopulated) {\n            this.nodes = persistent_merkle_tree_1.getNodesAtDepth(this._rootNode, this.type.depth, 0, this.length);\n            this.nodesPopulated = true;\n        }\n    }\n}\nexports.ArrayCompositeTreeViewDU = ArrayCompositeTreeViewDU;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitArrayTreeViewDU = void 0;\nconst abstract_1 = require(\"./abstract\");\n/**\n * Thin wrapper around BitArray to upstream changes after `this.commit()`\n */\nclass BitArrayTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, _rootNode) {\n        super();\n        this.type = type;\n        this._rootNode = _rootNode;\n        /** Cached BitArray instance computed only on demand */\n        this._bitArray = null;\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return;\n    }\n    commit() {\n        if (this._bitArray !== null) {\n            this._rootNode = this.type.value_toTree(this._bitArray);\n        }\n    }\n    // Wrapped API from BitArray\n    /** @see BitArray.uint8Array */\n    get uint8Array() {\n        return this.bitArray.uint8Array;\n    }\n    /** @see BitArray.bitLen */\n    get bitLen() {\n        return this.bitArray.bitLen;\n    }\n    /** @see BitArray.get */\n    get(bitIndex) {\n        return this.bitArray.get(bitIndex);\n    }\n    /** @see BitArray.set */\n    set(bitIndex, bit) {\n        this.bitArray.set(bitIndex, bit);\n    }\n    /** @see BitArray.mergeOrWith */\n    mergeOrWith(bitArray2) {\n        this.bitArray.mergeOrWith(bitArray2);\n    }\n    /** @see BitArray.intersectValues */\n    intersectValues(values) {\n        return this.bitArray.intersectValues(values);\n    }\n    /** @see BitArray.getTrueBitIndexes */\n    getTrueBitIndexes() {\n        return this.bitArray.getTrueBitIndexes();\n    }\n    /** @see BitArray.getSingleTrueBit */\n    getSingleTrueBit() {\n        return this.bitArray.getSingleTrueBit();\n    }\n    /** @see BitArray.toBoolArray */\n    toBoolArray() {\n        return this.bitArray.toBoolArray();\n    }\n    /** Lazily computed bitArray instance */\n    get bitArray() {\n        if (this._bitArray === null) {\n            this._bitArray = this.type.tree_toValue(this._rootNode);\n        }\n        return this._bitArray;\n    }\n    clearCache() {\n        this._bitArray = null;\n    }\n}\nexports.BitArrayTreeViewDU = BitArrayTreeViewDU;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContainerTreeViewDUClass = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst basic_1 = require(\"../type/basic\");\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\nclass ContainerTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super();\n        this.type = type;\n        this._rootNode = _rootNode;\n        this.nodes = [];\n        this.nodesChanged = new Set();\n        this.viewsChanged = new Map();\n        if (cache) {\n            this.nodes = cache.nodes;\n            this.caches = cache.caches;\n            this.nodesPopulated = cache.nodesPopulated;\n        }\n        else {\n            this.nodes = [];\n            this.caches = [];\n            this.nodesPopulated = false;\n        }\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return {\n            nodes: this.nodes,\n            caches: this.caches,\n            nodesPopulated: this.nodesPopulated,\n        };\n    }\n    commit() {\n        if (this.nodesChanged.size === 0 && this.viewsChanged.size === 0) {\n            return;\n        }\n        const nodesChanged = [];\n        for (const [index, view] of this.viewsChanged) {\n            const fieldType = this.type.fieldsEntries[index].fieldType;\n            const node = fieldType.commitViewDU(view);\n            // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal\n            this.nodes[index] = node;\n            nodesChanged.push({ index, node });\n            // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'\n            const cache = fieldType.cacheOfViewDU(view);\n            if (cache)\n                this.caches[index] = cache;\n        }\n        for (const index of this.nodesChanged) {\n            nodesChanged.push({ index, node: this.nodes[index] });\n        }\n        // TODO: Optimize to loop only once, Numerical sort ascending\n        const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);\n        const indexes = nodesChangedSorted.map((entry) => entry.index);\n        const nodes = nodesChangedSorted.map((entry) => entry.node);\n        this._rootNode = persistent_merkle_tree_1.setNodesAtDepth(this._rootNode, this.type.depth, indexes, nodes);\n        this.nodesChanged.clear();\n        this.viewsChanged.clear();\n    }\n    clearCache() {\n        this.nodes = [];\n        this.caches = [];\n        this.nodesPopulated = false;\n        // Must clear nodesChanged, otherwise a subsequent commit call will break, because it assumes a node is there\n        this.nodesChanged.clear();\n        // It's not necessary to clear this.viewsChanged since they have no effect on the cache.\n        // However preserving _SOME_ caches results in a very unpredictable experience.\n        this.viewsChanged.clear();\n    }\n}\nfunction getContainerTreeViewDUClass(type) {\n    class CustomContainerTreeViewDU extends ContainerTreeViewDU {\n    }\n    // Dynamically define prototype methods\n    for (let index = 0; index < type.fieldsEntries.length; index++) {\n        const { fieldName, fieldType } = type.fieldsEntries[index];\n        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n        // and use the cached views array to store the new node.\n        if (basic_1.isBasicType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // TODO: Review the memory cost of this closures\n                get: function () {\n                    // First walk through the tree to get the root node for that index\n                    let node = this.nodes[index];\n                    if (node === undefined) {\n                        node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n                        this.nodes[index] = node;\n                    }\n                    return fieldType.tree_getFromNode(node);\n                },\n                set: function (value) {\n                    // Create new node if current leafNode is not dirty\n                    let nodeChanged;\n                    if (this.nodesChanged.has(index)) {\n                        // TODO: This assumes that node has already been populated\n                        nodeChanged = this.nodes[index];\n                    }\n                    else {\n                        const nodePrev = (this.nodes[index] ?? persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index));\n                        nodeChanged = nodePrev.clone();\n                        // Store the changed node in the nodes cache\n                        this.nodes[index] = nodeChanged;\n                        this.nodesChanged.add(index);\n                    }\n                    fieldType.tree_setToNode(nodeChanged, value);\n                },\n            });\n        }\n        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n        // set it to the parent tree in the field gindex.\n        else if (composite_1.isCompositeType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // Returns TreeViewDU of fieldName\n                get: function () {\n                    const viewChanged = this.viewsChanged.get(index);\n                    if (viewChanged) {\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                        return viewChanged;\n                    }\n                    let node = this.nodes[index];\n                    if (node === undefined) {\n                        node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n                        this.nodes[index] = node;\n                    }\n                    // Keep a reference to the new view to call .commit on it latter, only if mutable\n                    const view = fieldType.getViewDU(node, this.caches[index]);\n                    if (fieldType.isViewMutable) {\n                        this.viewsChanged.set(index, view);\n                    }\n                    // No need to persist the child's view cache since a second get returns this view instance.\n                    // The cache is only persisted on commit where the viewsChanged map is dropped.\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return view;\n                },\n                // Expects TreeViewDU of fieldName\n                set: function (view) {\n                    // When setting a view:\n                    // - Not necessary to commit node\n                    // - Not necessary to persist cache\n                    // Just keeping a reference to the view in this.viewsChanged ensures consistency\n                    this.viewsChanged.set(index, view);\n                },\n            });\n        }\n        // Should never happen\n        else {\n            /* istanbul ignore next - unreachable code */\n            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n        }\n    }\n    // Change class name\n    Object.defineProperty(CustomContainerTreeViewDU, \"name\", { value: type.typeName, writable: false });\n    return CustomContainerTreeViewDU;\n}\nexports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContainerTreeViewDUClass = void 0;\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\nclass ContainerTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, node) {\n        super();\n        this.type = type;\n        this.valueChanged = null;\n        this._rootNode = node;\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return;\n    }\n    commit() {\n        if (this.valueChanged === null) {\n            return;\n        }\n        const value = this.valueChanged;\n        this.valueChanged = null;\n        this._rootNode = this.type.value_toTree(value);\n    }\n    clearCache() {\n        this.valueChanged = null;\n    }\n}\nfunction getContainerTreeViewDUClass(type) {\n    class CustomContainerTreeViewDU extends ContainerTreeViewDU {\n    }\n    // Dynamically define prototype methods\n    for (let index = 0; index < type.fieldsEntries.length; index++) {\n        const { fieldName, fieldType } = type.fieldsEntries[index];\n        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n        // and use the cached views array to store the new node.\n        if (fieldType.isBasic) {\n            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // TODO: Review the memory cost of this closures\n                get: function () {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return (this.valueChanged || this._rootNode.value)[fieldName];\n                },\n                set: function (value) {\n                    if (this.valueChanged === null) {\n                        this.valueChanged = this.type.clone(this._rootNode.value);\n                    }\n                    this.valueChanged[fieldName] = value;\n                },\n            });\n        }\n        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n        // set it to the parent tree in the field gindex.\n        else if (composite_1.isCompositeType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // Returns TreeViewDU of fieldName\n                get: function () {\n                    const value = this.valueChanged || this._rootNode.value;\n                    return fieldType.toViewDU(value[fieldName]);\n                },\n                // Expects TreeViewDU of fieldName\n                set: function (view) {\n                    if (this.valueChanged === null) {\n                        this.valueChanged = this.type.clone(this._rootNode.value);\n                    }\n                    const value = fieldType.toValueFromViewDU(view);\n                    this.valueChanged[fieldName] = value;\n                },\n            });\n        }\n        // Should never happen\n        else {\n            /* istanbul ignore next - unreachable code */\n            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n        }\n    }\n    // Change class name\n    Object.defineProperty(CustomContainerTreeViewDU, \"name\", { value: type.typeName, writable: false });\n    return CustomContainerTreeViewDU;\n}\nexports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBasicTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nclass ListBasicTreeViewDU extends arrayBasic_1.ArrayBasicTreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super(type, _rootNode, cache);\n        this.type = type;\n        this._rootNode = _rootNode;\n    }\n    /**\n     * Adds one value element at the end of the array and adds 1 to the un-commited ViewDU length\n     */\n    push(value) {\n        if (this._length >= this.type.limit) {\n            throw Error(\"Error pushing over limit\");\n        }\n        // Mutate length before .set()\n        this.dirtyLength = true;\n        const index = this._length++;\n        // If in new node..\n        if (index % this.type.itemsPerChunk === 0) {\n            // Set a zero node to the nodes array to avoid a navigation downwards in .set()\n            const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n            this.nodes[chunkIndex] = persistent_merkle_tree_1.zeroNode(0);\n        }\n        this.set(index, value);\n    }\n}\nexports.ListBasicTreeViewDU = ListBasicTreeViewDU;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCompositeTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nclass ListCompositeTreeViewDU extends arrayComposite_1.ArrayCompositeTreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super(type, _rootNode, cache);\n        this.type = type;\n        this._rootNode = _rootNode;\n    }\n    /**\n     * Adds one value element at the end of the array and adds 1 to the un-commited ViewDU length\n     */\n    push(view) {\n        if (this._length >= this.type.limit) {\n            throw Error(\"Error pushing over limit\");\n        }\n        this.dirtyLength = true;\n        const index = this._length++;\n        // No need for pre-initialization like in ListBasic.push since ArrayCompositeTreeViewDU.set() doesn't do a get node\n        this.set(index, view);\n    }\n    /**\n     * Returns a new ListCompositeTreeViewDU instance with the values from 0 to `index`.\n     * The new list is equivalent to (pseudo-code):\n     *\n     * ```ts\n     * const nodes = getChunkNodes()\n     * return listFromChunkNodes(nodes.slice(0, index + 1))\n     * ```\n     *\n     * To achieve it, rebinds the underlying tree zero-ing all nodes right of `index`.\n     *\n     * Note: Using index = -1, returns an empty list of length 0.\n     */\n    sliceTo(index) {\n        // Commit before getting rootNode to ensure all pending data is in the rootNode\n        this.commit();\n        const rootNode = this._rootNode;\n        const length = this.type.tree_getLength(rootNode);\n        // All nodes beyond length are already zero\n        // Array of length 2: [X,X,0,0], for index >= 1 no action needed\n        if (index >= length - 1) {\n            return this;\n        }\n        // Since this is a List, do the treeZeroAfterIndex operation on the chunks tree\n        const chunksNode = this.type.tree_getChunksNode(rootNode);\n        const newChunksNode = persistent_merkle_tree_1.treeZeroAfterIndex(chunksNode, this.type.chunkDepth, index);\n        // Must set new length and commit to tree to restore the same tree at that index\n        const newLength = index + 1;\n        const newRootNode = this.type.tree_setChunksNode(rootNode, newChunksNode, newLength);\n        return this.type.getViewDU(newRootNode);\n    }\n}\nexports.ListCompositeTreeViewDU = ListCompositeTreeViewDU;\n"],"names":[],"sourceRoot":"","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45]}