{"version":3,"file":"bundled/chunk.4609.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAgC;AAEiB;AAE1C,eAAeE,gBAAgBC,EAAU;IAC5C,MAAMC,SAAS,MAAMH,kCAAiBA,CAACI,GAAG,CAAC,kBAAkBF;IAC7D,OAAOC,SAASE,wBAAwBF,UAAUG;AACtD;AAEO,eAAeC,gBAAgBJ,MAA0B;IAC5D,OAAOH,kCAAiBA,CAACQ,GAAG,CAACC,yBAAyBN;AAC1D;AAEO,eAAeO,mBAAmBC,SAAuC;IAC5E,IAAI,CAACA,UAAUT,EAAE,EAAE;QACf;IACJ;IACA,MAAMC,SAAS,MAAMH,kCAAiBA,CAACI,GAAG,CAAC,kBAAkBO,UAAUT,EAAE;IACzE,IAAIC,QAAQ;QACR,MAAMH,kCAAiBA,CAACY,MAAM,CAAC,kBAAkBD,UAAUT,EAAE;IACjE;IACA,MAAMF,kCAAiBA,CAACQ,GAAG,CAACG;AAChC;AAEA,SAASN,wBAAwBQ,CAA+B;IAC5D,MAAMV,SAASU;IACf,OAAOd,uBAAIA,CAACI,QAAQ;QAAC;KAAO;AAChC;AAEA,SAASM,yBAAyBI,CAAqB;IACnD,MAAMV,SAASU;IACfV,OAAOW,IAAI,GAAG;IACd,OAAOX;AACX;;;AC3BiD;AACR;AACG;AAE8C;AAEnF,eAAee,aAAaf,MAAuB,EAAEgB,OAAgB;IACxE,MAAMH,6BAAqB,CAACb;AAChC;AAEO,eAAeiB,gCAAgCC,mBAAoD;IACtG,wCAAwC;IACxC,MAAMC,yBAA4C,MAAMN,iCAAyB,CAC7EK,oBAAoBG,GAAG,CAAC,CAACX,IAAMA,EAAEY,IAAI;IAEzC,OAAOJ,oBAAoBG,GAAG,CAAC,CAACX;QAC5B,MAAMV,SAASmB,uBAAuBI,IAAI,CAAC,CAACC,IAAMA,EAAEzB,EAAE,KAAKW,EAAEY,IAAI;QACjE,IAAI,CAACtB,QAAQ,OAAOU;QACpB,OAAO;YACH,GAAGA,CAAC;YACJe,UAAUzB,OAAOyB,QAAQ;QAC7B;IACJ;AAEJ;AADI,aAAa;AAGV,eAAeC,uBAAuBC,SAAoC;IAC7E,IAAIC,wBAAmDhB,4BAAUA;IAEjE,KAAK,MAAMiB,WAAWF,UAAW;QAC7B,MAAM3B,SAAS,MAAMc,eAAqB,CAACe,QAAQP,IAAI;QAEvDM,wBAAwBA,sBAAsBE,MAAM,CAAC;YAAE,GAAGD,OAAO;YAAEJ,UAAUzB,QAAQyB,YAAY;QAAG;IACxG;IACA,OAAOG;AACX","sources":["webpack://mask-network/./packages/plugins/RedPacket/src/Worker/databaseForNft.ts","webpack://mask-network/./packages/plugins/RedPacket/src/Worker/services.ts"],"sourcesContent":["import { omit } from 'lodash-es'\nimport type { RedPacketNftRecordInDatabase, RedPacketNftRecord } from '@masknet/web3-providers/types'\nimport { RedPacketDatabase } from './database.js'\n\nexport async function getRedPacketNft(id: string) {\n    const record = await RedPacketDatabase.get('red-packet-nft', id)\n    return record ? RedPacketNftRecordOutDB(record) : undefined\n}\n\nexport async function addRedPacketNft(record: RedPacketNftRecord) {\n    return RedPacketDatabase.add(RedPacketNftRecordIntoDB(record))\n}\n\nexport async function updateRedPacketNft(newRecord: RedPacketNftRecordInDatabase) {\n    if (!newRecord.id) {\n        return\n    }\n    const record = await RedPacketDatabase.get('red-packet-nft', newRecord.id)\n    if (record) {\n        await RedPacketDatabase.remove('red-packet-nft', newRecord.id)\n    }\n    await RedPacketDatabase.add(newRecord)\n}\n\nfunction RedPacketNftRecordOutDB(x: RedPacketNftRecordInDatabase): RedPacketNftRecord {\n    const record = x\n    return omit(record, ['type'])\n}\n\nfunction RedPacketNftRecordIntoDB(x: RedPacketNftRecord) {\n    const record = x as RedPacketNftRecordInDatabase\n    record.type = 'red-packet-nft'\n    return record\n}\n","import type { ChainId } from '@masknet/web3-shared-evm'\nimport {\n    type RedPacketRecord,\n    type RedPacketJSONPayloadFromChain,\n    type NftRedPacketJSONPayload,\n} from '@masknet/web3-providers/types'\nimport { EMPTY_LIST } from '@masknet/shared-base'\nimport * as database from './database.js'\nimport * as nftDb from './databaseForNft.js'\n\nexport { addRedPacketNft, getRedPacketNft, updateRedPacketNft } from './databaseForNft.js'\n\nexport async function addRedPacket(record: RedPacketRecord, chainId: ChainId) {\n    await database.addRedPacket(record)\n}\n\nexport async function getRedPacketHistoryFromDatabase(redpacketsFromChain: RedPacketJSONPayloadFromChain[]) {\n    // #region Inject password from database\n    const redpacketsFromDatabase: RedPacketRecord[] = await database.getAllRedpackets(\n        redpacketsFromChain.map((x) => x.txid),\n    )\n    return redpacketsFromChain.map((x) => {\n        const record = redpacketsFromDatabase.find((y) => y.id === x.txid)\n        if (!record) return x\n        return {\n            ...x,\n            password: record.password,\n        }\n    })\n    // #endregion\n}\n\nexport async function getNftRedPacketHistory(histories: NftRedPacketJSONPayload[]) {\n    let historiesWithPassword: NftRedPacketJSONPayload[] = EMPTY_LIST\n\n    for (const history of histories) {\n        const record = await nftDb.getRedPacketNft(history.txid)\n\n        historiesWithPassword = historiesWithPassword.concat({ ...history, password: record?.password || '' })\n    }\n    return historiesWithPassword\n}\n"],"names":["omit","RedPacketDatabase","getRedPacketNft","id","record","get","RedPacketNftRecordOutDB","undefined","addRedPacketNft","add","RedPacketNftRecordIntoDB","updateRedPacketNft","newRecord","remove","x","type","EMPTY_LIST","database","nftDb","addRedPacket","chainId","getRedPacketHistoryFromDatabase","redpacketsFromChain","redpacketsFromDatabase","getAllRedpackets","map","txid","find","y","password","getNftRedPacketHistory","histories","historiesWithPassword","history","concat"],"sourceRoot":"","x_google_ignoreList":[]}