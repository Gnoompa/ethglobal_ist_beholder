{"version":3,"file":"bundled/npm-ns.metaplex-foundation.mpl-token-vault.js","mappings":";;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB,GAAG,yBAAyB,GAAG,gBAAgB;AACnE,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC,gBAAgB,KAAK;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD,yBAAyB,KAAK;AACnF;AACA;AACA,oBAAoB;AACpB;AACA;;;;;;;;AC9Ba;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B,GAAG,gCAAgC;AAC/D,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D,uBAAuB,mBAAO,CAAC,KAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;ACnCf;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB,GAAG,4BAA4B;AACvD,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,iBAAiB,mBAAO,CAAC,IAAQ;AACjC,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;ACxDX;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa,GAAG,iBAAiB,GAAG,kBAAkB,GAAG,yBAAyB,GAAG,kBAAkB;AACvG,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C,+BAA+B,mBAAO,CAAC,KAAM;AAC7C,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D,2BAA2B,mBAAO,CAAC,KAAoB;AACvD,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,iBAAiB,mBAAO,CAAC,IAAQ;AACjC;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC,kBAAkB,KAAK;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;;;;;;;;AChHa;AACb;AACA;AACA,mCAAmC,oCAAoC,gBAAgB;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa,mBAAO,CAAC,KAA6B;AAClD,aAAa,mBAAO,CAAC,IAAkB;AACvC,aAAa,mBAAO,CAAC,KAAiC;AACtD,aAAa,mBAAO,CAAC,KAAgB;AACrC,aAAa,mBAAO,CAAC,KAAgB;AACrC,aAAa,mBAAO,CAAC,KAAS;;;;;;;;ACjBjB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,gBAAgB,mBAAO,CAAC,IAAmB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D;AACA;AACA;AACA,gBAAgB,gGAAgG;AAChH;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qBAAqB;;;;;;;;ACvDR;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,gBAAgB,mBAAO,CAAC,IAAmB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D;AACA;AACA;AACA,gBAAgB,qFAAqF;AACrG;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;;;;;;;;AC5Dd;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C,gBAAgB,mBAAO,CAAC,IAAmB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,uBAAuB,mBAAO,CAAC,KAAiB;AAChD;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,gBAAgB,uGAAuG;AACvH;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,+BAA+B;;;;;;;;AC5ElB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB,GAAG,wBAAwB;AAC/C,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,uBAAuB,mBAAO,CAAC,KAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,gBAAgB,sMAAsM;AACtN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB;;;;;;;;AC3FP;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,GAAG,qBAAqB;AACzC,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,uBAAuB,mBAAO,CAAC,KAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8HAA8H;AAC9I,+CAA+C,2BAA2B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB;;;;;;;;AC3EJ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D,gBAAgB,mBAAO,CAAC,IAAmB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD;AACA;AACA;AACA,gBAAgB,gGAAgG;AAChH;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B;;;;;;;;ACvDf;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB,GAAG,wBAAwB;AAC/C,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,uBAAuB,mBAAO,CAAC,KAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,gBAAgB,oHAAoH;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB;;;;;;;;AC5EP;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,6BAA6B;AACzD,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,uBAAuB,mBAAO,CAAC,KAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAwC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB;;;;;;;;AC7CZ;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC,GAAG,sCAAsC;AAC3E,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,+BAA+B,mBAAO,CAAC,KAAkC;AACzE,uBAAuB,mBAAO,CAAC,KAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iDAAiD;AACjE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kCAAkC;;;;;;;;AC5CrB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC;AAClC,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,gBAAgB,mBAAO,CAAC,IAAmB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD;AACA;AACA;AACA,gBAAgB,2FAA2F;AAC3G;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kCAAkC;;;;;;;;AC5DrB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yCAAyC;AACzC,mBAAmB,mBAAO,CAAC,KAA+B;AAC1D,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,kBAAkB,mBAAO,CAAC,KAAiB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD,gBAAgB,mBAAO,CAAC,IAAmB;AAC3C,uBAAuB,mBAAO,CAAC,KAAiB;AAChD;AACA;AACA;AACA,gBAAgB,wGAAwG;AACxH;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yCAAyC;;;;;;;;ACtE5B;AACb;AACA;AACA,mCAAmC,oCAAoC,gBAAgB;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa,mBAAO,CAAC,KAAiB;AACtC,aAAa,mBAAO,CAAC,KAAuB;AAC5C,aAAa,mBAAO,CAAC,KAA2B;AAChD,aAAa,mBAAO,CAAC,KAAgB;AACrC,aAAa,mBAAO,CAAC,KAAa;AAClC,aAAa,mBAAO,CAAC,KAAwB;AAC7C,aAAa,mBAAO,CAAC,KAAgB;AACrC,aAAa,mBAAO,CAAC,KAAqB;AAC1C,aAAa,mBAAO,CAAC,IAA8B;AACnD,aAAa,mBAAO,CAAC,KAA8B;AACnD,aAAa,mBAAO,CAAC,KAAqC;;;;;;;;ACtB7C;AACb,8CAA6C,EAAE,aAAa,EAAC","sources":["webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/VaultProgram.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/accounts/ExternalPriceAccount.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/accounts/SafetyDepositBox.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/accounts/Vault.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/mpl-token-vault.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/transactions/ActivateVault.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/transactions/AddSharesToTreasury.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/transactions/AddTokenToInactiveVault.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/transactions/CombineVault.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/transactions/InitVault.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/transactions/MintFractionalShares.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/transactions/RedeemShares.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/transactions/SetVaultAuthority.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/transactions/UpdateExternalPriceAccount.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/transactions/WithdrawSharesFromTreasury.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/transactions/WithdrawTokenFromSafetyDepositBox.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/transactions/index.js","webpack://mask-network/./node_modules/.pnpm/@metaplex-foundation+mpl-token-vault@0.0.2/node_modules/@metaplex-foundation/mpl-token-vault/dist/src/types.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VaultProgram = exports.VaultInstructions = exports.VaultKey = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nvar VaultKey;\n(function (VaultKey) {\n    VaultKey[VaultKey[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    VaultKey[VaultKey[\"VaultV1\"] = 3] = \"VaultV1\";\n    VaultKey[VaultKey[\"SafetyDepositBoxV1\"] = 1] = \"SafetyDepositBoxV1\";\n    VaultKey[VaultKey[\"ExternalPriceAccountV1\"] = 2] = \"ExternalPriceAccountV1\";\n})(VaultKey = exports.VaultKey || (exports.VaultKey = {}));\nvar VaultInstructions;\n(function (VaultInstructions) {\n    VaultInstructions[VaultInstructions[\"InitVault\"] = 0] = \"InitVault\";\n    VaultInstructions[VaultInstructions[\"AddTokenToInactiveVault\"] = 1] = \"AddTokenToInactiveVault\";\n    VaultInstructions[VaultInstructions[\"ActivateVault\"] = 2] = \"ActivateVault\";\n    VaultInstructions[VaultInstructions[\"CombineVault\"] = 3] = \"CombineVault\";\n    VaultInstructions[VaultInstructions[\"RedeemShares\"] = 4] = \"RedeemShares\";\n    VaultInstructions[VaultInstructions[\"WithdrawTokenFromSafetyDepositBox\"] = 5] = \"WithdrawTokenFromSafetyDepositBox\";\n    VaultInstructions[VaultInstructions[\"MintFractionalShares\"] = 6] = \"MintFractionalShares\";\n    VaultInstructions[VaultInstructions[\"WithdrawSharesFromTreasury\"] = 7] = \"WithdrawSharesFromTreasury\";\n    VaultInstructions[VaultInstructions[\"AddSharesToTreasury\"] = 8] = \"AddSharesToTreasury\";\n    VaultInstructions[VaultInstructions[\"UpdateExternalPriceAccount\"] = 9] = \"UpdateExternalPriceAccount\";\n    VaultInstructions[VaultInstructions[\"SetVaultAuthority\"] = 10] = \"SetVaultAuthority\";\n})(VaultInstructions = exports.VaultInstructions || (exports.VaultInstructions = {}));\nclass VaultProgram extends mpl_core_1.Program {\n}\nexports.VaultProgram = VaultProgram;\nVaultProgram.PREFIX = 'vault';\nVaultProgram.PUBKEY = new web3_js_1.PublicKey(mpl_core_1.config.programs.vault);\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExternalPriceAccount = exports.ExternalPriceAccountData = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nclass ExternalPriceAccountData extends mpl_core_1.Borsh.Data {\n    constructor(args) {\n        super(args);\n        this.key = VaultProgram_1.VaultKey.ExternalPriceAccountV1;\n    }\n}\nexports.ExternalPriceAccountData = ExternalPriceAccountData;\n_a = ExternalPriceAccountData;\nExternalPriceAccountData.SCHEMA = _a.struct([\n    ['key', 'u8'],\n    ['pricePerShare', 'u64'],\n    ['priceMint', 'pubkeyAsString'],\n    ['allowedToCombine', 'u8'],\n]);\nclass ExternalPriceAccount extends mpl_core_1.Account {\n    constructor(key, info) {\n        super(key, info);\n        if (!this.assertOwner(VaultProgram_1.VaultProgram.PUBKEY)) {\n            throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n        }\n        if (!ExternalPriceAccount.isCompatible(this.info.data)) {\n            throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n        }\n        this.data = ExternalPriceAccountData.deserialize(this.info.data);\n    }\n    static isCompatible(data) {\n        return data[0] === VaultProgram_1.VaultKey.ExternalPriceAccountV1;\n    }\n}\nexports.ExternalPriceAccount = ExternalPriceAccount;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SafetyDepositBox = exports.SafetyDepositBoxData = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst buffer_1 = require(\"buffer\");\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nclass SafetyDepositBoxData extends mpl_core_1.Borsh.Data {\n    constructor(args) {\n        super(args);\n        this.key = VaultProgram_1.VaultKey.SafetyDepositBoxV1;\n    }\n}\nexports.SafetyDepositBoxData = SafetyDepositBoxData;\n_a = SafetyDepositBoxData;\nSafetyDepositBoxData.SCHEMA = _a.struct([\n    ['key', 'u8'],\n    ['vault', 'pubkeyAsString'],\n    ['tokenMint', 'pubkeyAsString'],\n    ['store', 'pubkeyAsString'],\n    ['order', 'u8'],\n]);\nclass SafetyDepositBox extends mpl_core_1.Account {\n    constructor(key, info) {\n        super(key, info);\n        if (!this.assertOwner(VaultProgram_1.VaultProgram.PUBKEY)) {\n            throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n        }\n        if (!SafetyDepositBox.isCompatible(this.info.data)) {\n            throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n        }\n        this.data = SafetyDepositBoxData.deserialize(this.info.data);\n    }\n    static getPDA(vault, mint) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return VaultProgram_1.VaultProgram.findProgramAddress([\n                buffer_1.Buffer.from(VaultProgram_1.VaultProgram.PREFIX),\n                new web3_js_1.PublicKey(vault).toBuffer(),\n                new web3_js_1.PublicKey(mint).toBuffer(),\n            ]);\n        });\n    }\n    static isCompatible(data) {\n        return data[0] === VaultProgram_1.VaultKey.SafetyDepositBoxV1;\n    }\n}\nexports.SafetyDepositBox = SafetyDepositBox;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vault = exports.VaultData = exports.VaultState = exports.NumberOfShareArgs = exports.AmountArgs = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst bs58_1 = __importDefault(require(\"bs58\"));\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst SafetyDepositBox_1 = require(\"./SafetyDepositBox\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst buffer_1 = require(\"buffer\");\nclass AmountArgs extends mpl_core_1.Borsh.Data {\n}\nexports.AmountArgs = AmountArgs;\n_a = AmountArgs;\nAmountArgs.SCHEMA = _a.struct([\n    ['instruction', 'u8'],\n    ['amount', 'u64'],\n]);\nclass NumberOfShareArgs extends mpl_core_1.Borsh.Data {\n}\nexports.NumberOfShareArgs = NumberOfShareArgs;\n_b = NumberOfShareArgs;\nNumberOfShareArgs.SCHEMA = _b.struct([\n    ['instruction', 'u8'],\n    ['numberOfShares', 'u64'],\n]);\nvar VaultState;\n(function (VaultState) {\n    VaultState[VaultState[\"Inactive\"] = 0] = \"Inactive\";\n    VaultState[VaultState[\"Active\"] = 1] = \"Active\";\n    VaultState[VaultState[\"Combined\"] = 2] = \"Combined\";\n    VaultState[VaultState[\"Deactivated\"] = 3] = \"Deactivated\";\n})(VaultState = exports.VaultState || (exports.VaultState = {}));\nclass VaultData extends mpl_core_1.Borsh.Data {\n    constructor(args) {\n        super(args);\n        this.key = VaultProgram_1.VaultKey.VaultV1;\n    }\n}\nexports.VaultData = VaultData;\n_c = VaultData;\nVaultData.SCHEMA = _c.struct([\n    ['key', 'u8'],\n    ['tokenProgram', 'pubkeyAsString'],\n    ['fractionMint', 'pubkeyAsString'],\n    ['authority', 'pubkeyAsString'],\n    ['fractionTreasury', 'pubkeyAsString'],\n    ['redeemTreasury', 'pubkeyAsString'],\n    ['allowFurtherShareCreation', 'u8'],\n    ['pricingLookupAddress', 'pubkeyAsString'],\n    ['tokenTypeCount', 'u8'],\n    ['state', 'u8'],\n    ['lockedPricePerShare', 'u64'],\n]);\nclass Vault extends mpl_core_1.Account {\n    constructor(pubkey, info) {\n        super(pubkey, info);\n        if (!this.assertOwner(VaultProgram_1.VaultProgram.PUBKEY)) {\n            throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n        }\n        if (!Vault.isCompatible(this.info.data)) {\n            throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n        }\n        this.data = VaultData.deserialize(this.info.data);\n    }\n    static getPDA(pubkey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return VaultProgram_1.VaultProgram.findProgramAddress([\n                buffer_1.Buffer.from(VaultProgram_1.VaultProgram.PREFIX),\n                VaultProgram_1.VaultProgram.PUBKEY.toBuffer(),\n                new web3_js_1.PublicKey(pubkey).toBuffer(),\n            ]);\n        });\n    }\n    static isCompatible(data) {\n        return data[0] === VaultProgram_1.VaultKey.VaultV1;\n    }\n    getSafetyDepositBoxes(connection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield VaultProgram_1.VaultProgram.getProgramAccounts(connection, {\n                filters: [\n                    {\n                        memcmp: {\n                            offset: 0,\n                            bytes: bs58_1.default.encode(buffer_1.Buffer.from([VaultProgram_1.VaultKey.SafetyDepositBoxV1])),\n                        },\n                    },\n                    {\n                        memcmp: {\n                            offset: 1,\n                            bytes: this.pubkey.toBase58(),\n                        },\n                    },\n                ],\n            })).map((account) => SafetyDepositBox_1.SafetyDepositBox.from(account));\n        });\n    }\n}\nexports.Vault = Vault;\nVault.MAX_VAULT_SIZE = 1 + 32 + 32 + 32 + 32 + 1 + 32 + 1 + 32 + 1 + 1 + 8;\nVault.MAX_EXTERNAL_ACCOUNT_SIZE = 1 + 8 + 32 + 1;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./accounts/SafetyDepositBox\"), exports);\n__exportStar(require(\"./accounts/Vault\"), exports);\n__exportStar(require(\"./accounts/ExternalPriceAccount\"), exports);\n__exportStar(require(\"./VaultProgram\"), exports);\n__exportStar(require(\"./transactions\"), exports);\n__exportStar(require(\"./types\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActivateVault = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst Vault_1 = require(\"../accounts/Vault\");\nconst VaultProgram_2 = require(\"../VaultProgram\");\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nclass ActivateVault extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { vault, vaultAuthority, fractionMint, fractionTreasury, fractionMintAuthority, numberOfShares, } = params;\n        const data = Vault_1.NumberOfShareArgs.serialize({\n            instruction: VaultProgram_1.VaultInstructions.ActivateVault,\n            numberOfShares,\n        });\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: vault,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: fractionMint,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: fractionTreasury,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: fractionMintAuthority,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: vaultAuthority,\n                    isSigner: true,\n                    isWritable: false,\n                },\n                {\n                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n                    isSigner: false,\n                    isWritable: false,\n                },\n            ],\n            programId: VaultProgram_2.VaultProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.ActivateVault = ActivateVault;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddSharesToTreasury = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst Vault_1 = require(\"../accounts/Vault\");\nconst VaultProgram_2 = require(\"../VaultProgram\");\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nclass AddSharesToTreasury extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { vault, vaultAuthority, source, transferAuthority, fractionTreasury, numberOfShares } = params;\n        const data = Vault_1.NumberOfShareArgs.serialize({\n            instruction: VaultProgram_1.VaultInstructions.AddSharesToTreasury,\n            numberOfShares,\n        });\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: source,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: fractionTreasury,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: vault,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: transferAuthority,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: vaultAuthority,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false,\n                },\n            ],\n            programId: VaultProgram_2.VaultProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.AddSharesToTreasury = AddSharesToTreasury;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddTokenToInactiveVault = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst Vault_1 = require(\"../accounts/Vault\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst VaultProgram_2 = require(\"../VaultProgram\");\nclass AddTokenToInactiveVault extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { feePayer } = options;\n        const { vault, vaultAuthority, tokenAccount, tokenStoreAccount, transferAuthority, safetyDepositBox, amount, } = params;\n        const data = Vault_1.AmountArgs.serialize({\n            instruction: VaultProgram_2.VaultInstructions.AddTokenToInactiveVault,\n            amount,\n        });\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: safetyDepositBox,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: tokenAccount,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: tokenStoreAccount,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: vault,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: vaultAuthority,\n                    isSigner: true,\n                    isWritable: false,\n                },\n                {\n                    pubkey: feePayer,\n                    isSigner: true,\n                    isWritable: false,\n                },\n                {\n                    pubkey: transferAuthority,\n                    isSigner: true,\n                    isWritable: false,\n                },\n                {\n                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: web3_js_1.SystemProgram.programId,\n                    isSigner: false,\n                    isWritable: false,\n                },\n            ],\n            programId: VaultProgram_1.VaultProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.AddTokenToInactiveVault = AddTokenToInactiveVault;\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CombineVault = exports.CombineVaultArgs = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst VaultProgram_2 = require(\"../VaultProgram\");\nclass CombineVaultArgs extends mpl_core_1.Borsh.Data {\n    constructor() {\n        super(...arguments);\n        this.instruction = VaultProgram_1.VaultInstructions.CombineVault;\n    }\n}\nexports.CombineVaultArgs = CombineVaultArgs;\n_a = CombineVaultArgs;\nCombineVaultArgs.SCHEMA = _a.struct([['instruction', 'u8']]);\nclass CombineVault extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { vault, vaultAuthority, fractionMint, fractionTreasury, outstandingShareTokenAccount, payingTokenAccount, redeemTreasury, newVaultAuthority, transferAuthority, externalPriceAccount, burnAuthority, } = params;\n        const data = CombineVaultArgs.serialize();\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: vault,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: outstandingShareTokenAccount,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: payingTokenAccount,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: fractionMint,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: fractionTreasury,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: redeemTreasury,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: newVaultAuthority || vaultAuthority,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: vaultAuthority,\n                    isSigner: true,\n                    isWritable: false,\n                },\n                {\n                    pubkey: transferAuthority,\n                    isSigner: true,\n                    isWritable: false,\n                },\n                {\n                    pubkey: burnAuthority,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: externalPriceAccount,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n                    isSigner: false,\n                    isWritable: false,\n                },\n            ],\n            programId: VaultProgram_2.VaultProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.CombineVault = CombineVault;\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InitVault = exports.InitVaultArgs = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst VaultProgram_2 = require(\"../VaultProgram\");\nclass InitVaultArgs extends mpl_core_1.Borsh.Data {\n    constructor() {\n        super(...arguments);\n        this.instruction = VaultProgram_1.VaultInstructions.InitVault;\n        this.allowFurtherShareCreation = false;\n    }\n}\nexports.InitVaultArgs = InitVaultArgs;\n_a = InitVaultArgs;\nInitVaultArgs.SCHEMA = _a.struct([\n    ['instruction', 'u8'],\n    ['allowFurtherShareCreation', 'u8'],\n]);\nclass InitVault extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { vault, vaultAuthority, fractionalMint, redeemTreasury, fractionalTreasury, pricingLookupAddress, allowFurtherShareCreation, } = params;\n        const data = InitVaultArgs.serialize({ allowFurtherShareCreation });\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: fractionalMint,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: redeemTreasury,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: fractionalTreasury,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: vault,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: vaultAuthority,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: pricingLookupAddress,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false,\n                },\n            ],\n            programId: VaultProgram_2.VaultProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.InitVault = InitVault;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MintFractionalShares = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst Vault_1 = require(\"../accounts/Vault\");\nconst VaultProgram_2 = require(\"../VaultProgram\");\nclass MintFractionalShares extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { vault, vaultAuthority, fractionMint, fractionTreasury, fractionMintAuthority, numberOfShares, } = params;\n        const data = Vault_1.NumberOfShareArgs.serialize({\n            instruction: VaultProgram_1.VaultInstructions.MintFractionalShares,\n            numberOfShares,\n        });\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: fractionTreasury,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: fractionMint,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: vault,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: fractionMintAuthority,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: vaultAuthority,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n                    isSigner: false,\n                    isWritable: false,\n                },\n            ],\n            programId: VaultProgram_2.VaultProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.MintFractionalShares = MintFractionalShares;\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RedeemShares = exports.RedeemSharesArgs = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst VaultProgram_2 = require(\"../VaultProgram\");\nclass RedeemSharesArgs extends mpl_core_1.Borsh.Data {\n    constructor() {\n        super(...arguments);\n        this.instruction = VaultProgram_1.VaultInstructions.RedeemShares;\n    }\n}\nexports.RedeemSharesArgs = RedeemSharesArgs;\n_a = RedeemSharesArgs;\nRedeemSharesArgs.SCHEMA = _a.struct([['instruction', 'u8']]);\nclass RedeemShares extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { vault, burnAuthority, fractionMint, outstandingSharesAccount, proceedsAccount, redeemTreasury, transferAuthority, } = params;\n        const data = RedeemSharesArgs.serialize();\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: outstandingSharesAccount,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: proceedsAccount,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: fractionMint,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: redeemTreasury,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: transferAuthority,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: burnAuthority,\n                    isSigner: true,\n                    isWritable: false,\n                },\n                {\n                    pubkey: vault,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false,\n                },\n            ],\n            programId: VaultProgram_2.VaultProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.RedeemShares = RedeemShares;\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SetVaultAuthority = exports.SetVaultAuthorityArgs = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst VaultProgram_2 = require(\"../VaultProgram\");\nclass SetVaultAuthorityArgs extends mpl_core_1.Borsh.Data {\n    constructor() {\n        super(...arguments);\n        this.instruction = VaultProgram_1.VaultInstructions.SetVaultAuthority;\n    }\n}\nexports.SetVaultAuthorityArgs = SetVaultAuthorityArgs;\n_a = SetVaultAuthorityArgs;\nSetVaultAuthorityArgs.SCHEMA = _a.struct([['instruction', 'u8']]);\nclass SetVaultAuthority extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { vault, currentAuthority, newAuthority } = params;\n        const data = SetVaultAuthorityArgs.serialize();\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: vault,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: currentAuthority,\n                    isSigner: true,\n                    isWritable: false,\n                },\n                {\n                    pubkey: newAuthority,\n                    isSigner: false,\n                    isWritable: false,\n                },\n            ],\n            programId: VaultProgram_2.VaultProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.SetVaultAuthority = SetVaultAuthority;\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateExternalPriceAccount = exports.UpdateExternalPriceAccountArgs = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst ExternalPriceAccount_1 = require(\"../accounts/ExternalPriceAccount\");\nconst VaultProgram_2 = require(\"../VaultProgram\");\nclass UpdateExternalPriceAccountArgs extends mpl_core_1.Borsh.Data {\n    constructor() {\n        super(...arguments);\n        this.instruction = VaultProgram_1.VaultInstructions.UpdateExternalPriceAccount;\n    }\n}\nexports.UpdateExternalPriceAccountArgs = UpdateExternalPriceAccountArgs;\n_a = UpdateExternalPriceAccountArgs;\nUpdateExternalPriceAccountArgs.SCHEMA = new Map([\n    ...ExternalPriceAccount_1.ExternalPriceAccountData.SCHEMA,\n    ..._a.struct([\n        ['instruction', 'u8'],\n        ['externalPriceAccount', ExternalPriceAccount_1.ExternalPriceAccountData],\n    ]),\n]);\nclass UpdateExternalPriceAccount extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { externalPriceAccount, externalPriceAccountData } = params;\n        const data = UpdateExternalPriceAccountArgs.serialize({\n            externalPriceAccount: externalPriceAccountData,\n        });\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: externalPriceAccount,\n                    isSigner: false,\n                    isWritable: true,\n                },\n            ],\n            programId: VaultProgram_2.VaultProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.UpdateExternalPriceAccount = UpdateExternalPriceAccount;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WithdrawSharesFromTreasury = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst Vault_1 = require(\"../accounts/Vault\");\nconst VaultProgram_2 = require(\"../VaultProgram\");\nclass WithdrawSharesFromTreasury extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { vault, vaultAuthority, destination, transferAuthority, fractionTreasury, numberOfShares, } = params;\n        const data = Vault_1.NumberOfShareArgs.serialize({\n            instruction: VaultProgram_1.VaultInstructions.WithdrawSharesFromTreasury,\n            numberOfShares,\n        });\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: destination,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: fractionTreasury,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: vault,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: transferAuthority,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: vaultAuthority,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false,\n                },\n            ],\n            programId: VaultProgram_2.VaultProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.WithdrawSharesFromTreasury = WithdrawSharesFromTreasury;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WithdrawTokenFromSafetyDepositBox = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst Vault_1 = require(\"../accounts/Vault\");\nconst VaultProgram_2 = require(\"../VaultProgram\");\nclass WithdrawTokenFromSafetyDepositBox extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { vault, vaultAuthority, store, destination, fractionMint, transferAuthority, safetyDepositBox, amount, } = params;\n        const data = Vault_1.AmountArgs.serialize({\n            instruction: VaultProgram_1.VaultInstructions.WithdrawTokenFromSafetyDepositBox,\n            amount,\n        });\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: destination,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: safetyDepositBox,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: store,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: vault,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: fractionMint,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: vaultAuthority,\n                    isSigner: true,\n                    isWritable: false,\n                },\n                {\n                    pubkey: transferAuthority,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false,\n                },\n            ],\n            programId: VaultProgram_2.VaultProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.WithdrawTokenFromSafetyDepositBox = WithdrawTokenFromSafetyDepositBox;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./ActivateVault\"), exports);\n__exportStar(require(\"./AddSharesToTreasury\"), exports);\n__exportStar(require(\"./AddTokenToInactiveVault\"), exports);\n__exportStar(require(\"./CombineVault\"), exports);\n__exportStar(require(\"./InitVault\"), exports);\n__exportStar(require(\"./MintFractionalShares\"), exports);\n__exportStar(require(\"./RedeemShares\"), exports);\n__exportStar(require(\"./SetVaultAuthority\"), exports);\n__exportStar(require(\"./UpdateExternalPriceAccount\"), exports);\n__exportStar(require(\"./WithdrawSharesFromTreasury\"), exports);\n__exportStar(require(\"./WithdrawTokenFromSafetyDepositBox\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n"],"names":[],"sourceRoot":"","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]}