{"version":3,"file":"bundled/npm.tss-react.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;ACdA;AACO;AACP;AACA;AACA;;;ACJA;AACA;AACO;AACP;AACA;AACA;AACA;;;ACNA;AACA;AACO;AACP;AACA;;;ACJkC;AACM;AACxC;AACA;AACA;AACO;AACP;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,MAAM,EAAE,SAAS;AACrC,wBAAwB,KAEsB,EAAE,EAG3B;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjD+B;AAC/B;AACA;AACO;AACP,gBAAgB,gBAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACdO;AACP;AACA;AACA;AACA;AACA;;;ACLgD;AACK;AACc;AACL;AACrB;AAClC,QAAQ,iBAAiB;AAChC;AACA;AACA,6BAA6B,yDAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA,+BAA+B,wDAAe;AAC9C,YAAY,kDAAY;AACxB,iCAAiC,UAAU,GAAG,gBAAgB;AAC9D;AACA;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,CAAC;AACM;AACP,YAAY,WAAW;AACvB;AACA;AACA,gBAAgB,UAAU,EAAE,iBAAiB,wBAAwB,OAAO;AAC5E,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;;AClGD;AACA;AACA;AACA,aAAa,KAAK;AAClB,UAAU,eAAe;AACzB;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA,aAAa,KAAK;AAClB,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,IAAI,GAAG,YAAY,GAAG,MAAM;AAChD;AACA;AACA;;;ACrCA;AACA;AACgD;AACzC;AACP;AACA;AACA;AACA;AACA;AACA,IAAI,UAAU;AACd,IAAI,UAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;ACtBgC;AACuC;AACxB;AACxC,2CAA2C,wDAAwD;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iBAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,2IAA2I;AACrM;AACA;AACA;AACA,KAAK;AACL;AACA,QAAQ,qBAAqB;AAC7B,QAAQ,qBAAqB;AAC7B;AACA;AACA,cAAc,iBAAO,OAAO,YAAY;AACxC,aAAa;AACb;;;;;AC/CA;AACA;AACuC;AACkC;AACzB;AACD;AACuB;AACxB;AACN;AACM;AACI;AACgC;AACF;AAChF;AACO,SAAS,2BAAgB;AAChC,YAAY,4CAA4C;AACxD,YAAY,WAAW,mBAAmB,0BAA0B;AACpE,YAAY,cAAc,EAAE,iBAAiB,GAAG,UAAU;AAC1D;AACA;AACA,gBAAgB,qCAAqC,UAAU,IAAI;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA,8BAA8B,iBAAO;AACrC;AACA;AACA,oCAAoC;AACpC;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA,0EAA0E,UAAU,GAAG,OAAO,EAAE,yBAAyB,KAAK,OAAO,GAAG,YAAY;AACpJ;AACA,yBAAyB;AACzB,sGAAsG;AACtG,oCAAoC,iBAAiB,CAAC,UAAU;AAChE;AACA;AACA,iDAAiD,wBAAwB,KAAK,QAAQ,EAAE,SAAS;AACjG;AACA;AACA;AACA,+BAA+B,eAAe,EAAE,SAAS;AACzD,sCAAsC,0BAA0B;AAChE,qCAAqC;AACrC;AACA,qBAAqB;AACrB,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB,0BAA0B,qBAAqB;AAChE;AACA;AACA,8BAA8B,iBAAO,OAAO,YAAY,uCAAuC,qBAAqB;AACpH;AACA;AACA,6CAA6C,+BAA+B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,qBAAqB,uBAAa;AAC3B;AACP,YAAY,kBAAkB;AAC9B,yDAAyD,cAAc;AACvE;AACO,QAAQ,iBAAiB;AAChC;AACA,8CAA8C,oBAAU;AACxD;AACA;AACA;AACA,gBAAgB,2BAA2B;AAC3C;AACA;AACA,oCAAoC,0CAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,CAAC;;;AC1ID,cAAc,SAAI,IAAI,SAAI;AAC1B;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACA;AACyD;AACT;AACA;AACzC,SAAS,2BAAgB;AAChC,YAAY,kBAAkB;AAC9B,YAAY,aAAa,qBAAqB,iBAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA,SAAS;AACT,mEAAmE,aAAa,MAAM;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+BAA+B;AACnD,oBAAoB,cAAc,qBAAqB,OAAO;AAC9D;AACA,6EAA6E,cAAc,uBAAuB;AAClH,oEAAoE;AACpE;AACA,qCAAqC,sCAAsC,IAAI,SAAS;AACxF,SAAS;AACT;AACA,iCAAiC,iBAAiB;AAClD,iDAAiD,0BAA0B;AAC3E;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,2EAA2E,MAAM,gDAAgD;AACnN,SAAS;AACT,KAAK;AACL;AACA;;;ACvHO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;ACRD;AACA,IAAI,QAAM,IAAI,SAAI,IAAI,SAAI;AAC1B;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACgC;AACc;AACC;AACP;AACiC;AACzB;AACF;AACwB;AACxB;AACR;AAC/B;AACP,YAAY,yDAAyD;AACrE,YAAY,WAAW,EAAE,cAAc,GAAG,0BAA0B;AACpE,YAAY,cAAc,EAAE,iBAAiB,GAAG,UAAU;AAC1D,gCAAgC,kBAAkB,QAAQ,kBAAkB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,aAAa;AACb;AACA,IAAI,WAAO;AACX;AACA;AACA,YAAY,6EAA6E;AACzF;AACA,+DAA+D;AAC/D,0FAA0F,aAAa;AACvG;AACA,qDAAqD;AACrD,sFAAsF,aAAa,gCAAgC;AACnI;AACA;AACA;AACA,sCAAsC,WAAO,GAAG;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,KAAK,mBAAmB,8BAA8B,QAAM;AAC1I;AACA,wBAAwB,UAAU;AAClC;AACA,8BAA8B,iBAAO;AACrC;AACA;AACA,mHAAmH;AACnH;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,4CAA4C,MAAM;AAClD;AACA,4CAA4C,KAAK;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,SAAS,gBAAgB;AACtH;AACA,8EAA8E,KAAK;AACnF,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,UAAU,GAAG,cAAc,EAAE,yBAAyB,KAAK,OAAO,GAAG,SAAS;AACjI;AACA,iCAAiC;AACjC,yBAAyB;AACzB,oCAAoC,iBAAiB,CAAC,UAAU;AAChE;AACA;AACA,iDAAiD,wBAAwB,KAAK,QAAQ,EAAE,SAAS;AACjG;AACA;AACA;AACA,+BAA+B,eAAe,EAAE,SAAS;AACzD,sCAAsC,0BAA0B;AAChE,qCAAqC;AACrC;AACA,qBAAqB;AACrB,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA,0BAA0B,iBAAO,OAAO,YAAY,2CAA2C,qBAAqB;AACpH;AACA,iFAAiF;AACjF;AACA;AACA;AACA,0BAA0B;AAC1B,uCAAuC,oOAAoO;AAC3Q;AACA;AACA;AACA;;;;;AC1JA;AAC0B;AACqB;AACxC;AACP,YAAY,SAAS;AACrB,sDAAsD,kCAAkC;AACxF;;;ACNA;AACkE;AACpB;AACE;AACpB;AACM;AACb;AACrB;AAC2C;AAC3C;AAC8C;AAC9C;AACO;AACP,yCAAyC;AACzC;AACO,QAAQ,MAAM,EAAE,SAAS;AAChC,2BAA2B;AAC3B,CAAC;AACM,+BAA+B","sources":["webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/tools/polyfills/Object.fromEntries.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/tools/objectKeys.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/tools/assert.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/tools/typeGuard.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/tools/classnames.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/tools/useGuaranteedMemo.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/types.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/cssAndCx.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/tools/getDependencyArrayRef.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/mergeClasses.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/mui/themeStyleOverridesPlugin.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/makeStyles.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/withStyles.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/tools/isSSR.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/tss.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/GlobalStyles.js","webpack://mask-network/./node_modules/.pnpm/tss-react@4.9.0_@emotion+react@11.11.1_react@0.0.0-experimental-0a360642d-20230711/node_modules/tss-react/esm/index.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const objectFromEntries = !Object\n    .fromEntries\n    ? (entries) => {\n        if (!entries || !entries[Symbol.iterator]) {\n            throw new Error(\"Object.fromEntries() requires a single iterable argument\");\n        }\n        const o = {};\n        Object.keys(entries).forEach(key => {\n            const [k, v] = entries[key];\n            o[k] = v;\n        });\n        return o;\n    }\n    : Object.fromEntries;\n","/** Object.keys() with types */\nexport function objectKeys(o) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return Object.keys(o);\n}\n","/** https://docs.tsafe.dev/assert */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function assert(condition, msg) {\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/** https://docs.tsafe.dev/typeguard */\nexport function typeGuard(_value, isMatched) {\n    return isMatched;\n}\n","import { assert } from \"./assert\";\nimport { typeGuard } from \"./typeGuard\";\n/** Copy pasted from\n * https://github.com/emotion-js/emotion/blob/23f43ab9f24d44219b0b007a00f4ac681fe8712e/packages/react/src/class-names.js#L17-L63\n **/\nexport const classnames = (args) => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null)\n            continue;\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = classnames(arg);\n                }\n                else {\n                    assert(!typeGuard(arg, false));\n                    if (process.env.NODE_ENV !== \"production\" &&\n                        arg.styles !== undefined &&\n                        arg.name !== undefined) {\n                        console.error(\"You have passed styles created with `css` from `@emotion/react` package to the `cx`.\\n\" +\n                            \"`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.\");\n                    }\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n","import { useRef } from \"react\";\n/** Like react's useMemo but with guarantee that the fn\n * won't be invoked again if deps hasn't change */\nexport function useGuaranteedMemo(fn, deps) {\n    const ref = useRef();\n    if (!ref.current ||\n        deps.length !== ref.current.prevDeps.length ||\n        ref.current.prevDeps.map((v, i) => v === deps[i]).indexOf(false) >= 0) {\n        ref.current = {\n            \"v\": fn(),\n            \"prevDeps\": [...deps]\n        };\n    }\n    return ref.current.v;\n}\n","export function matchCSSObject(arg) {\n    return (arg instanceof Object &&\n        !(\"styles\" in arg) &&\n        !(\"length\" in arg) &&\n        !(\"__emotion_styles\" in arg));\n}\n","import { classnames } from \"./tools/classnames\";\nimport { serializeStyles } from \"@emotion/serialize\";\nimport { insertStyles, getRegisteredStyles } from \"@emotion/utils\";\nimport { useGuaranteedMemo } from \"./tools/useGuaranteedMemo\";\nimport { matchCSSObject } from \"./types\";\nexport const { createCssAndCx } = (() => {\n    function merge(registered, css, className) {\n        const registeredStyles = [];\n        const rawClassName = getRegisteredStyles(registered, registeredStyles, className);\n        if (registeredStyles.length < 2) {\n            return className;\n        }\n        return rawClassName + css(registeredStyles);\n    }\n    function createCssAndCx(params) {\n        const { cache } = params;\n        const css = (...args) => {\n            const serialized = serializeStyles(args, cache.registered);\n            insertStyles(cache, serialized, false);\n            const className = `${cache.key}-${serialized.name}`;\n            scope: {\n                const arg = args[0];\n                if (!matchCSSObject(arg)) {\n                    break scope;\n                }\n                increaseSpecificityToTakePrecedenceOverMediaQueries.saveClassNameCSSObjectMapping(cache, className, arg);\n            }\n            return className;\n        };\n        const cx = (...args) => {\n            const className = classnames(args);\n            const feat27FixedClassnames = increaseSpecificityToTakePrecedenceOverMediaQueries.fixClassName(cache, className, css);\n            return merge(cache.registered, css, feat27FixedClassnames);\n            //return merge(cache.registered, css, className);\n        };\n        return { css, cx };\n    }\n    return { createCssAndCx };\n})();\nexport function createUseCssAndCx(params) {\n    const { useCache } = params;\n    function useCssAndCx() {\n        const cache = useCache();\n        const { css, cx } = useGuaranteedMemo(() => createCssAndCx({ cache }), [cache]);\n        return { css, cx };\n    }\n    return { useCssAndCx };\n}\n// https://github.com/garronej/tss-react/issues/27\nconst increaseSpecificityToTakePrecedenceOverMediaQueries = (() => {\n    const cssObjectMapByCache = new WeakMap();\n    return {\n        \"saveClassNameCSSObjectMapping\": (cache, className, cssObject) => {\n            let cssObjectMap = cssObjectMapByCache.get(cache);\n            if (cssObjectMap === undefined) {\n                cssObjectMap = new Map();\n                cssObjectMapByCache.set(cache, cssObjectMap);\n            }\n            cssObjectMap.set(className, cssObject);\n        },\n        \"fixClassName\": (() => {\n            function fix(classNameCSSObjects) {\n                let isThereAnyMediaQueriesInPreviousClasses = false;\n                return classNameCSSObjects.map(([className, cssObject]) => {\n                    if (cssObject === undefined) {\n                        return className;\n                    }\n                    let out;\n                    if (!isThereAnyMediaQueriesInPreviousClasses) {\n                        out = className;\n                        for (const key in cssObject) {\n                            if (key.startsWith(\"@media\")) {\n                                isThereAnyMediaQueriesInPreviousClasses = true;\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        out = {\n                            \"&&\": cssObject\n                        };\n                    }\n                    return out;\n                });\n            }\n            return (cache, className, css) => {\n                const cssObjectMap = cssObjectMapByCache.get(cache);\n                return classnames(fix(className\n                    .split(\" \")\n                    .map(className => [\n                    className,\n                    cssObjectMap === null || cssObjectMap === void 0 ? void 0 : cssObjectMap.get(className)\n                ])).map(classNameOrCSSObject => typeof classNameOrCSSObject === \"string\"\n                    ? classNameOrCSSObject\n                    : css(classNameOrCSSObject)));\n            };\n        })()\n    };\n})();\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * useEffect(\n *    ()=> { ... },\n *    [ { \"foo\": \"bar\" } ]\n * )\n * => The callback will be invoked every render.\n * because { \"foo\": \"bar\" } is a new instance every render.\n *\n * useEffect(\n *    ()=> { ... },\n *    [ getDependencyArrayRef({ \"foo\": \"bar\" }) ]\n * );\n * => The callback will only be invoked once.\n *\n * The optimization will be enabled only if obj is\n * of the form Record<string, string | number | undefined | null>\n * otherwise the object is returned (the function is the identity function).\n */\nexport function getDependencyArrayRef(obj) {\n    if (!(obj instanceof Object) || typeof obj === \"function\") {\n        return obj;\n    }\n    const arr = [];\n    for (const key in obj) {\n        const value = obj[key];\n        const typeofValue = typeof value;\n        if (!(typeofValue === \"string\" ||\n            (typeofValue === \"number\" && !isNaN(value)) ||\n            typeofValue === \"boolean\" ||\n            value === undefined ||\n            value === null)) {\n            return obj;\n        }\n        arr.push(`${key}:${typeofValue}_${value}`);\n    }\n    return \"xSqLiJdLMd9s\" + arr.join(\"|\");\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { objectKeys } from \"./tools/objectKeys\";\nexport function mergeClasses(classesFromUseStyles, classesOverrides, cx) {\n    //NOTE: We use this test to be resilient in case classesOverrides is not of the expected type.\n    if (!(classesOverrides instanceof Object)) {\n        return classesFromUseStyles;\n    }\n    const out = {};\n    objectKeys(classesFromUseStyles).forEach(ruleName => (out[ruleName] = cx(classesFromUseStyles[ruleName], classesOverrides[ruleName])));\n    objectKeys(classesOverrides).forEach(ruleName => {\n        if (ruleName in classesFromUseStyles) {\n            return;\n        }\n        const className = classesOverrides[ruleName];\n        //...Same here, that why we don't do className === undefined\n        if (typeof className !== \"string\") {\n            return;\n        }\n        out[ruleName] = className;\n    });\n    return out;\n}\n","import { useMemo } from \"react\";\nimport { getDependencyArrayRef } from \"../tools/getDependencyArrayRef\";\nimport { mergeClasses } from \"../mergeClasses\";\nexport const useMuiThemeStyleOverridesPlugin = ({ classes, theme, muiStyleOverridesParams, css, cx, name }) => {\n    var _a, _b;\n    require_named: {\n        // NOTE: Hack for backwards compatibility with the makeStyles API.\n        if (name === \"makeStyle no name\") {\n            name = undefined;\n            break require_named;\n        }\n        if (muiStyleOverridesParams !== undefined && name === undefined) {\n            throw new Error(\"To use muiStyleOverridesParams, you must specify a name using .withName('MyComponent')\");\n        }\n    }\n    let styleOverrides = undefined;\n    try {\n        styleOverrides =\n            name === undefined\n                ? undefined\n                : ((_b = (_a = theme.components) === null || _a === void 0 ? void 0 : _a[name /*example*/]) === null || _b === void 0 ? void 0 : _b.styleOverrides) || undefined;\n        // eslint-disable-next-line no-empty\n    }\n    catch (_c) { }\n    const classesFromThemeStyleOverrides = useMemo(() => {\n        if (styleOverrides === undefined) {\n            return undefined;\n        }\n        const themeClasses = {};\n        for (const ruleName in styleOverrides) {\n            const cssObjectOrGetCssObject = styleOverrides[ruleName];\n            if (!(cssObjectOrGetCssObject instanceof Object)) {\n                continue;\n            }\n            themeClasses[ruleName] = css(typeof cssObjectOrGetCssObject === \"function\"\n                ? cssObjectOrGetCssObject(Object.assign({ theme, \"ownerState\": muiStyleOverridesParams === null || muiStyleOverridesParams === void 0 ? void 0 : muiStyleOverridesParams.ownerState }, muiStyleOverridesParams === null || muiStyleOverridesParams === void 0 ? void 0 : muiStyleOverridesParams.props))\n                : cssObjectOrGetCssObject);\n        }\n        return themeClasses;\n    }, [\n        styleOverrides,\n        getDependencyArrayRef(muiStyleOverridesParams === null || muiStyleOverridesParams === void 0 ? void 0 : muiStyleOverridesParams.props),\n        getDependencyArrayRef(muiStyleOverridesParams === null || muiStyleOverridesParams === void 0 ? void 0 : muiStyleOverridesParams.ownerState),\n        css\n    ]);\n    classes = useMemo(() => mergeClasses(classes, classesFromThemeStyleOverrides, cx), [classes, classesFromThemeStyleOverrides, cx]);\n    return { classes };\n};\n","\"use client\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo } from \"react\";\nimport { objectFromEntries } from \"./tools/polyfills/Object.fromEntries\";\nimport { objectKeys } from \"./tools/objectKeys\";\nimport { createUseCssAndCx } from \"./cssAndCx\";\nimport { getDependencyArrayRef } from \"./tools/getDependencyArrayRef\";\nimport { typeGuard } from \"./tools/typeGuard\";\nimport { assert } from \"./tools/assert\";\nimport { mergeClasses } from \"./mergeClasses\";\nimport { createContext, useContext } from \"react\";\nimport { useMuiThemeStyleOverridesPlugin } from \"./mui/themeStyleOverridesPlugin\";\nimport { __unsafe_useEmotionCache as useContextualCache } from \"@emotion/react\";\nlet counter = 0;\nexport function createMakeStyles(params) {\n    const { useTheme, cache: cacheProvidedAtInception } = params;\n    const { useCache } = createUseCache({ cacheProvidedAtInception });\n    const { useCssAndCx } = createUseCssAndCx({ useCache });\n    /** returns useStyle. */\n    function makeStyles(params) {\n        const { name: nameOrWrappedName, uniqId = `${counter++}` } = params !== null && params !== void 0 ? params : {};\n        const name = typeof nameOrWrappedName !== \"object\"\n            ? nameOrWrappedName\n            : Object.keys(nameOrWrappedName)[0];\n        return function (cssObjectByRuleNameOrGetCssObjectByRuleName) {\n            const getCssObjectByRuleName = typeof cssObjectByRuleNameOrGetCssObjectByRuleName ===\n                \"function\"\n                ? cssObjectByRuleNameOrGetCssObjectByRuleName\n                : () => cssObjectByRuleNameOrGetCssObjectByRuleName;\n            return function useStyles(params, muiStyleOverridesParams) {\n                const theme = useTheme();\n                let { css, cx } = useCssAndCx();\n                const cache = useCache();\n                let classes = useMemo(() => {\n                    const refClassesCache = {};\n                    const refClasses = typeof Proxy !== \"undefined\" &&\n                        new Proxy({}, {\n                            \"get\": (_target, propertyKey) => {\n                                if (typeof propertyKey === \"symbol\") {\n                                    assert(false);\n                                }\n                                return (refClassesCache[propertyKey] = `${cache.key}-${uniqId}${name !== undefined ? `-${name}` : \"\"}-${propertyKey}-ref`);\n                            }\n                        });\n                    const cssObjectByRuleName = getCssObjectByRuleName(theme, params, refClasses || {});\n                    const classes = objectFromEntries(objectKeys(cssObjectByRuleName).map(ruleName => {\n                        const cssObject = cssObjectByRuleName[ruleName];\n                        if (!cssObject.label) {\n                            cssObject.label = `${name !== undefined ? `${name}-` : \"\"}${ruleName}`;\n                        }\n                        return [\n                            ruleName,\n                            `${css(cssObject)}${typeGuard(ruleName, ruleName in refClassesCache)\n                                ? ` ${refClassesCache[ruleName]}`\n                                : \"\"}`\n                        ];\n                    }));\n                    objectKeys(refClassesCache).forEach(ruleName => {\n                        if (ruleName in classes) {\n                            return;\n                        }\n                        classes[ruleName] =\n                            refClassesCache[ruleName];\n                    });\n                    return classes;\n                }, [cache, css, cx, theme, getDependencyArrayRef(params)]);\n                {\n                    const propsClasses = muiStyleOverridesParams === null || muiStyleOverridesParams === void 0 ? void 0 : muiStyleOverridesParams.props.classes;\n                    classes = useMemo(() => mergeClasses(classes, propsClasses, cx), [classes, getDependencyArrayRef(propsClasses), cx]);\n                }\n                {\n                    const pluginResultWrap = useMuiThemeStyleOverridesPlugin({\n                        classes,\n                        css,\n                        cx,\n                        \"name\": name !== null && name !== void 0 ? name : \"makeStyle no name\",\n                        \"idOfUseStyles\": uniqId,\n                        muiStyleOverridesParams,\n                        // NOTE: If it's not a Mui Theme the plugin is resilient, it will not crash\n                        \"theme\": theme\n                    });\n                    if (pluginResultWrap.classes !== undefined) {\n                        classes = pluginResultWrap.classes;\n                    }\n                    if (pluginResultWrap.css !== undefined) {\n                        css = pluginResultWrap.css;\n                    }\n                    if (pluginResultWrap.cx !== undefined) {\n                        cx = pluginResultWrap.cx;\n                    }\n                }\n                return {\n                    classes,\n                    theme,\n                    css,\n                    cx\n                };\n            };\n        };\n    }\n    function useStyles() {\n        const theme = useTheme();\n        const { css, cx } = useCssAndCx();\n        return { theme, css, cx };\n    }\n    return { makeStyles, useStyles };\n}\nconst reactContext = createContext(undefined);\nexport function TssCacheProvider(props) {\n    const { children, value } = props;\n    return (React.createElement(reactContext.Provider, { value: value }, children));\n}\nexport const { createUseCache } = (() => {\n    function useCacheProvidedByProvider() {\n        const cacheExplicitlyProvidedForTss = useContext(reactContext);\n        return cacheExplicitlyProvidedForTss;\n    }\n    function createUseCache(params) {\n        const { cacheProvidedAtInception } = params;\n        function useCache() {\n            var _a;\n            const contextualCache = useContextualCache();\n            const cacheExplicitlyProvidedForTss = useCacheProvidedByProvider();\n            const cacheToBeUsed = (_a = cacheProvidedAtInception !== null && cacheProvidedAtInception !== void 0 ? cacheProvidedAtInception : cacheExplicitlyProvidedForTss) !== null && _a !== void 0 ? _a : contextualCache;\n            if (cacheToBeUsed === null) {\n                throw new Error([\n                    \"In order to get SSR working with tss-react you need to explicitly provide an Emotion cache.\",\n                    \"MUI users be aware: This is not an error strictly related to tss-react, with or without tss-react,\",\n                    \"MUI needs an Emotion cache to be provided for SSR to work.\",\n                    \"Here is the MUI documentation related to SSR setup: https://mui.com/material-ui/guides/server-rendering/\",\n                    \"TSS provides helper that makes the process of setting up SSR easier: https://docs.tss-react.dev/ssr\"\n                ].join(\"\\n\"));\n            }\n            return cacheToBeUsed;\n        }\n        return { useCache };\n    }\n    return { createUseCache };\n})();\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { forwardRef, createElement } from \"react\";\nimport { createMakeStyles } from \"./makeStyles\";\nimport { capitalize } from \"./tools/capitalize\";\nexport function createWithStyles(params) {\n    const { useTheme, cache } = params;\n    const { makeStyles } = createMakeStyles({ useTheme, cache });\n    function withStyles(Component, cssObjectByRuleNameOrGetCssObjectByRuleName, params) {\n        const Component_ = typeof Component === \"string\"\n            ? (() => {\n                const tag = Component;\n                const Out = function (_a) {\n                    var { children } = _a, props = __rest(_a, [\"children\"]);\n                    return createElement(tag, props, children);\n                };\n                Object.defineProperty(Out, \"name\", {\n                    \"value\": capitalize(tag)\n                });\n                return Out;\n            })()\n            : Component;\n        /**\n         * Get component name for wrapping\n         * @see https://reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging\n         */\n        const name = (() => {\n            {\n                const { name: nameOrWrappedName } = params !== null && params !== void 0 ? params : {};\n                if (nameOrWrappedName !== undefined) {\n                    return typeof nameOrWrappedName !== \"object\"\n                        ? nameOrWrappedName\n                        : Object.keys(nameOrWrappedName)[0];\n                }\n            }\n            {\n                const displayName = Component_.displayName;\n                if (typeof displayName === \"string\" && displayName !== \"\") {\n                    return displayName;\n                }\n            }\n            {\n                const { name } = Component_;\n                if (name) {\n                    return name;\n                }\n            }\n        })();\n        const useStyles = makeStyles(Object.assign(Object.assign({}, params), { name }))(typeof cssObjectByRuleNameOrGetCssObjectByRuleName === \"function\"\n            ? (theme, props, classes) => incorporateMediaQueries(cssObjectByRuleNameOrGetCssObjectByRuleName(theme, props, classes))\n            : incorporateMediaQueries(cssObjectByRuleNameOrGetCssObjectByRuleName));\n        function getHasNonRootClasses(classes) {\n            for (const name in classes) {\n                if (name === \"root\") {\n                    continue;\n                }\n                return true;\n            }\n            return false;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const Out = forwardRef(function (props, ref) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { className, classes: _classes } = props, rest = __rest(props, [\"className\", \"classes\"]);\n            const { classes, cx } = useStyles(props, { props });\n            const rootClassName = cx(classes.root, className);\n            fixedClassesByClasses.set(classes, Object.assign(Object.assign({}, classes), { \"root\": rootClassName }));\n            return (React.createElement(Component_, Object.assign({ ref: ref, className: getHasNonRootClasses(classes)\n                    ? className\n                    : rootClassName }, (typeof Component === \"string\" ? {} : { classes }), rest)));\n        });\n        if (name !== undefined) {\n            Out.displayName = `${capitalize(name)}WithStyles`;\n            Object.defineProperty(Out, \"name\", { \"value\": Out.displayName });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return Out;\n    }\n    withStyles.getClasses = getClasses;\n    return { withStyles };\n}\nconst fixedClassesByClasses = new WeakMap();\nconst errorMessageGetClasses = \"getClasses should only be used in conjunction with withStyles\";\nfunction getClasses(props) {\n    const classesIn = props.classes;\n    if (classesIn === undefined) {\n        throw new Error(errorMessageGetClasses);\n    }\n    const classes = fixedClassesByClasses.get(classesIn);\n    if (classes === undefined) {\n        throw new Error(errorMessageGetClasses);\n    }\n    return classes;\n}\nfunction incorporateMediaQueries(cssObjectByRuleNameWithMediaQueries) {\n    const cssObjectByRuleName = {};\n    const cssObjectByRuleNameWithMediaQueriesByMediaQuery = {};\n    Object.keys(cssObjectByRuleNameWithMediaQueries).forEach(ruleNameOrMediaQuery => ((ruleNameOrMediaQuery.startsWith(\"@media\")\n        ? cssObjectByRuleNameWithMediaQueriesByMediaQuery\n        : cssObjectByRuleName)[ruleNameOrMediaQuery] =\n        cssObjectByRuleNameWithMediaQueries[ruleNameOrMediaQuery]));\n    Object.keys(cssObjectByRuleNameWithMediaQueriesByMediaQuery).forEach(mediaQuery => {\n        const cssObjectByRuleNameBis = cssObjectByRuleNameWithMediaQueriesByMediaQuery[mediaQuery];\n        Object.keys(cssObjectByRuleNameBis).forEach(ruleName => {\n            var _a;\n            return (cssObjectByRuleName[ruleName] = Object.assign(Object.assign({}, ((_a = cssObjectByRuleName[ruleName]) !== null && _a !== void 0 ? _a : {})), { [mediaQuery]: cssObjectByRuleNameBis[ruleName] }));\n        });\n    });\n    return cssObjectByRuleName;\n}\n","export const isSSR = (() => {\n    const isBrowser = typeof document === \"object\" &&\n        typeof (document === null || document === void 0 ? void 0 : document.getElementById) === \"function\";\n    // Check for common testing framework global variables\n    const isJest = typeof jest !== \"undefined\";\n    const isMocha = typeof mocha !== \"undefined\";\n    const isVitest = typeof __vitest_worker__ !== \"undefined\";\n    return !isBrowser && !isJest && !isMocha && !isVitest;\n})();\n","/* eslint-disable @typescript-eslint/ban-types */\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { useMemo } from \"react\";\nimport { createUseCache } from \"./makeStyles\";\nimport { createUseCssAndCx } from \"./cssAndCx\";\nimport { assert } from \"./tools/assert\";\nimport { objectFromEntries } from \"./tools/polyfills/Object.fromEntries\";\nimport { objectKeys } from \"./tools/objectKeys\";\nimport { typeGuard } from \"./tools/typeGuard\";\nimport { getDependencyArrayRef } from \"./tools/getDependencyArrayRef\";\nimport { mergeClasses } from \"./mergeClasses\";\nimport { isSSR } from \"./tools/isSSR\";\nexport function createTss(params) {\n    const { useContext, usePlugin, cache: cacheProvidedAtInception } = params;\n    const { useCache } = createUseCache({ cacheProvidedAtInception });\n    const { useCssAndCx } = createUseCssAndCx({ useCache });\n    const usePluginDefault = ({ classes, cx, css }) => ({ classes, cx, css });\n    const tss = createTss_internal({\n        useContext,\n        useCache,\n        useCssAndCx,\n        \"usePlugin\": usePlugin !== null && usePlugin !== void 0 ? usePlugin : usePluginDefault,\n        \"name\": undefined,\n        \"doesUseNestedSelectors\": false\n    });\n    return { tss };\n}\nlet counter = 0;\nconst nestedSelectorUsageTrackRecord = [];\nfunction createTss_internal(params) {\n    const { useContext, useCache, useCssAndCx, usePlugin, name, doesUseNestedSelectors } = params;\n    return {\n        \"withParams\": () => createTss_internal(Object.assign({}, params)),\n        \"withName\": nameOrWrappedName => createTss_internal(Object.assign(Object.assign({}, params), { \"name\": typeof nameOrWrappedName !== \"object\"\n                ? nameOrWrappedName\n                : Object.keys(nameOrWrappedName)[0] })),\n        \"withNestedSelectors\": () => createTss_internal(Object.assign(Object.assign({}, params), { \"doesUseNestedSelectors\": true })),\n        \"create\": (cssObjectByRuleNameOrGetCssObjectByRuleName) => {\n            // NOTE: Not isomorphic. Not guaranteed to be the same on client and server.\n            // Do not attempt to 'simplify' the code without taking this fact into account.\n            const idOfUseStyles = `x${counter++}`;\n            const getCssObjectByRuleName = typeof cssObjectByRuleNameOrGetCssObjectByRuleName ===\n                \"function\"\n                ? cssObjectByRuleNameOrGetCssObjectByRuleName\n                : () => cssObjectByRuleNameOrGetCssObjectByRuleName;\n            return function useStyles(params) {\n                var _a, _b, _c;\n                const _d = (params !== null && params !== void 0 ? params : {}), { classesOverrides } = _d, paramsAndPluginParams = __rest(_d, [\"classesOverrides\"]);\n                const context = useContext();\n                const { css, cx } = useCssAndCx();\n                const cache = useCache();\n                let classes = useMemo(() => {\n                    const refClassesCache = {};\n                    // @ts-expect-error: Type safety non achievable.\n                    const cssObjectByRuleName = getCssObjectByRuleName(Object.assign(Object.assign(Object.assign({}, params), context), (!doesUseNestedSelectors\n                        ? {}\n                        : {\n                            \"classes\": typeof Proxy === \"undefined\"\n                                ? {}\n                                : new Proxy({}, {\n                                    \"get\": (_target, ruleName) => {\n                                        /* prettier-ignore */\n                                        if (typeof ruleName === \"symbol\") {\n                                            assert(false);\n                                        }\n                                        if (isSSR) {\n                                            {\n                                                /* prettier-ignore */\n                                                let wrap = nestedSelectorUsageTrackRecord.find(wrap => wrap.name === name &&\n                                                    wrap.idOfUseStyles === idOfUseStyles);\n                                                /* prettier-ignore */\n                                                if (wrap === undefined) {\n                                                    /* prettier-ignore */\n                                                    wrap = {\n                                                        name,\n                                                        idOfUseStyles,\n                                                        \"nestedSelectorRuleNames\": new Set()\n                                                    };\n                                                    /* prettier-ignore */\n                                                    nestedSelectorUsageTrackRecord.push(wrap);\n                                                }\n                                                /* prettier-ignore */\n                                                wrap.nestedSelectorRuleNames.add(ruleName);\n                                            }\n                                            if (\n                                            /* prettier-ignore */\n                                            nestedSelectorUsageTrackRecord.find(wrap => wrap.name === name &&\n                                                wrap.idOfUseStyles !== idOfUseStyles &&\n                                                wrap.nestedSelectorRuleNames.has(ruleName)) !== undefined) {\n                                                throw new Error([\n                                                    `tss-react: Duplicate nested selector \"${ruleName}\" detected in ${name ===\n                                                        undefined\n                                                        ? `useStyles named \"${name}\"`\n                                                        : \"anonymous useStyles function\"}.`,\n                                                    `In SSR setups, this may lead to CSS class name collisions, causing nested selectors to target elements outside of the intended scope.`,\n                                                    `Solution: Ensure each useStyles using nested selectors has a unique name. Use tss.withName(\"UniqueName\").withNestedSelectors<...>()... to set a name.`\n                                                ].join(\"\\n\"));\n                                            }\n                                        }\n                                        /* prettier-ignore */\n                                        return (refClassesCache[ruleName]\n                                            =\n                                                `${cache.key}-${idOfUseStyles}${name !== undefined ? `-${name}` : \"\"}-${ruleName}-ref`);\n                                    }\n                                })\n                        })));\n                    const classes = objectFromEntries(objectKeys(cssObjectByRuleName).map(ruleName => {\n                        const cssObject = cssObjectByRuleName[ruleName];\n                        if (!cssObject.label) {\n                            cssObject.label = `${name !== undefined ? `${name}-` : \"\"}${ruleName}`;\n                        }\n                        return [\n                            ruleName,\n                            `${css(cssObject)}${typeGuard(ruleName, ruleName in refClassesCache)\n                                ? ` ${refClassesCache[ruleName]}`\n                                : \"\"}`\n                        ];\n                    }));\n                    objectKeys(refClassesCache).forEach(ruleName => {\n                        if (ruleName in classes) {\n                            return;\n                        }\n                        classes[ruleName] =\n                            refClassesCache[ruleName];\n                    });\n                    return classes;\n                }, [\n                    cache,\n                    css,\n                    cx,\n                    getDependencyArrayRef(params),\n                    ...Object.values(context)\n                ]);\n                classes = useMemo(() => mergeClasses(classes, classesOverrides, cx), [classes, getDependencyArrayRef(classesOverrides), cx]);\n                // @ts-expect-error: Type safety non achievable.\n                const pluginResultWrap = usePlugin(Object.assign(Object.assign({ classes,\n                    css,\n                    cx,\n                    idOfUseStyles,\n                    name }, context), paramsAndPluginParams));\n                return Object.assign({ \"classes\": (_a = pluginResultWrap.classes) !== null && _a !== void 0 ? _a : classes, \"css\": (_b = pluginResultWrap.css) !== null && _b !== void 0 ? _b : css, \"cx\": (_c = pluginResultWrap.cx) !== null && _c !== void 0 ? _c : cx }, context);\n            };\n        }\n    };\n}\n","\"use client\";\nimport React from \"react\";\nimport * as reactEmotion from \"@emotion/react\";\nexport function GlobalStyles(props) {\n    const { styles } = props;\n    return React.createElement(reactEmotion.Global, { styles: reactEmotion.css(styles) });\n}\n","\"use client\";\nimport { createMakeStyles, TssCacheProvider } from \"./makeStyles\";\nexport { createMakeStyles, TssCacheProvider };\nimport { createWithStyles } from \"./withStyles\";\nexport { createWithStyles };\nimport { createTss } from \"./tss\";\nexport { createTss };\n/** @see <https://docs.tss-react.dev/api/keyframes> */\nexport { keyframes } from \"@emotion/react\";\n/** @see <https://docs.tss-react.dev/api/globalstyles> */\nexport { GlobalStyles } from \"./GlobalStyles\";\n/** @see <https://docs.tss-react.dev/api/makestyles> */\nexport function createMakeAndWithStyles(params) {\n    return Object.assign(Object.assign({}, createMakeStyles(params)), createWithStyles(params));\n}\nexport const { tss } = createTss({\n    \"useContext\": () => ({})\n});\nexport const useStyles = tss.create({});\n"],"names":[],"sourceRoot":"","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}